[{"assignedTo":"","body":"","comments":2,"createdAt":1437692301000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2932786?v=3","loggedByName":"weswigham","milestone":"","number":4009,"state":"closed","title":"Add `jake lint` to README","updatedAt":1437694063000},{"assignedTo":"","body":"Introduce two new syntax for type declaration based on JSDoc\r\n\r\n```typescript\r\nvar myString: !string = 'hello world'; //non-nullable\r\nvar myString1: ?string = 'hello world'; // nullable \r\nvar myString2: string = 'hello world'; // nullable \r\nvar myStr","comments":261,"createdAt":1406008918000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":185,"state":"open","title":"Suggestion: non-nullable type","updatedAt":1437693584000},{"assignedTo":"yuit","body":"Using this contrived example again,\r\n\r\nExport file with super class:\r\n```typescript\r\n/// foo.ts\r\nexport class Foo {\r\n  a: string;\r\n}\r\n```\r\nImport file with sub class:\r\n```typescript\r\n/// bar.ts\r\nimport {Foo} from './foo';\r\n\r\nexport class Bar extends ","comments":11,"createdAt":1435351317000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4161445?v=3","loggedByName":"ttowncompiled","milestone":"TypeScript 1.6","number":3655,"state":"open","title":"feat(system): Output bundle format for System.register modules","updatedAt":1437693424000},{"assignedTo":"","body":"Enforces spaces and double quotes again, and enforces no space before the colon for type definitions.\r\n\r\nThis should fix part of #3994. I couldn't find an existing rule to cover the no multiple declaration expressions style, so that is missing from t","comments":7,"createdAt":1437638721000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2932786?v=3","loggedByName":"weswigham","milestone":"","number":3995,"state":"open","title":"Update tslint.json for latest versions of tslint","updatedAt":1437692655000},{"assignedTo":"zhengbli","body":"```\r\ninterface HTMLSelectElement {\r\n    options: HTMLSelectElement; // should be HTMLCollection\r\n```","comments":5,"createdAt":1419518783000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3171573?v=3","loggedByName":"cevek","milestone":"TypeScript 1.7","number":1558,"state":"open","title":"HTMLSelectElement.options","updatedAt":1437692648000},{"assignedTo":"","body":"According to the ES5.1 spec (15.1.2.4, 15.1.2.5), `isNaN(number)` and `isFinite(number)` perform the `ToNumber(number)` abstract operation before checking if `number` coerces to `NaN` or `Â±Infinity`.\r\n\r\nTo me, this implies that the argument to these ","comments":10,"createdAt":1437669976000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2666?v=3","loggedByName":"darrylring","milestone":"","number":4002,"state":"closed","title":"`isNaN` and `isFinite` should accept number or string","updatedAt":1437690857000},{"assignedTo":"","body":"There are still a number of linter errors left due to `tslint` not yet supporting [`abstract`](https://github.com/palantir/tslint/issues/528) or [`is`](https://github.com/palantir/tslint/issues/529). There is also an unreachable code lint error throw","comments":1,"createdAt":1437690296000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2932786?v=3","loggedByName":"weswigham","milestone":"","number":4008,"state":"open","title":"Fix as many linter errors as possible","updatedAt":1437690842000},{"assignedTo":"","body":"`-f` was removed from tslint, causing `jake lint` to always fail with usage errors.","comments":2,"createdAt":1437684379000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2932786?v=3","loggedByName":"weswigham","milestone":"","number":4005,"state":"closed","title":"Fix jake lint with newest tslint","updatedAt":1437689746000},{"assignedTo":"jonathandturner","body":"The current TypeScript Specification documents [.docx](http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.docx) & [.pdf](http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf) are obsolete, pointing ","comments":6,"createdAt":1437486542000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6412318?v=3","loggedByName":"cyparu","milestone":"","number":3948,"state":"closed","title":"Current TypeScript Specification documents (.docx & .pdf) still point to 1.4 version","updatedAt":1437696068000},{"assignedTo":"","body":"https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#computed-properties has the following code example:\r\n```typescript\r\nfunction makeNode(name: string, initialNeighbor: Node): Node {\r\n    return {\r\n        name: name,\r\n        neigh","comments":1,"createdAt":1437686894000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4233080?v=3","loggedByName":"zuzusik","milestone":"","number":4007,"state":"closed","title":"Error in wiki on What's New page","updatedAt":1437688129000},{"assignedTo":"","body":"Hi,\r\n\r\n**Version**:VS 2015 RTM/TS 1.5\r\n\r\nI got this crash while editing a code file\r\n\r\n```\r\nFaulting application name: devenv.exe, version: 14.0.23107.0, time stamp: 0x559b7ead\r\nFaulting module name: unknown, version: 0.0.0.0, time stamp: 0x00000000\r","comments":2,"createdAt":1437588306000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":3981,"state":"open","title":"Unhandled error at `Microsoft.CodeAnalysis.Editor.TypeScript.Features.Classifier`","updatedAt":1437688015000},{"assignedTo":"","body":"","comments":0,"createdAt":1437685506000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"","number":4006,"state":"open","title":"Js doc comment scaffolding","updatedAt":1437685508000},{"assignedTo":"","body":"Additionally, I added visibility modifiers to all the members, so we declare public as little as is required.\r\n\r\nWhen merged, this should close issue #3813.","comments":5,"createdAt":1437520132000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2932786?v=3","loggedByName":"weswigham","milestone":"","number":3967,"state":"closed","title":"Tests for the Session API","updatedAt":1437685087000},{"assignedTo":"","body":"","comments":11,"createdAt":1436990315000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3875,"state":"closed","title":"Create a 'publish-nightly' task in our Jakefile","updatedAt":1437684069000},{"assignedTo":"","body":"We want to expose `src/harness/fourslash.ts` to `tests/cases/fourslash/fourslash.ts`, which defines the API/DSL for 4/ tests. However, we don't want to expose `src/harness/fourslash.ts` (or the rest of the compiler) to the tests themselves, since thi","comments":1,"createdAt":1437528481000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"","number":3974,"state":"closed","title":"Add references for fourslash in test dir","updatedAt":1437684041000},{"assignedTo":"","body":"Including\r\n\r\n- [ ] One variable declaration per variable statement (see https://github.com/palantir/tslint/issues/525)\r\n- [ ] Spaces, not tabs\r\n- [ ] No space preceding colons\r\n- [ ] Double quotes for strings (though, depending on TSLint's behavior o","comments":6,"createdAt":1437634056000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3994,"state":"open","title":"Apply more TSLint rules","updatedAt":1437683452000},{"assignedTo":"","body":"Where can i find the **typescript 1.5 language specifications** ?  \r\n[This Link](http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf) is for the **1.4** version.  \r\nEven a draft or a working version of **1.5** language spe","comments":1,"createdAt":1437652683000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2920178?v=3","loggedByName":"aminroosta","milestone":"","number":3996,"state":"closed","title":"typescript 1.5 language specifications","updatedAt":1437682645000},{"assignedTo":"","body":"Please add documentation for the `tsconfig.json` file.\r\n\r\nI did not find any information in the [Handbook](http://www.typescriptlang.org/Handbook) and the [1.5 Release Announcement](http://blogs.msdn.com/b/typescript/archive/2015/07/20/announcing-typ","comments":2,"createdAt":1437662102000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1450137?v=3","loggedByName":"phaas","milestone":"","number":4000,"state":"closed","title":"Document the tsconfig.json file","updatedAt":1437682367000},{"assignedTo":"","body":"Hi,\r\n\r\n**Version**: VS 2015 RTM/TS 1.5\r\n\r\nThe formatting for the `then` callback seems wrong. Towards the end, I am required to hit Cntrl+D to get the document to format. I shouldn't have to do this.\r\n\r\n![giff1](https://cloud.githubusercontent.com/as","comments":3,"createdAt":1437669344000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.6","number":4001,"state":"closed","title":"Incorrect indenting for promise ","updatedAt":1437696659000},{"assignedTo":"","body":"As far as I know, in Flow there are so called \"generic meta types\" that can operate on other types:\r\n\r\n```ts\r\ntype C = $Merge<{a: number}, {b: string}>; // C = { a: number, b: string }\r\ntype A = $Args<(a: number, b: string) => void>; // A = [number, ","comments":5,"createdAt":1436325900000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/13122495?v=3","loggedByName":"d180cf","milestone":"","number":3779,"state":"open","title":"Generic meta types","updatedAt":1437682177000},{"assignedTo":"","body":"This issue appeared after upgrading from 1.4 to 1.5 - the baseTypes of a class were always returning `undefined` - by looking in the source I found that calling, for example, `getConstructSignatures()` would lazily load the data.\r\n\r\n        if (node.","comments":10,"createdAt":1437558133000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8700285?v=3","loggedByName":"Knagis","milestone":"","number":3977,"state":"closed","title":"InterfaceTypeWithBaseTypes.baseTypes is lazily loaded without clear API to do that","updatedAt":1437681996000},{"assignedTo":"","body":"Fixes #3977.\r\n\r\nThis is just a request to expose getBaseTypes on the TypeObject in services. It seems like a reasonable addition to our API, even though it is not used directly by services.","comments":1,"createdAt":1437604174000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3990,"state":"closed","title":"Add getBaseTypes on TypeObject in services","updatedAt":1437681979000},{"assignedTo":"","body":"When adding a new item (file) to a VS2015 Web Site there is no option to add a Typescript file type. Everything else under the sun, but no Typescript file option ( or Typescript Definition, d.ts ). ","comments":0,"createdAt":1437656801000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/918658?v=3","loggedByName":"ToddThomson","milestone":"","number":3998,"state":"open","title":"VS2015 Community Should have a TypeScript New Item Type","updatedAt":1437681547000},{"assignedTo":"zhengbli","body":"The HTML5 File API specifies that the File constructor has two required parameters and one optional parameter: http://www.w3.org/TR/FileAPI/#file-constructor-params\r\n\r\nHowever the dom.generated.d.ts file specifies that the File constructor has no par","comments":0,"createdAt":1437658566000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/274923?v=3","loggedByName":"corruptmem","milestone":"TypeScript 1.6","number":3999,"state":"open","title":"HTML File constructor does not declare the required parameters","updatedAt":1437696408000},{"assignedTo":"JsonFreeman","body":"Have code like this\r\n\r\n```\r\nfunction foo(one = 1, two, three) {\r\n\r\n}\r\n````\r\n\r\nwhich is valid ES6 syntax (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-functions-and-classes). TypeScript flags such a signature as error because it treat","comments":7,"createdAt":1435048965000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"TypeScript 2.0","number":3604,"state":"open","title":"Parameters with default value should be allowed anywhere","updatedAt":1437681484000},{"assignedTo":"","body":"I think the source maps being generated are incorrect in some instances.  I had an IntelliJ 'node' project working in 1.5.0-beta that experienced debugging problems (not stopping at some breakpoints, and not stopping at each line when stepping) when ","comments":1,"createdAt":1437673137000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8585666?v=3","loggedByName":"ecp3","milestone":"","number":4003,"state":"open","title":"incorrect source map ","updatedAt":1437681450000},{"assignedTo":"ahejlsberg","body":"```ts\r\nfunction foo({ x, y = {}} = { x: 0, y: {}}) {\r\n\r\n}\r\n\r\nfoo(); // Fine\r\nfoo({ x: 0, y: 0 }); // Fine\r\nfoo({ x: 0 }); // Error\r\n```\r\n\r\nThe last line should not be an error because the y property has a default initializer. The error goes away if I","comments":2,"createdAt":1427144279000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":2469,"state":"open","title":"An initialized binding element should be optional even if its parent is initialized too","updatedAt":1437679008000},{"assignedTo":"jonathandturner","body":"# Async Functions\r\n\r\n# <a name=\"1\"/>1 Async Functions\r\n\r\nThis is a spec proposal for the addition of *Async Functions* (also known as `async..await`) as a feature of TypeScript.\r\n\r\n# <a name=\"2\"/>2 Use Cases\r\n\r\n*Async Functions* allow TypeScript deve","comments":101,"createdAt":1421202340000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":1664,"state":"open","title":"Proposal: Async Functions","updatedAt":1437678684000},{"assignedTo":"yuit","body":"I have been trying the new reexport feature together with amd modules, and found a strange detail.\r\n\r\nIt seem like the compiler does not understand that the symbol need to be reexported. So this code : \r\n\r\n```typescript\r\n/// <amd-dependency path=\"tex","comments":0,"createdAt":1437678062000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/819495?v=3","loggedByName":"druppy","milestone":"TypeScript 1.6","number":4004,"state":"open","title":"amd reexport symbols","updatedAt":1437696191000},{"assignedTo":"","body":"Most projects should be using a local version of the typescript compiler, typically via a build tool like grunt/gulp, not a globally installed one. That way each project can upgrade the typescript compiler when it's ready to. The warning on npm insta","comments":7,"createdAt":1437599562000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/320332?v=3","loggedByName":"JeroMiya","milestone":"","number":3987,"state":"open","title":"Remove preferGlobal flag","updatedAt":1437677508000},{"assignedTo":"vladima","body":"This issue came to light while trying to use this plugin for SystemJS... I filed an issue there and they suggested I also make one over here.\r\n\r\nhttps://github.com/frankwallis/plugin-typescript/issues/22#issuecomment-109778529\r\n\r\nThe bin folder is bl","comments":4,"createdAt":1433705999000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/79032?v=3","loggedByName":"wforney","milestone":"TypeScript 1.6","number":3408,"state":"open","title":"Error loading file from typescript package in bin folder due to IIS restriction (404s)","updatedAt":1437675666000},{"assignedTo":"","body":"I wish I could define a type as follows\r\n\r\n```typescript\r\ntype Line = string | Line[]; // <-- not a real TypeScript, do not attempt at home!\r\n```\r\n\r\nLooks like it's there is a fundamental limitation in the type system that doesn't allow doing so.\r\n\r\n","comments":7,"createdAt":1437602222000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":3988,"state":"open","title":"Question: is there a more elegant way to representing `type Line = string | Line[]`?","updatedAt":1437674777000},{"assignedTo":"jonathandturner","body":"- Name: RoboWhale\r\n- Homepage url: http://robowhale.com/\r\n- Brand Guidelines/Licensing: ...\r\n- Logo: http://robowhale.com/wp-content/uploads/robowhale_logo.png\r\n\r\nWe're developing all our web games in TypeScript. Thanks!","comments":0,"createdAt":1437656200000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/190223?v=3","loggedByName":"qdrj","milestone":"","number":3997,"state":"open","title":"New Website Logo: RoboWhale","updatedAt":1437674738000},{"assignedTo":"jonathandturner","body":"I had assumed that the module syntax as described in (https://github.com/Microsoft/TypeScript/wiki/Modules) was a remnant of earlier times when es6 wasnt clear on that topic yet and that the old module syntax usage was not encouraged anymore since it","comments":12,"createdAt":1437130563000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/231889?v=3","loggedByName":"matthiasg","milestone":"","number":3908,"state":"closed","title":"Module Syntax","updatedAt":1437673986000},{"assignedTo":"","body":"According to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN the argument can be a boolean, a string, a number or an object.","comments":6,"createdAt":1437478613000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6220422?v=3","loggedByName":"dcharbonnier","milestone":"","number":3947,"state":"closed","title":"isNaN accept all types of arguments","updatedAt":1437670007000},{"assignedTo":"","body":"Currently at [TypeScriptLang.org](http://www.typescriptlang.org/) TypeScript v1.5Beta is publicly and prominently announced.\r\n\r\nWhy is software *not* being targeted for public audience been announced prominently at a branding website?\r\n\r\nIf, on the o","comments":10,"createdAt":1437085211000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9283914?v=3","loggedByName":"SetTrend","milestone":"","number":3898,"state":"closed","title":"TypeScript ALM - raising expectations","updatedAt":1437660877000},{"assignedTo":"","body":"    class A {\r\n    }\r\n\r\n    class B extends A {\r\n        public s: number = 9;\r\n\r\n        constructor () {\r\n            \"use strict\";   // no error?\r\n            super();\r\n        }\r\n    }\r\nresults in \"A 'super' call must be the first statement in th","comments":3,"createdAt":1436908151000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106995?v=3","loggedByName":"ShyykoSerhiy","milestone":"TypeScript 1.6","number":3859,"state":"closed","title":"False error when using directive prologues inside constructor with initialized properties.","updatedAt":1437635377000},{"assignedTo":"","body":"Fixes issue #3859 ","comments":1,"createdAt":1437156361000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106995?v=3","loggedByName":"ShyykoSerhiy","milestone":"","number":3913,"state":"closed","title":"Fixed \"False error when using directive prologues inside constructor with initialized properties.\"","updatedAt":1437635345000},{"assignedTo":"","body":"it would be great to transpile const declaration with inline value when target is ES5 (as already Done with const enum), so it will prevent to include useless javascript.\r\nAn example:\r\n```ts\r\nconst A = \"myConstValue\";\r\nalert(A);\r\n// generated js code","comments":4,"createdAt":1437515998000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/13186600?v=3","loggedByName":"Gambero81","milestone":"","number":3964,"state":"open","title":"suggestion to inline const keywords for ES5","updatedAt":1437633713000},{"assignedTo":"","body":"CommonJS cannot requires a package transpiled from TypeScript ES6 Modules using default export well.\r\n\r\nTS 1.5-alpha transpiles default exports:\r\n```typescript\r\n// foo.ts\r\nexport default foo;\r\n```\r\nto:\r\n```javascript\r\n// foo.js (\"main\" in this packag","comments":21,"createdAt":1428719686000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/26476?v=3","loggedByName":"teppeis","milestone":"TypeScript 1.6","number":2719,"state":"closed","title":"ES6 Modules default exports interop with CommonJS","updatedAt":1437632374000},{"assignedTo":"","body":"Fixes #3987.","comments":1,"createdAt":1437631219000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4483844?v=3","loggedByName":"impinball","milestone":"","number":3993,"state":"open","title":"Remove preferGlobal flag","updatedAt":1437631225000},{"assignedTo":"","body":"Good day!\r\n\r\nI've isolated the offending source to a separate [branch](https://github.com/alexander-matsievsky/circuitry.ts/blob/ts_compiler_error_2015-07-23T02colon51colon30dot461Z/examples/todo/classic/js/main.ts#L367-377). The commenting out of th","comments":3,"createdAt":1437620941000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3784691?v=3","loggedByName":"alexander-matsievsky","milestone":"","number":3992,"state":"closed","title":"TypeScript compiler bug.","updatedAt":1437628037000},{"assignedTo":"","body":"I'm reopening this issue, because it was closed with the move from codeplex, and doesn't seem to have been re-opened. https://typescript.codeplex.com/workitem/1217\r\n\r\nI feel like this is very important for a scripting language.-- Especially for objec","comments":55,"createdAt":1416364197000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2426688?v=3","loggedByName":"jhlange","milestone":"","number":1206,"state":"open","title":"Allow enums of types other than number","updatedAt":1437625562000},{"assignedTo":"","body":"Some properties in JavaScript are actually read-only, i.e. writes to them either fail silently or cause an exception. These should be modelable in TypeScript.\r\n\r\nPrevious attempts to design this have run into problems. A brief exploration:\r\n```TypeSc","comments":30,"createdAt":1405443930000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":12,"state":"open","title":"Suggestion: read-only modifier","updatedAt":1437625439000},{"assignedTo":"","body":"```TypeScript\r\nclass A {\r\n    foo() {\r\n    }\r\n}\r\n\r\nclass B extends A {\r\n    constructor() {\r\n        var x = {\r\n            x: super();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRight now the error message is\r\n\r\n```\r\nConstructors for derived classes must contain ","comments":0,"createdAt":1437609852000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":3991,"state":"open","title":"Error for missing 'super' call is misleading","updatedAt":1437696795000},{"assignedTo":"","body":"Fix  #3696. ","comments":2,"createdAt":1437081209000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3897,"state":"open","title":"Error for use super in null extension","updatedAt":1437609068000},{"assignedTo":"","body":"![image](https://cloud.githubusercontent.com/assets/937933/8837389/1e6628fc-3094-11e5-82d9-0ac6814f4894.png)\r\n\r\nCan be seen at [playground](http://www.typescriptlang.org/playground#src=%60%24%7B%60%0D%0A%60%7D%0D%0A%09interface%0D%0A%60%3B).","comments":1,"createdAt":1437599286000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":3985,"state":"closed","title":"Syntax highlighting not working properly for template strings.","updatedAt":1437605530000},{"assignedTo":"vladima","body":"I have an enum in an interface that, when used in my TS code in TypeScript 1.3, was output as a constant. This is no longer the case in 1.4 after saving my file. When i build the project, the enum code is properly output as a constant. Using VS 2013 ","comments":58,"createdAt":1422309471000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6309423?v=3","loggedByName":"craigktreasure","milestone":"TypeScript 1.5","number":1812,"state":"closed","title":"VS 2013 save and compile output vs build compile output","updatedAt":1437605478000},{"assignedTo":"paulvanbrenk","body":"It is unclear to me how tsconfig.json is used in Visual Studio 2015.  And what happens when the TypeScript panel in the Project Properties conflicts?  Does switching to use tsconfig.json kill features like Save-On-Compile?","comments":2,"createdAt":1437596866000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8322472?v=3","loggedByName":"Gitgiddy","milestone":"TypeScript 1.6","number":3983,"state":"open","title":"It is unclear to me how tsconfig.json is used in Visual Studio 2015","updatedAt":1437605193000},{"assignedTo":"","body":"````\r\nexport function translate(load) {\r\n   logger.debug(`systemjs translating ${load.address}`);\r\n````\r\n\r\ntranspiled to:\r\n````\r\n    function translate(load) {\r\n        logger.debug(`systemjs translating ${ + load.address + );\r\n````\r\nThis is in `fran","comments":6,"createdAt":1437546344000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3254987?v=3","loggedByName":"unional","milestone":"","number":3976,"state":"open","title":"template string not parse correctly in es3","updatedAt":1437604717000},{"assignedTo":"","body":"Try getting references/occurrences/quickinfo at the following markers:\r\n\r\n```TypeScript\r\ntype List</*1*/T> = /*2*/T[];\r\n```\r\n\r\n```\r\nDescription:\r\n\r\ngetDocumentHighlights('C:\\Users\\drosen\\AppData\\Local\\Temp\\~vs65CE.ts', 7)\r\n\r\nStackTrace:\r\n\r\nTypeError:","comments":1,"createdAt":1437603926000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3989,"state":"open","title":"Error for findReferences/getDocHighlights/quickInfo on type alias type parameter","updatedAt":1437604178000},{"assignedTo":"paulvanbrenk","body":"Hello,\r\n\r\nI upgraded to Visual Studio 2015 Community Edition RTM today and have found that if a TypeScript project has the \"Redirect JavaScript output to directory\" option set to true, then compile on save no longer functions.  Deselecting this optio","comments":16,"createdAt":1437432683000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1887209?v=3","loggedByName":"sgreer","milestone":"TypeScript 1.5.4","number":3939,"state":"open","title":"VS2015 RTM: Compile on save does not work when redirect JavaScript output is specified","updatedAt":1437602834000},{"assignedTo":"","body":"Fixes #3954. This is an alternative to #3968.\r\n\r\nThis is the same example as the other pull request.\r\n```ts\r\nfunction f<T extends [(p1: number) => number]>(p: T): T {\r\n    return p;\r\n}\r\n\r\nvar v = f([x => x]);\r\n```\r\n\r\nThe approach this time is to not ","comments":0,"createdAt":1437599521000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3986,"state":"open","title":"Don't add a type that contains anyFunctionType as an inference candidate","updatedAt":1437599603000},{"assignedTo":"mhegazy","body":"Currently window.crypto.subtle.digest() return type is specified as `any`.  Instead, it should be a ```Promise<ArrayBuffer>```","comments":0,"createdAt":1437597575000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/830336?v=3","loggedByName":"btesser","milestone":"TypeScript 1.7","number":3984,"state":"open","title":"Bug: Incorrect return type of SubtleCrypto.digest","updatedAt":1437598469000},{"assignedTo":"","body":"This PR implements stricter object literal assignment checks for the purpose of catching excess or misspelled properties. The PR implements the suggestions in #3755. Specifically:\r\n\r\n* Every object literal is initially considered \"fresh\".\r\n* When a f","comments":54,"createdAt":1436585754000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3823,"state":"closed","title":"Strict object literal assignment checking","updatedAt":1437595334000},{"assignedTo":"","body":"I often needed (and I think others do) to get type of element of collection, especially when dealing with collections of complex type. As a workaround I introduce new dummy variable which is assigned with a value of collection element in order to get","comments":2,"createdAt":1436174468000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1035026?v=3","loggedByName":"lazutkin","milestone":"","number":3749,"state":"open","title":"Proposal: Expose collection element's type","updatedAt":1437595325000},{"assignedTo":"vladima","body":"see https://github.com/ModuleLoader/es6-module-loader/issues/386 for more details about the fix.","comments":6,"createdAt":1433275190000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":3346,"state":"closed","title":"Update systemjs export emit to support new bulk export variation","updatedAt":1437592471000},{"assignedTo":"","body":"fixes #3363\r\n\r\nexisting `transpile` function returns emitted source code as a string so augmenting it to also return source map information will be a breaking change. Instead I've added new function `transpileModule` (suggestions for better names are","comments":1,"createdAt":1437591897000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3982,"state":"open","title":"add transpileModule function that can return emitted source map","updatedAt":1437697089000},{"assignedTo":"","body":"This must have been discussed here, but I couldn't find that discussion. So what's the reason for not supporting es6 generators when targeting es5?\r\n\r\nIn my spare time I'm writing a tsumego (it's like a mating problem in chess) solver in js which is ","comments":4,"createdAt":1437536396000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/13122495?v=3","loggedByName":"d180cf","milestone":"","number":3975,"state":"closed","title":"Transpiling ES6 generators into a ES5 state machine?","updatedAt":1437589906000},{"assignedTo":"","body":"Fixes #3954.\r\n\r\nHere is an example:\r\n```ts\r\nfunction f<T extends [(p1: number) => number]>(p: T): T {\r\n    return p;\r\n}\r\n\r\nvar v = f([x => x]);\r\n```\r\n\r\nType argument inference processes arguments in up to two stages. The first stage avoids contextual","comments":3,"createdAt":1437522160000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3968,"state":"open","title":"Make a type with signatures not be a subtype of anyFunctionType","updatedAt":1437587840000},{"assignedTo":"paulvanbrenk","body":"VS2015 RC was (seemingly) using this configuration file... after updating to RTM this file simply being present actually causes Typescript to not compile on save anymore. We had to remove tsconfig.json to get this to work again. On top of that, there","comments":4,"createdAt":1437486797000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1872858?v=3","loggedByName":"UTGuy","milestone":"TypeScript 1.7","number":3949,"state":"open","title":"tsconfig.json is ignored by Visual Studio 2015 RTM","updatedAt":1437587530000},{"assignedTo":"","body":"This code seems to be valid TS:\r\n\r\n```ts\r\ninterface ReactClass<P, S> {\r\n    setState(state: S): void;\r\n}\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n    hovered: boolean;\r\n}\r\n\r\nfunction createComponent<P extends Props, S extends State>() {\r\n    retur","comments":2,"createdAt":1437577811000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/198327?v=3","loggedByName":"s-panferov","milestone":"","number":3980,"state":"closed","title":"Class expression inside a generic function bug","updatedAt":1437586872000},{"assignedTo":"","body":"The recent blogpost on the TypeScript 1.5 release highlighted the contrast between Babel and TypeScript in terms of ES6 compatibility.\r\n\r\nHowever both are listed as Babel + **core-js** and TypeScript + **core-js**:\r\n\r\n![image](https://cloud.githubuse","comments":15,"createdAt":1437503790000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1010525?v=3","loggedByName":"johnnyreilly","milestone":"","number":3956,"state":"open","title":"core-js and TypeScript - how do these fit together?","updatedAt":1437586289000},{"assignedTo":"","body":"TypeScript 1.5.3 defines the following type signature for `Uint8Array#set(array, offset)`:\r\n\r\n```ts\r\ninterface Uint8Array {\r\n    set(array: Uint8Array, offset?: number): void;\r\n}\r\n```\r\n\r\nAnd for `Uint16Array#set(array, offset)`:\r\n\r\n```ts\r\ninterface U","comments":0,"createdAt":1437575926000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/310800?v=3","loggedByName":"djcsdy","milestone":"TypeScript 1.6","number":3979,"state":"open","title":"Incorrect type definition for TypedArray `set(array, offset)` functions","updatedAt":1437586216000},{"assignedTo":"rbuckton","body":"when compiling this code for ES5 (not ES6) \r\n```TypeScript\r\nasync function f() {\r\n   return { };\t\r\n}\r\n```\r\ninstead of giving the \"only available in ES6\" warning, it throws this exception:\r\n```\r\n               throw e;\r\n                     ^\r\nTypeErr","comments":0,"createdAt":1437570470000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2598443?v=3","loggedByName":"nippur72","milestone":"TypeScript 1.6","number":3978,"state":"open","title":"[async] Cannot read property 'members' of undefined","updatedAt":1437586122000},{"assignedTo":"RyanCavanaugh","body":"When using ES6 style imports the name of exported members aren't correctly mapped when passed as to a JSX element's parameters.\r\n\r\ntest.tsx\r\n```\r\n/// <reference path=\"../typings/react-router/react-router.d.ts\" />\r\n\r\nimport * as React from \"react\";\r\ni","comments":2,"createdAt":1437349652000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1409854?v=3","loggedByName":"pieter-lazzaro","milestone":"TypeScript 1.6","number":3928,"state":"closed","title":"TSX not correctly mapping imported names.","updatedAt":1437586086000},{"assignedTo":"","body":"Fixes bug #3928.\r\n\r\nI am inclined to start a campaign to make as many of our `switch` statements in the compiler exhaustive as possible?","comments":2,"createdAt":1437503774000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3955,"state":"closed","title":"Correctly identify identifiers inside JSX exprs as expression identifiers","updatedAt":1437586075000},{"assignedTo":"","body":"At <https://github.com/Microsoft/TypeScript/blob/master/src/services/services.ts#L272-279>?\r\n\r\nCould it be replaced by\r\n```ts\r\n            if (children.length === 0) { return undefined; }\r\n\r\n            let child = children[children.length - 1];\r\n\r\n ","comments":6,"createdAt":1436913391000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"","number":3861,"state":"open","title":"Why is a for-loop used here?","updatedAt":1437585409000},{"assignedTo":"","body":"Support for Async Functions, as per the proposal in #1664. \r\n\r\n* Adds a node factory and node tree visitor (factory.ts, factory.generated.ts)\r\n* Adds a general code generator and locals builder (generator.ts)\r\n* Adds a node rewriter for destructuring","comments":7,"createdAt":1421977975000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":1781,"state":"closed","title":"Async Functions","updatedAt":1437585228000},{"assignedTo":"DanielRosenwasser","body":"Hi,\r\n\r\n**Version**: VS 2015 RTM/TS 1.5\r\n\r\nIn the image below `url1` is coloured correctly, but not `url2`:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1106823/8804809/d3ffbf72-2fc5-11e5-9438-375f3a2ba581.png)\r\n\r\n(There is nothing wrong wit","comments":7,"createdAt":1437492680000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.6","number":3952,"state":"closed","title":"Template string not coloured when used with URL","updatedAt":1437584569000},{"assignedTo":"","body":"At the moment:\r\n```ts\r\nclass Article {\r\n   @Relation\r\n   author: OneRelation<User>;\r\n}\r\n```\r\nemits:\r\n```js\r\n__metadata('design:type', OneRelation)\r\n```\r\n\r\nMy suggestion is that that instead of just type it would also include the type args.\r\n\r\nMaybe s","comments":12,"createdAt":1430685387000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/417241?v=3","loggedByName":"hypno2000","milestone":"","number":3015,"state":"open","title":"also emit type arguments with --emitDecoratorMetadata","updatedAt":1437576016000},{"assignedTo":"","body":"# Background\r\n\r\nWe've had a few requests to support this typing (like #229).  This proposal addresses the use cases for a function 'this' type, a class 'this' type, and a corresponding feature for interfaces.\r\n\r\n# Motivating Examples\r\n\r\n## Extension ","comments":26,"createdAt":1435775390000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":3694,"state":"open","title":"Supporting 'this' type","updatedAt":1437562059000},{"assignedTo":"","body":"Hello,\r\n\r\nI have a generic component, e.g. `class Select<T> extends React.Component<SelectProps<T>, any>`. Is there any \"right\" way to use it from JSX?\r\n\r\nIt is impossible to write something like `<Select<string> />` in JSX. The best thing that I've ","comments":3,"createdAt":1437506880000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/198327?v=3","loggedByName":"s-panferov","milestone":"","number":3960,"state":"open","title":"What is the right way to use generic components with JSX?","updatedAt":1437549888000},{"assignedTo":"jonathandturner","body":"Please fill the following out:\r\n\r\n- Name: Ignite UI\r\n- Homepage url: http://www.igniteui.com/\r\n- Brand Guidelines/Licensing: I am Josh Anderson the Director of Marketing at Infragistics.  You have permission to use our logo\r\n- Logo: \r\n![vector_logo_f","comments":3,"createdAt":1435677501000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11754033?v=3","loggedByName":"MariaTimova","milestone":"","number":3685,"state":"closed","title":"New Website Logo: Ignite (Infragistics)","updatedAt":1437547553000},{"assignedTo":"","body":"We should consider the feasibility of a simple editor command where existing JSDoc comments are automatically converted to TypeScript type annotations. This could be a massive benefit for easing migration from JavaScript to TypeScript both in terms o","comments":5,"createdAt":1429919746000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":2916,"state":"open","title":"Support 'Promote JSDoc comment to type annotation'","updatedAt":1437532130000},{"assignedTo":"","body":"We have a wildcard type in the compiler called anyFunctionType. Since there are some type system rules that relate to this type (for example the change in #3968), it should ideally be added to the spec. Note that this likely fits into the work of #11","comments":0,"createdAt":1437524049000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3970,"state":"open","title":"Add anyFunctionType to the spec","updatedAt":1437532104000},{"assignedTo":"DanielRosenwasser","body":"Currently if you have the following file `m1.ts`\r\n\r\n```TypeScript\r\nexport default function Decl() {\r\n    return 0;\r\n}\r\n\r\nexport interface Decl {\r\n    p1: number;\r\n    p2: number;\r\n}\r\n\r\nexport namespace Decl {\r\n    export var x = 10;\r\n    export var y","comments":4,"createdAt":1431141010000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3095,"state":"open","title":"Compiler should error when merging with a default exported declaration","updatedAt":1437527500000},{"assignedTo":"","body":"Fixes #3095.\r\n\r\nWith this change, the following code will now cause an error:\r\n\r\n```TypeScript\r\nexport default function Foo() {\r\n}\r\n\r\nexport namespace Foo {\r\n    export var x = 10;\r\n}\r\n```\r\n\r\nThe idea is that the namespace cannot overlap in the same ","comments":0,"createdAt":1437527417000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3973,"state":"open","title":"Disallow merging for default export declarations","updatedAt":1437527483000},{"assignedTo":"","body":"Disregard this issue.","comments":0,"createdAt":1437526260000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3972,"state":"closed","title":"Should not get a builder after 'export default' in completion lists","updatedAt":1437526346000},{"assignedTo":"vladima","body":"When attempting to alias an exported namespace from an external module, if the compilation is set to SystemJS module type, it appears the alias is being ignored.\r\n\r\nHere's an example:\r\n```javascript\r\nExternal Module:\r\n    export namespace TestName.Se","comments":0,"createdAt":1437510299000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2425576?v=3","loggedByName":"kfisher723","milestone":"TypeScript 1.6","number":3962,"state":"closed","title":"Compiling to SystemJS module type ignores alias definitions","updatedAt":1437525793000},{"assignedTo":"","body":"fixes #3962","comments":1,"createdAt":1437519533000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3966,"state":"closed","title":"hoist top level import equals declarations in System modules","updatedAt":1437525763000},{"assignedTo":"","body":"This issue tracks breaking changes to the 1.6 release. The full list can be found in the wiki: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#typescript-16\r\n\r\n* [External modules parsed in strict mode](https://github.com/Microsoft/Type","comments":0,"createdAt":1437525593000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":3971,"state":"open","title":"TypeScript 1.6 Breaking Changes log","updatedAt":1437525615000},{"assignedTo":"JsonFreeman","body":"```typescript\r\nfunction f<T extends { \"0\": (p1: number) => number }>(p: T): T\r\n{\r\n\treturn p;\r\n}\r\n\r\nvar v = f([x => x]); // v is typed as [{}]. Expected [number=>number]\r\n```","comments":11,"createdAt":1437501602000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/936705?v=3","loggedByName":"osdm","milestone":"TypeScript 1.6","number":3954,"state":"open","title":"Strange tuple typing","updatedAt":1437523663000},{"assignedTo":"","body":"Fixes #3963 ","comments":0,"createdAt":1437523135000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3969,"state":"open","title":"Forward refs in enum initializers","updatedAt":1437523137000},{"assignedTo":"","body":"","comments":4,"createdAt":1437517475000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"","number":3965,"state":"closed","title":"make RunnerBase abstract","updatedAt":1437519051000},{"assignedTo":"yuit","body":"```ts\r\n    class C extends null {\r\n        constructor() {\r\n            return Object.create(null);\r\n        }\r\n    }\r\n```\r\ngenerates error:\r\n> error TS2377: Constructors for derived classes must contain a 'super' call.\r\n\r\nin this case, a call to `su","comments":19,"createdAt":1435779243000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":3696,"state":"open","title":"Error when extending null","updatedAt":1437516977000},{"assignedTo":"paulvanbrenk","body":"Here are the steps to reproduce the issue:\r\n\r\n1. Create a new ASP.NET 4 project in VS 2015 RTM by using the default MVC template.\r\n2. You can make sure the renaming works at this point: use Solution explorer to rename any file with a C# class in it (","comments":2,"createdAt":1437504426000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3703722?v=3","loggedByName":"HellBrick","milestone":"TypeScript 1.6","number":3957,"state":"closed","title":"Adding a TS file to a project breaks renaming files in VS 2015 RTM","updatedAt":1437513601000},{"assignedTo":"","body":"implementation for #2719","comments":13,"createdAt":1434871479000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"","number":3586,"state":"closed","title":"improve  module loading interoperability for babel","updatedAt":1437512758000},{"assignedTo":"","body":"Say I have the following:\r\n\r\n```\r\ninterface Options {\r\n\tdoSomethingSpecial?: boolean\r\n}\r\n\r\nfunction configure(options: Options) {}\r\nconfigure({});\r\n```\r\n\r\nThe preceding (correctly) does not flag any issues. However, say I change the function call to:","comments":7,"createdAt":1407434537000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/196944?v=3","loggedByName":"jbrantly","milestone":"TypeScript 1.6","number":391,"state":"closed","title":"Allow stricter structural typing","updatedAt":1437512693000},{"assignedTo":"paulvanbrenk","body":"I installed TS for VS2013 using this link: https://visualstudiogallery.msdn.microsoft.com/2d42d8dc-e085-45eb-a30b-3f7d50d55304\r\n\r\nClose VS, reopen VS, create new TS HTML project, get these errors:\r\n\r\n* Your project file uses a different version of th","comments":2,"createdAt":1434137746000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11507384?v=3","loggedByName":"danmarshall","milestone":"TypeScript 1.6","number":3493,"state":"open","title":"Bad path when installing TypeScript 1.4 for Visual Studio 2013 ","updatedAt":1437512365000},{"assignedTo":"","body":"This code is compiled okay:\r\n```(typescript)\r\nenum W {\r\n    A = 1 \r\n}\r\n\r\nconst enum Q {\r\n    A = 1,\r\n    B = W.A | A\r\n}\r\n```\r\n\r\nThis code produces a compiler error:\r\n```(typescript)\r\nconst enum Q {\r\n    A = 1,\r\n    B = W.A | A\r\n}\r\n\r\nenum W {\r\n    A =","comments":3,"createdAt":1433951773000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"","number":3466,"state":"open","title":"enum vs const enum - order matters","updatedAt":1437512280000},{"assignedTo":"vladima","body":"```typescript\r\nconst enum A {\r\n    X = B.X // in 'const' enum declarations member initializer must be constant expression\r\n}\r\n\r\nconst enum B {\r\n    X = 1\r\n}\r\n```\r\n\r\nError message does not give any clues about how to fix the problem since member initi","comments":0,"createdAt":1437512250000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.6","number":3963,"state":"open","title":"Error message is misleading when const enum member is initialized with const value defined below","updatedAt":1437512250000},{"assignedTo":"","body":"This feature request is similar to [units of measure in F#](http://msdn.microsoft.com/en-us/library/dd233243.aspx).\r\n\r\nFor example:\r\n\r\n```typescript\r\nvar metres  = 125<m>,\r\n    seconds = 2<s>,\r\n    speed: number<m/s>;\r\n\r\nspeed = metres / seconds;    ","comments":38,"createdAt":1407274012000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1609021?v=3","loggedByName":"dsherret","milestone":"","number":364,"state":"open","title":"Suggestion: Units of measure","updatedAt":1437512247000},{"assignedTo":"","body":"Looks like breakpoints are disabled in Visual Studio when working with systemjs and using IE.\r\nHere is a [stackoverflow issue](http://stackoverflow.com/questions/29017386/typescript-debugging-in-vs-not-working-for-aurelia-jspm-set-up) and here is a [","comments":1,"createdAt":1437507434000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2194935?v=3","loggedByName":"MihaMarkic","milestone":"","number":3961,"state":"open","title":"Breakpoints and systemjs","updatedAt":1437511129000},{"assignedTo":"","body":"This may be intended but wanted to bring it up for discussion. If I create an empty TypeScript file and call `tsc app.ts` everything is fine, but if I use `tsc app.ts --noLib` I see:\r\n\r\nerror TS2318: Cannot find global type 'Array'.\r\nerror TS2318: Ca","comments":8,"createdAt":1437401298000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/196944?v=3","loggedByName":"jbrantly","milestone":"","number":3930,"state":"closed","title":"using noLib results in a number of intrinsic errors on empty file","updatedAt":1437509740000},{"assignedTo":"","body":"> This issue was previously [reported](https://typescript.codeplex.com/workitem/2425) as bug at codeplex, now trying to submit as suggestion.\r\n\r\nBelow, the `Collection.model` field is supposed to accept **type of `TModel`** rather than **instance of ","comments":11,"createdAt":1406075627000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Blog","name":"Blog","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/767147?v=3","loggedByName":"omidkrad","milestone":"","number":204,"state":"closed","title":"Suggestion: typeof of generic type","updatedAt":1437506650000},{"assignedTo":"","body":"Minimal example to reproduce:\r\n\r\n```ts\r\n/// <reference path=\"./react.d.ts\" />\r\n\r\nimport * as React from 'react';\r\n\r\nclass C extends React.Component<any, any> {\r\n    render() {\r\n        return null\r\n    }\r\n}\r\n\r\nlet C1: React.Component<any, any> = C;\r\n","comments":1,"createdAt":1437506218000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/198327?v=3","loggedByName":"s-panferov","milestone":"","number":3959,"state":"closed","title":"TSX: Cannot read property 'flags' of undefined","updatedAt":1437506341000},{"assignedTo":"","body":"http://www.typescriptlang.org/Playground\r\n\r\nHere's a small sample of the errors being thrown when loading the page:\r\n```\r\nGET http://www.typescriptlang.org/Script/vs/base/collections.js 404 (Not Found)\r\neditor.main.js:51 Loading \"vs/languages/typescr","comments":3,"createdAt":1437504703000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"","number":3958,"state":"closed","title":"The Playground website appears to be broken","updatedAt":1437505210000},{"assignedTo":"","body":"Currently, the type system included in TypeScript does not allow proper typing of the this context. There are attempts to fix that (See #3694 for example), but these will take a while to ripe and until then I would like to suggest a \"quick fix\" for c","comments":11,"createdAt":1437306065000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106569?v=3","loggedByName":"agrafix","milestone":"","number":3927,"state":"closed","title":"Wrong 'this' context in class methods","updatedAt":1437504989000},{"assignedTo":"","body":"(original write-up proposing \"Strict interfaces\" deleted, need to fill this in with a description of what we did end up doing)","comments":29,"createdAt":1436218434000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3755,"state":"closed","title":"Error when 'extra' properties appear in object literals","updatedAt":1437504869000},{"assignedTo":"","body":"This cost me quite a bit of time, so please enlighten me if this is anticipated behaviour and let's put a big note in the docs. \r\n\r\n`tsc --module commonjs --out app.js app.ts` type checks correctly, however produces **no output**. In fact it does not","comments":13,"createdAt":1419108774000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2703310?v=3","loggedByName":"felixSchl","milestone":"Community","number":1544,"state":"open","title":"No output with --out when using import statement","updatedAt":1437504489000},{"assignedTo":"","body":"This a meta-bug for tracking a set of things that we could address with a compiler flag that tightens certain aspects of TypeScript that users generally perceive as too loose.\r\n\r\nWill add to this list as appropriate\r\n * #228: Enforce expressions in `","comments":31,"createdAt":1406578436000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":274,"state":"open","title":"\"Stricter\" TypeScript","updatedAt":1437504188000},{"assignedTo":"yuit","body":"```ts\r\nvar [a, b] = [1, 2];\r\n({ 0: a, 1: b } = [1, 2]);\r\n```\r\n\r\nThe source spans spans here are:\r\n`[a, b] = [1, 2]`\r\n`a, `\r\n`b] = [1, 2]`\r\n`{ 0: a, 1: b } = [1, 2]`\r\n`a, 1: `\r\n`b } = [1, 2]`\r\n\r\nThey should be divided differently.\r\n\r\nIn fact, for arra","comments":3,"createdAt":1425583780000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":2213,"state":"open","title":"Source map spans are very awkward for destructuring","updatedAt":1437504053000},{"assignedTo":"","body":"I would not be at all surprised if I was doing something wrong here or if this problem was due to a lack of my understanding, but I think that `tsc` should have an error message or something here instead of producing surprising results and exiting wi","comments":1,"createdAt":1437489523000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/829827?v=3","loggedByName":"NickHeiner","milestone":"","number":3950,"state":"closed","title":"Empty output from tsc and `out` compiler option acting surprisingly","updatedAt":1437503154000},{"assignedTo":"","body":"Fixes #3346 ","comments":1,"createdAt":1437457333000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3945,"state":"closed","title":"System: use batching when doing star exports","updatedAt":1437501158000},{"assignedTo":"vladima","body":"In 1.5, `export =` is not emitted if the symbol is a const-enum-only module. However, in any of the following cases, a const-enum-only module actually does have a runtime value and should be exported:\r\n* the module is merged with a class\r\n* the modul","comments":0,"createdAt":1437430056000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1071296?v=3","loggedByName":"jeffreymorlan","milestone":"TypeScript 1.6","number":3938,"state":"closed","title":"\"export =\" omission for const-enum-only modules is done too broadly","updatedAt":1437501087000},{"assignedTo":"","body":"Fixes #3938 ","comments":1,"createdAt":1437454600000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3944,"state":"closed","title":"treat modules that are merged with values as non-const-enum","updatedAt":1437501074000},{"assignedTo":"vladima","body":"**Problem**\r\n\r\nCurrent module resolution logic is roughly based on Node module loading logic however not all aspects of Node specific module loading were implemented. Also this approach does not really play well with scenarios like RequireJS\\ES6 styl","comments":83,"createdAt":1426226124000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2338,"state":"open","title":"External module resolution logic","updatedAt":1437500091000},{"assignedTo":"mhegazy","body":"I have an interface that is supposed to have a function signature of:\r\n\r\n    (param: {prop: boolean}): any\r\n\r\nbut I forget the parameter name (I'm not sure if this signature is considered valid):\r\n\r\n    ({prop: boolean}): any\r\n\r\nWhen compiling this i","comments":5,"createdAt":1437155389000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3348363?v=3","loggedByName":"uber5001","milestone":"TypeScript 1.7","number":3912,"state":"open","title":"tsc produces invalid typings for parameter destructuring","updatedAt":1437498871000},{"assignedTo":"","body":"I've taken a project I was working on from the 1.5 beta, and simply switched from CommonJS modules to System. I now seem to be getting the title error on startup which suggests something is perhaps amiss in the output?\r\n\r\nI've not managed to create a","comments":6,"createdAt":1437426903000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4442179?v=3","loggedByName":"jamiewinder","milestone":"","number":3937,"state":"closed","title":"Multiple anonymous System.register calls in the same module file.","updatedAt":1437498080000},{"assignedTo":"","body":"I've just updated from 1.4.1 to 1.5.3 and my compiler doesn't want to compile that kind of code.\r\n\r\n```\r\n        if (window.addEventListener) {\r\n            addEventListener(\"message\", callback, false);\r\n        } else {\r\n            // CompatibilitÃ©","comments":6,"createdAt":1437493306000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3807458?v=3","loggedByName":"Vadorequest","milestone":"TypeScript 1.5","number":3953,"state":"closed","title":"TS 1.5.3 - Property 'attachEvent' does not exist on type 'Window'","updatedAt":1437497684000},{"assignedTo":"CyrusNajmabadi","body":"Hi,\r\n\r\n**Version**: VS 2015 RTM/TS 1.5\r\n\r\nIn the image below the `string` and `number` should be coloured in the last two lines:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1106823/8804611/01903e22-2fc5-11e5-947c-794c2d07b7e3.png)\r\n","comments":1,"createdAt":1437492339000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.6","number":3951,"state":"open","title":"Primitives not colourised in generic position","updatedAt":1437497636000},{"assignedTo":"","body":"If you have an interface describing a call signature (e.g. `Func<A, R>` above), assignability with generics seems to be a bit weird. It seems you can assign a `(...args: A[]) => R` to a `Func<A, R>`, but not to a `T` extending `Func<A, R>`. \r\n\r\nPleas","comments":1,"createdAt":1437281053000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3674056?v=3","loggedByName":"masaeedu","milestone":"","number":3925,"state":"closed","title":"Function is assignable to interface describing call signature, but not to generic T extending interface","updatedAt":1437496908000},{"assignedTo":"jonathandturner","body":"Please fill the following out:\r\n\r\n- Name: Parle\r\n- Homepage url: http://getparle.com\r\n- Brand Guidelines/Licensing: None\r\n- Logo: https://www.dropbox.com/s/702ttxds3tndsfm/logo.png?dl=0\r\n\r\n> Example:\r\n>\r\n> Name: Microsoft\r\n> Homepage url: https://mic","comments":0,"createdAt":1437127428000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/206640?v=3","loggedByName":"ziahamza","milestone":"","number":3905,"state":"closed","title":"New Website Logo: Parle","updatedAt":1437496569000},{"assignedTo":"jonathandturner","body":"- Name: MediaMonks\r\n- Homepage url: http://www.mediamonks.com/\r\n- Brand Guidelines/Licensing: https://drive.google.com/file/d/0B6BWXqdAnPcJd3NiOE54WFRhMTQ/view?usp=sharing\r\n- Logo: https://drive.google.com/file/d/0B6BWXqdAnPcJd2Z4TGJsTXZ0S2M/view?usp","comments":0,"createdAt":1436979124000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8170192?v=3","loggedByName":"mm-devmonk","milestone":"","number":3869,"state":"closed","title":"New Website Logo: MediaMonks","updatedAt":1437496569000},{"assignedTo":"jonathandturner","body":"- Name: bet365\r\n- Homepage url: http://www.bet365.com/\r\n- Brand Guidelines/Licensing: - \r\n- Logo: https://upload.wikimedia.org/wikipedia/commons/d/dc/Bet365_Logo.svg\r\n\r\nWe converted our sports in-play product to TypeScript earlier this year. Thanks.\r","comments":0,"createdAt":1436804095000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6867511?v=3","loggedByName":"kungfusheep","milestone":"","number":3839,"state":"closed","title":"New Website Logo: bet365","updatedAt":1437496569000},{"assignedTo":"jonathandturner","body":"- Name: Vandaw\r\n- Homepage url: http://vandaw.com\r\n- Logo: http://vandaw.com/logo-header.svg\r\n\r\nthanks.","comments":1,"createdAt":1435403130000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1578360?v=3","loggedByName":"mehrdd","milestone":"","number":3659,"state":"closed","title":"New Website Logo: Vandaw","updatedAt":1437496568000},{"assignedTo":"","body":"Please fill the following out:\r\n\r\n- Name: Basware\r\n- Homepage url: www.basware.com\r\n- Brand Guidelines/Licensing: \r\n- Logo: http://www.basware.com/elqNow/elqRedir.htm?ref=http://www.basware.com/sites/default/files/upload/basware_logo_rgb.jpg\r\n\r\n","comments":2,"createdAt":1431511197000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/12392987?v=3","loggedByName":"jaria","milestone":"","number":3146,"state":"closed","title":"New Website Logo: Basware","updatedAt":1437496568000},{"assignedTo":"jonathandturner","body":"Please fill the following out:\r\n\r\n- Name: bitHound\r\n- Homepage url: https://bithound.io\r\n- Brand Guidelines/Licensing: Please feel free to use as you see fit, we only ask that you do not modify the colours or the aspect ratio.\r\n- Logo: since we canno","comments":0,"createdAt":1435859785000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/366327?v=3","loggedByName":"dansilivestru","milestone":"","number":3713,"state":"closed","title":"New Website Logo: bitHound","updatedAt":1437496568000},{"assignedTo":"jonathandturner","body":"- Name: HexEd.it\r\n- Homepage url: https://hexed.it\r\n- Brand Guidelines/Licensing: N/A\r\n- Logo: https://hexed.it/img/logo.svg\r\n\r\nHexEd.it is an online hex editor running in the web browser, which is built using TypeScript.","comments":2,"createdAt":1436377670000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4883142?v=3","loggedByName":"jens-duttke","milestone":"","number":3783,"state":"closed","title":"New Website Logo: HexEd.it","updatedAt":1437496568000},{"assignedTo":"jonathandturner","body":"Please fill the following out:\r\n\r\n- Name: Expensya\r\n- Homepage url: http://www.expensya.com\r\n- Brand Guidelines/Licensing: Go ahead, we want you to add the logo :)\r\n- Logo: https://notefraistest.blob.core.windows.net/emails/Expensya.png\r\n","comments":1,"createdAt":1434747591000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8082095?v=3","loggedByName":"karimjouini","milestone":"","number":3574,"state":"closed","title":"New Website Logo: Expensya","updatedAt":1437496568000},{"assignedTo":"","body":"just got VS 2015 RTM now but the tsconfig is not working. and when you change module system it just does not work. it defaults to commonjs. and if you remove TypeScriptModuleKind it cannot compile without --module flag","comments":1,"createdAt":1437434783000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8157594?v=3","loggedByName":"afaayerhan","milestone":"","number":3941,"state":"closed","title":"tsconfig not working in Visual studio 2015 RTM njsproj ","updatedAt":1437496390000},{"assignedTo":"vladima","body":"Hi,\r\n\r\n**VS**: 2015 CTP 5\r\n\r\nOccasionally when editing a TypeScript file the save (Cntrl+S) fails to work. The asterisk next to the file name on the tab doesn't go away.\r\n\r\nAttempting to close the offending file causes the following to pop up:\r\n\r\n![i","comments":24,"createdAt":1427832953000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5.3","number":2566,"state":"closed","title":"VS 2015 occasional file save failure when editing TypeScript files","updatedAt":1437495668000},{"assignedTo":"","body":"I can not apply combinators to prototype. A combinator is a function that takes a function and returns another function. I use these to divide up functionality. I can use them in TypeScript, but they do not go on the prototype. I struggled to get the","comments":2,"createdAt":1437419122000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4006417?v=3","loggedByName":"willseitz","milestone":"","number":3933,"state":"closed","title":"Unable to use combinators on prototypes.","updatedAt":1437493791000},{"assignedTo":"","body":"The 'Content-Length' value returned by TSServer does not take into account that newlines on Windows are two characters `\\r\\n` instead of `\\n`. The issue was found in PR Valloric/ycmd#156.\r\n\r\nHere's a minimal example. Create a dummy `test.ts` file and","comments":2,"createdAt":1433616637000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10026824?v=3","loggedByName":"micbou","milestone":"","number":3403,"state":"open","title":"'Content-Length' value returned by TSServer is one off on Windows","updatedAt":1437485164000},{"assignedTo":"","body":"I currently have a setup something like this:\r\n`A.ts`\r\n```typescript\r\nmodule mod {\r\n  export class A {\r\n  }\r\n}\r\n```\r\n`B.ts`\r\n```typescript\r\n/// <reference path=\"A.ts\" />\r\nmodule mod.A {\r\n  export class B extends A {\r\n  }\r\n}\r\n```\r\nBut I'm getting the ","comments":5,"createdAt":1436488325000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1279939?v=3","loggedByName":"dbeckwith","milestone":"","number":3802,"state":"open","title":"Support merging classes and modules across files","updatedAt":1437484817000},{"assignedTo":"","body":"Is it possible to compile whole project to one file with `--out` when using ES6 modules? I've just completed a huge refactoring to find out that each file is compiled independently and one specified with `--out` is empty.\r\n\r\nSmall example:\r\n*a.ts*\r\n`","comments":6,"createdAt":1432035165000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4673386?v=3","loggedByName":"filipstachura","milestone":"","number":3214,"state":"closed","title":"Using --out with ES6 modules","updatedAt":1437471730000},{"assignedTo":"","body":"Fix issue #3168 ","comments":1,"createdAt":1437460481000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3946,"state":"open","title":"Fix resolution when block-scoped variable names collide with those of other entities","updatedAt":1437463402000},{"assignedTo":"","body":"Added null-check in [emitSerializedTypeNode](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/emitter.ts#L4846)\r\nAll jake tests passed successfully.\r\n\r\n*Edit by @DanielRosenwasser:* Fixes #3932.","comments":4,"createdAt":1437420966000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10360978?v=3","loggedByName":"pcan","milestone":"","number":3935,"state":"open","title":"Added null-check in 'emitSerializedTypeNode'","updatedAt":1437462440000},{"assignedTo":"jonathandturner","body":"- Name:  Rayvarz Software Engineering Co.\r\n- Homepage url: http://en.rayvarz.com/\r\n- Brand Guidelines/Licensing: http://en.rayvarz.com/about-rayvarz\r\n- Logo: http://oi62.tinypic.com/3syo7.jpg\r\n","comments":5,"createdAt":1433582366000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10137?v=3","loggedByName":"ghost","milestone":"","number":3400,"state":"open","title":"New Website Logo: Rayvarz Software Engineering Co.","updatedAt":1437460914000},{"assignedTo":"","body":"I just downloaded VS2015 RTM and opened a project that I've been working on in VS2013.\r\n\r\nWhen I save a file, all I see is an error:\r\n\r\n    Failed to save file 'compiled.js'.\r\n\r\nwhere `compiled.js` is the `--out` argument, as indicated in the project","comments":1,"createdAt":1437453742000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1388219?v=3","loggedByName":"chinhodado","milestone":"","number":3943,"state":"closed","title":"VS2015 RTM: \"Failed to save file\" error","updatedAt":1437457092000},{"assignedTo":"","body":"Using the new ES6 module syntax with 1.5.0-beta, this compiles, but shouldn't:\r\n\r\n```typescript\r\n/// <reference path=\"lodash.d.ts\" />\r\nimport { pad } from 'lodash'\r\n\r\nconsole.log(pad('abc', 8));\r\nconsole.log(_.pad('abc', 8)); // BAD: This shouldn't c","comments":4,"createdAt":1436493593000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4791?v=3","loggedByName":"duncanmak","milestone":"","number":3806,"state":"closed","title":"ES6 module syntax brings in un-imported bindings","updatedAt":1437449286000},{"assignedTo":"","body":"Fixes issue #3903 ","comments":0,"createdAt":1437443554000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3942,"state":"open","title":"Fix crash when the element instance type was undefined","updatedAt":1437443556000},{"assignedTo":"","body":"I removed the resolveLocation function from the checker. I fixed all resulting regressions in what I think are better ways.\r\n\r\nTwo side effects of my change\r\n\r\n1. I cleaned up pushTypeResolution a bit, so now it should be easier to understand and use","comments":2,"createdAt":1437179452000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3919,"state":"closed","title":"Remove resolveLocation from the checker","updatedAt":1437439466000},{"assignedTo":"paulvanbrenk","body":"I am trying to give options to typescript namely trying tell how to load modules from VS. For new ASP.NET 5 templates this option simply not available, worse typescript 1.5 does not honor tsconfig.json either so what should I do ?","comments":14,"createdAt":1431403962000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4114592?v=3","loggedByName":"ReverseBlade","milestone":"TypeScript 1.5.3","number":3124,"state":"closed","title":"tsconfig.json does not work with VS 2015","updatedAt":1437436673000},{"assignedTo":"RyanCavanaugh","body":"Compiling the following TSX code crashes `tsc` (1.5.3, revision 01244d60):\r\n\r\n```typescript\r\n/// <reference path=\"typings/react/react.d.ts\" />\r\nimport React = require('react');\r\n\r\ndeclare module BaseComponent {\r\n    var base : React.Component<any, {}","comments":3,"createdAt":1437103731000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1745813?v=3","loggedByName":"bluekeyes","milestone":"TypeScript 1.6","number":3903,"state":"open","title":"TSX: \"TypeError: Cannot read property 'flags' of undefined\"","updatedAt":1437436402000},{"assignedTo":"paulvanbrenk","body":"The installer runs completely but it does not integrate with VS 2013. I tried all the previous versions but in vain. I looked in https://github.com/Microsoft/TypeScript/issues/1162 thread and it still does not seem to be fixed in 1.5 Beta version. Ca","comments":5,"createdAt":1434104385000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/12858906?v=3","loggedByName":"Mustafa-Sadikot","milestone":"","number":3487,"state":"closed","title":"Cannot integrate TypeScript_15beta_Dev12 with VS 2013","updatedAt":1437434628000},{"assignedTo":"paulvanbrenk","body":"In VS 2015 RC, I ran into some .ts files build issues after upgrading to the Typescript 1.5 beta (and upgrading the .proj file target to 1.5).  So I decided to roll back, uninstalling the 2015/1.5 from the control panel (the only beta VS version I in","comments":5,"createdAt":1431110517000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8322472?v=3","loggedByName":"Gitgiddy","milestone":"TypeScript 1.6","number":3090,"state":"closed","title":"Rollback to 1.4 not working","updatedAt":1437434566000},{"assignedTo":"","body":"Hi team,\r\n\r\nThanks a lot for providing an official NPM package. That certainly comes in handy when building web apps on a lot of platforms.\r\n\r\nHowever a lot of projects are using TypeScript in conjunction with Asp.NET and those projects typically alr","comments":0,"createdAt":1437433176000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2036949?v=3","loggedByName":"bsouid","milestone":"","number":3940,"state":"open","title":"Provide official NuGet versions packages","updatedAt":1437434107000},{"assignedTo":"DanielRosenwasser","body":"Hi,\r\n\r\n**VS**: 2013 Update 4 RC\r\n**TS**: 1.3\r\n\r\n![commarepro](https://cloud.githubusercontent.com/assets/1106823/5028095/ddad465e-6b2e-11e4-9767-210984b40bb3.gif)\r\n\r\nAlso occurs with `(` and `<`","comments":10,"createdAt":1415881055000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.6","number":1150,"state":"open","title":"Unnecessary parameter info for commas and opening parenthesis within strings","updatedAt":1437430386000},{"assignedTo":"","body":"in VS2015 (beta and release) when editing a string, if I type an open parenthesis the intellisense function signature pop-up opens.\r\n\r\ne.g.\r\n```\r\nconsole.log(\"hello\"); \r\n```\r\nediting in `\"hello(\"` causes `log([message: any)` to be displayed.\r\n\r\n","comments":1,"createdAt":1437422140000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2598443?v=3","loggedByName":"nippur72","milestone":"","number":3936,"state":"closed","title":"[VS2015] Intellisense opens when typing \"(\" within a string","updatedAt":1437425534000},{"assignedTo":"","body":"Hi. Great to see TS 1.5 finally released! Quick question which doesn't seem to be covered by the announcement / blog posts:\r\n\r\nI see decorators have been hidden behind a compiler flag (experimentalDecorators). How can I specify this for a Visual Stud","comments":1,"createdAt":1437420589000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4442179?v=3","loggedByName":"jamiewinder","milestone":"","number":3934,"state":"open","title":"experimentalDecorators in Visual Studio","updatedAt":1437422309000},{"assignedTo":"","body":"Users who provided a parameter of any other sort (e.g. booleans) didn't affect the result, and the documentation really just expects `number` and `string`.","comments":2,"createdAt":1436994371000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3879,"state":"closed","title":"Make JSON.stringify's 'space' parameter have type 'string | number'.","updatedAt":1437422112000},{"assignedTo":"","body":"The definition for `addEventListener` is on point. The definition for `removeEventListener` should essentially copy it.","comments":6,"createdAt":1436985708000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1834919?v=3","loggedByName":"lilred","milestone":"","number":3871,"state":"open","title":"window.removeEventListener needs specialized signatures like addEventListener","updatedAt":1437421226000},{"assignedTo":"mhegazy","body":"- [ ] [6.1.5.1](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-well-known-symbols) - Add built in symbols to `SymbolConstructor`: `match`, `replace`, `search`, `species`, `split` (from #2524). \r\n- [ ] [19.2.3](https://people.mozilla.org/~j","comments":1,"createdAt":1429747552000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"TypeScript 1.6","number":2881,"state":"open","title":"Update es6.d.ts for final draft of ES6 specification","updatedAt":1437421150000},{"assignedTo":"","body":"Fix one of the issues listed in #2881.","comments":2,"createdAt":1437216188000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3130879?v=3","loggedByName":"kimamula","milestone":"","number":3923,"state":"closed","title":"Add includes method to String interface, and remove contains","updatedAt":1437421137000},{"assignedTo":"","body":"Logically - this followed from the `\"completionEntryDetails\"` command taking an array of string names as its argument. This can be an issue in situations like so:\r\n```ts\r\nfunction get() {}\r\nclass A {\r\n    ge\r\n}\r\n```\r\n`ge` can be validly completed wit","comments":1,"createdAt":1437203782000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2932786?v=3","loggedByName":"weswigham","milestone":"","number":3921,"state":"closed","title":"TypeScript language service completion details command cannot handle multiple results with the same name","updatedAt":1437420477000},{"assignedTo":"rbuckton","body":"I'm trying to emit metadata for the following class:\r\n\r\n```\r\n@Component()\r\nexport class MyClass {\r\n\r\n    constructor(test: string, test2: string) {\r\n\r\n    }\r\n\r\n    @log\r\n    doSomething() {\r\n\r\n    }\r\n}\r\n\r\n\r\nfunction log(target: Object, key: string, v","comments":1,"createdAt":1437417895000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10360978?v=3","loggedByName":"pcan","milestone":"TypeScript 1.6","number":3932,"state":"open","title":"[Emitter] Cannot read property 'kind' of undefined ","updatedAt":1437419592000},{"assignedTo":"","body":"This used to be on codeplex and I cannot find a reference here. \r\n\r\nhttps://typescript.codeplex.com/workitem/917\r\n\r\nThe problem is that I have project.d.ts and lets say that it has a Point class with simple {x,y} properties. \r\n\r\nproject-plugin-coolve","comments":8,"createdAt":1412378176000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4239553?v=3","loggedByName":"clark-stevenson","milestone":"","number":819,"state":"open","title":"Make class / variable declarations open ended","updatedAt":1437418795000},{"assignedTo":"","body":"```TypeScript\r\ninterface I {\r\n    /*def*/property: string;\r\n}\r\n\r\nlet x: I;\r\nlet { /*use*/property } = x;\r\n```\r\n\r\nGo to definition on `use` doesn't currently take us to `def`; it instead jumps back to `use`.\r\n\r\nLikewise, find all references on `use` s","comments":2,"createdAt":1437004868000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3885,"state":"open","title":"GoToDef/FindAllRefs for object binding elements do not trace back to their defining property","updatedAt":1437416950000},{"assignedTo":"","body":"Hi, \r\nwhen using ES6 module spec and try to generate ES5 code, the compiler invite me to specify a module type for the output : amd|commonjs. Is it possible to add ignore like in babeljs so we can concatenate output into a single file without having ","comments":6,"createdAt":1432890691000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8625845?v=3","loggedByName":"bidiboom","milestone":"","number":3300,"state":"open","title":"add module:ignore option","updatedAt":1437416780000},{"assignedTo":"","body":"Add support for things like\r\n```ts\r\nvar { [\"some\" + \"Name\"]: x } = { [\"some\" + \"Name\"]: 0 };\r\n```\r\n\r\nIn variables, parameters, and assignments.\r\n\r\nThis involves parsing, type check and emitting in ES6. Also, eventually we will need to support Symbols","comments":0,"createdAt":1422480831000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":1838,"state":"open","title":"Support computed properties in destructuring patterns","updatedAt":1437416054000},{"assignedTo":"","body":"I think a way to mark and/or infer a function as having no state would be extremely beneficial for code optimization. If a function incurs no state, there are a variety of optimizations that can be applied to it that otherwise couldn't be done. Also,","comments":16,"createdAt":1436999052000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4483844?v=3","loggedByName":"impinball","milestone":"","number":3882,"state":"open","title":"Mark/infer a function or property as pure/stateless","updatedAt":1437415683000},{"assignedTo":"","body":"Eg, we should allow\r\n```ts\r\nconst enum Foo {\r\n\tA = \"2\",\r\n\tB = \"3\"\r\n}\r\n```\r\nand compile it as we do numerical const enums. \r\nRight now static classes end up getting used for this and don't get typechecked as an enum type - using an string enum clarifi","comments":1,"createdAt":1437206965000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2932786?v=3","loggedByName":"weswigham","milestone":"","number":3922,"state":"closed","title":"Support inlining strings/const enum string types","updatedAt":1437415583000},{"assignedTo":"","body":"A string enum is inferred by looking at the constant value of the initializer of its first member:\r\n```\r\nenum stringsInferred {\r\n   a = \"a\",\r\n   b, // \"b\"\r\n   c  // \"c\"\r\n}\r\n```\r\nOr it is declared using a string index:\r\n```\r\nenum stringsDeclared {\r\n  ","comments":11,"createdAt":1431871836000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3192,"state":"open","title":"Proposal: String enums","updatedAt":1437415558000},{"assignedTo":"","body":"Hi all,\r\n\r\nI'm wondering what the best approach is to this particular problem. I have a suggested approach, but hoped there might be a better more \"out-of-the-box\" solution.\r\n\r\nEssentially I am trying to do the following:\r\n\r\nCreate two npm projects: ","comments":3,"createdAt":1433784514000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/825421?v=3","loggedByName":"christyharagan","milestone":"","number":3421,"state":"open","title":"Import/Export TypeScript 1.5 modules from different npms","updatedAt":1437414245000},{"assignedTo":"CyrusNajmabadi","body":"### Context\r\nI have solution with multiple CsProj files. Each project has multiple TypeScript files that are generated to single JS and .d.ts.\r\nNo \"Core\" projects reference \"Core.d.ts\". The build is triggered from command line in same time, when solu","comments":17,"createdAt":1431954800000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1898040?v=3","loggedByName":"wgebczyk","milestone":"TypeScript 1.6","number":3198,"state":"open","title":"VS 2013 hangs when building in parallel process TS files","updatedAt":1437412072000},{"assignedTo":"vladima","body":"Hello,\r\n\r\nI am currently working on a project that uses Typescript on the client side. We have currently around 280k lines of typescript code in our VS2013  ASP.net MVC project.\r\n\r\nThe issue we have is that if we work with typescript, after around 2 ","comments":18,"createdAt":1433751761000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4697707?v=3","loggedByName":"jcchalte","milestone":"TypeScript 1.6","number":3412,"state":"open","title":"VS 2013 editor : CPU at 100% and memory leaks","updatedAt":1437412061000},{"assignedTo":"jonathandturner","body":"test.ts (double `\\\\` in template)\r\n```TypeScript\r\nconsole.log(`a\\\\tb`);\r\n```\r\ntsc 1.4.1 -> test.js (single `\\` in result)\r\n```JavaScript\r\nconsole.log(\"a\\tb\");\r\n```\r\ntsc 1.5.0-beta -> test.js (double `\\\\` in result)\r\n```JavaScript\r\nconsole.log(\"a\\\\tb\"","comments":2,"createdAt":1437058955000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/185374?v=3","loggedByName":"Artazor","milestone":"TypeScript 1.5","number":3891,"state":"open","title":"Different compile results on 1.4.1 and 1.5.0-beta","updatedAt":1437411824000},{"assignedTo":"","body":"(Sorry if this has been reported before. Darn hard to search.)\r\n\r\n```\r\nclass A {\r\n    constructor(public ...x: any[]) {}\r\n}\r\n```\r\n\r\nDoesn't work","comments":1,"createdAt":1437406455000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1662412?v=3","loggedByName":"billccn","milestone":"","number":3931,"state":"closed","title":"Property and rest parameter?","updatedAt":1437411690000},{"assignedTo":"","body":"I am writing a JavaScript library using TypeScript, which requires the generated code to be as short as possible.\r\n\r\nHowever, when I write a class with hundreds of methods, the generated code contains hundreds of \"someclass.prototype\" in the method d","comments":1,"createdAt":1437384614000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/13414889?v=3","loggedByName":"JiajieBao","milestone":"","number":3929,"state":"closed","title":"Got too many \".prototype\" in the generated JavaScript code","updatedAt":1437411555000},{"assignedTo":"","body":"The following snippet is valid, as far as I know:\r\n```ts\r\nexport interface User {\r\n\twpUserID: string;\r\n}\r\n```\r\n\r\nThe following snippet is also valid, but does not compile, but probably should:\r\n```ts\r\nexport default interface User {\r\n\twpUserID: strin","comments":3,"createdAt":1437156510000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/654598?v=3","loggedByName":"LPGhatguy","milestone":"","number":3914,"state":"open","title":"Allow export default interface","updatedAt":1437410655000},{"assignedTo":"yuit","body":"Specifying the argument (`$ tsc --removeComments`) or option in (`tsconfig.json`) for removing comments is not honoured.\r\n\r\nNormal comments are removed, but special comments, like `references` and `amd dependencies`, are preserved.\r\n\r\n```javascript\r\n","comments":8,"createdAt":1432751863000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1087376?v=3","loggedByName":"milkshakeuk","milestone":"TypeScript 1.6","number":3283,"state":"open","title":"removeComments compiler option seems to be ignored when using typescript 1.5.0-beta","updatedAt":1437409622000},{"assignedTo":"","body":"Hi there, I come from a C# background and it has something great call Object Initializer. Which allows you to initialize an object inline, without specifying the object everytime.\r\n\r\nC# docs:\r\nhttps://msdn.microsoft.com/en-us/library/bb397680.aspx\r\n\r","comments":3,"createdAt":1437071217000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5748554?v=3","loggedByName":"siulung4073","milestone":"","number":3895,"state":"closed","title":"[New Feature] Initialize Classes by Using an Object Initializer","updatedAt":1437400285000},{"assignedTo":"","body":"Since any valid JS file is supposed to be a valid TS file too it should be possible to use a standard babelified webapp project and just switch it to use TS (e.g using tsify). Sadly that is not possible right now   since there are some issues on requ","comments":2,"createdAt":1437135364000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/231889?v=3","loggedByName":"matthiasg","milestone":"","number":3909,"state":"open","title":"Official Browserify plugin ?","updatedAt":1437372890000},{"assignedTo":"","body":"The following code compiles.\r\n\r\n```typescript\r\nfunction myFunction(arg1:string, arg2:(msg:string)=>void){\r\n\t// do stuff\r\n}\r\nvar args = [\"hello\", function(msg){ /* do stuff */ }];\r\nmyFunction.apply(myFunction, args);\r\n```\r\n\r\nBut the following code doe","comments":4,"createdAt":1437252846000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2059203?v=3","loggedByName":"vote539","milestone":"","number":3924,"state":"closed","title":"Bug with apply+concat and a function argument?","updatedAt":1437357956000},{"assignedTo":"","body":"Hi,\r\n\r\nJust curious as to the reasoning behind `Object.create` having a return value of type `any` in lib.d.ts.\r\n\r\nWouldn't this make more sense?\r\n\r\n```create<T extends A>(o: A, properties?: PropertyDescriptorMap): T;```\r\n\r\nsince the returned object ","comments":8,"createdAt":1436969610000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489010?v=3","loggedByName":"matthewjh","milestone":"","number":3865,"state":"open","title":"Object.create return type","updatedAt":1437338571000},{"assignedTo":"","body":"TypeScript currently supports accessor (get/set) properties, but ECMAScript 5 also allows value properties to be defined.\r\n\r\n<code>\r\nObject.defineProperty(o, p, {\r\n    value: n,\r\n    enumerable: true,\r\n    configurable: false\r\n});\r\n</code>\r\n\r\nWill Ty","comments":12,"createdAt":1429047438000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9935122?v=3","loggedByName":"series0ne","milestone":"","number":2763,"state":"open","title":"Value properties","updatedAt":1437317728000},{"assignedTo":"","body":"I couldn't find more information on this bug by googling, so I will assume this is rather unusual.\r\n\r\nWhile this doesn't ruin the compiling (thank you for that well thought design of \"ignoring\" errors when emitting), it is mostly an aesthetic issue.\r","comments":0,"createdAt":1437305230000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/169035?v=3","loggedByName":"Mamsaac","milestone":"","number":3926,"state":"closed","title":"Property 'captureStackTrace' does not exist on type 'ErrorConstructor'.","updatedAt":1437305998000},{"assignedTo":"","body":"Was just chatting with @JsonFreeman about how we might model mixins, and we came across an interesting snag.\r\n\r\nLet's say we want to make something that represents the combination of two classes:\r\n```TypeScript\r\nclass C {\r\n  constructor(public a: num","comments":5,"createdAt":1437158852000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":3916,"state":"closed","title":"Intersection of constructor signatures","updatedAt":1437254287000},{"assignedTo":"","body":"Are there any best practices in how to extend an existing Angular/Browserify application with Typescript ?\r\n\r\nMy main issue is that Angular uses DI but Typescript seems to remove code that is just imported but not used (and depending on future optimi","comments":2,"createdAt":1437130274000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/231889?v=3","loggedByName":"matthiasg","milestone":"","number":3907,"state":"open","title":"How to integrate into current angular workflow","updatedAt":1437224016000},{"assignedTo":"","body":"```typescript\r\nreturn (\r\n    h.div({\r\n        className: \"view-node-row\",\r\n        style: {\r\n            width: width,\r\n            height: rowHeight\r\n        }\r\n    },\r\n        backgroundElement,\r\n        centerElement,\r\n        toolsElement,\r\n     ","comments":1,"createdAt":1436633737000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":3827,"state":"open","title":"Fix child element indentation in multiline lists","updatedAt":1437217052000},{"assignedTo":"","body":"Suppose I want to make a class with tons of chainable methods, like setters. This works fine. \r\n\r\n```ts\r\n\r\nclass Chainable {\r\n  public set1(arg) {\r\n    this.arg1 = arg;\r\n    return this;\r\n  } \r\n  \r\n  public set2(arg) {\r\n    this.arg2 = arg;\r\n    retu","comments":9,"createdAt":1406587051000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1400023?v=3","loggedByName":"danmane","milestone":"","number":275,"state":"open","title":"Return type of inherited methods breaks function chaining","updatedAt":1437208694000},{"assignedTo":"","body":"The below code raise an compilation error, which says \"Property 'includes' does not exist on type 'string'.\", even with the \"--target es6\" option.\r\n\r\n```\r\n\"abcde\".includes(\"cd\");\r\n```\r\n\r\nIt is likely that \"contains\" function defined in String interfa","comments":1,"createdAt":1437202354000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3130879?v=3","loggedByName":"kimamula","milestone":"","number":3920,"state":"closed","title":"ES6 String interface lacks definition of 'includes'","updatedAt":1437205317000},{"assignedTo":"","body":"The tsserver drops responses for requests that doesn't compute a valid value. An example is quickInfo request for a boolean literal (true, false). The actual quickInfo result is undefined which leads to no response send.\r\n\r\nThis is a regression and w","comments":4,"createdAt":1437033786000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"TypeScript 1.6","number":3887,"state":"closed","title":"tsserver drops responses","updatedAt":1437201531000},{"assignedTo":"","body":"The compiler should allow shebangs to pass through.\r\n\r\nhttp://stackoverflow.com/questions/23298295/how-to-make-a-shell-executable-node-file-using-typescript","comments":26,"createdAt":1428958892000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3292874?v=3","loggedByName":"jdfreder","milestone":"","number":2749,"state":"open","title":"Typescript aborts on shebang.","updatedAt":1437193349000},{"assignedTo":"","body":"Hi,\r\n\r\nI was recently surprised to see that TypeScript 1.5 (using ntypescript, so recent master) doesn't support transpiling down to ES5 the separate scope functionality of ES6 when using a for loop with a let-initialized iterator.\r\n\r\nFor example:\r\n`","comments":5,"createdAt":1437157057000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3755379?v=3","loggedByName":"nycdotnet","milestone":"","number":3915,"state":"open","title":"Transpile separate scope in each for loop iteration with let and ES5","updatedAt":1437176799000},{"assignedTo":"","body":"Fixes #2378.\r\n\r\nThe problem is that if a type parameter has already been given a type in the process of type argument inference, and caused type parameters to be fixed, we don't consistently fix the type parameters on a subsequent visit. See the bug ","comments":2,"createdAt":1436401161000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3787,"state":"closed","title":"Fix type parameters upon subsequent visits to a parameter that caused fixing the first time","updatedAt":1437174328000},{"assignedTo":"JsonFreeman","body":"As of change #2356, the following code gives the correct result in the batch compiler:\r\n```ts\r\ndeclare function f<T>(x: T, y: (p: T) => T, z: (p: T) => T): T;\r\nf(0, x => null, x => x.blahblah);\r\n```\r\nNamely, we infer T to be number, and we get an err","comments":8,"createdAt":1426546869000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/in%20progress","name":"in progress","color":"ededed"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":2378,"state":"closed","title":"Type parameters do not get fixed when the compiler visits the same signature multiple times","updatedAt":1437174328000},{"assignedTo":"","body":"Pull Request here: https://github.com/Microsoft/TypeScript/pull/2646\r\n\r\n## Problem\r\n\r\nProviding a good JavaScript editing experience in a cross-platform/cross-editor manner is challenging.  JavaScript is a highly dynamic language, and users may write","comments":4,"createdAt":1429909880000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2913,"state":"open","title":"Proposal for JSDoc comment support to inform a better JavaScript editing experience.","updatedAt":1437173935000},{"assignedTo":"","body":"fix issue #3884","comments":2,"createdAt":1437173124000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3918,"state":"open","title":"Change the type of window.orientation to number","updatedAt":1437173593000},{"assignedTo":"","body":"Adding `// @Filename: tsconfig.json` to a fourslash test makes no effect. The reason is we are using `ts.readConfigFile()` which reads the config file from disk. Change to `this.host.readFile()` instead.","comments":4,"createdAt":1437116492000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1707813?v=3","loggedByName":"hoanhtien","milestone":"","number":3904,"state":"open","title":"Fix bug: fourslash test does not recognize tsconfig.json.","updatedAt":1437172799000},{"assignedTo":"JsonFreeman","body":"```typescript\r\n// if there's an `any` there in tuple, all the elements fallback to any.\r\nvar [a, b]: [number, any] = [undefined, undefined]; \r\n```","comments":2,"createdAt":1435567231000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"TypeScript 1.6","number":3668,"state":"closed","title":"Array destructuring suggests type `any` when it should be more specific.","updatedAt":1437168166000},{"assignedTo":"","body":"Fixes #3668.\r\n\r\nWe had a piece of code that makes all destructuring binding elements any if at least one of the types should be any. That is wrong, so I'm removing that check.","comments":1,"createdAt":1437098893000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3902,"state":"closed","title":"Don't fall back to any when typing tuples","updatedAt":1437168153000},{"assignedTo":"","body":"Courtesy of @LPGhatguy in #3914.\r\n\r\nInstead of going off the rails, we should resiliently parse the following:\r\n\r\n```TypeScript\r\nexport default interface User {\r\n    hi: string;\r\n}\r\n```\r\n\r\nAnd give an error like\r\n\r\n```\r\nAn 'interface' declaration can","comments":2,"createdAt":1437167440000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3917,"state":"open","title":"Emit a better warning when default-exporting an inappropriate declaration","updatedAt":1437167599000},{"assignedTo":"","body":"```\r\nexport default abstract class B {\r\n    \r\n}\r\n```\r\n\r\nBy the way, the same with\r\n```\r\nexport default declare class B {\r\n    \r\n}\r\n```\r\n\r\nSeems to be a parser bug","comments":4,"createdAt":1436440300000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"","number":3792,"state":"open","title":"Cannot 'export default' abstract or ambient class","updatedAt":1437167467000},{"assignedTo":"DanielRosenwasser","body":"The following code:\r\n```typescript\r\nvar a: any;\r\n\r\n({} = a);\r\n([] = a);\r\n\r\n({}) => { };\r\n([]) => { };\r\n```\r\n\r\nOutputs empty lists:\r\n```\r\nvar a;\r\n(, a);\r\n(, a);\r\n(function (_a) {\r\n    var ;\r\n});\r\n(function (_a) {\r\n    var ;\r\n});\r\n```","comments":5,"createdAt":1437067512000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/194893?v=3","loggedByName":"gustavderdrache","milestone":"TypeScript 1.6","number":3893,"state":"closed","title":"Empty destructuring pattern emits invalid JS","updatedAt":1437167045000},{"assignedTo":"","body":"Fixes #3893","comments":2,"createdAt":1437093774000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3900,"state":"closed","title":"Properly emit empty assignment patterns","updatedAt":1437167013000},{"assignedTo":"","body":"The `resolveEntityName` function used by both `emitExpressionIdentifier` and `getTypeReferenceSerializationKind` always resolves the entity name using itself as the location. As a result, if there is a parameter declaration that has the same name as ","comments":1,"createdAt":1437085231000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3899,"state":"open","title":"Fix emit for decorator type metadata.","updatedAt":1437162402000},{"assignedTo":"","body":"It would be nice to have a compiler flag/annotation which would prevent the compiler from using implicit interfaces.\r\n\r\nThis follows the spirit of this [excellent paper](http://janvitek.github.io/pubs/ecoop15a.pdf), which proposes an extension for Ty","comments":9,"createdAt":1437141532000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5057342?v=3","loggedByName":"gravidThoughts","milestone":"","number":3910,"state":"closed","title":"Opting Out of Implicit Interfaces","updatedAt":1437160832000},{"assignedTo":"","body":"To better align with ES6 modules as suggested in #2159, this PR introduces a new `namespace` keyword as the preferred way to declare what was formerly known as \"internal modules\". Our terminology changes as follows:\r\n\r\n* **Internal module** becomes *","comments":34,"createdAt":1430099284000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":2923,"state":"closed","title":"Namespaces","updatedAt":1437159344000},{"assignedTo":"","body":"Fixes #3861","comments":0,"createdAt":1437154424000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"","number":3911,"state":"open","title":"remove for-loops","updatedAt":1437154426000},{"assignedTo":"","body":"tsc treats path values in `///<reference path=... />` as case sensitive on linux, but case insensitive on Windows. This behavior makes codes writing on windows not portable if the casing of source file paths is inconsistant with the paths in `///<ref","comments":7,"createdAt":1435209864000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1684137?v=3","loggedByName":"duanyao","milestone":"Community","number":3626,"state":"open","title":"///<reference path=... /> is case sensitive on Linux, but case insensitive on Windows","updatedAt":1437153950000},{"assignedTo":"","body":"When a derived class has parameter properties or initialized properties, we require\r\n\r\n* the super call to be first\r\n* the super call not to reference this\r\n\r\nThat's because the derived class's properties will be initialized after the super call. But","comments":2,"createdAt":1436991307000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3876,"state":"open","title":"No error for accessing base class properties before super call if derived class has no parameter properties or initialized properties","updatedAt":1437153838000},{"assignedTo":"","body":"When trying to integrate TS into a project I noticed that the compiler removes all whitespace (babel tries to keep that). That means just renaming a file to ts and adding the global types results in having to rely on properly working source maps for ","comments":1,"createdAt":1437130129000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/231889?v=3","loggedByName":"matthiasg","milestone":"","number":3906,"state":"closed","title":"TSC removes empty lines for plain javascript","updatedAt":1437152982000},{"assignedTo":"","body":"Also, always emit pinned comments, even when the 'removeComments' compiler\r\noption is provided.","comments":2,"createdAt":1426642609000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2406,"state":"closed","title":"Simplify code for emitting comments.","updatedAt":1437151678000},{"assignedTo":"","body":"Support some level of automatically generating doc comments for non-TypeScript JavaScript consumers.\r\n\r\nNeed more details on what exactly people would like to see generated.","comments":23,"createdAt":1405443285000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":10,"state":"open","title":"Suggestion: Generate doc comments","updatedAt":1437130614000},{"assignedTo":"","body":"I have two examples, which should behave the same, but doesnt:\r\n\r\n    // Example 1\r\n    var callback = (param1, param2) => {\r\n      // Do someting\r\n    };\r\n    getDeferred().then(callback);\r\n\r\n    // Example 2\r\n    getDeferred().then((param1, param2)","comments":6,"createdAt":1436966066000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/591706?v=3","loggedByName":"Wordenskjold","milestone":"","number":3864,"state":"open","title":"Inconsistent compiler behavior when using a lambda expression with multiple parameters","updatedAt":1437123745000},{"assignedTo":"","body":"It would be better if you say below on a function, something like this following:\r\n\r\n/*\r\n Descriptions: â¦â¦\r\n @num1:â¦â¦\r\n @num2:â¦â¦\r\n*/\r\nfunction add(num1:number,num2:number)\r\n{\r\n â¦â¦\r\n}\r\n\r\nNotice that \"Descriptions\", \"@num1\",\"@num2\" will be automaticall","comments":6,"createdAt":1416115948000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6959154?v=3","loggedByName":"MaleDong","milestone":"","number":1173,"state":"open","title":"Suggestion: Intellisense support in JSDoc comments","updatedAt":1437107459000},{"assignedTo":"","body":"","comments":1,"createdAt":1437096572000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3901,"state":"closed","title":"Fix reading rwc file","updatedAt":1437096848000},{"assignedTo":"","body":"Related to #3567, merge to master instead of release-1.5.\r\nIncorporated CR feedbacks.\r\n","comments":1,"createdAt":1436827979000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3848,"state":"open","title":"Add API for ProjectErrorList in session.ts","updatedAt":1437093419000},{"assignedTo":"","body":"","comments":2,"createdAt":1436906386000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3858,"state":"open","title":"Update ErrorEventHandler type in worker","updatedAt":1437091813000},{"assignedTo":"","body":"On codeplex this was a popular feature request:\r\n\r\nhttps://typescript.codeplex.com/workitem/111\r\nhttps://typescript.codeplex.com/workitem/1926\r\n\r\nPersonally I think preprocessor directives like #if, #elif, #else #endif with possibility to specify sym","comments":19,"createdAt":1407967148000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2056282?v=3","loggedByName":"mpawelski","milestone":"","number":449,"state":"open","title":"Support conditional compilation","updatedAt":1437088993000},{"assignedTo":"rbuckton","body":"I upgraded from the 1.5 beta to a nightly build (ntypescript 20150709...) and found this regression:\r\n\r\nRelevant code:\r\n```\r\nimport { autoinject } from 'aurelia-framework';\r\nimport { Router } from 'aurelia-router';\r\n\r\n@autoinject()\r\nexport class X {\r","comments":17,"createdAt":1436451254000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3832820?v=3","loggedByName":"jods4","milestone":"TypeScript 1.6","number":3793,"state":"open","title":"Incorrect codegen with emitDecoratorMetadata + ES6 modules","updatedAt":1437087260000},{"assignedTo":"DanielRosenwasser","body":"We unconditionally show `any`.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/972891/7057783/867b4c0c-de0e-11e4-8c39-3157a28a6c2b.png)\r\n","comments":1,"createdAt":1428536693000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":2675,"state":"closed","title":"No semantic queries work for renamed properties in object binding patterns","updatedAt":1437084140000},{"assignedTo":"","body":"Fixes #2675.\r\n\r\nThe idea is that when referring to `p` at the marker `/*use*/`, we are really interested in `p` at `/*def*/`\r\n\r\n```\r\ninterface I {\r\n    /*def*/p: number;\r\n}\r\n\r\nvar x: I;\r\nvar { /*use*/p: q } = x;\r\n```","comments":3,"createdAt":1435262405000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3636,"state":"closed","title":"Enable semantic operations on binding element property names","updatedAt":1437084106000},{"assignedTo":"","body":"While this currently doesn't error in [Playground](http://www.typescriptlang.org/Playground#src=interface%20ObjectConstructor%20%7B%0D%0A%20%20%20%20assign(target%3A%20any%2C%20...sources%3A%20any%5B%5D)%3A%20any%3B%0D%0A%7D%0D%0A%0D%0Alet%20assign%2","comments":9,"createdAt":1437036284000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1282577?v=3","loggedByName":"kitsonk","milestone":"","number":3889,"state":"closed","title":"Issues with extending ObjectConstructor interface","updatedAt":1437081691000},{"assignedTo":"","body":"Hi,\r\n\r\n**TS**:1.4\r\n\r\nThe compiler issues an error on property `bar` below:\r\n\r\n```TypeScript\r\n\r\n   interface Foo {\r\n        [x: string]: number|Foo;\r\n   }\r\n    \r\n   interface Bar extends Foo {\r\n\r\n        /* Error: Property 'bar' of type '{ num: number","comments":5,"createdAt":1422897249000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":1889,"state":"closed","title":"Recursive type with index signature issues spurious error","updatedAt":1437081563000},{"assignedTo":"","body":"In the es6 spec, various DataView functions have an *optional* littleEndian argument: http://www.ecma-international.org/ecma-262/6.0/#sec-dataview.prototype.getuint32, however the es6 typings included with typescript have these arguments as mandatory","comments":0,"createdAt":1437077137000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/192614?v=3","loggedByName":"jasongrout","milestone":"","number":3896,"state":"open","title":"DataView access functions' littleEndian argument is optional","updatedAt":1437079792000},{"assignedTo":"","body":"I have 3 interfaces:\r\n\r\n```typescript\r\ninterface A {\r\n    member1: string;\r\n    ...\r\n}\r\n\r\ninterface B {\r\n    member1?: string;\r\n    ...\r\n}\r\n\r\ninterface C extends A, B {\r\n    ...\r\n}\r\n```\r\n\r\nI'm getting `TS2320: [Object Object]` error,\r\nbecause interfa","comments":4,"createdAt":1434995170000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1496352?v=3","loggedByName":"MrKomish","milestone":"","number":3598,"state":"open","title":"Error \"TS2320\" when interface extends interface that has optional member and another interface that has same named required member","updatedAt":1437077189000},{"assignedTo":"","body":"A common pattern in JavaScript libraries is to copy properties from a variable number of arguments onto the first argument. This is also the behavior of `Object.assign`. A simple implementation of this pattern in TypeScript might look like this:\r\n\r\n`","comments":7,"createdAt":1436982628000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/204106?v=3","loggedByName":"bryanforbes","milestone":"","number":3870,"state":"open","title":"Rest type parameter in generics for use with intersection types","updatedAt":1437074233000},{"assignedTo":"","body":"This PR implements intersection types, the logical complement of union types. A union type `A | B` represents an entity that has either type A or type B, whereas an intersection type `A & B` represents an entity that has both type A and type B.\r\n\r\n##","comments":38,"createdAt":1435194878000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3622,"state":"closed","title":"Intersection types","updatedAt":1437072106000},{"assignedTo":"","body":"Far be it from me to pour cold water on this solemn decision, but what on earth were the grounds to use the term \"external\" in *External Modules*?\r\n\r\nJust let's stick with this decision for a while ... Then why are JavaScript files stored in separate","comments":18,"createdAt":1436027585000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Blog","name":"Blog","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9283914?v=3","loggedByName":"SetTrend","milestone":"","number":3739,"state":"closed","title":"External Modules - Inappropriate Naming","updatedAt":1437071555000},{"assignedTo":"","body":"The following code does not parse with 1.5.0-beta:\r\n\r\n```typescript\r\ninterface Editable<T> { editable: T }\r\ninterface Static<T> { static: T; }\r\ntype Entity<T> = Editable<T> | Static<T>;\r\n```\r\n\r\nThe compiler seems to think that Entity is a function an","comments":1,"createdAt":1437070812000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/34538?v=3","loggedByName":"wereHamster","milestone":"","number":3894,"state":"closed","title":"Incorrect parse of type synonyms with with generics","updatedAt":1437071465000},{"assignedTo":"","body":"It would be great if we could generate TypeScript code using the Language Service.  This is a feature request continuing on #1651. A pretty printer is missing that consumes only the AST. Like #3136, a use case would be generating TypeScript code from","comments":2,"createdAt":1432180288000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/80104?v=3","loggedByName":"ctaggart","milestone":"","number":3241,"state":"open","title":"TypeScript code generation from the Language Service","updatedAt":1437069541000},{"assignedTo":"","body":"When a property has exactly one type from an `extends` or `implements` clause, we should contextually type that property's initializer by the type from the clause. For example:\r\n\r\n```ts\r\ninterface ThingListener {\r\n\thandleEvent: (x: MouseEvent) => voi","comments":6,"createdAt":1435553444000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3667,"state":"open","title":"Contextually type class property initializers by `extends`/`implements` types","updatedAt":1437068476000},{"assignedTo":"","body":"","comments":1,"createdAt":1437036090000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":3888,"state":"closed","title":"Fixed #3887 tsserver drops responses","updatedAt":1437067082000},{"assignedTo":"","body":"Tested at commit c27b379b1798b79f3ebf46db0aef03222acfc65f and 01244d60dac82eec017e9150e663c5d144f989ff .\r\n\r\nTo reproduce:\r\n\r\n1) Build typescript (`jake local`).\r\n2) In powershell:\r\n`Copy-Item C:\\<...>\\typescript\\public\\built\\local\\tsserver.js C:\\User","comments":2,"createdAt":1437064301000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"","number":3892,"state":"closed","title":"(Master Branch) tsserver.js hangs in vs-code","updatedAt":1437067070000},{"assignedTo":"","body":"there is not way to have a namespace for external module. The actual implementation leads to add one extra unnecessary level of nesting.\r\n\r\nif i well understood your philosophy is that the file path would be already a good namespace qualifier. \r\n```j","comments":3,"createdAt":1436524290000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6090502?v=3","loggedByName":"GalloTeo","milestone":"","number":3811,"state":"closed","title":"Namespace not supported for external module ","updatedAt":1437065631000},{"assignedTo":"","body":"_(It's a question as well as a suggestion)_\r\n\r\nI supposed that for structural type system as TypeScript is, type variance isn't applicable since type-compatibility is checked by use.\r\n\r\nBut when I had read @RyanCavanaugh 's [TypeScript 1.4 sneak peek","comments":16,"createdAt":1417912734000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1929486?v=3","loggedByName":"Igorbek","milestone":"","number":1394,"state":"open","title":"Covariance / Contravariance Annotations","updatedAt":1437064660000},{"assignedTo":"","body":"This describes a method named \"contains\", but it was changed to \"includes\" by TC39.","comments":1,"createdAt":1436985775000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/79312?v=3","loggedByName":"mvolkmann","milestone":"","number":3872,"state":"closed","title":"lib.es6.d.ts error in String interface","updatedAt":1437064406000},{"assignedTo":"","body":"If we want to spot some more bugs at compile time, I believe that something like:\r\n\r\n```javascript\r\nif (data.id = id) { ...\r\n```\r\n\r\nwhile being perfectly legal, it can be a coding bug most of the times.\r\nit would be nice if TsLint could spot this typ","comments":2,"createdAt":1437042737000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/246067?v=3","loggedByName":"AGiorgetti","milestone":"","number":3890,"state":"closed","title":"TsLint: assignment operation inside an 'if' condition should be marked with a warning","updatedAt":1437064351000},{"assignedTo":"vladima","body":"I have an intermittent issue with the compile on save feature in VS2013, which is that it seems to get stuck after a while for some files.  It is a strange issue, i'll be working for an hour or so and then one file just won't compile when saved, it s","comments":18,"createdAt":1424302451000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2872785?v=3","loggedByName":"Anupheaus","milestone":"TypeScript 1.6","number":2070,"state":"closed","title":"Compile on save not always working","updatedAt":1437058134000},{"assignedTo":"","body":"This PR adds API to the language service to provide the compile and runtime dependencies of a TS file. This information is useful for a package that works independent of the module system and can be used for an incremental compiler that compiles upwa","comments":4,"createdAt":1435694924000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":3687,"state":"open","title":"Add language service API to get the compile and runtime dependencies of a source file","updatedAt":1437052360000},{"assignedTo":"","body":"Hello TypeScripters.\r\n\r\nI might be opening a can of worms which might bring an age of darkness upon us (but see PS). Anyway, I've done an attempt to add language support for mixins.\r\n\r\nFor the user, it is similar to the `extends` or `implements` keyw","comments":18,"createdAt":1429996345000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106945?v=3","loggedByName":"dbarbeau","milestone":"","number":2919,"state":"open","title":"Mixin language support (with toy implementation)","updatedAt":1437038875000},{"assignedTo":"","body":"Don't emit detached comments (only the pinned ones)\r\n\r\nI did not add a test where the detached comments should get emitted as that one is already there: https://github.com/Microsoft/TypeScript/blob/master/tests/cases/compiler/commentsFunction.ts\r\n\r\nr","comments":3,"createdAt":1436987429000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":3874,"state":"closed","title":"Fix remove comments","updatedAt":1437028984000},{"assignedTo":"","body":"@CyrusNajmabadi, @vladima,  @billti : CoreServicesShimHost and CoreServicesShimHostAdapter changes to support tsconfig.json exclude from the language service.\r\n\r\n","comments":2,"createdAt":1434601848000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8161247?v=3","loggedByName":"jramsay","milestone":"","number":3546,"state":"closed","title":"tsconfig.json exclude LS support","updatedAt":1437012909000},{"assignedTo":"JsonFreeman","body":"TSC complains about using `super[anything]` really, this is problematic for Symbols.\r\n\r\n```\r\nvar symbol = Symbol.for('myThing');\r\n\r\nclass Foo {\r\n  [symbol]() { console.log('myThing called'); }\r\n}\r\n\r\nclass Bar extends Foo {\r\n  [symbol]() {\r\n    super[","comments":1,"createdAt":1434733588000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1540597?v=3","loggedByName":"blesh","milestone":"TypeScript 1.6","number":3573,"state":"closed","title":"super[symbol] does not compile in TypeScript","updatedAt":1437005613000},{"assignedTo":"","body":"Fixes #3573.\r\n\r\nSimple change to allow bracket access with super as the left side.","comments":3,"createdAt":1436996588000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3880,"state":"closed","title":"Allow super element access","updatedAt":1437005592000},{"assignedTo":"","body":"```TypeScript\r\nexport default class foo {\r\n\r\n}\r\n\r\nexport default function bar() {\r\n\r\n}\r\n\r\nvar x = 10;\r\nexport default x;\r\n```\r\n\r\nIn the above example, the error messages are:\r\n\r\n1. On `foo`: \"Duplicate identifier 'foo'.\"\r\n2. On `bar`: \"Duplicate iden","comments":0,"createdAt":1437005535000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3886,"state":"open","title":"Multiple default exports give unhelpful error messages","updatedAt":1437005535000},{"assignedTo":"ahejlsberg","body":"The first sentence of spec section 4.8.2 (https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#4.8.2) says that a super property access must include a dot and an identifier. This is no longer true as of #3880. It needs to be updated to acc","comments":0,"createdAt":1436997664000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":3881,"state":"open","title":"Update spec section 4.8.2 to allow super bracket access","updatedAt":1437004954000},{"assignedTo":"","body":"The type system does a great job at mirroring most type patterns in JS, all except mixins/traits, anything that decorates types - which unfortunately is very common in JS.\r\n\r\nWithout it the type system remains incomplete - that is, we're still one st","comments":10,"createdAt":1411473535000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/103348?v=3","loggedByName":"mindplay-dk","milestone":"","number":727,"state":"closed","title":"Feature: type alternatives (to facilitate traits/mixins/type decorators)","updatedAt":1437004924000},{"assignedTo":"","body":"```TypeScript\r\n var x = class C {\r\n    [|public|] x;\r\n    [|public|] y;\r\n}\r\n\r\nvar y = class D {\r\n    [|static|] a;\r\n    [|static|] private b;\r\n}\r\n```\r\n\r\nI don't believe occurrence highlighting works for any of these modifiers.","comments":3,"createdAt":1436828835000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3849,"state":"closed","title":"Occurrence highlighting doesn't work on class expression members","updatedAt":1437004662000},{"assignedTo":"","body":"```typescript\r\nclass C {\r\n    constructor (private foo) {\r\n        \"use strict\";\r\n    }\r\n}\r\n```\r\n\r\nis transformed into\r\n\r\n```js\r\nvar C = (function () {\r\n    function C(foo) {\r\n        this.foo = foo;\r\n        \"use strict\";\r\n    }\r\n    return C;\r\n})()","comments":1,"createdAt":1433883557000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/19247?v=3","loggedByName":"olov","milestone":"TypeScript 1.6","number":3454,"state":"closed","title":"Directive prologues are not preserved","updatedAt":1437004422000},{"assignedTo":"","body":"## Fixed \"Directive prologues are not preserved\"\r\nFixes issue #3454","comments":2,"createdAt":1436883769000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106995?v=3","loggedByName":"ShyykoSerhiy","milestone":"","number":3853,"state":"closed","title":"Correctly emit prologue directives in constructors","updatedAt":1437004392000},{"assignedTo":"zhengbli","body":"On iOS 7, 8 and 9 window.orientation is a number:\r\n```\r\ntypeof window.orientation === 'number' // returns true;\r\n```\r\nBut in TypeScript 1.5 you've changed the type of window.orientation to string. This makes it impossible to check for orientation on ","comments":7,"createdAt":1437001009000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10430193?v=3","loggedByName":"chocolatechipui","milestone":"TypeScript 1.6","number":3884,"state":"open","title":"window.orientation was changed to string","updatedAt":1437003187000},{"assignedTo":"","body":"Let's say I have a tool completely not related to React which transforms JSX to JS. And let's say I want it to use with NativeScript elements/controls.\r\n\r\nOne of main things of JSX is that it has built-in elements and custom elements (components) are","comments":3,"createdAt":1436275385000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1189265?v=3","loggedByName":"NekR","milestone":"","number":3767,"state":"open","title":"JSX IntrinsicElements detection","updatedAt":1437003090000},{"assignedTo":"","body":"","comments":4,"createdAt":1436466467000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3797,"state":"closed","title":"Port PR 3689 into release 1.5","updatedAt":1437002504000},{"assignedTo":"","body":"Issue #3283. This PR is to fix only /// comments ","comments":0,"createdAt":1437000146000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3883,"state":"open","title":"Do not emit /// comments when remove comments is specified","updatedAt":1437000150000},{"assignedTo":"","body":"","comments":1,"createdAt":1436991431000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3877,"state":"closed","title":"Port PR 3797 to master","updatedAt":1436999573000},{"assignedTo":"","body":"I'm building a project for 'modern' but not bleeding-edge browsers (IE >= 10, Chrome/Firefox from mid-last year onwards), this means targeting ES5 output since ES6 language features are incomplete. However I'm able to use many ES6 library features ei","comments":4,"createdAt":1430564890000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2458?v=3","loggedByName":"robertknight","milestone":"","number":3005,"state":"open","title":"Using ES6 type default library when targetting ES5 output","updatedAt":1436999103000},{"assignedTo":"","body":"Please model HTMLElement and its subclasses as classes instead of interfaces in lib.d.ts to make it possible to subclass them.\r\n\r\nMy motivation is custom elements and web components. To create a custom element you need to create a subclass of HTMLEle","comments":12,"createdAt":1409428453000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6926644?v=3","loggedByName":"sedwards2009","milestone":"","number":574,"state":"open","title":"Convert HTMLElement and friends to classes to support Web Components/Custom elements","updatedAt":1436996643000},{"assignedTo":"","body":"I don't see ES6 Promises on the Roadmap page. Shouldn't it be there somewhere? I realize I can use the es6-promise library for now, but I think support for Promises should be built into TypeScript at some point. Maybe it belongs in 1.6.","comments":6,"createdAt":1436972208000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/79312?v=3","loggedByName":"mvolkmann","milestone":"","number":3867,"state":"closed","title":"Promises","updatedAt":1436996353000},{"assignedTo":"DanielRosenwasser","body":"```ts\r\ndeclare module \"M\" {\r\n    export var vv;\r\n}\r\nvar ww;\r\ndeclare module \"M2\" {\r\n    export { /*completion here */ } from \"M\";\r\n}\r\n```\r\n\r\nExpected: Only vv is in the completion list.\r\nActual: vv is not in the completion list, and all the globals a","comments":0,"createdAt":1435881724000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":3728,"state":"closed","title":"Completion is incorrect for export specifier with module specifier","updatedAt":1436995408000},{"assignedTo":"","body":"Fixes #3728.\r\n\r\nI suggest you review this commit by commit.\r\n\r\nA nice bonus is that we now recover more gracefully when the export clause closing brace is missing as in the following example:\r\n\r\n```TypeScript\r\nexport { a, /**/ from \"m1\";\r\n```","comments":1,"createdAt":1436575040000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3818,"state":"closed","title":"Support completions in exports with module specifiers.","updatedAt":1436995400000},{"assignedTo":"","body":"This interface contains:\r\nisArray(arg: any): arg is Array<any>;\r\nbut I think it should be:\r\nisArray(arg: any): boolean;\r\n\r\nIt doesn't compile as it is.","comments":7,"createdAt":1436985874000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/79312?v=3","loggedByName":"mvolkmann","milestone":"","number":3873,"state":"closed","title":"lib.es6.d.ts error in ArrayConstructor interface","updatedAt":1436993079000},{"assignedTo":"","body":"Talk with @CyrusNajmabadi . Currently we have following different types of comments:\r\n* Pinned comment\r\n* Triple-slash\r\n* Detached comment (i.e. copy right)\r\n* Normal comment (//, /* */, /** **/)\r\n\r\nCurrently, ```compilerOptions.removeComments``` wil","comments":0,"createdAt":1436992726000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3878,"state":"open","title":"Fine tuning compiler options for removing comments","updatedAt":1436992952000},{"assignedTo":"","body":"Consider this example:\r\n\r\n```ts\r\nclass ToggleState {\r\n\topen:boolean\r\n}\r\nclass AnimationDemo extends React.Component<{}, ToggleState>\r\n{\r\n  state:ToggleState;\r\n  constructor () {\r\n    super()\r\n    this.state = {open : false, fdsa: 'asdf'};\r\n  }\r\n  get","comments":2,"createdAt":1436972550000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/319320?v=3","loggedByName":"mikemorton","milestone":"","number":3868,"state":"closed","title":"JSX/TSX: Proper way to use State types","updatedAt":1436989364000},{"assignedTo":"","body":"Just some basic clean up on the harness code following the recent cleanup of the compiler code. This gets the harness code near 0 TSLint errors with the current ruleset. ","comments":1,"createdAt":1436926872000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":3863,"state":"closed","title":"Update harness code for TSLint rules","updatedAt":1436982956000},{"assignedTo":"vladima","body":"Example:\r\napp.ts\r\n```\r\n/// <reference path=\"../typings/angular2/angular2.d.ts\" />\r\nimport {Component, View, bootstrap, NgIf} from 'angular2/angular2'\r\n\r\n@Component({\r\n    selector: 'app'\r\n})\r\n@View({\r\n    template: `<span *ng-if=\"name\">Hello, {{name}","comments":3,"createdAt":1436600858000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7538548?v=3","loggedByName":"hafizahmedattari","milestone":"","number":3824,"state":"closed","title":"Why typescript system build did not add module in compiled files","updatedAt":1436979309000},{"assignedTo":"","body":"I hate to file an issue for this, but I can't find another place to ask this.\r\nIs there a TypeScript mailing list where people can ask questions?\r\nMy search for one came up empty and I don't see a Google Group.","comments":1,"createdAt":1436972126000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/79312?v=3","loggedByName":"mvolkmann","milestone":"","number":3866,"state":"open","title":"mailing list","updatedAt":1436978604000},{"assignedTo":"","body":"I think this is useful syntax :)\r\n\r\nsample.\r\n```\r\ninterface IFoo {\r\n  foo: string; // not optional\r\n}\r\n\r\nclass Bar implements IFoo? {\r\n  // Bar does not have a foo property.\r\n}\r\n\r\nnew Bar().foo;\r\n```\r\n\r\nHow useful.\r\n```\r\nclass Foo implements Lib.ILis","comments":11,"createdAt":1407319861000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"","number":371,"state":"open","title":"Suggestion: optional interface","updatedAt":1436972814000},{"assignedTo":"","body":"Here is an example\r\n\r\n``` typescript\r\nvar webApps: ng.ui.IState[] = [{\r\n    name: \"home.webapp\",\r\n    templateUrl: \"templates/empty-shell.html\"\r\n}, {\r\n    name: \"home.webapp.templates\",\r\n    templateUrl: \"templates/templates.html\"\r\n}, {\r\n    name: \"h","comments":2,"createdAt":1436572392000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/645740?v=3","loggedByName":"ahmelsayed","milestone":"","number":3817,"state":"open","title":"Visual Studio formatting is wrong in some cases","updatedAt":1436964572000},{"assignedTo":"","body":"Currently the spec reads: Protected property members can be accessed only within their declaring class and classes derived from their declaring class, and a protected instance property member must be accessed through an instance of the enclosing clas","comments":11,"createdAt":1413311966000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/311082?v=3","loggedByName":"mbebenita","milestone":"","number":892,"state":"open","title":"Suggestion: internal modifier","updatedAt":1436953622000},{"assignedTo":"","body":"I have a recursive type definition for JSON Serializable entities (Exhibit A, edited after discussion with @JsonFreeman ):\r\n```typescript\r\nexport type IJSONSerializable = IJSONSerializableObject | number | string | IMaybeRecursiveArray<IJSONSerializa","comments":13,"createdAt":1434143479000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11646382?v=3","loggedByName":"opensrcken","milestone":"","number":3496,"state":"open","title":"recursive type definitions","updatedAt":1436933055000},{"assignedTo":"","body":"```ts\r\n// A function that accepts strings or non-primitive types\r\nfunction foo(x: Object | string) { ... }\r\nfoo('hello'); // ok\r\nfoo({ a: 3 }); // ok\r\nfoo(1); // ok, meant for this to be an error\r\n```\r\nBased on examples seen in DefinitelyTyped. Someo","comments":2,"createdAt":1436916820000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":3862,"state":"open","title":"Report errors if union subtype reduction results in fewer types than were explicitly written","updatedAt":1436924887000},{"assignedTo":"","body":"This PR implements #1667 with some modifications.\r\n\r\nThe presence of a tsconfig.json file in a directory indicates that the directory is the root of a TypeScript project. The tsconfig.json file specifies the root files and the compiler options requir","comments":44,"createdAt":1421374418000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1692,"state":"closed","title":"Support for tsconfig.json files","updatedAt":1436923001000},{"assignedTo":"","body":"See http://en.wikipedia.org/wiki/Bottom_type & http://james-iry.blogspot.com/2009/08/getting-to-bottom-of-nothing-at-all.html\r\n\r\nThe neat thing about structural typing TypeScript is that you don't need to explicitly think about generic type variance.","comments":27,"createdAt":1417203314000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/554424?v=3","loggedByName":"Eyas","milestone":"","number":1298,"state":"open","title":"Add a bottom type to TypeScript","updatedAt":1436915402000},{"assignedTo":"","body":"Fixes #3849 \r\nFeel free to provide feedback! :) ","comments":1,"createdAt":1436913238000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":3860,"state":"closed","title":"Fix occurrences in classexpressions","updatedAt":1436914779000},{"assignedTo":"","body":"Allow a declarative way of adding members to an existing type's prototype\r\n\r\nExample:\r\n```TypeScript\r\n\r\nclass Shape {\r\n // ...\r\n}\r\n\r\n/* ...elsewhere...*/\r\nextension class Shape { // Syntax??\r\n    getArea() { return /* ... */; }\r\n}\r\n\r\nvar x = new Shap","comments":65,"createdAt":1405443149000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":9,"state":"open","title":"Suggestion: Extension methods","updatedAt":1436911886000},{"assignedTo":"","body":"### TL;DR: provide a syntax which kills this compiler error: ###\r\n\r\n    Class 'D' incorrectly implements interface 'C'.\r\n    Property '_a' is protected but type 'D' is not a class derived from 'C'.\r\n\r\nIf the implementer wants to take responsibility f","comments":0,"createdAt":1436891941000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1070719?v=3","loggedByName":"benliddicott","milestone":"","number":3854,"state":"open","title":"Allow interfaces to declare protected members and allow implementors to implement protected and private members.","updatedAt":1436910562000},{"assignedTo":"","body":"This implements the other suggestion from @ahejlsberg in #3755, and fixes a compiler bug found by the rule (in editorServices.ts).\r\n\r\nA weak type is one which has only optional properties and is not empty. Because these types are assignable *from* an","comments":2,"createdAt":1436814117000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3842,"state":"open","title":"Weak type detection","updatedAt":1436910357000},{"assignedTo":"","body":"This implements JSX parsing, typechecking, JSX emit, and React emit as specified in #3203, as well as the `as` operator suggested in #296.\r\n\r\nEach commit between 556cb70 and a5c44a3 contains a disjoint set of files for easier browsing. Commits after ","comments":28,"createdAt":1434661627000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3564,"state":"closed","title":"JSX and `as` operator","updatedAt":1436909762000},{"assignedTo":"","body":"Fixes #2798.\r\n\r\nWe actually did not have any widening logic for tuples. This change adds widening logic for tuples. It widens each element, and reports implicit any errors on each element.","comments":3,"createdAt":1436899938000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3856,"state":"closed","title":"Widening for tuples","updatedAt":1436908657000},{"assignedTo":"JsonFreeman","body":"In the section [6.4]  (https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#64-destructuring-parameter-declarations), the spec describes the process to get type T associated with a destructuring parameter declaration as follows:\r\n\r\n>* If t","comments":0,"createdAt":1429206078000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.6","number":2798,"state":"closed","title":"Destructing Parameter Declaration With Initializer Expression that get widened","updatedAt":1436908657000},{"assignedTo":"JsonFreeman","body":"Type inference failed in call to a method accepting `Iterable<T>` parameter when passing string literals:\r\n\r\n````TypeScript\r\nfunction method<T>(iterable: Iterable<T>): T {\r\n    return;\r\n}\r\n\r\nvar res: string = method(\"test\");    // method returns {}\r\n","comments":3,"createdAt":1432149388000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1743048?v=3","loggedByName":"KamyarNazeri","milestone":"TypeScript 1.6","number":3236,"state":"closed","title":"Type parameter failed when using string literals as Iterable<T>","updatedAt":1436908637000},{"assignedTo":"","body":"Fixes #3236.\r\n\r\nIf your type argument inference source is a primitive or a type parameter, we don't use the apparent type to get its structure to dive deeper. This change gets the apparent type for better inference.","comments":1,"createdAt":1436577636000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3822,"state":"closed","title":"Take the apparent type of the source during type argument inference","updatedAt":1436908637000},{"assignedTo":"","body":"I get an error when compiling the following code (using the latest 1.5.3):\r\n\r\n```\r\nlet x = new Uint8Array(2);\r\nlet a = x[0];\r\nlet b = x[1];\r\nlet [c,d] = x; // ERROR: (4,5): error TS2461: Type 'Uint8Array' is not an array type.\r\n```\r\n\r\nCode is emitted","comments":1,"createdAt":1436898664000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/216155?v=3","loggedByName":"fmilitao","milestone":"","number":3855,"state":"open","title":"Expand definition of Array-like for destructuring types like Uint8Array","updatedAt":1436907784000},{"assignedTo":"","body":"I'm using angular-resource.d.ts\r\n\r\n```\r\nType 'IResourceArray<IResource<ICompany>>' is not assignable to type 'IGridFilterOption[]'.\r\n```\r\n\r\n```\r\ninterface IResourceArray<T> extends Array<T> {\r\n    /** the promise of the original server interaction th","comments":3,"createdAt":1435585996000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1603868?v=3","loggedByName":"pixelshaded","milestone":"","number":3672,"state":"closed","title":"Not Assignable Types That Should Be","updatedAt":1436907243000},{"assignedTo":"JsonFreeman","body":"In inferential typing, we only fix a type parameter and contextually type a function parameter if the inference walker hits the type parameter and the function parameter at the same time (foo2 below). Ideally, we would also want this to work if the w","comments":1,"createdAt":1418260336000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1449,"state":"open","title":"Function parameter only gets inferentially typed if a type parameter coincides with it","updatedAt":1436907194000},{"assignedTo":"yuit","body":"The following examples should trigger an early error in JS:\r\n\r\n```TypeScript\r\nlet let = 10;\r\n```\r\n\r\n```TypeScript\r\nconst let = 10;\r\n```\r\n\r\n<sub>Note: a similar test exists in `tests/cases/conformance/es6/for-ofStatements/for-of56.ts`) for the followi","comments":2,"createdAt":1433982923000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.7","number":3475,"state":"open","title":"'let' should not be allowed to be bound as a variable in a for-of loop or let/const decl","updatedAt":1436907128000},{"assignedTo":"","body":"This suggestion has a few pieces:\r\n\r\n1. Implement boolean literal types for `true` and `false`, in a fashion similar to #1003 \r\n2. Implement type guards for booleans. Essentially, control flow constructs like if-else, while, for, etc would be subject","comments":0,"createdAt":1430442120000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2983,"state":"open","title":"Boolean literal types and return type propagation for generators","updatedAt":1436907120000},{"assignedTo":"","body":"Hi,\r\n\r\nSince the compiler can distinguish between a class being used as an interface, what is the reason the compiler does not automatically emit \"applyMixins\" at the end of the compilation cycle? It there a particular reason for this? \r\n\r\nRegards,\r\n","comments":4,"createdAt":1434222182000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5524595?v=3","loggedByName":"blendsdk","milestone":"","number":3505,"state":"closed","title":"Mixins and the applyMixins function?","updatedAt":1436906103000},{"assignedTo":"","body":"It's my understanding (after some stackoverflow checking) that at the moment it's impossible to specify a file extension for js file generated by the compiler.\r\nCould this be possible in the future ?","comments":6,"createdAt":1436607507000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5278429?v=3","loggedByName":"vjau","milestone":"","number":3825,"state":"closed","title":"Adding possibility to change file extension of generated files","updatedAt":1436903586000},{"assignedTo":"","body":"When a type declaration in an inner module has the same name as a type declaration in an outer module, the outer declaration becomes inaccessible. Programmers can typically work around this, for example by deriving a type with an alternate name in th","comments":23,"createdAt":1414538995000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":983,"state":"open","title":"Global type references","updatedAt":1436903097000},{"assignedTo":"","body":"I'm trying to merge some missing methods from https://github.com/borisyankov/DefinitelyTyped/blob/master/i18next/i18next.d.ts for my node server.\r\n```\r\ninterface IWebTranslateOptions {\r\n  i18nextWTOptions: {\r\n    languages: Array<string>;\r\n    namesp","comments":2,"createdAt":1436900314000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1603868?v=3","loggedByName":"pixelshaded","milestone":"","number":3857,"state":"open","title":"Import in Definition File Hides Interfaces","updatedAt":1436901536000},{"assignedTo":"","body":"Babel supports two JSX optimizations when using React 0.14. https://babeljs.io/blog/2015/03/31/5.0.0/#react-optimisations\r\n\r\n1. Constant Elements \r\n2. Inlining `React.createElements`\r\n\r\nAny plans to support these sort of optimizations in TypeScript?","comments":2,"createdAt":1436832944000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/287744?v=3","loggedByName":"prabirshrestha","milestone":"","number":3851,"state":"closed","title":"React JSX optimizations","updatedAt":1436896102000},{"assignedTo":"","body":"Typescript requires that enums have number value types (hopefully soon, this will also include string value types).\r\n\r\nAttempting to use an enum as a key type for a hash results in this error: \"Index signature parameter type much be 'string' or 'numb","comments":5,"createdAt":1427304603000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2426688?v=3","loggedByName":"jhlange","milestone":"","number":2491,"state":"open","title":"Index signature parameter type should allow for enums","updatedAt":1436895480000},{"assignedTo":"","body":"Broken test - https://github.com/angular/angular/blob/master/modules/angular2/test/core/compiler/query_integration_spec.ts#L351\r\n\r\nFix and reenable.","comments":1,"createdAt":1436825712000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/95713?v=3","loggedByName":"rkirov","milestone":"","number":3847,"state":"closed","title":"ViewQuery list does not match the dom order ","updatedAt":1436894987000},{"assignedTo":"","body":"Since we now export Session in tslssl.js, we should add tests for its public API.","comments":2,"createdAt":1436551386000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2932786?v=3","loggedByName":"weswigham","milestone":"Community","number":3813,"state":"open","title":"Cover src/server/session.ts - Session API with tests","updatedAt":1436894975000},{"assignedTo":"","body":"If you implement (so not extend) a class that has protected methods, you always get an error (typically used for a mix-in like pattern)\r\n\r\nEither you implement the method, but then the compiler complaints that you are not actually a subclass and ther","comments":3,"createdAt":1415438926000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/568564?v=3","loggedByName":"jbaron","milestone":"","number":1101,"state":"closed","title":"protected and mix-ins donât work together","updatedAt":1436894581000},{"assignedTo":"aozgaa","body":"The following error isn't triggered:\r\n\r\n```ts\r\n\r\nclass A {}\r\n\r\nabstract class B extends A {}\r\n\r\nvar AA : A = B; // assignment should fail.\r\n\r\nnew AA;\r\n```\r\n\r\nIn order to fix this, we'll mark the construct signature of the class as abstract and then e","comments":0,"createdAt":1435793307000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"TypeScript 1.6","number":3702,"state":"closed","title":"Abstract Constructor Assignability not restricted","updatedAt":1436894500000},{"assignedTo":"","body":"Reported by @kuon in:https://github.com/Microsoft/TypeScript-Sublime-Plugin/issues/220\r\n\r\n\r\nWhen I use autoformat, the following block get the following indentation:\r\n\r\n    toolsElement = h.div({ className: \"row-tools\" },\r\n        h.button({\r\n       ","comments":16,"createdAt":1433829966000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3436,"state":"open","title":"Incorrect indentation","updatedAt":1436893821000},{"assignedTo":"","body":"Hi, we have a requirement to create mocks of real classes defined in code. The exact requirements are\r\n\r\n* A specific mock should define the public API of the real class.\r\n* If the public API of the real class changes in any way then the compiler sho","comments":18,"createdAt":1408365663000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":471,"state":"open","title":"Suggestion: Permit an implementing class to ignore private methods of the implementee class","updatedAt":1436892000000},{"assignedTo":"","body":"As we know JavaScript doesn't support overloaded functions, it's when a few functions with different signatures share the same name within the same scope where they are defined. Overloading can still be achieved at runtime by checking arguments and d","comments":18,"createdAt":1433860314000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":3442,"state":"open","title":"Suggestion: Compile time function overloading","updatedAt":1436884959000},{"assignedTo":"","body":"This proposal is based on a working prototype located at https://github.com/Nevor/TypeScript/tree/SingletonTypes\r\n\r\n## String literal types extended to the whole language\r\n\r\nThis change would bring singleton types created from literal string to compl","comments":64,"createdAt":1414686114000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/129594?v=3","loggedByName":"Nevor","milestone":"Community","number":1003,"state":"open","title":"Singleton types under the form of string literal types","updatedAt":1436875750000},{"assignedTo":"","body":"Implements #3043. A tsconfig.json file that doesn't specify a `files` property (and therefore implicitly references all *.ts files in all subdirectories) can now contain an `exclude` property that specifies a list of files and/or directories to exclu","comments":17,"createdAt":1431802220000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3188,"state":"closed","title":"Support \"exclude\" property in tsconfig.json","updatedAt":1436866071000},{"assignedTo":"","body":"For the reason of consistency, it should be possible to explicitly annotate the iterator variable at least with the \"any\" type in a for..in loop.","comments":10,"createdAt":1434197458000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6279994?v=3","loggedByName":"JirkaDellOro","milestone":"","number":3500,"state":"closed","title":"Explicit any type in for..in loop","updatedAt":1436861793000},{"assignedTo":"","body":"I was hoping this could work:\r\n```typescript\r\nclass A {\r\n\tpublic a: string;\r\n}\r\n\r\ninterface B {\r\n\t[index: string]: A;\r\n}\r\n\r\ninterface C extends B {\r\n\ta;\r\n\tb;\r\n\tc;\r\n}\r\n\r\nlet c: C;\r\nc.a.a // c.a of type A\r\n```\r\nbut members of interface C has type `any`","comments":4,"createdAt":1436492056000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3804,"state":"closed","title":"No contextual typing for interfaces that extends interface with index signature","updatedAt":1436842658000},{"assignedTo":"","body":"The most common case of iterating an object is:\r\n```javascript\r\nvar object = {a:1, b:2, c:3};\r\nfor (var key in object) {\r\n\tif (!object.hasOwnProperty(key)) {\r\n\t\tcontinue;\r\n\t}\r\n\tvar value = object[key];\r\n\t// do stuff here\r\n}\r\n```\r\nand for arrays is:\r\n","comments":9,"createdAt":1436772305000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2398828?v=3","loggedByName":"vadimzzz","milestone":"","number":3835,"state":"closed","title":"Proposal: foreach loop","updatedAt":1436842254000},{"assignedTo":"","body":"The output on `tsc` is not so accessible. I find it hard to read because everything is white and no newlines between lines.\r\n\r\nAlso when running `tsc -w` it is very hard to distinguish latest build from the second latest. \r\n\r\nThese problem can be sol","comments":2,"createdAt":1436836912000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3852,"state":"open","title":"Improve accessibility on terminal output","updatedAt":1436841882000},{"assignedTo":"","body":"Pretty simple change but the diff seems a little confused by some whitespace/reformatting changes. I made a new mocha reporter here https://github.com/danquirk/mocha-fivemat-progress-reporter that will report test output by test suite with a progress","comments":5,"createdAt":1436577256000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":3820,"state":"closed","title":"New mocha reporter","updatedAt":1436839345000},{"assignedTo":"","body":"I've debugged the other day and I tried out in TS source code to do:\r\n```typescript\r\nconsole.log((ts as any).SyntaxKind[node.kind])\r\n```\r\ninstead of:\r\n```typescript\r\nconsole.log((<any>ts).SyntaxKind[node.kind])\r\n```\r\nAnd I got:\r\n```\r\nsrc/compiler/che","comments":4,"createdAt":1436577456000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3821,"state":"closed","title":"As operator in module and namespace issue","updatedAt":1436835479000},{"assignedTo":"","body":"I have a few files for making HTTP requests. I want to extend those to allow easier access to our API. Here is some sample code:\r\n\r\nhttp.ts\r\n```typescript\r\nexport type HTTPParameters = { [key: string]: string };\r\nexport type HTTPHeaders = { [key: str","comments":5,"createdAt":1436736666000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/412180?v=3","loggedByName":"AlicanC","milestone":"","number":3832,"state":"open","title":"Aliasing enums","updatedAt":1436834945000},{"assignedTo":"","body":"Current implementaiton:\r\n```ts\r\ninterface Promise<T> {\r\n    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<TResult>;\r\n    then<TResult>(onfulfilled?: (v","comments":5,"createdAt":1436738625000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/886059?v=3","loggedByName":"Zoltu","milestone":"","number":3834,"state":"open","title":"Promise.catch should have a return type of <TResult>, not T.","updatedAt":1436833625000},{"assignedTo":"","body":"```TypeScript\r\nabstract class C {\r\n    abstract foo();\r\n    abstract bar();\r\n}\r\n\r\nabstract class D {\r\n    abstract baz();\r\n}\r\n```\r\n\r\nOccurrences for `abstract` on methods/properties in the same class should all get highlighted. They should potentiall","comments":4,"createdAt":1436809417000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3840,"state":"closed","title":"Occurrences highlighting should support the 'abstract' keyword","updatedAt":1436832679000},{"assignedTo":"","body":"My attempt at highlighting `abstract` keyword (#3840)\r\n\r\nCan add more tests if required.\r\nFeel free to close if you want this solved differently.","comments":5,"createdAt":1436825139000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":3846,"state":"closed","title":"Highlight Abstract occurrences","updatedAt":1436832657000},{"assignedTo":"","body":"","comments":1,"createdAt":1436831066000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3850,"state":"closed","title":"Classify Identifiers as 'Identifier', not 'Text'.","updatedAt":1436832482000},{"assignedTo":"","body":"Fixes #3702 .","comments":1,"createdAt":1435875183000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"","number":3722,"state":"closed","title":"Abstract constructor assignability","updatedAt":1436830610000},{"assignedTo":"","body":"Following the discussion on #3513. However, I have opted to complete my ideas in this regard for the purposes of discussion, and have entirely factored out the old massive case statement and replaced it with a map.","comments":4,"createdAt":1434581857000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2932786?v=3","loggedByName":"weswigham","milestone":"","number":3543,"state":"closed","title":"Improve Session interface for extensibility","updatedAt":1436829565000},{"assignedTo":"yuit","body":"I ran into this for real while trying to fix a bug in the compiler. We disallow assigning one enum to another if you use the `=` operator. But we do not disallow it for any of the compound assignment operators. Nor do we disallow for bitwise operator","comments":1,"createdAt":1436824838000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.7","number":3845,"state":"open","title":"Enum types are not checked in binary operators","updatedAt":1436828407000},{"assignedTo":"","body":"Fixes #3277.","comments":3,"createdAt":1436351526000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106995?v=3","loggedByName":"ShyykoSerhiy","milestone":"","number":3780,"state":"open","title":"Fix issue https://github.com/Microsoft/TypeScript/issues/3277","updatedAt":1436828243000},{"assignedTo":"dbaeumer","body":"We are sending quite some requests to the tsserver. We make sure that what to put onto stdin is always one request, however we don't queue them on the sending side.\r\n\r\nThe output send from the tsserver mangels different response. See the attached msg","comments":17,"createdAt":1429008433000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"TypeScript 1.6","number":2758,"state":"closed","title":"tsserver mangels output when more than one request is pending","updatedAt":1436827912000},{"assignedTo":"","body":"fs.writeSync is speced in a way that it returns the byes written which is not handled correctly the the write function of the node system host. \r\n\r\nWe say issues  with the tsserver when writing more than 64KB using fs.writeSync on the Mac running und","comments":10,"createdAt":1435654604000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":3682,"state":"closed","title":"Node System host write - need to loop since writeSync might not write all bytes in one request","updatedAt":1436827858000},{"assignedTo":"zhengbli","body":"Hi,\r\n\r\nI understand all concerns around HTML/SVG elements with ```querySelector()```, etc. But why method which should return **```Element```** cannot even return ```Element``` but returns ```Node```? Do you think it's possible to query processing in","comments":15,"createdAt":1435151047000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1189265?v=3","loggedByName":"NekR","milestone":"TypeScript 1.6","number":3613,"state":"closed","title":"XML getElementsByTagName returns Node","updatedAt":1436827691000},{"assignedTo":"","body":"Fix issue #3673","comments":1,"createdAt":1436576396000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3819,"state":"closed","title":"Fix indentation issue with closing paren","updatedAt":1436821790000},{"assignedTo":"","body":"Don't think it should fallthrough here\r\n\r\nFeel free to close :)","comments":1,"createdAt":1436818469000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":3843,"state":"closed","title":"Don't fall through to the modifier check for get/set keywords","updatedAt":1436821289000},{"assignedTo":"","body":"Given\r\n```typescript\r\nclass Example {\r\n}\r\n```\r\n\r\nThe current type of `Example.constructor` is `Function`, but I feel that it should be `typeof Example` instead. The use case for this is as follows:\r\n\r\nI'd like to reference the current value of an ove","comments":0,"createdAt":1436809428000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/654598?v=3","loggedByName":"LPGhatguy","milestone":"","number":3841,"state":"open","title":"T.constructor should be of type T","updatedAt":1436821207000},{"assignedTo":"yuit","body":"Reported by @NickHeiner in #3283\r\n\r\nAnd I know that TS offers multiline strings via template strings, but here's another use case:\r\n\r\nindex.ts\r\n```ts\r\ndeclare var angular: any;\r\n\r\nangular.module('app').factory('myService', /* @ngInject */ function fo","comments":0,"createdAt":1436820804000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":3844,"state":"open","title":"Comments for call expression arguments are not preserved in output","updatedAt":1436820804000},{"assignedTo":"","body":"Same as the TypeScript version. This is required to increase the lifetime of `tsconfig.json` files. Few years down:\r\n\r\n* if someone wants to open a typescript project they should have an easy way to see why the `tsconfig.json` has compiler options th","comments":7,"createdAt":1424819391000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2133,"state":"open","title":"Add a \"version\" key to tsconfig.json","updatedAt":1436818789000},{"assignedTo":"","body":"","comments":3,"createdAt":1436737842000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":3833,"state":"open","title":"Question: What is SyntaxKind.PropertySignature (131)? How is it different from SyntaxKind.PropertyDeclaration (132)?","updatedAt":1436816848000},{"assignedTo":"","body":"When accessing static member of class you must write class name followed with dot before member name. But this is redundant when using that member inside the class itself.\r\nLet's see an example (it's a little bit far-fetched but shows the case):\r\n```","comments":2,"createdAt":1436774090000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2398828?v=3","loggedByName":"vadimzzz","milestone":"","number":3836,"state":"open","title":"Proposal: simplify access to static members","updatedAt":1436816184000},{"assignedTo":"","body":"Installed Typesscript 1.5 and have found bug of compiler:\r\n\r\ntsc.js(16127, 17) JavaScript runtime error : Unable to get property 'flags' of undefined or null reference","comments":4,"createdAt":1436778397000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1484395?v=3","loggedByName":"gooddaytoday","milestone":"","number":3837,"state":"closed","title":"JavaScript runtime error : Unable to get property 'flags' of undefined or null reference","updatedAt":1436815600000},{"assignedTo":"","body":"Actual\r\n```\r\nexport function f1(\r\n    x: string,\r\n    y: number\r\n    ): boolean {\r\n    return false;\r\n}\r\n\r\nexport function f2() {\r\n    return f1(\r\n        '',\r\n        0\r\n        );\r\n}\r\n```\r\nExpected\r\n```\r\nexport function f1(\r\n    x: string,\r\n    y: ","comments":3,"createdAt":1412957639000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"TypeScript 1.6","number":871,"state":"closed","title":"Formatter in VS (2013) doesn't unindent a dangling closing bracket.","updatedAt":1436815055000},{"assignedTo":"","body":"Listening to @nycdotnet has me fired up to tackle this one.  Thanks, Steve.  (btw, you can check out his good interview here: http://www.dotnetrocks.com/default.aspx?showNum=1149)\r\n\r\nThe proposal here was first started in times prehistoric (even befo","comments":14,"createdAt":1433954517000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":3469,"state":"open","title":"Support \"medium-sized\" projects","updatedAt":1436813825000},{"assignedTo":"RyanCavanaugh","body":"Right now formatting is supported or not right.\r\n\r\nAs you see below it just removes all indentation from JSX, i would prefer that we leave jsx code out of formatting if can't be supported right now, this makes formatting completely useless in TSX fil","comments":0,"createdAt":1436803489000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/249478?v=3","loggedByName":"manishtpatel","milestone":"TypeScript 1.6","number":3838,"state":"open","title":"Support TSX/JSX formatting","updatedAt":1436813002000},{"assignedTo":"","body":"This fixes indentation of dangling closing parenthesis. (#3436, #871)","comments":2,"createdAt":1436027377000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":3738,"state":"closed","title":"Fixing indentation of dangling closing parenthesis","updatedAt":1436811846000},{"assignedTo":"","body":"Example:\r\n\r\n```\r\n/**\r\n * @param who who to greet\r\n */\r\nfunction hello(who: string) {\r\n\treturn `Hello, ${who}`;\r\n}\r\n```\r\n\r\nRenaming the `who` argument currently does not update the `@param who` annotation, which is then left as incorrect and no longer","comments":15,"createdAt":1426944599000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/103348?v=3","loggedByName":"mindplay-dk","milestone":"","number":2452,"state":"open","title":"Feature: update JSDoc blocks upon refactoring","updatedAt":1436811468000},{"assignedTo":"rbuckton","body":"```ts\r\n// @experimentaldecorators: true\r\n// @emitdecoratormetadata: true\r\n// @target: system\r\n\r\nimport { Foo } from 'foo';\r\ndeclare var decorator: any;\r\n\r\n@decorator\r\nexport class Test {\r\n\tconstructor(private foo: Foo) { }\r\n}\r\n```\r\n\r\n```js\r\n// ...\r\nS","comments":1,"createdAt":1435535005000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/886059?v=3","loggedByName":"Zoltu","milestone":"TypeScript 1.6","number":3663,"state":"closed","title":"Decorators and SystemJS","updatedAt":1436810559000},{"assignedTo":"","body":"Example:\r\n\r\n```\r\nclass Foo {\r\n\tfoo(): number {\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\nfunction check(a: Foo, b: Foo): boolean {\r\n\treturn a.foo < b.foo;\r\n}\r\n```\r\n\r\nThis came up when wrapping existing fields in getters. After testing this, it appears that this is vali","comments":2,"createdAt":1436728007000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/406394?v=3","loggedByName":"evanw","milestone":"","number":3831,"state":"closed","title":"TypeScript allows comparison of function objects using ordering operators (<, >, <=, and >=)","updatedAt":1436808251000},{"assignedTo":"","body":"Hi,\r\n\r\nwhy is the online TypeScript compiler (http://www.typescriptlang.org/Playground) marking the line 225 as error. (Type is not assignable)\r\n\r\n[Link to TypeScript editor with code]\r\n(http://www.typescriptlang.org/Playground#src=interface%20IContr","comments":6,"createdAt":1436474169000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5908247?v=3","loggedByName":"biqas","milestone":"","number":3799,"state":"open","title":"Generics: Type is not assignable","updatedAt":1436807314000},{"assignedTo":"","body":"I've seen a discussion around this in Flow, but couldn't find one here. The discussion was around this (desired, but not actual) syntax:\r\n\r\n```ts\r\nfunction fn({ a: number, b: string as b2 }) {\r\n  return a + b2;\r\n}\r\n```\r\n\r\nThis is what a ts user expec","comments":5,"createdAt":1436651320000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/13122495?v=3","loggedByName":"d180cf","milestone":"","number":3828,"state":"closed","title":"Inline type annotations for rebinded destructuring parameters","updatedAt":1436806680000},{"assignedTo":"","body":"es7 proposal : https://github.com/sebmarkbage/ecmascript-rest-spread\r\n\r\n## Spread properties\r\n\r\n### Typing\r\nIn my opinion the goal of this method is to be able to duplicate an object and changing some props, so I think it's particularly important in ","comments":8,"createdAt":1424554292000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES7","name":"ES7","color":"bfd4f2"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":2103,"state":"open","title":"Support es7 Rest/Spread properties","updatedAt":1436805184000},{"assignedTo":"paulvanbrenk","body":"Moving this over from CodePlex (23 votes, assigned to jonturner, http://typescript.codeplex.com/workitem/938):\r\n\r\nI would really like to be able to use a TypeScript version of the JavaScript code snippets when writing TypeScript in Visual Studio.","comments":26,"createdAt":1406735403000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6309423?v=3","loggedByName":"craigktreasure","milestone":"","number":312,"state":"open","title":"TypeScript snippets in VS","updatedAt":1436782381000},{"assignedTo":"","body":"If there's a decorator that takes all optional parameters it's easy to mistake and write\r\n```\r\n@decorator class A {}\r\n```\r\ninstead of\r\n```\r\n@decorator() class A {}\r\n```\r\nThe problem is that there's no warning and the decorator function does not get c","comments":4,"createdAt":1436720471000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2598443?v=3","loggedByName":"nippur72","milestone":"","number":3830,"state":"closed","title":"Decorators, allow @D and @D() to be the same","updatedAt":1436774535000},{"assignedTo":"JsonFreeman","body":"I am using some type definitions that follow the pattern below and that have been compiling up until commit d71af8a3fb485880866e097cbb6963d5aab62678\r\n\r\n``` ts\r\ndeclare module MyModule {\r\n  class Foo extends Foo.__Class {}\r\n  module Foo {\r\n    class _","comments":9,"createdAt":1435007462000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1848130?v=3","loggedByName":"cascadian","milestone":"TypeScript 1.6","number":3602,"state":"closed","title":"Error TS2506 when class extends class in module with same name","updatedAt":1436762136000},{"assignedTo":"","body":"When namespaces merge, any members exported by one namespace declaration are in scope in all the merged declarations. Ambient external modules like `declare module \"foo\" { }` can merge too. It seems natural then that exported declarations are in scop","comments":4,"createdAt":1434517169000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3535,"state":"open","title":"Should merging ambient external modules share a scope that includes their export specifiers?","updatedAt":1436761562000},{"assignedTo":"","body":"Hi guys, I have searched around existing ``Elvis Operator`` in TS and no result has found. That`s why I propose include this ability. \r\n\r\nFor example, like in C# or Groovy we can write next expression\r\n\r\n``` typescript\r\nlet result = somevalue?.name;\r","comments":2,"createdAt":1436694424000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5380167?v=3","loggedByName":"OlegDokuka","milestone":"","number":3829,"state":"closed","title":"Elvis Operator","updatedAt":1436726080000},{"assignedTo":"","body":"Syntactic classification is slow in VS because the JSON string representing the classifications is too big. It classifies pretty much every token in the file. I was talking with @CyrusNajmabadi and we have an idea for how to reduce this string. Here'","comments":17,"createdAt":1436565542000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3816,"state":"open","title":"Plan for making syntactic classification consume less memory","updatedAt":1436643558000},{"assignedTo":"","body":"As a continuation of #6, which allows the `abstract` modifier on class declarations, we should extend this to class methods.\r\n\r\nRelevant points:\r\n* An `abstract` method may only be declared in an `abstract` class\r\n* `abstract` methods may not have im","comments":8,"createdAt":1430262680000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.6","number":2947,"state":"closed","title":"Abstract methods","updatedAt":1436637481000},{"assignedTo":"","body":"```typescript\r\ninterface A {}\r\nvar arrayOrNot = Math.random() > 0.5 ? <A>{} : [<A>{}]; // <-- expected A|A[] actual A\r\n```","comments":1,"createdAt":1436621758000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":3826,"state":"closed","title":"Inference doesn't work with the ternary operator","updatedAt":1436637415000},{"assignedTo":"","body":"This adds a `processTypes.ts` script that can be used to create a `factory.generated.ts` file, which contains functions for creating, updating, and testing TypeScript AST nodes.\r\n\r\nThe `processTypes.ts` script uses the LKG version of TypeScript to pa","comments":0,"createdAt":1436232436000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3762,"state":"open","title":"Auto-Generation of Node \"Factory\" Functions","updatedAt":1436562661000},{"assignedTo":"zhengbli","body":"FormData definition is updated at #337.\r\n\r\n```typescript\r\ndeclare var FormData: {\r\n    prototype: FormData;\r\n    new (form?: HTMLFormElement): FormData;\r\n}\r\n```\r\n\r\nBut it degraded at a62e7d218d861cba32b2aa8203fd20a55a015c43.\r\n\r\n```typescript\r\ndeclare","comments":5,"createdAt":1415269066000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3143368?v=3","loggedByName":"falsandtru","milestone":"TypeScript 1.6","number":1074,"state":"closed","title":"FormData definition is degraded","updatedAt":1436562405000},{"assignedTo":"","body":"Moves the logic for decorator metadata type serialization to the emitter.\r\n\r\nThis follows #3380, and also fixes #3663.","comments":5,"createdAt":1435720939000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3690,"state":"closed","title":"Move type serialization to emitter","updatedAt":1436562081000},{"assignedTo":"zhengbli","body":"@Arnavion pointed out to me that a recent update moved `classList` from `HTMLElement` up into `Element`, which is great.\r\n\r\nHowever, `className` appears to still be only in `HTMLElement`.  Is there a reason why?  [MDN](https://developer.mozilla.org/e","comments":9,"createdAt":1432054989000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/398379?v=3","loggedByName":"kfranqueiro","milestone":"TypeScript 1.6","number":3220,"state":"closed","title":"className is only included in HTMLElement, not Element","updatedAt":1436561143000},{"assignedTo":"zhengbli","body":"From PR https://github.com/Microsoft/TypeScript/pull/3741","comments":5,"createdAt":1436208726000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1493671?v=3","loggedByName":"xtuc","milestone":"TypeScript 1.6","number":3753,"state":"closed","title":"URL is missing from Window interface","updatedAt":1436561098000},{"assignedTo":"yuit","body":"![image](https://cloud.githubusercontent.com/assets/972891/7717089/4fc8db22-fe50-11e4-86e6-cd11f474bb7b.png)\r\n","comments":0,"createdAt":1432083605000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3231,"state":"closed","title":"Named function expression bodies don't have completion info for their names","updatedAt":1436558585000},{"assignedTo":"","body":"Fix #3231 and for class expression case","comments":7,"createdAt":1435282639000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3643,"state":"closed","title":"Completion list show correct entry for function expression and class expression","updatedAt":1436558568000},{"assignedTo":"","body":"Ref: #3812.","comments":2,"createdAt":1436551504000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3814,"state":"closed","title":"Fixes type assertion argument in type predicate functions bug.","updatedAt":1436556095000},{"assignedTo":"","body":"Hi,\r\nI'm having problems with enums defined inside external module (i'm compiling to amd module format).\r\nWhen using internal module format\r\n``` TypeScript\r\nmodule someModule {\r\n    export enum Color {Red, Green, Blue};\r\n}\r\n```\r\nthen resulting JS con","comments":2,"createdAt":1436477543000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1206512?v=3","loggedByName":"atsu85","milestone":"","number":3800,"state":"closed","title":"enum exported from external module (\"declare module\" + \"export enum\") doesn't generate any javascript","updatedAt":1436555729000},{"assignedTo":"danquirk","body":"Repro:\r\n\r\n```shell\r\njake clean\r\njake update-sublime\r\n```\r\n\r\nThis tries to build tsserver, but tsserver needs tsc to be built and it isn't.","comments":0,"createdAt":1436492603000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3805,"state":"closed","title":"'jake update-sublime' doesn't work when workspace is clean","updatedAt":1436555380000},{"assignedTo":"","body":"Fixes #3805 ","comments":3,"createdAt":1436551838000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":3815,"state":"closed","title":"Make update-sublime depend on local task","updatedAt":1436555367000},{"assignedTo":"","body":"I just found out that property access expressions doesn't work on type predicate functions and `instanceof` type guards.\r\n\r\n```typescript\r\n\r\nclass A {\r\n    propA: number;\r\n}\r\n\r\nclass B {\r\n    propB: number;\r\n}\r\nclass C {\r\n    propC: A;\r\n}\r\n\r\ndeclare ","comments":5,"createdAt":1436546779000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3812,"state":"closed","title":"Support type guards on property access expression","updatedAt":1436554624000},{"assignedTo":"","body":"I know this is a touchy subject to some.\r\n\r\nBut i really like typing \"var\" these days.  Is it unreasonable to put in a request for a menu option that is defaulted to off, that allows for the \"var\" keyword to be transpiled into an ES6 \"let\"?  Between ","comments":2,"createdAt":1430589927000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9012043?v=3","loggedByName":"Sharpiro","milestone":"","number":3008,"state":"closed","title":"Transpiling \"var\" to \"let\" through an option in the projects menu","updatedAt":1436553590000},{"assignedTo":"mhegazy","body":"Change the emit for `__extends` to be : \r\n\r\n```js\r\nvar __root = typeof global !== \"undefined\" && global || typeof window !== \"undefined\" && window || this;\r\nvar __extends = __root.__extends = __root.__extends || function (d, b) {\r\n    for (var p in b","comments":6,"createdAt":1420764494000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1622,"state":"open","title":"Change the emit for `__extends` to support easy global override","updatedAt":1436552025000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\ndeclare module \"M1\" {\r\n    export var ABC;\r\n    export var DEF;\r\n}\r\n\r\ndeclare module \"M2\" {\r\n    import { ABC/**/ } from \"M1\"\r\n}\r\n```\r\n\r\nRequest completion on `ABC`. Even though there's no way we could be typing out `DEF`, we're given ","comments":5,"createdAt":1436221474000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3756,"state":"closed","title":"Import specifiers give inappropriate completion options on the current property name","updatedAt":1436547709000},{"assignedTo":"","body":"Fixes #3756.","comments":1,"createdAt":1436495243000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3807,"state":"closed","title":"Don't filter out current import specifier names/JSX attributes from completion lists","updatedAt":1436547696000},{"assignedTo":"","body":"Hi team,\r\n\r\nI get an error in the typescript compiler which I cant seem to understand how to fix. The error is:\r\n`>ex.ts(3,27): error TS2307: Cannot find external module 'autobahn'.`\r\n\r\nI'm transpiling like:\r\n`>tsc -m commonjs -t es5 \"./typings/autob","comments":2,"createdAt":1436504488000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9676439?v=3","loggedByName":"bradws","milestone":"","number":3808,"state":"closed","title":"tsc shows error 'Cannot find external module', but it works !?!","updatedAt":1436543578000},{"assignedTo":"","body":"Given the following files\r\n```ts\r\n// animal.ts\r\nclass Animal {}\r\nexport = Animal;\r\n```\r\n```ts\r\n// mammal.ts\r\nimport Animal = require('./animal');\r\nclass Mammal extends Animal {}\r\nexport = Mammal;\r\n```\r\n```ts\r\n// human.ts\r\nimport Mammal = require('./m","comments":3,"createdAt":1417605748000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/995120?v=3","loggedByName":"whitneyit","milestone":"","number":1350,"state":"closed","title":"Multiple `__extends` output across various files","updatedAt":1436530941000},{"assignedTo":"","body":"I am using typescript for a project where strict mode is enabled and I have some problem using typescriptServices.js because it is not \"strict mode\" friendly. As an example, \"arguments\" must not be used as an identifier ...\r\n\r\nThis is not a big deal,","comments":3,"createdAt":1434103959000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5363266?v=3","loggedByName":"Yellowmat","milestone":"Community","number":3486,"state":"closed","title":"typescriptServices.js is not \"strict mode\" friendly","updatedAt":1436521353000},{"assignedTo":"mhegazy","body":"```ts\r\nclass C<T, U> {\r\n    x: T;\r\n    y: U;\r\n}\r\n\r\nfunction getClass<T>(c: T) {\r\n    return C;\r\n}\r\n\r\nclass MyClass extends getClass(2) <string, number> {\r\n}\r\n```\r\n\r\ngenerates:\r\n```ts\r\ndeclare class C<T, U> {\r\n    x: T;\r\n    y: U;\r\n}\r\ndeclare function","comments":0,"createdAt":1436515996000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3810,"state":"open","title":"Invlaid declaration emit with expressions in extend position","updatedAt":1436516010000},{"assignedTo":"","body":"```ts\r\nfunction getClass<T>(c: T) {\r\n    return class C<U> {\r\n        x: T;\r\n        y: U;\r\n    }\r\n}\r\n\r\nclass MyClass extends getClass(2) <string> {\r\n}\r\n\r\nvar m: MyClass;\r\nm.x = \"\";  \r\n```\r\n\r\ngenerates error;\r\n> error TS2322: Type 'string' is not ass","comments":0,"createdAt":1436513457000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3809,"state":"open","title":"Uninstantiated type parameter in error message for a symbol originating from a class expression","updatedAt":1436513462000},{"assignedTo":"RyanCavanaugh","body":"This is a preview of what we're thinking of implementing for JSX/React support.\r\n\r\nThe goal here is to substantially decouple the typechecking of JSX expressions from the semantics of React. Our goal is to be able to model plausible JSX consumers (wi","comments":70,"createdAt":1431983168000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.6","number":3203,"state":"closed","title":"Decoupled typing for JSX and React","updatedAt":1436493588000},{"assignedTo":"","body":"Using this PR because https://github.com/Microsoft/TypeScript/pull/3642 appears confused about the pushes/merges due to me confusing casing.","comments":0,"createdAt":1436491564000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":3803,"state":"closed","title":"TSLint support","updatedAt":1436491820000},{"assignedTo":"","body":"With the somewhat recent proliferation of human authored style comments in PRs I thought it worth considering setting up TSLint and appropriate rule support. The current rule list is not final and I only made non-controversial fixes (namely, not addi","comments":12,"createdAt":1435281981000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":3642,"state":"closed","title":"TSLint rules and fixes","updatedAt":1436491622000},{"assignedTo":"","body":"","comments":1,"createdAt":1436487308000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3801,"state":"closed","title":"Readd className to SVGStylable for compatibility","updatedAt":1436488535000},{"assignedTo":"","body":"Fixes #3761.\n\n<!-- Reviewable:start -->\n[<img src=\"https://reviewable.io/review_button.png\" height=40 alt=\"Review on Reviewable\"/>](https://reviewable.io/reviews/microsoft/typescript/3763)\n<!-- Reviewable:end -->\n","comments":15,"createdAt":1436238217000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3763,"state":"closed","title":"Fixes emit of type predicate in declaration files","updatedAt":1436479450000},{"assignedTo":"JsonFreeman","body":"```ts\r\nfunction foo<T>(x = class { static prop: T }): T {\r\n    return undefined;\r\n}\r\n\r\nvar result = foo(class { static prop = \"hello\" }); // Returns {}\r\n```\r\n\r\nExpected: Infers string\r\nActual: No inference candidates\r\n\r\nThe problem is the condition i","comments":0,"createdAt":1436466158000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":3796,"state":"closed","title":"Type argument inference into static members of a class expression does not work","updatedAt":1436479029000},{"assignedTo":"","body":"Fixes #3796","comments":3,"createdAt":1436466749000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3798,"state":"closed","title":"Type argument inference for class expressions","updatedAt":1436479010000},{"assignedTo":"","body":"Fix #2838 ","comments":2,"createdAt":1436314469000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3776,"state":"closed","title":"Fix the definition of interface ErrorEventHandler","updatedAt":1436478543000},{"assignedTo":"zhengbli","body":"There is a new spec for window.onerror ( https://html.spec.whatwg.org/multipage/webappapis.html#errorevent ). I came across this when I tried to implement a custom handler in typescript and the definition was incorrect/outdated. I got this link from ","comments":9,"createdAt":1429565963000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1020579?v=3","loggedByName":"niemyjski","milestone":"TypeScript 1.6","number":2838,"state":"closed","title":"Incorrect definition for window.onerror","updatedAt":1436478543000},{"assignedTo":"","body":"Fix issue #3753","comments":1,"createdAt":1436303552000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3773,"state":"closed","title":"Add window.URL","updatedAt":1436478457000},{"assignedTo":"","body":"Fix issue #3613","comments":2,"createdAt":1436305308000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3774,"state":"closed","title":"Change the return types of several well-known functions to NodeListOf<Element>","updatedAt":1436478450000},{"assignedTo":"","body":"Fix issue #3220 ","comments":1,"createdAt":1436313052000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3775,"state":"closed","title":"Move className and id from HTMLElement to Element","updatedAt":1436478443000},{"assignedTo":"","body":"Fix issue #1074 ","comments":1,"createdAt":1436314803000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3777,"state":"closed","title":"Fix FormData constructor","updatedAt":1436478427000},{"assignedTo":"","body":"ES6 introduces an interesting use of iterable in `Promise.all()`, which takes `Iterable<any | Promise<any>>` and returns a `Promise` of `Array<any>`, where the elements of the result array follow the sequence of the iterable.\r\n\r\nWhile TypeScript is n","comments":1,"createdAt":1433777202000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8416067?v=3","loggedByName":"FranklinWhale","milestone":"","number":3420,"state":"open","title":"Suggestion: Access to element types of a tuple in generics","updatedAt":1436472703000},{"assignedTo":"","body":"For the source:\r\n```ts\r\nfunction f(x: any): x is string {\r\n  return typeof x === \"string\";\r\n}\r\n```\r\nThe declaration output is:\r\n```\r\ndeclare function f(x: any): ;\r\n```\r\n\r\nBut it should be:\r\n```ts\r\ndeclare function f(x: any): x is string;\r\n```","comments":1,"createdAt":1436231175000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"TypeScript 1.6","number":3761,"state":"closed","title":"Declaration emitter does not emit type predicate","updatedAt":1436470505000},{"assignedTo":"","body":"","comments":5,"createdAt":1436464717000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106995?v=3","loggedByName":"ShyykoSerhiy","milestone":"","number":3795,"state":"closed","title":"fixed issue https://github.com/Microsoft/TypeScript/issues/3486","updatedAt":1436468912000},{"assignedTo":"","body":"This may help the compiled results be better synced with desired output.\r\n\r\nBTW, can we expect compile on save feature in Visual Studio Code?","comments":6,"createdAt":1435822669000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":3706,"state":"closed","title":"Queue files that trigger failed compiling on save, and emit files related to them together with the last successful compiling. (Visual Studio)","updatedAt":1436468680000},{"assignedTo":"","body":"```typescript\r\nexport abstract class ComposerContent<PropsT, StatesT, FetchT> extends ReactComposerComponent< PropsT, StatesT > {\r\n    public abstract fetch< FetchT >(): FetchT;\r\n}\r\n\r\nclass Feed1 extends ComposerContent<{}, {}, boolean> {\r\n    fetch(","comments":2,"createdAt":1436428714000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3791,"state":"closed","title":"No error checking on generic abstract method","updatedAt":1436468200000},{"assignedTo":"","body":"We have typescript set to combine output into a single file. we've noticed that, seemingly at random, a very small change in a source file will result in huge changes in the output file resulting from the order of classes being totally reorganized.\r\n","comments":7,"createdAt":1436394077000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/219113?v=3","loggedByName":"michaelaird","milestone":"","number":3786,"state":"open","title":"Radical (and random) reorganization of output file","updatedAt":1436468091000},{"assignedTo":"","body":"Is this an appropriate question for here or do you prefer I put it on Stack Overflow or somewhere else?\r\n\r\nMy [app](https://github.com/pitosalas/typescript/tree/master/csvproc) has grown to two classes and I want to organize it into three files, one ","comments":1,"createdAt":1436458356000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/44681?v=3","loggedByName":"pitosalas","milestone":"","number":3794,"state":"open","title":"What is current advice for multi-file apps?","updatedAt":1436468014000},{"assignedTo":"","body":"Let's say I want to write a `Promise<T>`-like generic class with a method that makes sense only for certain `T`:\r\n\r\n```ts\r\nclass PromiseLike<T> {\r\n  then<U>(mapping: (value: T) => U): Promise<U> {\r\n    /*...*/\r\n  }\r\n\r\n  /** if T extends U[], then the","comments":3,"createdAt":1436046667000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/13122495?v=3","loggedByName":"d180cf","milestone":"","number":3742,"state":"closed","title":"Conditional signatures of generic methods.","updatedAt":1436466649000},{"assignedTo":"","body":"``` ts\r\nexport function injection(clazz: Class)\r\n    export function injection(...metadata: Metadata[])\r\n    export function injection(...value: any[]) {\r\n        \r\n        if (typeof value === typeof []) {\r\n            return (clazz: Class) => {\r\n  ","comments":3,"createdAt":1436389487000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5380167?v=3","loggedByName":"OlegDokuka","milestone":"","number":3785,"state":"closed","title":"problem with rest params and function overloading","updatedAt":1436464553000},{"assignedTo":"paulvanbrenk","body":"The following commands have become *very slow* to respond in Visual Studio 2015 Preview when working with TypeScript projects (the same commands were nearly instant in Visual Studio 2013):\r\n\r\n- Jump to definition (F12): there is a 3-8 second pause an","comments":19,"createdAt":1416471975000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1796256?v=3","loggedByName":"mrcrowl","milestone":"TypeScript 1.5","number":1222,"state":"closed","title":"Slow navigation in Visual Studio 2015 Preview","updatedAt":1436464101000},{"assignedTo":"","body":"Using generics, it seems as the TypeScript compiler fails to identify illegal type casts.\r\nSee the code below, which should be self-explanatory.\r\nThe convertSucceedsCore method allows you to convert anything without compiler warnings. This should onl","comments":4,"createdAt":1436277159000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6299617?v=3","loggedByName":"jeremyhallden","milestone":"","number":3768,"state":"closed","title":"Generics allows erroneous type casting","updatedAt":1436460666000},{"assignedTo":"vladima","body":"VS2013 / Node.Js extension from here http://www.codefoster.com/open-existing-nodejs-project-in-visual-studio/\r\nThis project: https://github.com/TypeStrong/atom-typescript, just open it, and open TS files one by one, trying to perform typing in opened","comments":3,"createdAt":1433953721000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.5.3","number":3468,"state":"closed","title":"Very slow TypeScript processing for TypeScript/nodejs project","updatedAt":1436460645000},{"assignedTo":"","body":"- VSCode 0.3.0\r\n- create a TS file\r\n- put below contents\r\n- Right click -> Format\r\n\r\n=> the closing is on the wrong indent\r\n\r\n```\r\nvar merged = objects.mixin(\r\n\ttrue\r\n);\r\n```\r\n\r\n=>\r\n\r\n```\r\nvar merged = objects.mixin(\r\n\ttrue\r\n        );\r\n```","comments":1,"createdAt":1435594725000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/900690?v=3","loggedByName":"bpasero","milestone":"Community","number":3673,"state":"open","title":"[format] wrong indent in this case","updatedAt":1436429582000},{"assignedTo":"mhegazy","body":"```typescript\r\nvar paragraphs = document.querySelectorAll(\"p\");\r\nfor (let p of paragraphs) {\r\n\tconsole.log(p);\r\n}\r\n```\r\n\r\n```\r\nfoo.ts(2,15): error TS2488: The right-hand side of a 'for...of' statement must have a '[Symbol.iterator]()' method that ret","comments":18,"createdAt":1428617968000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.7","number":2695,"state":"open","title":"for-of does not work with DOM collections when target is ES6","updatedAt":1436428718000},{"assignedTo":"","body":"Hi,\r\n\r\n**TS Version**: 1.4\r\n\r\nIn the following:\r\n\r\n```TypeScript\r\nclass Bar {\r\n\tbar ='bar';\r\n}\r\n\r\nclass Foo {\r\n \tfoo = 100;\r\n}\r\n\r\nfunction f1(x: Bar|Foo) {\r\n\t\r\n\tif(x instanceof Bar){\r\n\t\tconsole.log(x.bar);\r\n\t}\r\n\telse {\r\n\t\tconsole.log(x.foo); // Error","comments":5,"createdAt":1421608231000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":1719,"state":"open","title":"Type guard with instanceof fails to narrow type in `else` block","updatedAt":1436424299000},{"assignedTo":"","body":"I'm not sure if this is an editor bug or LS bug. I just noticed this difference in color:\r\n\r\n<img width=\"213\" alt=\"screen shot 2015-07-09 at 2 03 56 pm\" src=\"https://cloud.githubusercontent.com/assets/1324476/8588978/60c22634-2643-11e5-8c12-3dca98ad5","comments":1,"createdAt":1436422008000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3790,"state":"open","title":"export keyword has different color(blue in VSCode) on classes and interfaces ","updatedAt":1436423531000},{"assignedTo":"","body":"Fixes bad formatting in fourslash file.","comments":1,"createdAt":1436411899000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3789,"state":"closed","title":"Fixes fourslash code formatting","updatedAt":1436412328000},{"assignedTo":"","body":"Seems like Babel supports other JSX factories other than `React.createElement(...)`:\r\n\r\nHere is docs from `deku` another JSX framework from Segment.io\r\nUsing `.babelrc`:\r\n\r\n```json\r\n{\r\n  \"jsxPragma\": \"element\"\r\n}\r\n```\r\nSource: https://github.com/deku","comments":1,"createdAt":1436402979000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3788,"state":"open","title":"Support other JSX factories","updatedAt":1436406561000},{"assignedTo":"","body":"","comments":2,"createdAt":1436316345000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3778,"state":"closed","title":"Don't call push.apply, it can stack overflow with large arrays.","updatedAt":1436401772000},{"assignedTo":"","body":"If for (var v of expr) { } is emitted as..\r\n\r\nfor (var _i = 0, _a = expr; _i < _a.length; _i++) {\r\n    var v = _a[_i];\r\n}\r\n\r\nthen shouldn't HTMLCollections be allowed since were just looping over the indexes?","comments":1,"createdAt":1430422985000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/671093?v=3","loggedByName":"djarekg","milestone":"","number":2973,"state":"closed","title":"for...of supported array/collection types","updatedAt":1436400808000},{"assignedTo":"","body":"It will be great if TypeScript had an implementation of the \"::\" bind operator of ECMAScript 7. Some examples of this operator and the implementation in ES5:\r\n**Bind**\r\n````typescript\r\n// ES5\r\nvar log = console.log.bind(console);\r\n\r\n// ES7\r\nlet log =","comments":7,"createdAt":1434315424000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES7","name":"ES7","color":"bfd4f2"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3979433?v=3","loggedByName":"lucasmciruzzi","milestone":"","number":3508,"state":"open","title":"ES7 \"::\" bind operator","updatedAt":1436400367000},{"assignedTo":"","body":"From looking through the specification, I don't think we are doing the right thing when a `let` declaration spans multiple lines.\r\n\r\nThe following:\r\n\r\n```TypeScript\r\nlet\r\nx\r\n```\r\n\r\nseems to incorrectly compile to\r\n\r\n```JavaScript\r\nlet;\r\nx;\r\n```` \r\n\r\n","comments":3,"createdAt":1436378217000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3784,"state":"open","title":"ASI incorrectly kicks in for let declarations","updatedAt":1436399555000},{"assignedTo":"yuit","body":"```TypeScript\r\nvar x = class C {\r\n    y: C;\r\n    constructor() {\r\n        var x: C/*1*/;\r\n        C/*2*/\r\n    }\r\n}\r\n```\r\n\r\nTry adding a dot at `/*1*/` and `/*2*/`.\r\n\r\n# At position 1:\r\n\r\n```\r\ngetCompletionsAtPosition('C:\\Users\\drosen\\AppData\\Local\\Te","comments":2,"createdAt":1431040248000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3077,"state":"closed","title":"Semantic LS fails in several different ways when dotting off of class expression name","updatedAt":1436394852000},{"assignedTo":"yuit","body":"There is an error on the use modifiers in a local class definition.\r\n```ts\r\nfunction f() {\r\n    class C {\r\n        static foo() { } // Modifiers cannot appear here.\r\n        public bar() { } // Modifiers cannot appear here.\r\n    }\r\n}\r\n```\r\n\r\nDitto fo","comments":0,"createdAt":1435799445000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":3703,"state":"closed","title":"Modifiers are not allowed on class members inside a function","updatedAt":1436393250000},{"assignedTo":"","body":"Fix Issue #3703","comments":1,"createdAt":1436300902000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3772,"state":"closed","title":"Allow modifier on class member for classDeclaration/classExpression inside function","updatedAt":1436391282000},{"assignedTo":"","body":"When I import a module that has an enum and then I pass a string variable as index, with the noImplicitAny flag set to true, I get an error of implicit any in the index signature.\r\n\r\n### Examples:\r\n**This works but it has an unwanted behavior detaile","comments":3,"createdAt":1434314200000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3979433?v=3","loggedByName":"lucasmciruzzi","milestone":"","number":3507,"state":"closed","title":"Bugs with enum (import and typing)","updatedAt":1436384229000},{"assignedTo":"zhengbli","body":"Hi guys, \r\nI was converting some more TS code to 1.5 but I noticed a problem while upgrading from 1.4 to 1.5.\r\n\r\nMy issue is that the code below used to compile in 1.4 but doesn't in 1.5 because the onerror event changed.\r\n\r\n    addReq.onerror = (eve","comments":3,"createdAt":1435873797000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"TypeScript 1.6","number":3721,"state":"closed","title":"IDBRequest interface error while upgrading from 1.4 to 1.5","updatedAt":1436382756000},{"assignedTo":"","body":"Please fill the following out:\r\n\r\n- Name: (correctly formatted)\r\n- Homepage url: (homepage/primary entry point for users)\r\n- Brand Guidelines/Licensing: (or anything we need to know before using your logo)\r\n- Logo: (svg if possible, pngs over 500x200","comments":1,"createdAt":1434463044000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/12906971?v=3","loggedByName":"Auggetit","milestone":"","number":3519,"state":"closed","title":"New Website Logo: [insert name]","updatedAt":1436382671000},{"assignedTo":"","body":"```TypeScript\r\ninterface I {\r\n    property1: number;\r\n    property2: string;\r\n}\r\n\r\nvar x: I = {\r\n    /**/property1\r\n}\r\n```\r\n\r\nBoth `property1` and `property2` are suggested at that position even though it currently exists in the object literal. To ma","comments":0,"createdAt":1435792448000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3700,"state":"open","title":"Completion of object literal/binding patterns suggests identifiers at beginning of existing identifier","updatedAt":1436382554000},{"assignedTo":"","body":"`EventTarget` objects expose an `addEventListener` method, which registers an `EventListener` (or `EventListenerObject`) with the target. An `EventListener` is simply a function from some `Event` to `void`; however, many `EventTarget` objects pass an","comments":3,"createdAt":1434997975000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1834919?v=3","loggedByName":"lilred","milestone":"","number":3599,"state":"closed","title":"EventTarget interface not generic","updatedAt":1436382539000},{"assignedTo":"","body":"Hi all,\r\n\r\nWe currently have a AST model for TypeScript which is useful for compilers, editors, and linters.\r\n\r\nHowever, it would be extremely useful to have a type model, a la Java's reflective model. There are a huge number of use-cases supporting ","comments":2,"createdAt":1435221613000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/825421?v=3","loggedByName":"christyharagan","milestone":"","number":3628,"state":"open","title":"Discussion: (Reflective) Type Model","updatedAt":1436382447000},{"assignedTo":"","body":"This proposal is based on `C#` spec for preprocessor directives. https://msdn.microsoft.com/en-us/library/aa691099(v=vs.71).aspx\r\n\r\n### Problem\r\n\r\nSome JS applications are used in multiple platforms. I.e. Cordova/Phonegap for mobile platforms, isomor","comments":3,"createdAt":1435579638000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3670,"state":"open","title":"Preprocessor directives proposal","updatedAt":1436382433000},{"assignedTo":"","body":"In some TypeScript code I'm trying to compile, `return { value: this.props.value || '' };`, however this results in the error `Property 'value' does not exist on type 'TodoTextInputProps'` even though\r\n\r\n```ts\r\n/// <reference path=\"react/react.d.ts\" ","comments":1,"createdAt":1435831272000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4174312?v=3","loggedByName":"theqwertman","milestone":"","number":3710,"state":"open","title":"TS2339 Fails to trace Interface inheritance","updatedAt":1436382331000},{"assignedTo":"","body":"I am using tsify and browserify to build my typescript application.\r\n\r\nIt works, but it is sadly very slow ( https://github.com/smrq/tsify/issues/54 ).\r\n\r\nIt seems the typescript compiler would need an incremental build mode to make \"tsify like uses\"","comments":2,"createdAt":1436375638000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/160200?v=3","loggedByName":"kuon","milestone":"","number":3782,"state":"closed","title":"Proposal: Incremental build mode","updatedAt":1436380510000},{"assignedTo":"","body":"The current formatter will produces:\r\n\r\n```javascript\r\nvar rows = this.props.block.getIn(['content', 'rows']) ||\r\n    Immutable.fromJS([]);\r\n\r\nvar rows = ['foo',\r\n    'bar'];\r\n\r\n```\r\n\r\nI think the following would be better:\r\n\r\n\r\n```javascript\r\nvar ro","comments":3,"createdAt":1436374081000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/160200?v=3","loggedByName":"kuon","milestone":"","number":3781,"state":"open","title":"Wrong indentation for multiline rvalue","updatedAt":1436378645000},{"assignedTo":"","body":"Introducing `int` type could allows some  error to be caught at compile time (like trying to index an array with a float) and perhaps improve performance of outputted javascript, to obtains true `int`, TypeScript could systematically emit a cas with ","comments":16,"createdAt":1406054598000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":195,"state":"open","title":"Suggestion: int type","updatedAt":1436359845000},{"assignedTo":"","body":"bind() returns type 'any' and does not type check it's arguments. e.g.\r\n\r\n    var add = function (a: number, b: number) { return a + b; };\r\n    var addString = add.bind(null, 'hello');\r\n\r\ncompiles without error and 'addString' has type any. \r\n\r\nbind ","comments":17,"createdAt":1406106800000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/846867?v=3","loggedByName":"jameslong","milestone":"","number":212,"state":"open","title":"bind(), call(), and apply() are untyped","updatedAt":1436351000000},{"assignedTo":"","body":"I want to be able to define type guards inline like below:\r\n```typescript\r\nconst enum SyntaxKind {\r\n  VariableDeclaration,\r\n  FunctionDeclaration,\r\n}\r\n\r\ninterface Node {\r\n  kind: SyntaxKind\r\n}\r\n\r\ninterface VariableDeclaration extends Node {\r\n  varPro","comments":9,"createdAt":1436106134000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3744,"state":"closed","title":"inline type-guard","updatedAt":1436316989000},{"assignedTo":"RyanCavanaugh","body":"//cc @RyanCavanaugh\r\n\r\nHere is the code to reproduce.\r\n\r\nNotice how I make a spelling mistake for props when using `Message` component. `<Message mesage=\"World!\" />`. I would had expected TypeScript to give me a compile error here.\r\n\r\n```bash\r\nnode .","comments":9,"createdAt":1435956938000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/287744?v=3","loggedByName":"prabirshrestha","milestone":"TypeScript 1.6","number":3737,"state":"closed","title":"JSX props are not validated","updatedAt":1436316892000},{"assignedTo":"","body":"","comments":2,"createdAt":1436298742000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3771,"state":"closed","title":"Fix bug #3737 (exported JSX classes props not validated)","updatedAt":1436316876000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\ndeclare module \"M1\" {\r\n    export var V;\r\n}\r\n\r\ndeclare module \"M2\" {\r\n    import { /**/ } from \"M1\"\r\n}\r\n```\r\n\r\nWe shouldn't show a builder in the above, but we currently do so.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/972","comments":0,"createdAt":1435881921000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3729,"state":"closed","title":"Import specifier shouldn't show builder","updatedAt":1436315649000},{"assignedTo":"DanielRosenwasser","body":"Test case:\r\n\r\nfunction foo(.<request completions>\r\n\r\nObserve:\r\na list of global visible symbols are proposed. however the only possible completion would be another dot.\r\n\r\nthe language service shouldn't propose anything here. It doesn't propose anyth","comments":5,"createdAt":1432214613000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"TypeScript 1.6","number":3242,"state":"closed","title":"Poor Intellisense/completion with rest parameters","updatedAt":1436315640000},{"assignedTo":"","body":"Fixes #3242.","comments":2,"createdAt":1435880487000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3727,"state":"closed","title":"Don't give back completions after stray dots","updatedAt":1436305559000},{"assignedTo":"","body":"Fixes #3729.\r\n\r\nI suggest this be reviewed commit by commit.","comments":1,"createdAt":1436221513000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3757,"state":"closed","title":"Don't show builders in import clauses","updatedAt":1436305539000},{"assignedTo":"RyanCavanaugh","body":"I'm getting an issue with React/JSX on VSCode with the master from today and I use the latest `react-jsx.d.ts` and `react.d.ts` from `DT`. I extend `React.Component` in an another file and then use it on my current file. So I don't expose React names","comments":3,"createdAt":1436258629000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"TypeScript 1.6","number":3764,"state":"closed","title":"React import is being omitted","updatedAt":1436305411000},{"assignedTo":"","body":"We weren't marking `React` as used when using JSX elements in `--jsx React`, which caused the import of that symbol to be elided.\r\n\r\nFix: Mark this symbol as used and issue an error if it can't be found.\r\n\r\nRef #3764","comments":3,"createdAt":1436294961000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3770,"state":"closed","title":"Fix #3764","updatedAt":1436305106000},{"assignedTo":"","body":"Aside from the change in unit-test; the RWC has no regression","comments":1,"createdAt":1436290862000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3769,"state":"closed","title":"Binding anonymous with name for functionExpression and classExpression","updatedAt":1436300918000},{"assignedTo":"","body":"fix method parameter decorator emitter","comments":3,"createdAt":1436269019000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8984221?v=3","loggedByName":"jaboko","milestone":"","number":3765,"state":"closed","title":"Update emitter.ts","updatedAt":1436299943000},{"assignedTo":"","body":"1.5-beta.\r\n\r\nI am using the Node interface to walk the syntax tree.  However, when I hit a node that should be 'let', I appear to be getting a 'kind' of InterfaceKeyword instead of LetKeyword.  The text of the node is 'let'.  These two items are adja","comments":7,"createdAt":1436227700000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8585666?v=3","loggedByName":"ecp3","milestone":"","number":3760,"state":"closed","title":"get InterfaceKeyword instead of letKeyword during tree walk","updatedAt":1436298757000},{"assignedTo":"DanielRosenwasser","body":"As mentioned by @JsonFreeman in https://github.com/Microsoft/TypeScript/pull/3698#discussion_r33834234, completion at the cursor in the following example should list `a` and `b` (and I believe with no builder allowed).\r\n\r\n```TypeScript\r\nlet x, y;\r\nle","comments":0,"createdAt":1436226506000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3758,"state":"open","title":"Object literals in an assignment pattern do not get completions","updatedAt":1436295933000},{"assignedTo":"","body":"I tried to compile using `--target es6` compiler option and majority of d.ts files from DefinitelyTyped spit out error primarily concerning new module system.\r\n\r\nIs there any workaround to this? Am I stuck with `--target es5 --module commonjs` until ","comments":1,"createdAt":1435900142000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8480743?v=3","loggedByName":"daniel-shin1104","milestone":"","number":3732,"state":"closed","title":"DefinitelyTyped d.ts files and --target es6","updatedAt":1436295605000},{"assignedTo":"","body":"If a diagnostic request is actually canceled, we will throw away the type checker as we cannot be certain that it is still in a usable state.\r\n\r\nI recommend reviewing this with ?w=1 to make the diff easier to understand.","comments":3,"createdAt":1434651911000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3561,"state":"closed","title":"Make it possible to cancel requests to get diagnostics.","updatedAt":1436295485000},{"assignedTo":"mhegazy","body":"Looking at history : https://github.com/Microsoft/TypeScript/commits/master/bin/lib.d.ts\r\n\r\nWas there on April 11 : https://github.com/Microsoft/TypeScript/blob/6f1feffe6710a3201fb46a0b01e16051bfc18a29/bin/lib.d.ts#L1689\r\n\r\nIsn't there on April 18: h","comments":28,"createdAt":1430285000000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"TypeScript 1.5.3","number":2953,"state":"closed","title":"`DataView` and other interfaces missing from lib.d.ts","updatedAt":1436292383000},{"assignedTo":"","body":"Array literal (rest parameter) don't seem to work with constructor\r\n\r\nexample:\r\n```javascript\r\nlet a = [1, 2, ...arr, 4, 5]; //works\r\nMath.max(...arr); //works\r\nmyFunction(...arr); //works\r\nnew myClass(...arr); //error\r\n```","comments":2,"createdAt":1436273560000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/347244?v=3","loggedByName":"yukulele","milestone":"","number":3766,"state":"closed","title":"Spread arguments in new call don't work in TS 1.4","updatedAt":1436287721000},{"assignedTo":"","body":"The method Object.observe(object, callback) generates a warning during the build. ","comments":3,"createdAt":1435936813000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7525600?v=3","loggedByName":"piraveen","milestone":"","number":3735,"state":"closed","title":"Object.observe() Generating a warning","updatedAt":1436287623000},{"assignedTo":"","body":"Classes support getters / setters\r\n\r\n```\r\nclass MyClass {\r\n  get value(): string { return 'value'; }\r\n  set value(v: string): string {}\r\n}\r\n```\r\n\r\nbut the corresponding interface is not supported:\r\n\r\n```\r\ninterface MyInterface {\r\n  get value(): strin","comments":3,"createdAt":1436116321000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Canonical","name":"Canonical","color":"000000"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/111951?v=3","loggedByName":"mhevery","milestone":"","number":3745,"state":"closed","title":"Support getter setters in interfaces","updatedAt":1436282879000},{"assignedTo":"","body":"This speeds up incremental parsing by about 25% as the incremental parser pass only has to update one property on most nodes instead of two.  i.e. now only the start needs to be adjusted (as the length stays the same in any reused node).  Previously ","comments":8,"createdAt":1421087682000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1646,"state":"open","title":"Store start/length in nodes instead of start/end.  ","updatedAt":1436247739000},{"assignedTo":"","body":"Consider the following class: \r\n\r\n```tsx\r\nexport class MyComponent {  \r\n  render() {}\r\n}\r\n```\r\n\r\nIf you use it : \r\n\r\n```tsx\r\nimport {MyComponent} from \"./valuebasedUsage\";\r\nvar foo = <MyComponent/>\r\n```\r\n\r\nemit: \r\n```js\r\nvar foo = React.createElement","comments":2,"createdAt":1436226775000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":3759,"state":"closed","title":"JSX: Used import does not generate a dependency","updatedAt":1436231281000},{"assignedTo":"RyanCavanaugh","body":"It seems like when running only `tsc` on the root folder of a project. It doesn't compile all the `.tsx` files. The current behavior is that it compiles all `.ts` files(if not using `exclude` option).","comments":3,"createdAt":1436164126000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"TypeScript 1.6","number":3746,"state":"closed","title":"tsx files are not compiled by default","updatedAt":1436230072000},{"assignedTo":"RyanCavanaugh","body":"```ts\r\nvar span = <span interface-name=\"bold\">!</span>;\r\n```\r\nNo error\r\n```ts\r\nvar span = <span class-name=\"bold\">!</span>;\r\n```\r\nError:\r\n```\r\napp.tsx(3,23): error TS1003: Identifier expected.\r\napp.tsx(3,28): error TS1005: ',' expected.\r\napp.tsx(3,29","comments":1,"createdAt":1435626526000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.6","number":3678,"state":"closed","title":"Parse error with identifier name in JSX","updatedAt":1436229817000},{"assignedTo":"","body":"Fixes issue #3678","comments":1,"createdAt":1436208154000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3751,"state":"closed","title":"Properly parse keyword-like identifiers in JSX","updatedAt":1436229804000},{"assignedTo":"","body":"","comments":1,"createdAt":1435782558000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3698,"state":"closed","title":"Don't show a builder for property names in object binding patterns","updatedAt":1436225863000},{"assignedTo":"","body":"","comments":2,"createdAt":1434643812000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3556,"state":"closed","title":"Make classification cancellable.","updatedAt":1436218425000},{"assignedTo":"JsonFreeman","body":"```typescript\r\nfunction foo(input:\r\n\r\nexport class Foo {\r\n    bar() {\r\n        let f = new Foo();\r\n        return f.bar();\r\n    }\r\n}\r\n```\r\n\r\nThis code causes compiler error:\r\n\r\n```\r\nTypeError: Unable to get property 'parent' of undefined or null refe","comments":1,"createdAt":1433861569000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"TypeScript 1.6","number":3443,"state":"closed","title":"Unable to get property 'parent' of undefined or null reference","updatedAt":1436215868000},{"assignedTo":"","body":"This TS code for class declaration :  \r\n```ts\r\nclass SomeClass {\r\n  static CONSTANT = 10; // Wanna insert it as a prototype member!\r\n  showStatic() { alert(SomeClass.CONSTANT); return this; } // OK...\r\n  showPrototype() { alert(this.CONSTANT); return","comments":7,"createdAt":1436062301000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6551569?v=3","loggedByName":"GoToLoop","milestone":"","number":3743,"state":"closed","title":"Declare static non-method members within class' prototype","updatedAt":1436214224000},{"assignedTo":"yuit","body":"Currently in nav-bar and completion, the class expression name has incorrect icon. We need to update the icon to be similar to the one used by class declaration.\r\n","comments":0,"createdAt":1436214085000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.6","number":3754,"state":"open","title":"Update class expression icon in visual studio completion list & nav bar","updatedAt":1436214097000},{"assignedTo":"","body":"Support intersection types ala [flowtype](http://flowtype.org/docs/union-intersection-types.html#intersection-example)","comments":35,"createdAt":1416841278000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":1256,"state":"closed","title":"Intersection types","updatedAt":1436212708000},{"assignedTo":"","body":"Fix error TS2339: Property 'URL' does not exist on type 'Window'.","comments":7,"createdAt":1436039708000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1493671?v=3","loggedByName":"xtuc","milestone":"","number":3741,"state":"closed","title":"Add property URL in Window interface","updatedAt":1436209322000},{"assignedTo":"","body":"It seems my initial assessment was incorrect (see a bit below what I originally thought happened). It turns out the output filename of a typescript file is not cased the same as the typescript file, but the same as the casing in the reference path an","comments":5,"createdAt":1423687303000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8823799?v=3","loggedByName":"Vossekop","milestone":"","number":2011,"state":"open","title":"Casing of output js and js.map files is not consistent.","updatedAt":1436208592000},{"assignedTo":"","body":"```typescript\r\nvar y = {\r\n  \"\\u0042\": 1\r\n}\r\ny.B\r\n```\r\n Highlight ```B``` or findAllReference at ```B``` should display both ```B``` and ```\"\\u0042\"```. Currently it only show ```\"\\u0042\"\r\n\r\nAlso doing rename at ```B``` show the rename info as ```\"\\u0","comments":1,"createdAt":1436208176000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3752,"state":"closed","title":"FindAllReference and Rename for unicode escape sequence","updatedAt":1436208432000},{"assignedTo":"","body":"The following code snippet compiles without type errors though the type variable `T` is constrained to `string` type. \r\n\r\n```typescript\r\n\r\nfunction foo1(f: (s: string) => string)\r\n{\r\n\treturn f(\"hello world\");\r\n}\r\n\r\nfunction foo2(f: (s: number) => num","comments":9,"createdAt":1433732897000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2034762?v=3","loggedByName":"kseo","milestone":"","number":3410,"state":"closed","title":"Unexpected behavior of generic constraints","updatedAt":1436207888000},{"assignedTo":"","body":"#3735","comments":3,"createdAt":1435936890000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7525600?v=3","loggedByName":"piraveen","milestone":"","number":3736,"state":"closed","title":"Fixed Object.observe warning (Added observe typing) #3735","updatedAt":1436207197000},{"assignedTo":"","body":"I have one folder `src` in root path that contains the folders `folder1` and `folder2`. I specify a `outDir` flag to `built`. The compiled output is now skipping the `src` folder under `built`. So it only contains `built/folder1` and `built/folder2` ","comments":2,"createdAt":1436168117000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3747,"state":"closed","title":"Missing folder when compiling using outDir flag","updatedAt":1436206822000},{"assignedTo":"ahejlsberg","body":"Compile the following using noImplicitAny:\r\n```ts\r\nfunction foo<T>(x: T): T { return x }\r\n\r\ninterface I {\r\n    x: string;\r\n}\r\n\r\nvar i: I = foo({ x: null }); // Error\r\nvar s: string = f(null); // No error\r\n```\r\n\r\nNeither of these should be errors. Acc","comments":9,"createdAt":1418244040000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":1436,"state":"open","title":"Should not widen in type argument inference","updatedAt":1436204566000},{"assignedTo":"","body":"Examples:\r\n```javascript\r\nclass C<R>\r\n{\r\n  value : R;\r\n  constructor(v? : R) { this.value = v }\r\n}\r\n\r\n// OK, no type error\r\nvar a : C<string> = new C(\"x\");\r\n\r\n// OK, type error\r\nvar b : C<string> = new C(1);\r\nvar c : C<string> = true ? new C(\"x\") : n","comments":5,"createdAt":1435928808000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/100681?v=3","loggedByName":"bergmark","milestone":"","number":3733,"state":"closed","title":"generics Instantiated as null : {} causes other type errors to disappear","updatedAt":1436204512000},{"assignedTo":"","body":"I have the following code:\r\n**test.html**\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head lang=\"zh-CN\">\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\r\n    <title></title>\r\n</head>\r\n<body>\r\n    <div id=\"co","comments":5,"createdAt":1435934276000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5856466?v=3","loggedByName":"tcstory","milestone":"","number":3734,"state":"closed","title":"Error:(2, 28) TS2339: Property 'querySelector' does not exist on type 'Node'.","updatedAt":1436204134000},{"assignedTo":"JsonFreeman","body":"```ts\r\ninterface Foo {\r\n    a?: string;\r\n    b: string;\r\n}\r\n<Foo>{ a: undefined } // Neither type is assignable to the other\r\n```\r\n\r\nThis happens because with respect to property `a`, Foo is the winner, but with respect to property `b`, the object li","comments":5,"createdAt":1418259333000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":1447,"state":"closed","title":"Type assertion only works if one type is completely assignable to the other","updatedAt":1436203269000},{"assignedTo":"","body":"Simple example:\r\n\r\n```typescript\r\nvar out: {[name: string] : number} = { a: 5, b: 10 };\r\nout.a // Is not valid\r\n```\r\n\r\nIt would be nice if we could retain the keys and values, but still constrain the object literal. For backwards compatibility it pro","comments":3,"createdAt":1435825746000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/64731?v=3","loggedByName":"Ciantic","milestone":"TypeScript 1.6","number":3708,"state":"closed","title":"Constrain object literal without losing the keys and values","updatedAt":1436203250000},{"assignedTo":"","body":"The purpose of contextual typing is to enrich our typing of an expression based on type information from its context. Naturally, this works best when the contextual type is as rich as possible. Looking at getApparentType in the compiler, the type it ","comments":2,"createdAt":1435876062000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3724,"state":"closed","title":"Always get the apparent type when retrieving a contextual type","updatedAt":1436203101000},{"assignedTo":"","body":"    type Guid = string;\r\n    var foo: { [deviceId: Guid]: DateTime } = {};\r\n\r\nGenerates the error:\r\n\r\n> An index signature parameter type must be 'string' or 'number'.\r\n\r\nIt would be nice to be able to type indexes using string-aliases.","comments":5,"createdAt":1421976288000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/836194?v=3","loggedByName":"jlennox","milestone":"","number":1778,"state":"open","title":"'type' aliases of string can not be used as object index signature.","updatedAt":1436202585000},{"assignedTo":"","body":"Trigger inteli-sense inside an object creation literal.\r\nI would expect to get the fields of the expected argument as only suggestions, not the global suggestions.\r\n\r\nPicture attached\r\n![screen shot 2015-06-30 at 09 43 35](https://cloud.githubusercon","comments":4,"createdAt":1435828888000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1926584?v=3","loggedByName":"isidorn","milestone":"","number":3709,"state":"open","title":"Do not give me default inteli-sense suggestions when there are better matches","updatedAt":1436202152000},{"assignedTo":"","body":"Hello everyone.\r\n\r\nI'm learning TypeScript and I noticed some weird behaviour. I don't know if it's intentional or not and I didn't find answers because I don't know exactly how to describe the issue since English is not my main language. But let me ","comments":2,"createdAt":1435803171000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7031754?v=3","loggedByName":"MaikelChan","milestone":"","number":3704,"state":"closed","title":"Redundant lines of code generated from constructors?","updatedAt":1436201754000},{"assignedTo":"","body":"Am I doing something wrong in below code? or is it a bug?\r\n```typescript\r\nclass A {\r\n\tpublic static a: string = \"jhuihiuhu\";\r\n\tpublic static method() {\r\n\t};\r\n}\r\nfunction f(a: new () => A) {\r\n\ta.method(); // error\r\n\ta.a = \"hej\"; // error\r\n}\r\nf(A);\r\n``","comments":1,"createdAt":1436173895000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3748,"state":"closed","title":"Can't access static members in function scope.","updatedAt":1436201390000},{"assignedTo":"","body":"Hi,\r\n\r\nI have an object that has an Enum as key. The Enum values get eventualy compiled to number in JS.\r\n\r\nI'd like to be able to specify this:\r\n`var mapping: { [mappingKey: MappingKey]: string; }`\r\n(MappingKey is Enum)\r\n\r\nThis doesn't work and thro","comments":1,"createdAt":1436193983000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/67437?v=3","loggedByName":"vfonic","milestone":"","number":3750,"state":"closed","title":"Enum error: Index signature parameter type must be string or number","updatedAt":1436200939000},{"assignedTo":"","body":"Fixes a little indentation nit.","comments":2,"createdAt":1435875505000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"","number":3723,"state":"closed","title":"Changed tabs to spaces and reformatted errorCheck.ts","updatedAt":1436200550000},{"assignedTo":"","body":"","comments":3,"createdAt":1425568850000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":2210,"state":"closed","title":"Run jake in interactive mode so output isn't lost.","updatedAt":1436185170000},{"assignedTo":"","body":"```\r\nconst enum things {\r\n   a,\r\n   b,\r\n}\r\nvar a: typeof things // ok\r\n```","comments":4,"createdAt":1434490099000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3528,"state":"closed","title":"Fixes #3440 (typeof const enum)","updatedAt":1436185152000},{"assignedTo":"","body":"Started to look at implementing #1003 and struggled understanding enums.\r\nThis patch addresses the following issues:\r\n- Make ambiant & const enums report similar errors (allow any constant number expression). fixes #2790\r\n- If an invalid enum constan","comments":10,"createdAt":1431275245000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3103,"state":"closed","title":"Enum improvements","updatedAt":1436185137000},{"assignedTo":"","body":"Hi, I'm porting a \"huge\" solution which consists of more than one web application project on the same Visual Studio solution. The scenario is like this:\r\n- a Visual Studio Solution consisting of multiple App Library projects and multiple websites, al","comments":9,"createdAt":1435672571000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/246067?v=3","loggedByName":"AGiorgetti","milestone":"","number":3684,"state":"closed","title":"Error: TS2300 Duplicate Identifier when having multiple web projects on the same solution referencing .d.ts files","updatedAt":1436168247000},{"assignedTo":"paulvanbrenk","body":"Can we fix this or is cmd too limited? After installing 1.4 out of band (https://visualstudiogallery.msdn.microsoft.com/2d42d8dc-e085-45eb-a30b-3f7d50d55304) on top of VS2013 my command prompt experience is still stuck at 1.0:\r\n\r\n```\r\nC:\\>tsc -v\r\nVer","comments":8,"createdAt":1424300965000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":2068,"state":"open","title":"tsc.exe should point to latest tsc after installing out of band installers","updatedAt":1436128293000},{"assignedTo":"","body":"Hi,\r\n  I'm using visual studio code to reproduce this sample in typescript\r\n\r\nhttp://odetocode.com/blogs/scott/archive/2015/02/18/using-jspm-with-visual-studio-2015-and-asp-net-5.aspx\r\n\r\n  all works fine until I arrive at the point 4 and try to use m","comments":18,"createdAt":1430494370000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/127777?v=3","loggedByName":"lucamorelli","milestone":"","number":2988,"state":"closed","title":"problem with external imports in aurelia","updatedAt":1436117799000},{"assignedTo":"","body":"Add support of partial classes. [Mixins] (https://github.com/Microsoft/TypeScript/wiki/Mixins) is not the same, because it's run-time realization. Need compile realization, where partial classes will be combine into one before converting typescript t","comments":35,"createdAt":1409299753000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/946095?v=3","loggedByName":"disshishkov","milestone":"","number":563,"state":"open","title":"Partial classes ","updatedAt":1436100070000},{"assignedTo":"","body":"Migrated issue from codeplex: https://typescript.codeplex.com/workitem/507\r\n\r\nCurrently typescript will type the \"this\" pointer in function callbacks as \"any.\" Arrow syntax lets us capture \"this\" from the outer scope, and this can enable proper typin","comments":49,"createdAt":1406199865000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/357283?v=3","loggedByName":"abergs","milestone":"","number":229,"state":"open","title":"Support specifying type of \"this\" in function implementations","updatedAt":1436100005000},{"assignedTo":"","body":"I found that `import`ing files in root directory didn't require relative path to be specified like \r\n```typescript\r\nimport Constants = require(\"../Constants.ts\");\r\n```\r\ninstead `require`ing by its filename worked just as well like when you `import` e","comments":1,"createdAt":1435892386000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8480743?v=3","loggedByName":"daniel-shin1104","milestone":"","number":3731,"state":"closed","title":"Import root / parent directory files without relative path?","updatedAt":1436057854000},{"assignedTo":"rbuckton","body":"> ## ES7 proposal\r\nThe ES7 proposal for decorators can be found here: https://github.com/wycats/javascript-decorators\r\nThe ES7 proposal serves as the base of this proposal. Below are notes about how the type system \r\n\r\n## Decorator targets:\r\n\r\n### Cl","comments":112,"createdAt":1425698093000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES7","name":"ES7","color":"bfd4f2"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2249,"state":"open","title":"Decorators","updatedAt":1436052504000},{"assignedTo":"","body":"This is a proposal for using property access as another form of type guards (see #900) to narrow union types. While we're investigating expanding the power of type guards (#1007) this feature would support the natural style that JavaScript programmer","comments":2,"createdAt":1416875809000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":1260,"state":"open","title":"Consider property access a form of type guards","updatedAt":1436047926000},{"assignedTo":"","body":"Hi guys, \r\n\r\nIn regards to type guards, one thing that is fairly common in the javascript world is checking a property to see if its a certain type.\r\n\r\n```javascript\r\nvar variable: number | boolean[] | string;\r\nif (variable.length) {\r\n    // variable","comments":2,"createdAt":1436028024000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6986076?v=3","loggedByName":"AbubakerB","milestone":"","number":3740,"state":"closed","title":"Suggestion: Type guarding by means of property checking","updatedAt":1436034422000},{"assignedTo":"","body":"Foremost, thanks for all the work you guys have put into this amazing language. \r\n\r\nIs there a support for `export`ing `type` alias?\r\n\r\nFor example,\r\n\r\ntypes.ts\r\n```typescript\r\nimport express = require(\"express\");\r\n\r\nexport type ExpressResponse = exp","comments":10,"createdAt":1435808128000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8480743?v=3","loggedByName":"daniel-shin1104","milestone":"","number":3705,"state":"closed","title":"Export type alias?","updatedAt":1435906555000},{"assignedTo":"","body":"I think this code:\r\n```typescript\r\ninterface A {\r\n\ta?: string;\r\n\tb: string;\r\n}\r\n\r\nlet a: A = { a: \"hej\", b: \"dÃ¥\" };\r\na.a = undefined;\r\na.b = undefined;\r\n```\r\n\r\nshould yield an error at line:\r\n\r\n```typescript\r\na.b = undefined;\r\n```\r\n\r\nbecause we are u","comments":4,"createdAt":1435891217000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3730,"state":"closed","title":"Undefinining a non optional interface property doesn't yield an error","updatedAt":1435896962000},{"assignedTo":"","body":"**TS 1.4**\r\n\r\nType guard fails to narrow the union type when returning early.\r\n\r\n```ts\r\nfunction foo(x: number | string) {\r\n\tif (typeof x === 'string') {\r\n\t\treturn;\r\n\t}\r\n\t// x should now be a number\r\n\tif (2 % x !== 0) {\r\n\t\t// do something\r\n\t}\r\n}\r\n```","comments":5,"createdAt":1426584063000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1058243?v=3","loggedByName":"jedmao","milestone":"","number":2388,"state":"open","title":"Use control flow analysis for type guards","updatedAt":1435895046000},{"assignedTo":"","body":"There are two issues addressed here, meant to help support down-level emit for Async Functions (and optionally Generators) in ES5/3.\r\n\r\nCurrently, the `objectAllocator` for both **compiler** and **services** sets the default node `pos`/`end` to `0`. ","comments":1,"createdAt":1435867742000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3719,"state":"closed","title":"Change default node pos/end to -1","updatedAt":1435888036000},{"assignedTo":"","body":"Sorry if this has already been submitted (was not able to find).\r\nIt would be great if TS could consider the base class from an extended generic type.\r\n```\r\ninterface Type<T> {\r\n    new (...args: any[]): T;\r\n}\r\n\r\nfunction ok(type: Type<Error>) {\r\n\tre","comments":12,"createdAt":1426850744000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Canonical","name":"Canonical","color":"000000"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8625526?v=3","loggedByName":"stephanedr","milestone":"","number":2441,"state":"closed","title":"Consider base class from extended generic type","updatedAt":1435884292000},{"assignedTo":"","body":"Typescript generates standard JavaScript and erases the types in the generated code. I think this is fine, but for many dynamic programs, there is a need to process a heterogeneous collection. In that situation, the ability to easily determine the cl","comments":3,"createdAt":1435431577000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/546?v=3","loggedByName":"drudru","milestone":"","number":3660,"state":"closed","title":"Document a way to determine class at runtime (reflection)","updatedAt":1435882726000},{"assignedTo":"rbuckton","body":"Even though the TS spec's grammar doesn't seem to permit it, the following is now allowed:\r\n\r\n```TypeScript\r\nclass C {\r\n    constructor(...public rest) {\r\n    }\r\n}\r\n```\r\n\r\nSeems to have been introduced by 80edb2de4a058ccd8594d8faad5f8e1f4cbe8962.","comments":2,"createdAt":1435877684000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3725,"state":"closed","title":"Rest parameter with modifier is allowed","updatedAt":1435879732000},{"assignedTo":"","body":"Fixes #3725","comments":1,"createdAt":1435879330000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3726,"state":"closed","title":"Disallow modifiers on rest parameters","updatedAt":1435879718000},{"assignedTo":"DanielRosenwasser","body":"We report an error for the following code, :\r\n\r\n```ts\r\nfor (var {toString} in { a: 1 }) { // error TS2491: The left-hand side of a 'for...in' statement cannot be a destructuring pattern.\r\n   console.log(toString);\r\n}\r\n```\r\n\r\nWe also emit the followin","comments":0,"createdAt":1435863347000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"TypeScript 1.7","number":3715,"state":"open","title":"Down-level destructuring in `for..in` statement","updatedAt":1435879662000},{"assignedTo":"DanielRosenwasser","body":"![image](https://cloud.githubusercontent.com/assets/970430/7978249/dcb7f1e0-0ac5-11e5-9dce-edf98e80f6c9.png)\r\n","comments":0,"createdAt":1433399267000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"TypeScript 1.6","number":3378,"state":"closed","title":"Should not give suggestion when writing indexer key name.","updatedAt":1435878880000},{"assignedTo":"","body":"Hi guys,\r\n\r\nI faced an issue while trying to work with decorators. Here is my working code:\r\n\r\n```\r\nclass MyClass {\r\n    @log\r\n    myMethod(arg: string) { \r\n        return \"Message -- \" + arg;\r\n    }\r\n}\r\nfunction log(target: Object, propertyKey: stri","comments":8,"createdAt":1432277651000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/760518?v=3","loggedByName":"Fatme","milestone":"","number":3251,"state":"closed","title":"Decorators are not working in strict mode","updatedAt":1435878309000},{"assignedTo":"aozgaa","body":"# Proposal for Keyword `abstract`\r\n\r\nThis is a proposal for a new keyword, `abstract`, to allow for incomplete/partially implemented classes.\r\n\r\n# Introduction\r\n\r\nThis proposal expands upon #6, #2946, #2947.\r\n\r\nConsider the following situation. A use","comments":35,"createdAt":1434754275000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"","number":3578,"state":"closed","title":"Proposal for Abstract Classes and Methods","updatedAt":1435877850000},{"assignedTo":"aozgaa","body":"Support an `abstract` keyword for classes and their methods\r\n\r\nExamples:\r\n```TypeScript\r\nabstract class Base {\r\n    abstract getThing(): string;\r\n    getOtherThing() { return 'hello'; }\r\n}\r\nvar x = new Base(); // Error, 'Base' is abstract\r\n\r\n// Error","comments":50,"createdAt":1405442703000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"Community","number":6,"state":"closed","title":"Suggestion: abstract classes","updatedAt":1435875898000},{"assignedTo":"","body":"Implements #3578.\r\n\r\nAlso many thanks to @DickvdBrink for his initial contributions!","comments":22,"createdAt":1434754387000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"","number":3579,"state":"closed","title":"Abstract Classes and methods","updatedAt":1435875815000},{"assignedTo":"","body":"This compiles cleanly:\r\n\r\n```typescript\r\nfunction foo <T extends { someNumber: number }> (thingWithId: T): T {\r\n\treturn thingWithId;\r\n}\r\n\r\n[1,2].map(foo);\r\n```\r\n\r\nand obviously, numbers don't have a `someNumber` numeric property.","comments":1,"createdAt":1435868305000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/28029?v=3","loggedByName":"fernandezpablo85","milestone":"","number":3720,"state":"closed","title":"generic constraint not working","updatedAt":1435873075000},{"assignedTo":"","body":"Confirmed with @rbuckton \r\n\r\n```TypeScript\r\nvar y = [ { x: 100 } ];\r\n\r\nfor ({/**/x: abc} of y) {\r\n}\r\n```\r\n\r\nExpected: `(property) x: number`\r\nActual: Something like `(property) x: { x: number }`","comments":0,"createdAt":1435866593000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3718,"state":"open","title":"Quick info for object property binding elements in a for-of gives incorrect type","updatedAt":1435866602000},{"assignedTo":"","body":"While computed property names shouldn't necessarily get a builder (or maybe they should since you can have `x => x` in a computed property - those pesky expressions just manage to show up anywhere, huh?), they can eventually become index signatures, ","comments":1,"createdAt":1435865178000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3717,"state":"closed","title":"Show builder at beginning of index signatures & computed properties","updatedAt":1435865441000},{"assignedTo":"","body":"* *Related compatibility test: [arrow functions - lexical \"arguments\" binding](http://kangax.github.io/compat-table/es6/#arrow_functions_lexical_arguments_binding)*\r\n\r\nCurrently we make this an error when compiling to ES5, however we recently added l","comments":0,"createdAt":1435863982000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3716,"state":"open","title":"Down-level lexical 'arguments' binding for arrow functions","updatedAt":1435863982000},{"assignedTo":"","body":"From the kangax compatibility table ([related test](http://kangax.github.io/compat-table/es6/#block-level_function_declaration)):\r\n> [14](http://kangax.github.io/compat-table/es6/index.html#block-level-function-note) Note that prior to ES6, it was [r","comments":0,"createdAt":1435862945000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3714,"state":"open","title":"Support Block-level function declarations","updatedAt":1435863417000},{"assignedTo":"aozgaa","body":"Consider the following code:\r\n\r\n```ts\r\nabstract class A {}\r\nnew A(1);\r\n```\r\n\r\nThis should report one error, for invoking an abstract constructor. We currently report\r\n`\r\nerror TS2346: Supplied parameters do not match any signature of call target.\r\n`\r","comments":0,"createdAt":1435853806000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"TypeScript 1.6","number":3711,"state":"closed","title":"Extra Errors on Invocation of Abstract Constructor","updatedAt":1435862069000},{"assignedTo":"","body":"I don't see why omitting (or leaving remaining generics for type inference) is not allowed:\r\n\r\n```typescript\r\n\r\ninterface SomeInterface<M, T> {\r\n    other: T\r\n    validate(): M\r\n}\r\n\r\nfunction test<M,T>(t: T): SomeInterface<M, T> {\r\n    return <any> n","comments":7,"createdAt":1433873612000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/64731?v=3","loggedByName":"Ciantic","milestone":"","number":3448,"state":"open","title":"Omitting generics from the end is not allowed","updatedAt":1435861440000},{"assignedTo":"","body":"This fixes #3711, as identified by @RyanCavanaugh.","comments":2,"createdAt":1435855138000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"","number":3712,"state":"closed","title":"Abstract extra error","updatedAt":1435859946000},{"assignedTo":"aozgaa","body":"# Proposal for Merged Declarations between Classes & Interfaces\r\n\r\nThis is a proposal for a new feature, merging class/interface declarations, to allow existing libraries to remain type-compatible with dependencies that migrate from interface to clas","comments":0,"createdAt":1433202892000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"TypeScript 1.6","number":3332,"state":"closed","title":"Proposal: Merged Declarations for Classes and Interfaces","updatedAt":1435858988000},{"assignedTo":"","body":"This implements the proposal in #3332.","comments":8,"createdAt":1433202925000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"","number":3333,"state":"closed","title":"Merged Declarations for Classes and Interfaces","updatedAt":1435858903000},{"assignedTo":"","body":"var x:number = 10;\r\n\r\nfunction add(x, y) {\r\n\treturn x + y;\r\n}\r\nx =  add('1', 2); // since type of x is number, this line should have given compilation error\r\n","comments":4,"createdAt":1435823778000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/13147377?v=3","loggedByName":"dharmendrachouhan","milestone":"","number":3707,"state":"closed","title":"Type of variable x is number but still able to assign a return type of String type","updatedAt":1435854255000},{"assignedTo":"","body":"Hey guys, I'm from the Angular team and we are currently trying to use the TypeScript compiler to compile the project to system.register format. In the process, I noticed a bug with the output. I've cloned your branch **release1.5** to make sure that","comments":2,"createdAt":1435255189000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4161445?v=3","loggedByName":"ttowncompiled","milestone":"","number":3633,"state":"open","title":"Error: System.register format output for extending classes","updatedAt":1435828707000},{"assignedTo":"zhengbli","body":"```\r\n2345 Argument of type 'HTMLImageElement' is not assignable to parameter of type 'HTMLVideoElement'.\r\n  Property 'msHorizontalMirror' is missing in type 'HTMLImageElement'.\r\n```\r\n\r\n```drawImage``` call:\r\n```javascript\r\ncontext.drawImage(\r\n  image","comments":3,"createdAt":1432044330000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1189265?v=3","loggedByName":"NekR","milestone":"TypeScript 1.6","number":3216,"state":"closed","title":"Cannot draw image via canvas context.drawImage","updatedAt":1435820114000},{"assignedTo":"RyanCavanaugh","body":"Thanks @billti \r\n\r\nRepro:\r\n```ts\r\n<div className={''} /*completion here*/ ></div>;\r\n```\r\n\r\nExpected: Should get more attribute names\r\nActual: Global identifier list","comments":0,"createdAt":1435775797000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.6","number":3695,"state":"closed","title":"No attribute completion between JSX expression and closing tag","updatedAt":1435819971000},{"assignedTo":"","body":"Fixes bug #3695","comments":1,"createdAt":1435788046000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3699,"state":"closed","title":"Fix attribute completion following JSX exprs","updatedAt":1435819960000},{"assignedTo":"","body":"Fix issue #3216","comments":1,"createdAt":1435793237000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3701,"state":"closed","title":"Combine certain function overload types in lib.d.ts into union types","updatedAt":1435814354000},{"assignedTo":"","body":"Now that #3615 is in, here's an annoying one for editors without brace completion:\r\n\r\n```TypeScript\r\ninterface Thing {\r\n    abcdef: any;\r\n}\r\n\r\ninterface I {\r\n    property1: Thing;\r\n    property2: string;\r\n}\r\nvar foo: I;\r\nvar { property1: { /**/ } = f","comments":2,"createdAt":1435202055000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3623,"state":"closed","title":"Unclosed object binding patterns do not give correct completions","updatedAt":1435813160000},{"assignedTo":"","body":"> Disclaimer: This issue has not for purpose to prove that flow is better or worse than TypeScript, I don't want to criticize the amazing works of both team, but to list the differences in Flow and TypeScript **type system** and try to evaluate which","comments":33,"createdAt":1416929968000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":1265,"state":"open","title":"Comparison with Facebook Flow Type System","updatedAt":1435806023000},{"assignedTo":"","body":"Given this code:\r\n```typescript\r\ninterface A {\r\n\ta?: B;\r\n}\r\n\r\ninterface B {\r\n\ta: string;\r\n\tb: string;\r\n}\r\n\r\nlet a: A;\r\nconsole.log(a.a.b);\r\n```\r\nI want it to error on the line:\r\n```typescript\r\nconsole.log(a.a.b);\r\n```\r\nbecause I didn't add a check:\r\n","comments":3,"createdAt":1435758351000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3692,"state":"open","title":"Access undefined guard checking","updatedAt":1435802412000},{"assignedTo":"paulvanbrenk","body":"Create new TypeScript App, add a TypeScriptRootDir element to the proj file.\r\n\r\nSave a .ts the file, notice the rootDir element is ignored, it's not reported as an error, nor taken into account when calculating the basepath for the files.\r\n","comments":0,"createdAt":1431640095000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"TypeScript 1.6","number":3171,"state":"open","title":"Compile on Save doesn't take rootDir into account","updatedAt":1435796264000},{"assignedTo":"","body":"I'm doing a SourceFileObject.getNamedDeclarations on the following code snippet:\r\n```javascript\r\nmodule Mankala {\r\n  export class Rectangle {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    square() {\r\n    }\r\n  }\r\n}\r\n```","comments":7,"createdAt":1424878888000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6461412?v=3","loggedByName":"aeschli","milestone":"Community","number":2137,"state":"open","title":"SourceFileObject.getNamedDeclarations is missing declarations before methods","updatedAt":1435795853000},{"assignedTo":"DanielRosenwasser","body":"We currently give false confidence of the presence of a property, and this is probably a source of many bugs.\r\n\r\n* [ ] Show a `?` at the end of the name in a completion item and in quick info.\r\n* [ ] Use a different icon.","comments":3,"createdAt":1418088198000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.7","number":1411,"state":"open","title":"Visual Studio should show a question mark on optional members in completion lists and quick info","updatedAt":1435795522000},{"assignedTo":"yuit","body":"```ts\r\nvar v = {\r\n    [\"hello\"]() {\r\n        debugger;\r\n    }\r\n}\r\n```\r\n\r\nThis is from tests\\cases\\conformance\\es6\\computedProperties\\computedPropertyNamesSourceMap2_ES5.ts.\r\n\r\nRight now we have unmapped spans in the emitted source map, so the debugge","comments":3,"createdAt":1425583479000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":2212,"state":"open","title":"Implement source maps for computed properties","updatedAt":1435795508000},{"assignedTo":"vladima","body":"The Compile on Save functionality in Visual Studio 2013 when initially converting a file to TypeScript from JavaScript is buggy.  This may result in a negative first impression of TypeScript.\r\n\r\n**Repro:**\r\n  * Brand new Windows 8.1 fully patched wit","comments":6,"createdAt":1421896518000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3755379?v=3","loggedByName":"nycdotnet","milestone":"TypeScript 1.6","number":1768,"state":"closed","title":"Visual Studio Compile on Save not immediately wiring up after rename","updatedAt":1435795496000},{"assignedTo":"","body":"","comments":4,"createdAt":1435622204000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3677,"state":"closed","title":"Add Jake task to update the Sublime plugin","updatedAt":1435790524000},{"assignedTo":"","body":"C# and other languages have syntax sugar for accessing property chains where `null` (or in our case, `undefined`) might be encountered at any point in the object hierarchy.\r\n\r\n```TypeScript\r\nvar x = { y: { z: null, q: undefined } };\r\nconsole.log(x?.y","comments":33,"createdAt":1405445220000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":16,"state":"open","title":"Suggestion: \"safe navigation operator\", i.e. x?.y","updatedAt":1435789520000},{"assignedTo":"","body":"Hi! Is it possible to use multiple `tsconfig.json` per project, that is some kind of project-wide `tsconfig.json` located in root directory and additional `tsconfig.json` files located in sub-directories which may override/tune some options for that ","comments":7,"createdAt":1435301736000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1035026?v=3","loggedByName":"lazutkin","milestone":"","number":3645,"state":"closed","title":"Support for multiple tsconfig.json per project","updatedAt":1435785372000},{"assignedTo":"jonathandturner","body":"The wildcard domain for azurewebsites.net is not ideal for a custom domain","comments":5,"createdAt":1426197343000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2294695?v=3","loggedByName":"caitp","milestone":"TypeScript 1.6","number":2331,"state":"open","title":"TLS certificate invalid for https://www.typescriptlang.org","updatedAt":1435784780000},{"assignedTo":"jonathandturner","body":"http://www.typescriptlang.org/Playground\r\n\r\nI think the walkthrough on inheritance in the playground might have a bug. \r\n\r\nI'm not sure why tom.move is being passed 34 if it's unused. It's not clear to me if that should have thrown a compilation erro","comments":2,"createdAt":1433253606000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8498954?v=3","loggedByName":"tex23bm","milestone":"TypeScript 1.6","number":3343,"state":"open","title":"Walkthrough inheritance example bug","updatedAt":1435784772000},{"assignedTo":"JsonFreeman","body":"0.ts:\r\n```ts\r\n///<reference path=\"1.ts\"/>\r\n///<reference path=\"2.ts\"/>\r\nvar i: A | B;\r\nvar param: any;\r\ni.foo(param); // May or may not produce an error\r\n```\r\n1.ts:\r\n```ts\r\n///<reference path=\"0.ts\"/>\r\n///<reference path=\"2.ts\"/>\r\ninterface A {\r\n    ","comments":1,"createdAt":1423182587000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 2.0","number":1953,"state":"open","title":"Opening files in different order in IDE produces different errors","updatedAt":1435784600000},{"assignedTo":"vladima","body":"(Also posted on StackOverflow: https://stackoverflow.com/questions/28844917/typescript-cant-find-external-module-when-referenced-by-two-different-files)\r\n\r\nI may be missing something obvious, but Typescript's module resolver for commonjs isn't workin","comments":12,"createdAt":1425431239000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5140538?v=3","loggedByName":"michael-terry","milestone":"TypeScript 1.7","number":2192,"state":"open","title":"Compiler fails to find external module referenced by two different files","updatedAt":1435783824000},{"assignedTo":"vladima","body":"Delete 50 ts files at same time in VS 2013 is so slow, and the VS window is no response.\r\n\r\n![ts1 4](https://cloud.githubusercontent.com/assets/663400/6498765/d35da65e-c32a-11e4-90f4-3af05aa5ffc6.png)\r\n\r\n\r\nI think TS service is handle the file change","comments":1,"createdAt":1425526280000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/663400?v=3","loggedByName":"zcxp","milestone":"TypeScript 1.6","number":2206,"state":"closed","title":"Delete TS files in VS2013 Update 4 with TS1.4 is very slow","updatedAt":1435783813000},{"assignedTo":"vladima","body":"We should not allow mutating a property of a namespace import:\r\n```ts\r\n// Library\r\nexport var x = 1;\r\n\r\n// Consumer\r\nimport * as stuff from 'Library';\r\nstuff.x = 0;\r\n```\r\n\r\nIn ES6, these bindings are immutable.","comments":3,"createdAt":1427010162000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 2.0","number":2456,"state":"open","title":"Import namespace exports should be immutable","updatedAt":1435783664000},{"assignedTo":"vladima","body":"According to spec:\r\n\r\n> An expression is considered a constant enum expression if it is one of the following:\r\n> ....\r\n> *** An identifier or property access that denotes a previously declared member in the same constant enum declaration.\r\n> ....\r\n \r","comments":1,"createdAt":1429161245000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.7","number":2790,"state":"open","title":"Const enum expression in Ambient enum declaration behaves differently between spec and compiler","updatedAt":1435783652000},{"assignedTo":"vladima","body":"Original issue: https://github.com/systemjs/builder/issues/177","comments":0,"createdAt":1433356106000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.6","number":3363,"state":"open","title":"transpile function should provide the way to get generated source maps","updatedAt":1435783580000},{"assignedTo":"vladima","body":"Log Name:      Application\r\nSource:        .NET Runtime\r\nDate:          4/13/2015 1:06:59 PM\r\nEvent ID:      1026\r\nTask Category: None\r\nLevel:         Error\r\nKeywords:      Classic\r\nUser:          N/A\r\nDescription:\r\nApplication: devenv.exe\r\nFramework","comments":8,"createdAt":1428945036000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"TypeScript 1.6","number":2744,"state":"closed","title":"Visual Studio crash","updatedAt":1435783534000},{"assignedTo":"paulvanbrenk","body":"Hello,\r\n\r\nIf I create any of the Node.js web projects (using Node.js Tools for VS), I cannot get the properties pane for TS to show up.  I've tried adding a .ts file to the project but that didn't do the trick.  I also copied over the relevant lines ","comments":7,"createdAt":1420347306000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1009?v=3","loggedByName":"altano","milestone":"TypeScript 2.0","number":1588,"state":"open","title":"Allow properties pane in web projects","updatedAt":1435783374000},{"assignedTo":"paulvanbrenk","body":"It appears that changing the 'Combine JavaScript output into file' option in project properties does not cause the project system to believe that the project needs a full rebuild. This led to confusion with this situation:\r\n\r\nProject:\r\n- a.ts\r\n- stuf","comments":1,"createdAt":1423016207000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 2.0","number":1921,"state":"open","title":"Changing --out setting in project properties should mark project as needing a clean/rebuild","updatedAt":1435783362000},{"assignedTo":"","body":"For the following code:\r\n```ts\r\ndeclare namespace M {\r\n    // cursor here\r\n    interface I {\r\n\r\n        prop;\r\n    }\r\n\r\n    var v;\r\n}\r\n```\r\nOne would expect the middle nav bar to show M, and the right nav bar to show I. But the right nav bar shows v.","comments":5,"createdAt":1430774801000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":3026,"state":"open","title":"Navigation bar in .d.ts file ignores interfaces when cursor is outside the interface","updatedAt":1435783334000},{"assignedTo":"DanielRosenwasser","body":"![image](https://cloud.githubusercontent.com/assets/970430/7977419/76dc835c-0abd-11e5-81af-9ca6497a8486.png)\r\n\r\nCertainly something like `constructor` should still be there (maybe methods/properties in parent class or implemented interface), but othe","comments":2,"createdAt":1433395746000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"TypeScript 1.6","number":3377,"state":"open","title":"Should not give suggestion when writing a method in a class.","updatedAt":1435783246000},{"assignedTo":"","body":"","comments":0,"createdAt":1435781048000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3697,"state":"closed","title":"Add test case for completion when destructuring from a union type.","updatedAt":1435781450000},{"assignedTo":"ahmad-farid","body":"I have the following code:\r\n\r\n```ts\r\n    query(id: number) {\r\n        return this.$http\r\n            .get('/api/Entity/' + id)\r\n            .then(function (data) {\r\n            return data.data;     // (a)\r\n        });                       // (b)\r\n ","comments":2,"createdAt":1422891785000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/589286?v=3","loggedByName":"awerlang","milestone":"TypeScript 1.6","number":1888,"state":"closed","title":"Formatter gets lost chaining functions as callbacks.","updatedAt":1435780537000},{"assignedTo":"yuit","body":"I'm working with TypeScript 1.4.1 and Angular 1.3.0.  I've been creating controllers and services, registering them with Angular and things work pretty much fine.  However, when I set breakpoints in most Angular controllers, it appears the source map","comments":0,"createdAt":1429072704000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5204033?v=3","loggedByName":"tstearn","milestone":"TypeScript 1.7","number":2771,"state":"open","title":"Source Map Seems Off by One Line for Angular Controllers","updatedAt":1435780505000},{"assignedTo":"yuit","body":"Consider the following code:\r\n\r\n\t\tvar { name: nameA } = robotA;\r\n\t\tvar { name: nameB } = robotB;\r\n\r\nNotice the debug span when setting a breakpoint or when debugging.\r\n\r\n![untitled](https://cloud.githubusercontent.com/assets/5273975/5950881/a11ab02e-","comments":1,"createdAt":1422495582000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"TypeScript 1.7","number":1846,"state":"open","title":"Breakpoint span wrong when breakpoint is on destructuring variable decl","updatedAt":1435780467000},{"assignedTo":"yuit","body":"Let's say I'm writing a declaration file for a library that exports two external modules: `myLib` and `myLibWithExtras`. The `myLibWithExtras` module is exactly `myLib` but with some additional items. \r\n\r\nAs an example of what I'm trying to do:\r\n```\r","comments":8,"createdAt":1423753772000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/196944?v=3","loggedByName":"jbrantly","milestone":"TypeScript 1.7","number":2019,"state":"open","title":"Merge and re-export module in external module declaration","updatedAt":1435780442000},{"assignedTo":"yuit","body":"```ts\r\nfor (let v; ; ) { var v; }\r\nfor (let v in []) { var v; }\r\nfor (let v of []) { var v; }\r\n```\r\nThese all should be errors per the ES6 spec sections 13.6.3.1 and 13.6.4.1:\r\n\r\nIt is a Syntax Error if any element of the BoundNames of LexicalDeclara","comments":6,"createdAt":1425334628000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.7","number":2185,"state":"open","title":"Declaring a var inside a loop with a let of the same name gives no error","updatedAt":1435780423000},{"assignedTo":"yuit","body":"```ts\r\ninterface I {\r\n    foo;\r\n}\r\n\r\nfunction fun(): I {\r\n    var foo; // not shown\r\n    return { foo };\r\n}\r\n\r\nfun().foo; // find refs on foo\r\n```\r\n\r\nThe var should be listed as one of the references.","comments":0,"createdAt":1426811687000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 2.0","number":2435,"state":"open","title":"Find references does not go through shorthand properties","updatedAt":1435780391000},{"assignedTo":"","body":"![image](https://cloud.githubusercontent.com/assets/972891/7717057/b7abe7e4-fe4f-11e4-86bb-318e06548e10.png)\r\n","comments":0,"createdAt":1432083134000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":3229,"state":"open","title":"'default' gets incorrect completion info when a default export is present","updatedAt":1435780308000},{"assignedTo":"DanielRosenwasser","body":"Hi,\r\n\r\nI'm not sure if this is possible or not, but neither VS 2015 RC with the TypeScript 1.5 beta plugin nor atom-typescript offer autocompletion in this example:\r\n\r\nhttps://github.com/TypeStrong/typestrong-compiler/blob/35d8eb8662d9ad882ff29642fcb","comments":4,"createdAt":1432915685000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3755379?v=3","loggedByName":"nycdotnet","milestone":"TypeScript 1.6","number":3303,"state":"closed","title":"Language Service not providing autocomplete on object literal in union type","updatedAt":1435780143000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\ninterface I {\r\n    x: number;\r\n}\r\n\r\nlet { /*1*/x: y }: I = { x }\r\n```\r\n\r\nTry find all refs at `1`.\r\n\r\nExpected: All `x`s in the code are found.\r\nActual: No results returned","comments":1,"createdAt":1428536643000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":2674,"state":"closed","title":"Find all refs/get occurrences doesn't work on the left hand side of an object binding pattern element","updatedAt":1435779888000},{"assignedTo":"yuit","body":"There isn't a lot in the current ES6 spec draft, but it seems to indicate the constructor object that is in the process of being `new`'d at runtime.","comments":1,"createdAt":1427747100000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.7","number":2551,"state":"open","title":"Support 'new.target' meta object","updatedAt":1435779797000},{"assignedTo":"rbuckton","body":"We need 1. a unified colorization scheme for decorators, and 2. preferably a scheme that makes decorators easily recognizable.\r\n\r\nsublime text:\r\n![capture3](https://cloud.githubusercontent.com/assets/8000722/6976125/09c6bc90-d95a-11e4-9185-488d1676c1","comments":0,"createdAt":1428019454000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.7","number":2602,"state":"open","title":"decorators should be colorized differently","updatedAt":1435779777000},{"assignedTo":"CyrusNajmabadi","body":"![image](https://cloud.githubusercontent.com/assets/7121557/7286609/1722a522-e902-11e4-973f-32e161564d6f.png)\r\nWe don't support this feature. ","comments":1,"createdAt":1429740818000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.6","number":2879,"state":"closed","title":"Remove 'Show to Code Map' when right clicking .ts files in Solution Explorer","updatedAt":1435779665000},{"assignedTo":"mhegazy","body":"I'm using Visual Studio 2013 Update 3 with TypeScript 1.1 on Windows 8.1.\r\n\r\nI have a solution with multiple projects that use declaration files to reference each other. A core project emits a declaration file, and a single JavaScript output. Each de","comments":5,"createdAt":1414638082000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6707531?v=3","loggedByName":"jasonscharf","milestone":"TypeScript 2.0","number":994,"state":"open","title":"Compile on save in Visual Studio 2013 does not emit reference tags in declaration output when saving","updatedAt":1435779466000},{"assignedTo":"mhegazy","body":"```TypeScript\r\nfunction f()\r\n    return (function(a= () => typeof b === \"undefined\") {\r\n      var b = 1;\r\n      return a();\r\n    }());\r\n}\r\n\r\nconsole.log()\r\n```\r\n\r\nExpected: `true`\r\nActual: `false`","comments":2,"createdAt":1427927284000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.7","number":2584,"state":"open","title":"Functions in default parameters should have separate scope","updatedAt":1435779453000},{"assignedTo":"vladima","body":"Here is my setup\r\n\r\ntsconfig.json with the following content:\r\n{\r\n    \"compilerOptions\": {\r\n        \"module\": \"amd\",\r\n        \"noImplicitAny\": true,\r\n        \"removeComments\": false,\r\n        \"preserveConstEnums\": true,\r\n\t\"target\": \"ES5\",\r\n        \"s","comments":3,"createdAt":1429471172000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"TypeScript 1.6","number":2830,"state":"open","title":"TSServer: performance problems after typing when using tsconfig.json in large project","updatedAt":1435779369000},{"assignedTo":"mhegazy","body":"The `--separateCompilation` flag ensures that the output is safe to only emit a single file.","comments":0,"createdAt":1431984556000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.7","number":3204,"state":"open","title":"Optimize compile-on-save if `--separateCompilation` flag is set","updatedAt":1435779310000},{"assignedTo":"","body":"When using invalid combinations of ```--out```, ```--outDir```, and ```--rootDir```, the compiler currently doesn't report any errors, but emits files in 'random' locations. Further when you specify ```--rootDir``` without ```--outDir``` this is igno","comments":0,"createdAt":1432933292000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"Community","number":3305,"state":"open","title":"Invalid combinations of --out, --outDir, and --rootDir should cause a compiler error.","updatedAt":1435779301000},{"assignedTo":"mhegazy","body":"```TypeScript\r\nfunction f() {\r\n    class C extends null {\r\n        constructor() { return Object.create(null); }\r\n    }\r\n    var c = new C();\r\n    return !(c instanceof Object)\r\n        && Function.prototype.isPrototypeOf(C)\r\n        && Object.getPro","comments":1,"createdAt":1427920362000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":2581,"state":"closed","title":"Compiler emits code that crashes when extending 'null'","updatedAt":1435779122000},{"assignedTo":"mhegazy","body":"Currently the compiler shows \"filename.ts: error TS code: message\"; the error code is practically useless. so stop showing it by default.","comments":2,"createdAt":1411016731000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":693,"state":"closed","title":"Do not show error codes in compiler output","updatedAt":1435778898000},{"assignedTo":"mhegazy","body":"The contains() method is defined for a Node:\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Node.contains\r\n\r\nTypeScript has it defined on HTMLElement:\r\nhttps://github.com/Microsoft/TypeScript/blob/master/src/lib/dom.generated.d.ts#L272","comments":0,"createdAt":1416794740000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"TypeScript 1.7","number":1253,"state":"open","title":"Node interface is missing the contains() method","updatedAt":1435778767000},{"assignedTo":"mhegazy","body":"Instances of HTMLElement don't have access to **remove** function.\r\n\r\nI'm getting the following error:\r\n> Property 'remove' does not exist on type 'HTMLElement'.\r\n\r\n*Example:*\r\n```typescript\r\nvar element = document.getElementById('myid');\r\n\r\n(<HTMLEl","comments":8,"createdAt":1429885524000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7511692?v=3","loggedByName":"wedneyyuri","milestone":"TypeScript 1.7","number":2910,"state":"open","title":"Instances of HTMLElement does not expose the remove() function","updatedAt":1435778767000},{"assignedTo":"mhegazy","body":"It is supported by many browsers (mobile) so should be included.\r\nSpecification can be found at: http://www.w3.org/TR/vibration/\r\n","comments":2,"createdAt":1424076859000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7658839?v=3","loggedByName":"tomy2105","milestone":"TypeScript 1.7","number":2044,"state":"open","title":"Navigator.vibrate is not recognized by Lib.d.ts","updatedAt":1435778767000},{"assignedTo":"mhegazy","body":"'species', one of the \"well-known\" symbols in ES6, is missing from our definitions.","comments":0,"createdAt":1421802389000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.7","number":1749,"state":"open","title":"Missing 'species' symbol in ES6 definitions","updatedAt":1435778767000},{"assignedTo":"mhegazy","body":"In version 1.0.1, ImageData.data was a Uint8Array. In version 1.1 it becomes a number[]. Seems like it should be a Uint8ClampedArray.\r\n\r\nReference:\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/ImageData#Browser_compatibility","comments":3,"createdAt":1414080017000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/513210?v=3","loggedByName":"tomtung","milestone":"TypeScript 1.7","number":949,"state":"open","title":"ImageData.data should be a Uint8ClampedArray, not a number[]","updatedAt":1435778767000},{"assignedTo":"mhegazy","body":"Currently:\r\n```typescript\r\ninterface URL {\r\n    revokeObjectURL(url: string): void;\r\n    createObjectURL(object: any, options?: ObjectURLOptions): string;\r\n}\r\ndeclare var URL: URL;\r\n```\r\nShould be: \r\n```typescript\r\ninterface URLConstructor {\r\n    has","comments":5,"createdAt":1427923265000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4233080?v=3","loggedByName":"zuzusik","milestone":"TypeScript 1.7","number":2583,"state":"open","title":"Missing URL constructor definition","updatedAt":1435778767000},{"assignedTo":"mhegazy","body":"I was testing out the [Cordova Geolocation plugin](https://github.com/apache/cordova-plugin-geolocation) and in the method ```getCurrentPosition``` one of the return parameters is a timestamp of when the geolocation was requested. In the interface Po","comments":3,"createdAt":1428934458000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4508783?v=3","loggedByName":"viniciusx","milestone":"TypeScript 1.7","number":2742,"state":"open","title":"interface Position (lib.d.ts) has the wrong type for timespamp parameter","updatedAt":1435778767000},{"assignedTo":"mhegazy","body":"The example below compiles - it shouldn't, I think...\r\n\r\n    ttsiod@avalon /home/ttsiod/tmp/TypeScript.bug\r\n    $  cat foo.ts\r\n    function whyTSwhy(config: {\r\n        name?:string\r\n    })\r\n    {\r\n        console.log(config.name);\r\n        console.lo","comments":5,"createdAt":1417624368000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/181293?v=3","loggedByName":"ttsiodras","milestone":"TypeScript 1.7","number":1351,"state":"open","title":"Variable usage issues caused by global Window object","updatedAt":1435778767000},{"assignedTo":"mhegazy","body":"~~insertRow(index?: number): HTMLElement;~~\r\ninsertRow(index?: number): **HTMLTableRowElement** ;\r\n~~insertCell(index?: number): HTMLElement;~~\r\ninsertCell(index?: number): **HTMLTableCellElement**;\r\n\r\nalso HTMLTableElement.rows is not a collection o","comments":2,"createdAt":1416964630000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1144699?v=3","loggedByName":"EricLambrecht","milestone":"TypeScript 1.7","number":1274,"state":"open","title":"HTMLTableElement Functions return wrong types (insertRow, insertCell)","updatedAt":1435778767000},{"assignedTo":"mhegazy","body":"A couple of html table related methods in lib.d.ts return HTMLElement, but they could return a more precise type:\r\n\r\n- HTMLTableElement.insertRow should return HTMLTableRowElement instead of HTMLElement\r\n- HTMLTableElement.createTHead should return H","comments":1,"createdAt":1434830356000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11934412?v=3","loggedByName":"sockfish","milestone":"","number":3583,"state":"open","title":"lib.d.ts HTMLTableElement, HTMLTableSectionElement, and HTMLTableRowElement","updatedAt":1435778397000},{"assignedTo":"DanielRosenwasser","body":"tsc is pretty slow for me with an empty input file:\r\n```\r\n$ time tsc\r\nreal    0m0.450s\r\nuser    0m0.418s\r\nsys    0m0.013s\r\n$ touch in.ts\r\n$ time tsc in.ts\r\nreal    0m2.796s\r\nuser    0m3.810s\r\nsys    0m0.042s\r\n```\r\nbut gets faster again with `--noLib`","comments":12,"createdAt":1432857407000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/47395?v=3","loggedByName":"alexeagle","milestone":"","number":3298,"state":"open","title":"tsc is slow to process lib.d.ts","updatedAt":1435778397000},{"assignedTo":"DanielRosenwasser","body":"In Visual Studio 2013, in Options, Text Editor, JavaScript, IntelliSense, there is a checkbox labeled \"Only use tab or enter to commit\". Currently, TypeScript always behaves the way JavaScript does with this option turned ON, and provides no similar ","comments":30,"createdAt":1406745922000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4718759?v=3","loggedByName":"RandScullard","milestone":"","number":315,"state":"open","title":"Add IntelliSense option \"Only use tab or enter to commit\"","updatedAt":1435778351000},{"assignedTo":"","body":"I want to know why `import` statement isn't allowed when in a class or module.\r\nIs there a way to import module as local variable in class or module !?\r\n\r\n```js\r\nclass Foo{\r\n    method(){\r\n        import Bar from './FollowerList'; // not allowed     ","comments":2,"createdAt":1435642045000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/12691695?v=3","loggedByName":"wang-prtimes","milestone":"","number":3680,"state":"closed","title":"Use `import` in class or module","updatedAt":1435773387000},{"assignedTo":"","body":"","comments":1,"createdAt":1435706027000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3689,"state":"open","title":"dispose script snapshots from the old source file","updatedAt":1435773359000},{"assignedTo":"DanielRosenwasser","body":"For the file:\r\n\r\n````typescript\r\nimport fs = require('fs');\r\nimport ws = fs.writeStream;\r\n````\r\n\r\ngetDocumentHighlights will not find that the fs on line 1 is the same as the one on line 2.\r\n\r\n\r\nBut for the file:\r\n````typescript\r\nimport fs = require(","comments":1,"createdAt":1435701975000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1482532?v=3","loggedByName":"leeavital","milestone":"TypeScript 1.6","number":3688,"state":"open","title":"Inconsistency in LanguageServices.getDocumentHighlights","updatedAt":1435773323000},{"assignedTo":"","body":"It would be nice to be able to omit function type parameter names. e.g.\r\n\r\n```javascript\r\nvar identity: <T>(T) => T;\r\nvar add5: (number) => number;\r\n```\r\nThis could make code more concise and readable in some cases where the param name is not importa","comments":1,"createdAt":1435769328000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/846867?v=3","loggedByName":"jameslong","milestone":"","number":3693,"state":"closed","title":"Allow function types to omit param names","updatedAt":1435772043000},{"assignedTo":"","body":"Typescript is amazing. But when it comes to work with vendor libraries written in pure javascript it sucks. It sucks because afaik you have only one option: create a definition file for these vendors. And this is a bad option. Typescript says that \"c","comments":2,"createdAt":1435752077000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1753397?v=3","loggedByName":"PLEEROCK","milestone":"","number":3691,"state":"open","title":"Ignore missing vendor definitions","updatedAt":1435771534000},{"assignedTo":"","body":"Adds support for async functions when targeting ES6 only.","comments":3,"createdAt":1431047225000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3078,"state":"closed","title":"Async Functions for ES6","updatedAt":1435769412000},{"assignedTo":"","body":"I'm encountering a compiler error when using `external export` and  `reference path` in conjunction.\r\nI have some .ts files placed like below.\r\n\r\n```\r\n.\r\nâââ Modules\r\nâÂ Â  âââ UserAction.ts\r\nâÂ Â  âââ UserStatus.ts\r\nâââ User.ts\r\n\r\n```\r\n\r\n`User.ts`\r\n```j","comments":1,"createdAt":1435657275000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/12691695?v=3","loggedByName":"wang-prtimes","milestone":"","number":3683,"state":"closed","title":"Compiler error when using `external export` and  `reference path` in conjunction","updatedAt":1435712447000},{"assignedTo":"","body":"Have code like the following:\r\n\r\n```ts\r\nexport class Foo {\r\n\tprotected bar() {\r\n\t\treturn new Something((c, e, p) => {\r\n\r\n\t\t}, function () {\r\n\t\t\t// goes wrong\r\n\t\t});\r\n\t}\r\n}\r\n```\r\n\r\nFormat it\r\n\r\nYou end up with:\r\n\r\n```ts\r\nexport class Foo {\r\n\r\n\tprotect","comments":2,"createdAt":1423069744000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/900690?v=3","loggedByName":"bpasero","milestone":"TypeScript 1.6","number":1925,"state":"closed","title":"Format: lambda with wrong indent","updatedAt":1435711816000},{"assignedTo":"RyanCavanaugh","body":"From @prabirshrestha (thanks!) at https://github.com/Microsoft/TypeScript/pull/3564#issuecomment-115919094\r\n\r\n-----\r\n\r\nTried building tsc locally and running this.\r\n\r\n```bash\r\njake LKG\r\nnode ..\\bin\\tsc.js --jsx react -m umd -t es5 app.tsx button.tsx\r","comments":0,"createdAt":1435601045000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.6","number":3674,"state":"closed","title":"Incorrect emit when using external module import in JSX tag","updatedAt":1435700302000},{"assignedTo":"","body":"Fixes bug #3674","comments":2,"createdAt":1435602511000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3675,"state":"closed","title":"Correctly flag JSX elements as being used for the purposes of module imports","updatedAt":1435700286000},{"assignedTo":"","body":"I want to speed up the startup of language service. The biggest hit by far is parsing of `lib.d.ts`, which may easily take many seconds on underpowered devices.\r\n\r\nWiki page [Using the Language Service API](https://github.com/Microsoft/TypeScript/wik","comments":6,"createdAt":1435528908000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"","number":3662,"state":"open","title":"Advanced DocumentRegistry: what's expected of SourceFile","updatedAt":1435700141000},{"assignedTo":"","body":"Extracting this suggestion from this issue:\r\nhttps://github.com/Microsoft/TypeScript/issues/1336\r\n\r\nCurrently the variable arguments list supports variable arguments only as the last argument to the function:\r\n\r\n```typescript\r\nfunction foo(arg1: numb","comments":6,"createdAt":1417645138000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/320332?v=3","loggedByName":"JeroMiya","milestone":"","number":1360,"state":"open","title":"fixed params last in variable argument functions","updatedAt":1435695910000},{"assignedTo":"","body":"Some libraries with variadic methods that use varargs don't always place the parameters at the end of the parameter list. One such example is lodash's `assign` method whose signature and API documentation is as follows.\r\n\r\n`_.assign(object, [sources]","comments":5,"createdAt":1435684214000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/277061?v=3","loggedByName":"aholmes","milestone":"","number":3686,"state":"closed","title":"Requesting support for variadics with varargs in arbitrary but contiguous positions in .d.ts files","updatedAt":1435695550000},{"assignedTo":"","body":"The line in question is:\r\n\r\nvar spaces = generateSpaces(indentPosition);\r\n\r\nit always generates spaces even if the user wants tabs as indentation.\r\n","comments":0,"createdAt":1435653496000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":3681,"state":"open","title":"tsserver: format correction code in session.ts doesn't respect tab versus space setting","updatedAt":1435688207000},{"assignedTo":"","body":"Actual:\r\n```ts\r\nvar v =\r\n    0 ? 1 :\r\n        2 ? 3 :\r\n            4;\r\n```\r\nExpected:\r\n```ts\r\nvar v =\r\n    0 ? 1 :\r\n    2 ? 3 :\r\n    4;\r\n```\r\nI believe the fix is that if the false branch of the ternary operator should have the same indentation as th","comments":3,"createdAt":1435620288000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":3676,"state":"open","title":"Indentation is too aggressive for ternary operator","updatedAt":1435682512000},{"assignedTo":"","body":"we cannot compile jsx if we provide `noImplicitAny` option.\r\n\r\n## Reproducible revision\r\n\r\nhttps://github.com/Microsoft/TypeScript/commit/fe4612273ccc2017cfec598521eec5ce30bbd4dc\r\n\r\n## Testcase\r\n\r\n### command\r\n\r\n```sh\r\ntsc test.tsx --jsx react --noIm","comments":2,"createdAt":1435641336000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/180104?v=3","loggedByName":"saneyuki","milestone":"","number":3679,"state":"closed","title":"Cannot compile jsx if we provide `noImplicitAny` option","updatedAt":1435681713000},{"assignedTo":"","body":"TypeScript should support emitting minified JavaScript.\r\n\r\nThere are several different things we could support:\r\n1. Just remove whitespace\r\n2. Minify unobservable identifiers\r\n3. Remove provably dead code\r\n4. Whole-program minification (i.e. closure ","comments":38,"createdAt":1405443003000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":8,"state":"open","title":"Suggestion: minification","updatedAt":1435676247000},{"assignedTo":"","body":"I am trying to import an existing javascript source file(not a 3rd party module) into my typescript file using `import ... = require()` syntax with no success. Could you please help me point out anything I did wrong in the following isolated example?","comments":7,"createdAt":1428688378000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3301112?v=3","loggedByName":"ericlu88","milestone":"","number":2712,"state":"closed","title":"Question about importing js file in typescript fashion","updatedAt":1435655980000},{"assignedTo":"","body":"Packaging JS files into larger modules currently requires to understand the used module system. In addition code has to be written to reparse the runtime dependencies out of the JS file (e.g. for AMD by understanding the define call). The PR adds sup","comments":2,"createdAt":1434375414000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":3512,"state":"closed","title":"Add support to emit a dependency file listing compile and runtime dependencies of a module","updatedAt":1435654744000},{"assignedTo":"","body":"Type enter on a line and the result is totally unexpected. \r\nFile (Game.ts):\r\n/// <reference path=\"lib/Base.ts\"/>\r\n/// <reference path=\"Position.ts\"/>\r\n/// <reference path=\"Features.ts\" />\r\nmodule Mankala {\r\n    export var NoSpace = -1;\r\n    export v","comments":5,"createdAt":1431078912000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":3084,"state":"closed","title":"Format on type deletes valid range","updatedAt":1435654694000},{"assignedTo":"","body":"In solution (Visual Studio 2013) with a couple of separate ts files, when one class extends another one and files are combined together, it may happen that resulting file causes exception in __extends method. Second parameter has undefined value (der","comments":3,"createdAt":1435580561000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2735101?v=3","loggedByName":"mdzieg","milestone":"","number":3671,"state":"closed","title":"combined output causes error when there is an inheritance (order in file is wrong)","updatedAt":1435653075000},{"assignedTo":"yuit","body":"In ES6, Module code is always strict mode code. Therefore, we should update our parser as well","comments":2,"createdAt":1428014403000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.6","number":2598,"state":"closed","title":"Parse external modules in strict mode","updatedAt":1435651749000},{"assignedTo":"yuit","body":"I read that `declare` is required for all top level non-interface elements (i.e. `module`, `class`, `var`) in a declaration .d.ts file.\r\n\r\nBut do we need it for type aliases too?\r\n\r\nRight now this code in `tests.d.ts` file gives error:\r\n```\r\ninterfac","comments":4,"createdAt":1423137006000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2056282?v=3","loggedByName":"mpawelski","milestone":"TypeScript 1.6","number":1940,"state":"closed","title":"Do we need to use \"declare\" for type aliased in d.ts files?","updatedAt":1435639440000},{"assignedTo":"CyrusNajmabadi","body":"For example, inside the body of a class, you are implicitly in strict mode.  Implementing this will be a breaking change for existing code that uses classes today and uses some identifier (like 'yield') that becomes a keyword in strict mode.","comments":10,"createdAt":1415833939000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"TypeScript 1.6","number":1135,"state":"closed","title":"Some ES6 constructs force an implicit 'strict' context within them.","updatedAt":1435639355000},{"assignedTo":"mhegazy","body":"Reported by @mprobst in #3514\r\n\r\nmimial repro:\r\n\r\n`a.d.ts`:\r\n\r\n```ts\r\ndeclare class X {}\r\n```\r\n\r\n`b.ts`:\r\n\r\n```\r\n/// <reference path=\"a.d.ts\"/>\r\nexport {X};\r\nexport function f () {\r\n    var x: X;\r\n    return x;\r\n}\r\n```\r\n\r\n> tsc --d b.ts\r\n\r\n\r\nDebug Fa","comments":0,"createdAt":1435279396000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":3640,"state":"closed","title":"Assert emitting declarations for a global exported using an export specifier","updatedAt":1435624159000},{"assignedTo":"","body":"Fixes #3640","comments":2,"createdAt":1435279404000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3641,"state":"closed","title":"Fix assert with declaration emit for export specifier for a global","updatedAt":1435624136000},{"assignedTo":"","body":"Consider two TypeScript files:\r\n***a.ts***\r\n```ts\r\nmodule M {\r\n  export var t = 5;\r\n}\r\n```\r\n***b.ts***\r\n```ts\r\nvar t = 'foo';\r\nmodule M {\r\n  var s = t; // <-- what does this mean?\r\n}\r\n```\r\n\r\nIf we compile b.ts on its own, the `t` in `var s = t` refer","comments":43,"createdAt":1428694381000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":2715,"state":"closed","title":"What do we call this command-line option?","updatedAt":1435619465000},{"assignedTo":"","body":"This would be epic to have. Java itself had a problem with forcing the implementing class to implement the abstract methods, and solved it with default interface implementations. Sometimes, multiple inheritance is necessary to have. For example, I ha","comments":2,"createdAt":1434523721000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4483844?v=3","loggedByName":"impinball","milestone":"","number":3536,"state":"closed","title":"Allow default methods/instance variables in interfaces","updatedAt":1435617869000},{"assignedTo":"","body":"Bugs in entering multiline strings\r\n\r\nI typed:\r\n![image](https://cloud.githubusercontent.com/assets/5490484/8399553/c6606b76-1dde-11e5-9090-b4ec1398b6ac.png)\r\n\r\nand when I entered the trailing ; I got\r\n\r\n![image](https://cloud.githubusercontent.com/a","comments":8,"createdAt":1435542878000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5490484?v=3","loggedByName":"BobFrGit","milestone":"TypeScript 1.5.3","number":3665,"state":"closed","title":"Multiline strings in VS 2015 RC","updatedAt":1435615835000},{"assignedTo":"RyanCavanaugh","body":"The current syntax for type assertions [prevented](https://github.com/facebook/react/issues/759) the React team from adding TypeScript support to JSX. While [E4X was a failure](http://blog.vjeux.com/2013/javascript/jsx-e4x-the-good-parts.html), XML-l","comments":123,"createdAt":1406629993000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/94334?v=3","loggedByName":"thorn0","milestone":"TypeScript 1.6","number":296,"state":"closed","title":"Alternative syntax for type assertions to allow XML-like syntax extensions","updatedAt":1435611431000},{"assignedTo":"","body":"This code used to compile without error under 1.0:\r\n\r\n```typescript\r\nmodule M {\r\n\r\n        export interface T<A> {\r\n            get(): A;\r\n        }\r\n\r\n        export function ap<A, B>(f: T<(a: A) => B>, x: T<A>): T<B> {\r\n            return {\r\n      ","comments":13,"createdAt":1412617822000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/630306?v=3","loggedByName":"paf31","milestone":"","number":833,"state":"closed","title":"Code fails noImplicitAny check under 1.1.0.0","updatedAt":1435609565000},{"assignedTo":"","body":"[Playground](http://www.typescriptlang.org/Playground#src=interface%20PolymerElement%20%7B%0D%0A%20%20properties%3F%3A%20%7B%20%5BpropName%3A%20string%5D%3A%20StringConstructor%7CPolymerElementProperty%20%7D%3B%0D%0A%7D%0D%0A%0D%0Ainterface%20Polymer","comments":2,"createdAt":1435543797000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1529180?v=3","loggedByName":"laco0416","milestone":"","number":3666,"state":"closed","title":"Error in a case without type annotation.","updatedAt":1435607641000},{"assignedTo":"","body":"It doesn't seem possible to compile and output to stdout. There was some discussion on CodePlex before the migration to github: https://typescript.codeplex.com/workitem/600\r\n\r\n","comments":20,"createdAt":1416517036000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/867352?v=3","loggedByName":"jbowens","milestone":"","number":1226,"state":"open","title":"Write compiled output to stdout","updatedAt":1435607106000},{"assignedTo":"yuit","body":"```\r\nlet a = 1;\r\nlet\r\n    b = 2;\r\nconst c = 3;\r\nconst\r\n    d = 4;\r\n```\r\nThis snippet is transformed to:\r\n```\r\nvar a = 1;\r\nlet;\r\nb = 2;\r\nvar c = 3;\r\nvar d = 4;\r\n```\r\nIf I interpret the specs correctly, `let` and `const` have the same definition and sh","comments":1,"createdAt":1426843382000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/417406?v=3","loggedByName":"donnut","milestone":"TypeScript 1.6","number":2439,"state":"closed","title":"`let` and its binding(s) must be on same line","updatedAt":1435606937000},{"assignedTo":"","body":"I'm using ember with typescript and I'm trying to provide the necessary type hints. The problem is that I can't figure out how to declare the get method in my interface. If I add a get declaration to RouteObj I get:  Property 'get' is missing in type","comments":1,"createdAt":1435387623000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/98088?v=3","loggedByName":"rogergl","milestone":"","number":3657,"state":"open","title":"How to declare method that exists in a base class ?","updatedAt":1435606772000},{"assignedTo":"","body":"as typeof operator will always return a string, == should be safe and valid when narrowing types.","comments":0,"createdAt":1423053001000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":1922,"state":"open","title":"type narrowing for == operator.","updatedAt":1435605645000},{"assignedTo":"","body":"When using `tsc`, every file output does not have a newline at the end of the file. Is this intended? If so, it would be nice to have a flag to change this behavior.","comments":2,"createdAt":1432763127000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3348363?v=3","loggedByName":"uber5001","milestone":"","number":3287,"state":"open","title":"Do not strip end of file newlines in emit","updatedAt":1435605583000},{"assignedTo":"","body":"```typescript\r\nfunction foo() {\r\n\tfunction bar() {\r\n\t\tx = 5;\r\n\t}\r\n\tlet x;\r\n\tbar();\r\n\tconsole.log(x);\r\n}\r\n```\r\n\r\nThis complains that `x = 5;` is referencing x before its declaration. While technically true, this is not really a TDZ error. Though the a","comments":1,"createdAt":1435382199000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":3656,"state":"open","title":"TDZ error is a bit overzealous","updatedAt":1435603403000},{"assignedTo":"","body":"It would help me a lot if the current behaviour of goto definition goes to the definition and not the named import:\r\n```typescript\r\n// module.ts\r\n/*shouldGoHere*/export function something() { ...}\r\n```\r\n```typescript\r\n// index.ts\r\nimport {/*nowGoesHe","comments":4,"createdAt":1435571279000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3669,"state":"open","title":"Goto definition shouldn't go to named import","updatedAt":1435602548000},{"assignedTo":"DanielRosenwasser","body":"![image](https://cloud.githubusercontent.com/assets/972891/7717073/ea6062e6-fe4f-11e4-80f2-ea26a8159b1b.png)\r\n\r\nNote that the dialog box shows \"Rename '__function'\" instead of \"Rename 'foo'\"","comments":0,"createdAt":1432083222000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3230,"state":"closed","title":"Named function expressions get incorrect display names when renaming","updatedAt":1435602097000},{"assignedTo":"DanielRosenwasser","body":"Hi. I'm using VS 2013 and TypeScript 1.5 Beta. Amazing work, as always.\r\n\r\nI can't seem to rename default exports via \"Rename\". Consider this:\r\n\r\n```TypeScript\r\nexport default class InfoPanelViewModel {\r\n}\r\n```\r\n\r\n- Invoke the Rename operation \r\n- Pu","comments":0,"createdAt":1430972848000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6707531?v=3","loggedByName":"jasonscharf","milestone":"TypeScript 1.6","number":3065,"state":"closed","title":"Can't Refactor -> Rename a default export name in Visual Studio","updatedAt":1435602036000},{"assignedTo":"","body":"Background:\r\n\r\nThe `generate-diagnostics` build step takes JSON-encoded diagnostics data and transforms it into TypeScript to define the `Diagnostics` object used throughout the compiler.\r\n\r\nProblem:\r\n\r\nThe only indication that this has occurred is a","comments":2,"createdAt":1434926829000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10376674?v=3","loggedByName":"colbyrussell","milestone":"Community","number":3591,"state":"open","title":"Generated diagnostics file doesn't explain its source.","updatedAt":1435597397000},{"assignedTo":"","body":"A follow up from #3247, but merges into the `master` branch.\r\n\r\n* Fixes #3065\r\n* Fixes #3230","comments":3,"createdAt":1433361315000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3367,"state":"closed","title":"Fix findAllRefs, getHighlightSpans, renameLocs, renameInfo for default exports and functions expressions","updatedAt":1435595222000},{"assignedTo":"","body":"Hi,\r\n\r\nWhat's the problem here? I can't see it.\r\n\r\n```javascript\r\n@Provide(Log)\r\nfunction getKarmaLoggerInstance() {\r\n\treturn logger.create('preprocessor-x');\r\n}\r\n```\r\nThis produces the following compiler error:\r\n```\r\nerror TS1206: Decorators are not","comments":2,"createdAt":1435444241000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489010?v=3","loggedByName":"matthewjh","milestone":"","number":3661,"state":"closed","title":"error TS1206: Decorators are not valid here?","updatedAt":1435591584000},{"assignedTo":"","body":"In ES6 spec in section in [Let and Const Declaration](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-let-and-const-declarations)\r\n\r\n> LexicalDeclaration : LetOrConst BindingList ;\r\n> * It is a Syntax Error if the BoundNames of BindingList ","comments":1,"createdAt":1435540736000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3664,"state":"closed","title":"Let should not be allowed as identifier in let and const declaration","updatedAt":1435541094000},{"assignedTo":"","body":"Hi,\r\n\r\nCode lens is a [new feature in Visual Studio 2013](http://msdn.microsoft.com/en-us/library/dn269218.aspx).\r\n\r\nAfter working with this on a C# project, I have found it to be a tremendous productivity booster.\r\n\r\nCodeLens provides information ab","comments":7,"createdAt":1406023210000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":189,"state":"open","title":"Please enable CodeLens for TypeScript files","updatedAt":1435510161000},{"assignedTo":"","body":"I am currently working with aurelia which uses ES6 module loading (`System`) and it is great as I do not need to worry about slapping reference tags everywhere. Now my IDEs (VS/Webstorm) know about the d.ts files so while I am developing they know wh","comments":6,"createdAt":1435396479000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/927201?v=3","loggedByName":"grofit","milestone":"","number":3658,"state":"closed","title":"ES6 Modules and *.d.ts files with compiler","updatedAt":1435509647000},{"assignedTo":"","body":"I'm adding support for TypeScript in the [Qbs](http://doc.qt.io/qbs) build system. Due to the way we track dependencies, we require knowing the list of output files a particular tool will produce when invoked with a particular set of arguments.\r\n\r\nCu","comments":8,"createdAt":1435312580000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1312511?v=3","loggedByName":"jakepetroules","milestone":"","number":3650,"state":"closed","title":"Possibly add a new compiler option to list output files.","updatedAt":1435433422000},{"assignedTo":"","body":"I wonder what the sufficient set of checks is that detects the empty type as a result of failed type inference. I have an expression and a type checker that gives me its type and symbol. My problem is that I get false positives on module references a","comments":6,"createdAt":1435184584000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":3620,"state":"closed","title":"Question: how can the empty type {} be detected?","updatedAt":1435419570000},{"assignedTo":"","body":"* Removes errors that aren't used by the compiler (mostly duplicates)\r\n* Adds a script that finds these + finds errors that aren't anywhere in the baselines (in case we get bored some day and need something to do...)","comments":2,"createdAt":1435264596000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3637,"state":"closed","title":"Remove unused errors","updatedAt":1435353825000},{"assignedTo":"","body":"[Compiler Options](https://github.com/Microsoft/TypeScript/wiki/Compiler%20Options)\r\n> --separateCompilation\r\n> Unconditionally emit imports for unresolved files.\r\n\r\nIs it really the meaning of this option? You'd never guess!","comments":3,"createdAt":1435328079000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"TypeScript 1.6","number":3653,"state":"closed","title":"Compiler Options wiki: separateCompilation has weird description","updatedAt":1435350122000},{"assignedTo":"","body":"In Gecko engine `commandLine.options.watch` evaluates to a truthy value â [Object.prototype.watch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch). That means running the compiler in Gecko (as opposed to","comments":2,"createdAt":1435309822000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"TypeScript 1.6","number":3649,"state":"closed","title":"Conflict with Object.prototype.watch in FireFox/Gecko","updatedAt":1435347642000},{"assignedTo":"","body":"I just confirmed in the TS Playground that the following TS:\r\n\r\n```\r\nclass Foo {\r\n\tget bar() { return true;}\r\n}\r\n```\r\nProduces this JS:\r\n\r\n```\r\nvar Foo = (function () {\r\n    function Foo() {\r\n    }\r\n    Object.defineProperty(Foo.prototype, \"bar\", {\r\n","comments":2,"createdAt":1435105889000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/129061?v=3","loggedByName":"wardbell","milestone":"","number":3610,"state":"open","title":"Why are TS get/set definedProperties in a class transpiled as enumerable/writable?","updatedAt":1435341303000},{"assignedTo":"","body":"In Gecko engine `commandLine.options.watch` evaluates to a truthy value â [Object.prototype.watch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch). That means running the compiler in Gecko (as opposed to","comments":2,"createdAt":1435309629000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"","number":3648,"state":"closed","title":"Conflict with Object.prototype.watch in FireFox/Gecko","updatedAt":1435341004000},{"assignedTo":"","body":"","comments":2,"createdAt":1435282811000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3644,"state":"closed","title":"Change var -> let and use destructuring","updatedAt":1435339809000},{"assignedTo":"","body":"Hi,\r\nHere is an example that incorrectly (as I understand) generates a compile-time error with TypeScript 1.5 beta: \r\n\r\n> A function whose declared type is neither 'void' nor 'any' must return a value or consist of a single 'throw' statement.\r\n\r\n```T","comments":2,"createdAt":1435304314000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1206512?v=3","loggedByName":"atsu85","milestone":"","number":3647,"state":"closed","title":"Compiler error from method with return type + body with if and throw: A function whose declared type is neither 'void' nor 'any' must return a value or consist of a single 'throw' statement.","updatedAt":1435339132000},{"assignedTo":"","body":"The following program crashes, but doesn't give a type error:\r\n\r\n``` typescript\r\nfunction g (f: (x: {}) => void): void { f({}) }\r\n\r\nfunction f (x: { foo : { bar }}) { alert(x.foo.bar); }\r\n\r\n// Doesn't typecheck\r\n// f({ })\r\n\r\n// Typechecks?!\r\ng(f)\r\n``","comments":7,"createdAt":1435321646000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/75477?v=3","loggedByName":"hesselink","milestone":"","number":3651,"state":"closed","title":"Type incorrect program doesn't give error (subtyping)","updatedAt":1435339088000},{"assignedTo":"","body":"Several PRs/issues address globbing, but the [tsconfig.json docs](https://github.com/Microsoft/TypeScript/wiki/tsconfig.json) and [schema](http://json.schemastore.org/tsconfig) are not up to date.\r\n\r\n#3232 Adds glob-style pattern matching for file sp","comments":1,"createdAt":1435330054000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"","number":3654,"state":"open","title":"Clarify whether glob patterns like *.* can be used for tsc.js and tsconfig.json","updatedAt":1435338824000},{"assignedTo":"mhegazy","body":"Hi,\r\n\r\nI've a question about Visual Studio's Implicit Referencing.  I've looked around in vain for a definitive answer and so I thought it might make sense to raise the question here.\r\n\r\n> Previously, all TypeScript files in a project had to referenc","comments":13,"createdAt":1415193789000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Canonical","name":"Canonical","color":"000000"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1010525?v=3","loggedByName":"johnnyreilly","milestone":"","number":1066,"state":"closed","title":"Implicit Referencing - opting in and opting out","updatedAt":1435338759000},{"assignedTo":"","body":"Stupid question of the day, why does this not work:\r\n\r\n```typescript\r\nclass A {\r\n\tfoo: string;\r\n}\r\n\r\nclass B {\r\n\tbar: string;\r\n}\r\n\r\nclass C {\r\n\tqat: string;\r\n}\r\n\r\nclass D {\r\n\tbaz: string;\r\n}\r\n\r\nfunction c(a: A): C;  /* Overloaded signature not compat","comments":5,"createdAt":1435321783000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1282577?v=3","loggedByName":"kitsonk","milestone":"","number":3652,"state":"closed","title":"Overloaded Union Return Types","updatedAt":1435337059000},{"assignedTo":"","body":"See https://github.com/Microsoft/TypeScript/issues/3234#issuecomment-104003549.","comments":2,"createdAt":1432375070000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3261,"state":"open","title":"Returned type in index signature fails to get widened in error message","updatedAt":1435335483000},{"assignedTo":"","body":"It would be really useful if I could set default values for my generic type variables. In many cases, the users of my class don't want to use a different value and so it's cumbersome to having to type it in.\r\n\r\nIf I could do this:\r\n```typescript\r\ncla","comments":5,"createdAt":1425208441000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/911440?v=3","loggedByName":"andrewvarga","milestone":"","number":2175,"state":"open","title":"Default generic type variables","updatedAt":1435332826000},{"assignedTo":"","body":"The generated code for\r\n```\r\ntype NameOrNameArray = string | string[];\r\n\r\nfunction createName(name) {\r\n    if (typeof name === \"string\") {\r\n        return name;\r\n    } else if (typeof name == 'number') {\r\n        return name.toString();\r\n    } else {","comments":1,"createdAt":1435301820000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/121040?v=3","loggedByName":"lygstate","milestone":"","number":3646,"state":"closed","title":"Generated JS code's style is not correct.","updatedAt":1435325156000},{"assignedTo":"","body":"Fix issue #3231 and add support for class expression","comments":4,"createdAt":1435273215000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3638,"state":"closed","title":"Fix completion in func exp and class exp","updatedAt":1435282413000},{"assignedTo":"paulvanbrenk","body":"Steps to reproduce:\r\n\r\n1. Create new empty ASP.NET project in Visual Studio\r\n2. Add TypeScript file to project\r\n3. Accept prompt to add TypeScript functionality to project\r\n4. From command-line, build the solution:\r\n\r\n`msbuild /p:DeployOnBuild=true /","comments":2,"createdAt":1435228378000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/384747?v=3","loggedByName":"flcdrg","milestone":"TypeScript 2.0","number":3629,"state":"open","title":"Error \"The following two items have duplicate item metadata\" when building with /p:EnablePackageProcessLoggingAndAssert=true","updatedAt":1435280941000},{"assignedTo":"JsonFreeman","body":"Assuming these two files:\r\n\r\n`a.d.ts`:\r\n\r\n```ts\r\ndeclare class X {}\r\n```\r\n\r\n`b.ts`:\r\n\r\n```\r\n/// <reference path=\"a.d.ts\"/>\r\nexport {X};\r\n```\r\n\r\nGives this error:\r\n\r\n```\r\nb.ts (2,9): Circular definition of import alias 'X'.\r\n```\r\n\r\nThe use case for th","comments":8,"createdAt":1434406496000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7208?v=3","loggedByName":"mprobst","milestone":"TypeScript 1.5.3","number":3514,"state":"closed","title":"Cannot re-export global symbol - circular definition of import alias","updatedAt":1435279467000},{"assignedTo":"","body":"I am working on a code port from c# to TypeScript. Having some instance of overridden methods with new keyword in derived class. like following. Is there a way that I can suppress this instance of error TS2415. \r\nI can live with error message as it d","comments":1,"createdAt":1435277376000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5769869?v=3","loggedByName":"gautamsi","milestone":"","number":3639,"state":"closed","title":"Provide a way to supress specific compiler message like TS2415, incorrectly extends base on override method with different return type","updatedAt":1435277960000},{"assignedTo":"","body":"The parameter name and type in a type predicate are classified such that they are colored the same as a keyword.","comments":4,"createdAt":1435209228000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"TypeScript 1.6","number":3625,"state":"closed","title":"Incorrect classification for parameter name and type of type predicate ","updatedAt":1435276132000},{"assignedTo":"","body":"Visual Studio display a syntax error in function* and the message \"Generators are not currently supported.\" even when I'm targeting to compile to ES6, that already has support for generators.\r\n\r\nThis message wouldn't apper only in ES3 or ES5 mode?","comments":10,"createdAt":1435071590000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/13019179?v=3","loggedByName":"lmcarreiro","milestone":"","number":3605,"state":"closed","title":"Generators \"not supported\" even with --target ES6","updatedAt":1435264381000},{"assignedTo":"rbuckton","body":"Add support behind an experimental compiler option to emit design-type metadata for decorated declarations in source. \r\n\r\n- [x] Add `__metadata` helper that depends on a [polyfill](https://github.com/rbuckton/ReflectDecorators) for a proposed `Reflec","comments":0,"createdAt":1427914780000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2577,"state":"closed","title":"Emit serialized design-time type metadata for decorators","updatedAt":1435261390000},{"assignedTo":"","body":"As the title says^^","comments":2,"createdAt":1435258315000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":3635,"state":"closed","title":"Fixed formatting on default keyword","updatedAt":1435259094000},{"assignedTo":"","body":"I get this error when I try to perform following. Idea is that value is populated during bootstrapping module when consuming code import my module. consumer can then change this value to something they want (an IApi interface type)\r\nfile 1:\r\n````Type","comments":2,"createdAt":1435257515000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5769869?v=3","loggedByName":"gautamsi","milestone":"","number":3634,"state":"closed","title":"Invalid left-hand side of assignment expression error when LHS is ES6 style imported object","updatedAt":1435259042000},{"assignedTo":"","body":"I'm using **tsc** Version 1.5.0-beta\r\n\r\nI tried to switch from standard node `require` syntax to `import` for several common express packages. TS allows this conversion for some, but not all packages ... and I cannot tell what accounts for the differ","comments":6,"createdAt":1435127376000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/129061?v=3","loggedByName":"wardbell","milestone":"","number":3612,"state":"closed","title":"TS compiler thinks express \"errorhandler\" module isn't a module","updatedAt":1435256474000},{"assignedTo":"","body":"Comment didn't align with emit.","comments":1,"createdAt":1435253977000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3632,"state":"closed","title":"Fix test comment and name of test","updatedAt":1435256156000},{"assignedTo":"","body":"A rename refactoring for a parameter in a function whose type annotation is a type predicate does not rename the parameter in the type predicate.","comments":2,"createdAt":1435208554000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"TypeScript 1.6","number":3624,"state":"closed","title":"Rename refactor for parameter does not rename parameter in TypePredicate","updatedAt":1435254888000},{"assignedTo":"","body":"","comments":1,"createdAt":1435248960000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3631,"state":"closed","title":"Correct/improve names of certain fourslash tests","updatedAt":1435251568000},{"assignedTo":"","body":"```typescript\r\nenum Foo { }\r\n\r\nvar fooMap: { [foo: Foo]: string } // => error TS1023: An index signature parameter type must be 'string' or 'number'.\r\n```\r\n[play][]\r\n* * *\r\nEnums are internally numbers, so this should be able to compile fine.\r\n\r\n[pla","comments":1,"createdAt":1435213551000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4495750?v=3","loggedByName":"Gaelan","milestone":"","number":3627,"state":"closed","title":"Enum Object Keys","updatedAt":1435247659000},{"assignedTo":"","body":"(Related to #1888)\r\n\r\nI don't know how to name them, but this fixes a remaining indenting problem with array/function/object literals. This problem is not covered by #3001.\r\n\r\n```typescript\r\nPromise\r\n    .resolve()\r\n    .then(() => {\r\n        \"\";/**/","comments":11,"createdAt":1431692107000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":3179,"state":"closed","title":"Indentation fix for multi-line call expression","updatedAt":1435247192000},{"assignedTo":"","body":"I've noticed some odd behavior with the syntax colourisation for template strings in Visual Studio 2013 (using TypeScript 1.4 plugin).  It occurs when the string \"#/\" is present within the template string **after** at least one placeholder is present","comments":3,"createdAt":1435244979000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1010525?v=3","loggedByName":"johnnyreilly","milestone":"","number":3630,"state":"closed","title":"Strange colourisation of template strings when \"#/\" present after first placeholder","updatedAt":1435246521000},{"assignedTo":"","body":"Formatting after the modifier didn't work correctly.\r\nHope you like it :)","comments":5,"createdAt":1435180546000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":3617,"state":"closed","title":"Format after protected modifer","updatedAt":1435225588000},{"assignedTo":"","body":"Is it possible to create an interface which only can be extended and not instantiated like WebIDL's [NoInterfaceObject]?\r\ne.g. at dom4 idl:\r\n\r\n`  [NoInterfaceObject, Exposed=Window]\r\n`\r\n`  interface NonElementParentNode {  Element? getElementById(DOM","comments":1,"createdAt":1431984962000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1826892?v=3","loggedByName":"hfmanson","milestone":"","number":3205,"state":"closed","title":"\"abstract\" interface","updatedAt":1435208021000},{"assignedTo":"","body":"I ran into this while converting some pre existing code. \r\nThe code uses a classic JavaScript module pattern for the browser. \r\n```JavaScript\r\n// file cats.model.js\r\ncats.model = (function () {\r\n  'use strict';\r\n  var initModule, getCat;\r\n  initModul","comments":5,"createdAt":1434991328000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7439282?v=3","loggedByName":"henrjk","milestone":"","number":3597,"state":"open","title":"module cats with exported var cats ","updatedAt":1435207742000},{"assignedTo":"","body":"The folder in source tree called `doc` is not consistent with other repos on GitHub.\r\n\r\nIMO, it should either be `docs` (many repositories use this) or use `Documentation` (ASCII sort order) so it appear at the top in source tree (like https://github","comments":5,"createdAt":1435182103000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2031765?v=3","loggedByName":"jasonwilliams200OK","milestone":"","number":3618,"state":"open","title":"Rename doc to docs or Documentation","updatedAt":1435204633000},{"assignedTo":"","body":"This PR implements #2736. I just implemented the basic display part for function right now. \r\n\r\n```typescript\r\nfunction FunctionName() {}\r\nfunction () {}\r\n```\r\nI can rework this PR to add/remove/change the display parts.\r\n\r\nIt also add some contextua","comments":4,"createdAt":1431855766000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3189,"state":"closed","title":"Adds quick info on modifiers and declaration keywords","updatedAt":1435200893000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\ninterface I {\r\n    x: number;\r\n    y: string;\r\n}\r\n\r\nvar foo: I;\r\nvar { /*1*/ } = foo;\r\n```\r\n\r\nRequest completion at marker `1`.\r\n\r\nExpected: `x` and `y` are completion items.\r\nActual: No completions available.","comments":0,"createdAt":1428536910000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":2676,"state":"closed","title":"No completions in an object binding pattern","updatedAt":1435200848000},{"assignedTo":"","body":"Fixes #2676.\r\n\r\n![objectbindingcompletion](https://cloud.githubusercontent.com/assets/972891/8336422/6c549ca2-1a72-11e5-90ec-c7da672e1a8f.gif)\r\n\r\n\r\n","comments":7,"createdAt":1435165852000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3615,"state":"closed","title":"Enable completions in object binding patterns","updatedAt":1435200833000},{"assignedTo":"","body":"Currently on every edit `createProgram` revisits all source files in order to discover all dependencies that are absent in root files and reconstruct the proper sequence of files. This is right thing to do however usually most of edits don't modify i","comments":2,"createdAt":1435176845000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3616,"state":"open","title":"Reuse program structure","updatedAt":1435194182000},{"assignedTo":"","body":"I removed some unused variables from the compiler.\r\n\r\nFeel free to close this PR if this isn't something you want at this point (because it doesn't do anything) but clean code is always nice :)\r\n\r\n","comments":2,"createdAt":1435184659000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":3621,"state":"closed","title":"Remove unused variables","updatedAt":1435188002000},{"assignedTo":"","body":"Patch does two things:\r\n(a) Keeps compatibility with numeric literals in JS\r\n```\r\nvar test3 = 3 .toString(); // preserves whitepace\r\n```\r\n(b) Improves the error message if a 'dotted' numeric literal is followed by an identifier/expression with no spa","comments":6,"createdAt":1434506627000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3534,"state":"closed","title":"Fixes #2632 (invoking methods on numbers)","updatedAt":1435183709000},{"assignedTo":"","body":"The rules for numeric constants do not follow the same rules for numeric variables. I don't know if this is an error, or just an oddity.  \r\n\r\ntest1 and test4 behave as expected. Numbers are converted to strings.\r\n\r\ntest2 does not compile without spac","comments":3,"createdAt":1428336344000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11279006?v=3","loggedByName":"TimKelly2","milestone":"Community","number":2632,"state":"closed","title":"invoking methods on numbers","updatedAt":1435183640000},{"assignedTo":"","body":"```typescript\r\n// before\r\nclass A < T >  extends foo< T > ( )  <  T  > {\r\n}\r\n\r\n// after\r\nclass A<T> extends foo<T>() <  T  > {\r\n}\r\n```","comments":0,"createdAt":1435183528000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3619,"state":"open","title":"incorrect formatting when deriving from function call  that returns type with generic construct signature","updatedAt":1435183528000},{"assignedTo":"","body":"Might be an issue with how I did it, but I built TypeScript and patched up the tsserver.js in my Sublime directory. Then tried this out:\r\n\r\n```TypeScript\r\nfunction f(parameter: any): /**/parameter is string {\r\n    return typeof parameter === \"string\"","comments":3,"createdAt":1434998270000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3600,"state":"closed","title":"GoToDefinition doesn't seem to work on parameter of a type predicate","updatedAt":1435181115000},{"assignedTo":"DanielRosenwasser","body":"From `tests/cases/compiler/declarationEmitDestructuring4.ts`:\r\n\r\n```TypeScript\r\nfunction baz3({}) {\r\n}\r\n```\r\n\r\nEmits:\r\n\r\n```JavaScript\r\nfunction baz3(_a) {\r\n    var ;\r\n}\r\n```","comments":0,"createdAt":1433982083000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3472,"state":"closed","title":"Empty object binding parameter emits invalid code","updatedAt":1435179068000},{"assignedTo":"","body":"Fixes #3472.","comments":2,"createdAt":1435006053000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3601,"state":"closed","title":"Emit valid code when a parameter's binding pattern has no elements","updatedAt":1435179027000},{"assignedTo":"","body":"When I make a change (e.g. in emitter.ts or program.ts), sometimes tsserver.js is not updated. Other files (tsc.js, typescript.js, and typescriptServices.js) are.  If I delete the tsserver.js file and jake again, it will be created.","comments":1,"createdAt":1433182011000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3254987?v=3","loggedByName":"unional","milestone":"TypeScript 1.6","number":3326,"state":"closed","title":"jake not compiling tsserver.js","updatedAt":1435179027000},{"assignedTo":"","body":"Previously, modifying any part of the compiler/language service and then triggering a build would not update `tsserver.js`. This amends that behavior.","comments":2,"createdAt":1435163591000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3614,"state":"closed","title":"Add services sources as dependencies to tsserver.","updatedAt":1435178941000},{"assignedTo":"","body":"","comments":11,"createdAt":1418438870000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1474,"state":"open","title":"Don't have containers point to nodes not underneath them.","updatedAt":1435166782000},{"assignedTo":"","body":"Fixes #3600.","comments":2,"createdAt":1435114386000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3611,"state":"closed","title":"Go to definition for type predicate","updatedAt":1435165964000},{"assignedTo":"","body":"Original issue on CodePlex: https://typescript.codeplex.com/workitem/1046\r\n\r\n## Problem\r\nNeed to `require` text, CSS, and other non-code things.\r\n\r\n```\r\nimport template: string = require( \"text!./Templates/MyTemplate.html\" );\r\n```\r\n\r\n## Partial worka","comments":7,"createdAt":1406587938000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4219105?v=3","loggedByName":"fsoikin","milestone":"","number":279,"state":"open","title":"Support non-code AMD modules","updatedAt":1435165676000},{"assignedTo":"rbuckton","body":"As mentioned in https://github.com/Microsoft/TypeScript/issues/2249#issuecomment-104235451, consider this:\r\n```ts\r\n// decorator factory\r\nfunction F(options?: {optional: boolean}) {\r\n     // returns a property decorator\r\n    return (target , propertyK","comments":7,"createdAt":1432229954000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":3246,"state":"closed","title":"Use of decorator factories as decorators is not flagged as an error","updatedAt":1435165479000},{"assignedTo":"","body":"Rather than checking assignability, I've instead added a `resolveDecorator` function which acts in a similar fashion to `resolveTaggedTemplateExpression` and `resolveCallExpression`, and I resolve the decorator as a call.\r\n\r\nUnlike a regular call exp","comments":3,"createdAt":1432253320000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3249,"state":"closed","title":"Migrated decorator checks to call resolution","updatedAt":1435165104000},{"assignedTo":"","body":"a) Which tools or guidelines are recommended for optimizing TypeScript?\r\n\r\nV8/node has some pretty good tools:\r\n```\r\nnode --prof bench/parse.js\r\nnode --trace_opt --trace_deopt bench/parse.js\r\n```\r\nhttp://mrale.ph/irhydra/2/\r\n\r\nThere's NodeJS tools in","comments":4,"createdAt":1434976923000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3594,"state":"open","title":"Optimization tools or guidelines","updatedAt":1435160131000},{"assignedTo":"","body":"Fixes #2338 ... at least half of it.\r\n\r\n*TL;DR*: See last commit, ignore others.\r\n\r\nNote: This is branched off of https://github.com/Microsoft/TypeScript/pull/3324 and has Microsoft/TypeScript#externalModuleResolution rebased on master underneath it ","comments":3,"createdAt":1433133685000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/886059?v=3","loggedByName":"Zoltu","milestone":"","number":3325,"state":"open","title":"External module resolution","updatedAt":1435108070000},{"assignedTo":"","body":"Testing code coverage task with Travis\r\n\r\nEdit: not ready for checkin, but needed to submit a PR for testing purposes","comments":6,"createdAt":1432344045000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":3260,"state":"closed","title":"Code coverage task for coveralls","updatedAt":1435108045000},{"assignedTo":"DanielRosenwasser","body":"This PR is also a question at the same time for ticket #3594\r\n\r\nAre these sorts of optimizations accepted? Used around 100 000 interfaces to look at function overloading costs and stumbled on this.\r\n","comments":12,"createdAt":1434977180000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3595,"state":"closed","title":"Optimize createIdentifier() on Nodejs/v8, ~30% faster","updatedAt":1435108040000},{"assignedTo":"","body":"These are:\r\n\r\nhttps://github.com/Microsoft/TypeScript/commit/05b8609f04f3f10513ecc2059c868b2aeea49012 Reduce GC pressure by not logging by default.  This prevents GCs that were causing hiccups during typeing.\r\nhttps://github.com/Microsoft/TypeScript/","comments":1,"createdAt":1434143954000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3497,"state":"closed","title":"A few perf fixes we'd like to take for release 1.5","updatedAt":1435107888000},{"assignedTo":"","body":"This change adds a non-generic construct signature to Map, Set and WeakMap to allow for calling `new Map()` without having to specify the generic type arguments.\r\n\r\n```ts\r\nvar m: Map<number, string> = new Map(); // results in error: Map<{}, {}> is no","comments":1,"createdAt":1434601938000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3547,"state":"closed","title":"Add a non-generic construct signature to Map, Set, and WeakMap","updatedAt":1435106341000},{"assignedTo":"","body":"# Introduction\r\n\r\nCurrently, in TypeScript, we support only one of the two styles of creating classes in ES6 - that of class declarations.  This proposal adds support for the other style, class expressions.  This will fill our support for classes in ","comments":3,"createdAt":1408641091000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":497,"state":"closed","title":"Class Expressions","updatedAt":1435105295000},{"assignedTo":"","body":"This PR adds type checking for class expressions, finishing the work started in #2567.\r\n\r\nIn a class expression, the class name is optional and, if specified, is only in scope in the class expression itself. This is similar to the optional name of a ","comments":1,"createdAt":1434675420000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3568,"state":"closed","title":"Class expressions","updatedAt":1435105295000},{"assignedTo":"","body":"This is the initial change in the parser and the checker, need to clean up the failing test cases and add a bunch more, and fix the declaration emitter to do the right thing.","comments":2,"createdAt":1430273427000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":2951,"state":"closed","title":"Initial changed to allow this in typeof expressions.","updatedAt":1435102926000},{"assignedTo":"","body":"This is an attempt to use decorators in shims. that seemed like a good place to save on repeated code pattern for JSON serialization for LS calls.\r\n\r\n```ts\r\npublic doSomething(args): string {\r\n            return this.forwardJSONCall(\r\n               ","comments":2,"createdAt":1428350823000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2637,"state":"closed","title":"Proposal -- Use decorators in shims","updatedAt":1435102177000},{"assignedTo":"","body":"","comments":5,"createdAt":1426801212000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2428,"state":"closed","title":"Convert many uses of ts.forEach to for..of loops","updatedAt":1435102155000},{"assignedTo":"","body":"Per issue #2296, in ES3 reserved words may not be used as identifiers, even in member access positions.  This is a first attempt at a solution for this.\r\n\r\nLooks like a number of baselines emit targeting ES3 and access members using reserved words, s","comments":3,"createdAt":1426575141000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/993909?v=3","loggedByName":"billti","milestone":"","number":2387,"state":"open","title":"In ES3 emit, use index notation for member access if the identifier is a reserved word","updatedAt":1435102133000},{"assignedTo":"","body":"The problem:\r\n\r\nIf `handleCollisions` finds two collisions that are both marked \"fixed\" (in the `isFixed` array), it silently allows both names to escape unaltered and leaving the collisions intact:\r\n\r\n```\r\n        for (var i = 0; i < collisionIndice","comments":5,"createdAt":1434925488000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10376674?v=3","loggedByName":"colbyrussell","milestone":"Community","number":3590,"state":"closed","title":"generate-diagnostics collision handling chokes if two or more collisions are markde \"fixed\"","updatedAt":1435100998000},{"assignedTo":"","body":"The AST will not include an Any token when parsing restructured bindings. I wrote the following program to demonstrate.\r\n\r\ntest.ts\r\n````typescript\r\nlet {a: any, b: number} = {a: 2, b: 4};\r\n````\r\n\r\nprint_tokens.js\r\n````javascript\r\nvar ts = require('ty","comments":2,"createdAt":1435089450000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1482532?v=3","loggedByName":"leeavital","milestone":"","number":3609,"state":"closed","title":"AST does not include an `Any` token for restructured bindings","updatedAt":1435091004000},{"assignedTo":"","body":"Problem:\r\n\r\n`buildInfoFileOutput` doesn't reliably escape diagnostic messages.\r\n\r\nReasonable input that would be problematic (i.e., non-pathological and yet still not adequately handled) would include backslashes and newlines.  The safe `JSON.stringi","comments":6,"createdAt":1434924095000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10376674?v=3","loggedByName":"colbyrussell","milestone":"Community","number":3589,"state":"open","title":"Improper escaping for processDiagnosticMessages.ts","updatedAt":1435086411000},{"assignedTo":"vladima","body":"I was testing the latest TypeScript in VS (644ea82ee39f16102b776f98a9) and I had some error popups when typing. \r\nIt only happened on invalid code (because I was typing) so I'm not sure if this really is an issue but see the attached image\r\n![tserror","comments":2,"createdAt":1435082123000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"TypeScript 1.6","number":3607,"state":"closed","title":"Error getSyntactifClassifications","updatedAt":1435085432000},{"assignedTo":"","body":"fixes #3607 ","comments":2,"createdAt":1435084054000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3608,"state":"closed","title":"do not try to classify missing nodes","updatedAt":1435084749000},{"assignedTo":"","body":"I know that at some point in the past I didn't have this problem TS, but over the last several months it's been doing some funky stuff when auto-formatting.\r\n\r\nhttp://imgur.com/yVORrUA\r\n\r\nIt used to move my {}'s over to line up with their \".then\", bu","comments":1,"createdAt":1435079848000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3310732?v=3","loggedByName":"upta","milestone":"","number":3606,"state":"closed","title":"Formatting issue (might be VS specific, not sure where else to mention it)","updatedAt":1435080385000},{"assignedTo":"","body":"Just figured out how to fix the new line problem we had.\r\n\r\nWe could leave tests folder ignoring normalization:\r\n```\r\ntests/**/*          crlf=false \r\n```\r\nBut that only works if no other overrides it so all other attributes must be more selective\r\n`","comments":16,"createdAt":1431668775000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3174,"state":"closed","title":"Correct new line problems","updatedAt":1435079606000},{"assignedTo":"","body":"Basically the following is kind of absurd:\r\n\r\n```TypeScript\r\nfunction tag(strs: any, x: any): x is number {\r\n    return typeof x === \"number\";\r\n}\r\n\r\nlet x = Math.random() < 0.5 ? 100 : \"100\"; // x: string | number\r\nif (tag `Hello ${ x } world`) {\r\n  ","comments":3,"createdAt":1434865890000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3584,"state":"closed","title":"Consider disallowing tagged templates with tags returning type predicate types","updatedAt":1435078350000},{"assignedTo":"","body":"Tagged template is a kind of invocation, so it's valid to suppose that it will function the same way as an ordinary invocation at the same place.\r\n\r\nBut it's not so for type-predicate-guards:\r\n\r\n```\r\nvar n: any;\r\n\r\ndeclare function q(templateStringsA","comments":7,"createdAt":1434639532000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"","number":3554,"state":"closed","title":"Inconsistency: type-predicate-guard is not treated as a guard with tagged template","updatedAt":1435077824000},{"assignedTo":"DanielRosenwasser","body":"Probably related to #3268\r\n\r\n![image](https://cloud.githubusercontent.com/assets/972891/8295677/eb75d30c-18fb-11e5-92ef-6e6c9a6ad3f3.png)\r\n","comments":0,"createdAt":1435015849000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3603,"state":"open","title":"Rename display name for LHS of export specifier shows wrong text","updatedAt":1435076936000},{"assignedTo":"","body":"Hi,\r\n\r\nJSON is an important data exchange format. At present there is no explicit way to annotate an object as pure JSON. We were expecting union types to solve this problem via the following:\r\n\r\n```typeScript\r\n    interface Json {\r\n        [x: strin","comments":13,"createdAt":1422913067000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":1897,"state":"open","title":"Please provide a `json` basic type","updatedAt":1435075679000},{"assignedTo":"","body":"Those are APIs that sublime text plugin needs for features like build and project error list.","comments":0,"createdAt":1434664433000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3567,"state":"closed","title":"Add project errorlist and project info support in the tsserver.js APIs","updatedAt":1435046492000},{"assignedTo":"","body":"I would like to request the feature to support Visual Studio Unit Test projects with this extension (ie. include the project tab TypeScript Build in unit test project properties).\r\n\r\nStandard practice is to have 1 unit test project for every code pro","comments":7,"createdAt":1434445593000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6107962?v=3","loggedByName":"IgorWolbers","milestone":"","number":3518,"state":"closed","title":"TypeScript Project Properties for Unit Test Projects","updatedAt":1435018938000},{"assignedTo":"","body":"When 1.5 will be released?\r\nDoes it wait for VS 2015 release time?\r\nIf so, please split VS plugin from language itself and do not block language/tools from usage.","comments":4,"createdAt":1434362153000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1898040?v=3","loggedByName":"wgebczyk","milestone":"","number":3510,"state":"closed","title":"TS 1.5 release","updatedAt":1435017638000},{"assignedTo":"","body":"","comments":1,"createdAt":1434414888000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"TypeScript 1.6","number":3517,"state":"closed","title":"Remove 'strict mode' from parsing and checking, and make it purely something purely checked at bind time.","updatedAt":1435008165000},{"assignedTo":"","body":"# Proposal: Conditional Compilation\r\n\r\n## Problem Statement\r\n\r\nAt design time, developers often find that they need to deal with certain scenarios to make their code ubiquitous and runs in every environment and under every runtime condition.  At buil","comments":8,"createdAt":1434557552000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1282577?v=3","loggedByName":"kitsonk","milestone":"","number":3538,"state":"open","title":"Proposal: Conditional Compilation","updatedAt":1435001376000},{"assignedTo":"","body":"Steps to reproduce:\r\n\r\n- VSCode, empty workspace\r\n- add file provide.ts with the following content:\r\n\r\nexport function provide(): void {\t\r\n}\r\n\r\nObserve: you get a message about a missing module system configuration\r\n\r\n- add a tsconfig.json file and r","comments":0,"createdAt":1434966358000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":3593,"state":"open","title":"tsserver: newly added files aren't consider being part of tsconfig.json until restart of the server","updatedAt":1434997720000},{"assignedTo":"","body":"Background:\r\n\r\nThe build does a preprocessing step to build the `Diagnostics` map, which contains items naming tsc error codes and their corresponding human-readable messages.  The generate-diagnostics target runs before the actual compilation step f","comments":8,"createdAt":1434923226000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10376674?v=3","loggedByName":"colbyrussell","milestone":"Community","number":3587,"state":"open","title":"processDiagnosticMessages.ts collision handling doesn't actually work","updatedAt":1434988034000},{"assignedTo":"mhegazy","body":"`foo.ts`:\r\n```TypeScript\r\nnamespace n {\r\n}\r\n```\r\n\r\nRun the following:\r\n```Shell\r\ntsc -d foo.ts\r\n```\r\n\r\nExpected `foo.d.ts`:\r\n```TypeScript\r\ndeclare namespace n {\r\n}\r\n```\r\n\r\nActual `foo.d.ts`:\r\n```TypeScript\r\ndeclare module n {\r\n}\r\n```","comments":0,"createdAt":1434590849000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3544,"state":"closed","title":"Compiler doesn't keep declaration files consistent between 'namespace' and 'module'","updatedAt":1434985603000},{"assignedTo":"","body":"This allows us to start using type predicate types.","comments":0,"createdAt":1434984291000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3596,"state":"closed","title":"Update LKG","updatedAt":1434985067000},{"assignedTo":"","body":"The repo uses DOS-style line endings, but there are two lines in program.ts that don't follow the convention.  It's causing VIM to choke on the file.\r\n\r\n![line-endings](https://cloud.githubusercontent.com/assets/10376674/8214966/9348ef64-14f2-11e5-83","comments":4,"createdAt":1434564874000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10376674?v=3","loggedByName":"colbyrussell","milestone":"TypeScript 1.6","number":3540,"state":"closed","title":"Bad line endings in src/compiler/program.ts","updatedAt":1434983247000},{"assignedTo":"","body":"Trying to evaluate this in Typescript 1.5.0 beta:\r\n\r\nlet result = ts.transpile(source, { module: ts.ModuleKind.CommonJS });\r\n\r\nproduces TypeError: Cannot read property \"key\" from undefined, this prevent the compilation from happening.\r\n\r\nThe error is","comments":16,"createdAt":1433870392000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3934476?v=3","loggedByName":"lealgerardo","milestone":"","number":3446,"state":"closed","title":"ts.transpile fails under Nashorn","updatedAt":1434983119000},{"assignedTo":"","body":"As per the Promise specifications [here](http://www.ecma-international.org/ecma-262/6.0/#sec-promise.prototype.catch), `Promise.prototype.catch` should accept a function that returns a value of type `TResult | PromiseLike<TResult>`, and have a return","comments":2,"createdAt":1434940175000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1232958?v=3","loggedByName":"joostverdoorn","milestone":"","number":3592,"state":"closed","title":"Fix types of Promise.prototype.catch","updatedAt":1434941621000},{"assignedTo":"","body":"Problem:\r\n\r\nWhen trying to find collisions among the mangled names, processDiagnosticMessages.ts uses an algorithm that is O(n^2) wrt the number of names.\r\n\r\nThis is not a big deal right now (no perceptible difference operating on the ~550 diagnostic","comments":0,"createdAt":1434923790000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10376674?v=3","loggedByName":"colbyrussell","milestone":"Community","number":3588,"state":"open","title":"processDiagnosticMessages.ts collision detection is O(n^2)","updatedAt":1434939733000},{"assignedTo":"","body":"```ts\r\nfunction callback(){\r\n\treturn \"My String\";\r\n}\t\r\nfunction myFunction(str : string, cb : (mystr : string)=>string){\r\n}\r\nmyFunction(\"Hello\", callback)\r\n```\r\nAs per my knowledge this mentioned code should show error on compilation time because myF","comments":1,"createdAt":1434870806000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1668868?v=3","loggedByName":"srehanuddin","milestone":"","number":3585,"state":"closed","title":"Issue in Function Type","updatedAt":1434931608000},{"assignedTo":"","body":"Could we get support for something like F#'s type providers in the future?\r\n\r\nLet me present some use case scenarios for this.. Let's suppose you have a TS project trying to access a REST API, and this REST API uses Swagger or RAML for documentation.","comments":4,"createdAt":1431466600000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/861824?v=3","loggedByName":"battlebottle","milestone":"","number":3136,"state":"open","title":"Feature Request: F# style Type Provider support?","updatedAt":1434888097000},{"assignedTo":"","body":"Hi there,\r\n\r\nplease visit the link as the sample code which shows the problem\r\n\r\nhttp://www.typescriptlang.org/Playground#src=%09class%20Simple%20%7B%0D%0A%09%2F%2F%09constructor(private%20_name%3A%20string)%20%7B%7D%0D%0A%09%0D%0A%09%09private%20_na","comments":3,"createdAt":1434792376000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/744147?v=3","loggedByName":"ttony","milestone":"","number":3582,"state":"closed","title":"Incorrect JSON generated using simple Class ","updatedAt":1434866070000},{"assignedTo":"","body":"`tested with tsc 1.5.0-alpha`\r\n\r\n```\r\nvar n = window.Math.min(1, 2);\r\n```\r\n`error TS2339: Property 'Math' does not exist on type 'Window'.`\r\nWorkaround:\r\n```\r\nvar n = (<any>window).Math.min(1, 2);\r\n```\r\n\r\nThis does not seem alright. It seems normal t","comments":4,"createdAt":1434769104000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3248682?v=3","loggedByName":"aicioara","milestone":"","number":3581,"state":"closed","title":"Create type Math on Window, in lib.d.ts","updatedAt":1434844214000},{"assignedTo":"","body":"C# and C++ have a handy `#error` directive that results to a compiler error. It would not hurt to have something similar in TypeScript:\r\n- https://msdn.microsoft.com/en-us/library/c8tk0xsk.aspx\r\n- https://msdn.microsoft.com/en-us/library/x5hedts0.asp","comments":9,"createdAt":1434749127000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":3575,"state":"closed","title":"Suggestion: #error directive","updatedAt":1434825036000},{"assignedTo":"","body":"Add a test case.\r\nIssue #3539.","comments":4,"createdAt":1434650598000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3560,"state":"open","title":"Don't re-add inherited signatures from baseTypes.","updatedAt":1434823719000},{"assignedTo":"","body":"ES6 modules default to running the code in the module in the strict mode. When transpiling this input into ES5 the strict mode should be preserved.\r\n\r\nAs of Typescript 1.5 beta this is not the case:\r\n\r\ninput:\r\n\r\n```\r\nexport class Foo{}\r\n```\r\n\r\ntransp","comments":6,"createdAt":1434749642000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/216296?v=3","loggedByName":"IgorMinar","milestone":"","number":3576,"state":"open","title":"Emit 'use strict' code for input defined via ES6 modules","updatedAt":1434783267000},{"assignedTo":"","body":"This is to fix the bug mentioned in https://github.com/Microsoft/TypeScript-Sublime-Plugin/issues/244\r\nFor now the \"out\" path in tsconfig.json file is related to the path where tsc gets executed, instead of the path of tsconfig.json, which is not exp","comments":1,"createdAt":1434760723000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3580,"state":"closed","title":"Fix the issue that the \"out\" path is not relative to the path of tsconfig.json","updatedAt":1434782459000},{"assignedTo":"","body":"On the managed side tracing is disabled by default anyways.  By logging we still\r\ncause tons of allocations of strings on the managed side.  These then cause\r\nexpensive GCs which can pause editing.","comments":0,"createdAt":1434752574000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3577,"state":"closed","title":"Port 3495 into the release 1.5","updatedAt":1434753285000},{"assignedTo":"","body":"Starting with 1.5 alpha non-const enums preserve their names. Though on initialization they are defined with String constants and in the code without. This breaks google closure compiler in advanced mode, as it thinks of the enums as two different pa","comments":9,"createdAt":1428416636000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1502717?v=3","loggedByName":"jbrosi","milestone":"","number":2655,"state":"open","title":"Non const enums breaking Closure Compiler Advanced mode in 1.5","updatedAt":1434743856000},{"assignedTo":"","body":"```\r\nconst enum foo {\r\n\tNaN = 1, // error: An enum member can not have a numeric name\r\n\tInfinity = 2 // error: An enum member can not have a numeric name\r\n}\r\n```\r\nDon't think those should be errors.\r\n","comments":11,"createdAt":1434727553000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3572,"state":"closed","title":"const enum: numeric name","updatedAt":1434740182000},{"assignedTo":"","body":"I am using typescript client side in a project managed using web pack.\r\n\r\nWhen web pack processes typescriptServices.js, some part of the getNodeSystem code is evaluated because (typeof module !== \"undefined\" && module.exports) is true.\r\n\r\nEvaluating","comments":7,"createdAt":1434104704000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5363266?v=3","loggedByName":"Yellowmat","milestone":"","number":3488,"state":"open","title":"Can't find node's modules ... client side.","updatedAt":1434734683000},{"assignedTo":"","body":"If there is a positive answer to my question, I would be happy to know how to do such thing :)\r\n\r\nThanks in advance guys !","comments":7,"createdAt":1434706015000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5363266?v=3","loggedByName":"Yellowmat","milestone":"","number":3569,"state":"open","title":"Question : Can typescript compute the outline and goto definition of javascript code ?","updatedAt":1434725483000},{"assignedTo":"JsonFreeman","body":"```ts\r\ninterface I {\r\n    x(): (p: number) => void;\r\n}\r\n\r\nvar obj: I = {\r\n    x() {\r\n        return q => { };\r\n    }\r\n}\r\n```\r\n\r\nq has type any, but should be number.","comments":1,"createdAt":1420591289000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1610,"state":"open","title":"Contextual typing of object literal methods not working for return expressions","updatedAt":1434724090000},{"assignedTo":"","body":"Context typing doesn't work for object literals. Simple example:\r\n```typescript\r\nvar a: {\r\n\tdo1():(s:string) => void\r\n}\r\n\r\na = {\r\n\tdo1() { \r\n\t\treturn s => { \r\n\t\t\ts. //should be string type\r\n\t\t}\r\n\t}\r\n}\r\n```","comments":6,"createdAt":1434708925000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1753282?v=3","loggedByName":"anstarovoyt","milestone":"","number":3570,"state":"closed","title":"Context typing doesn't work for object literals","updatedAt":1434723385000},{"assignedTo":"","body":"I don't know if it is possible to get such specific completions after the keyword new in JS using TypeScript, any advice ?\r\n\r\nThanks for your help guys !","comments":2,"createdAt":1434721085000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5363266?v=3","loggedByName":"Yellowmat","milestone":"","number":3571,"state":"open","title":"Question : Is it possible to get specific code completions such as a list of constructors in JS after typing the keyword new ?","updatedAt":1434721741000},{"assignedTo":"","body":"The current construct signature for Promise in es6.d.ts is [this:](https://github.com/Microsoft/TypeScript/blob/e39a2e7/src/lib/es6.d.ts#L3612-L3618)\r\n\r\n```typescript\r\nnew <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?","comments":5,"createdAt":1433315446000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":3356,"state":"open","title":"Promise construct signature allows resolving without a value","updatedAt":1434710803000},{"assignedTo":"","body":"The JavaScript Package Manager, JSPM, is a frictionless package manager for JavaScript that is able to pull packages from various sources (\"endpoints\", as they are called), such as Node Package Manager (NPM) and Bower. Unifying all in one interface. ","comments":51,"createdAt":1425671813000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/919580?v=3","loggedByName":"robertsundstrom","milestone":"TypeScript 1.5.3","number":2233,"state":"closed","title":"JSPM support","updatedAt":1434689164000},{"assignedTo":"","body":"Implements `as` operator as suggested in #296.","comments":16,"createdAt":1431963252000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3201,"state":"closed","title":"As operator","updatedAt":1434673159000},{"assignedTo":"","body":"```typescript\r\nconst nameMember = \"_name\";\r\n\r\nclass Cls {\r\n    private [nameMember]: string;\r\n\r\n    constructor(name: string) {\r\n        this[nameMember] = name;\r\n    }\r\n}\r\n```\r\nCould be wrong, but isn't this now legal syntax? In both ES5 and ES6 mod","comments":3,"createdAt":1434655064000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4442179?v=3","loggedByName":"jamiewinder","milestone":"","number":3562,"state":"open","title":"Computed properties","updatedAt":1434670063000},{"assignedTo":"","body":"If you open commandLineParser.ts, what you'll find is that the first 48% of the file is taken up by a definition that really wants to be JSON.\r\n\r\nSee also #3549","comments":9,"createdAt":1434633883000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10376674?v=3","loggedByName":"colbyrussell","milestone":"","number":3551,"state":"closed","title":"Move ts.optionDeclarations data into JSON","updatedAt":1434666788000},{"assignedTo":"","body":"```typescript\r\nclass A {\r\n    constructor(...args) {\r\n        \r\n    }\r\n\r\n    q: string;\r\n}\r\n\r\nclass V extends A {\r\n    m: number;\r\n}\r\n\r\n\r\nclass S extends A {\r\n    m: number;\r\n}\r\n\r\nvar m = new A(...[1, 3]);\r\n\r\ndeclare function isV(): m is V; \r\n\r\nif (i","comments":3,"createdAt":1434632990000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.6","number":3550,"state":"closed","title":"Crash on trying to apply invalid type predicate","updatedAt":1434666517000},{"assignedTo":"","body":"We were moving a method-declaration called \"constructor\" into a class.  This is incorrect\r\nas that same code should be parsed as a constructor-declaration now that it is in the\r\nclass context.","comments":2,"createdAt":1434662299000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3565,"state":"closed","title":"Fix incremental parsing issue.","updatedAt":1434664237000},{"assignedTo":"","body":"How do I use the compiled typescript files with systemjs? Can typescript compile in the `System.register` format as traceur can?","comments":16,"createdAt":1433866339000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1479737?v=3","loggedByName":"rolandjitsu","milestone":"","number":3444,"state":"open","title":"use typescript compiled files with systemjs","updatedAt":1434664213000},{"assignedTo":"","body":"wrap host.getCanonicalFileName in arrow function","comments":0,"createdAt":1434663545000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3566,"state":"closed","title":"Port PR 3395 into release 1.5","updatedAt":1434664149000},{"assignedTo":"","body":"Fixes #3550.","comments":2,"createdAt":1434640164000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3555,"state":"closed","title":"Fixes type predicate crash bug","updatedAt":1434661765000},{"assignedTo":"","body":"Ports #3368 and releated PRs into release.1.5","comments":0,"createdAt":1434160349000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3498,"state":"closed","title":"Port FileMap into release-1.5","updatedAt":1434661554000},{"assignedTo":"","body":"Following the discussion in #296, here is a PR that adds support for JSX constructs.\r\n\r\nAnd some details about the implementation/spec :\r\n\r\n* JSX elements are only parsed if a triple slash directive is present : \r\n```typescript\r\n///<jsx factory=\"myFa","comments":37,"createdAt":1428531088000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":2673,"state":"closed","title":"JSX Support","updatedAt":1434661538000},{"assignedTo":"","body":"This implements JSX parsing, typechecking, JSX emit, and React emit as specified in #3203.\r\n\r\nOne deviation not written up in that issue yet is that we need to use the Uppercase/lowercase distinction to determine intrinsic vs class elements due to ou","comments":4,"createdAt":1433957417000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":3470,"state":"closed","title":"JSX","updatedAt":1434661516000},{"assignedTo":"","body":"```ts\r\nmodule M {\r\n    function isString(y: string | number): y is\r\n}\r\n```\r\n'is' doesn't show up in completion. This is not good for type predicates:\r\n![iskeyword](https://cloud.githubusercontent.com/assets/8052525/8242157/6363ce06-15c2-11e5-97a5-aad","comments":1,"createdAt":1434661241000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3563,"state":"closed","title":"\"is\" keyword does not show up in completion","updatedAt":1434661493000},{"assignedTo":"","body":"For the code like this:\r\n``` TypeScript\r\ndeclare module M {\r\n    export enum E {\r\n        V = 1\r\n    }\r\n}\r\n\r\nvar a = M.E.V;\r\n```\r\n\r\n1.4 generates\r\n``` JavaScript\r\nvar a = 1 /* V */;\r\n```\r\n\r\n1.5 generates\r\n``` JavaScript\r\nvar a = M.E.V;\r\n```\r\n\r\nIs it ","comments":2,"createdAt":1434620799000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/979966?v=3","loggedByName":"ArtemGovorov","milestone":"","number":3548,"state":"closed","title":"Difference between 1.4 and 1.5 in generating JavaScript for enums in declared modules","updatedAt":1434658464000},{"assignedTo":"","body":"My situation (#3067):\r\n```typescript\r\ninterface A {\r\n    x: string;\r\n}\r\n\r\ninterface B {\r\n    x: string;\r\n    y: string;\r\n}\r\n\r\nfunction copyB(value: B): B {\r\n    return undefined;\r\n}\r\n\r\nvar values: A[] = [];\r\nvalues.map(copyB); // <-- unsound assigmen","comments":5,"createdAt":1434479581000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":3523,"state":"open","title":"Question: is there a way to detect an unsound assignment via public compiler API?","updatedAt":1434654923000},{"assignedTo":"","body":"","comments":3,"createdAt":1434496253000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3530,"state":"closed","title":"Scan less during classification.","updatedAt":1434651562000},{"assignedTo":"","body":"In order to get all diagnostics, you must call all the APIs.  And no APIs return\r\ndiagnostics produced by other APIs.  This is how things were before the addition\r\nof the getCompletionOptionsDiagnostics API, and i'm returning things to that state.","comments":0,"createdAt":1434645335000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3558,"state":"closed","title":"Make it so all our diagnostics APIs return an independent set of diagnostics.","updatedAt":1434651132000},{"assignedTo":"","body":"Specifically, adds `jake lssl` (language service server library). The goal was to export the `Session` type which, in turn, has necessitated exporting most of the types in `editorServices.ts` by extension. \r\n\r\nAdditionally, I've made some changes to ","comments":4,"createdAt":1434402474000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2932786?v=3","loggedByName":"weswigham","milestone":"","number":3513,"state":"closed","title":"Add build target for packaging tsserver as a library","updatedAt":1434650657000},{"assignedTo":"","body":"```typescript\r\nif (isV(m)) { // this works\r\n    m.m;   \r\n}\r\n\r\nif (isV((m))) { // this doesn't work\r\n    m.m;   \r\n}\r\n```","comments":3,"createdAt":1434638893000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"","number":3553,"state":"closed","title":"Should process parenthesized argument as well with type-predicate-guards","updatedAt":1434650103000},{"assignedTo":"","body":"`jake perftsc` was failing compilation. The case of these members must have been changed and perftsc.ts never got updated.","comments":2,"createdAt":1434647742000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2932786?v=3","loggedByName":"weswigham","milestone":"","number":3559,"state":"closed","title":"Fix capitalization in perftsc.ts","updatedAt":1434649092000},{"assignedTo":"","body":"We have diagnosticInformationMap.generated.ts and its diagnosticMessages.json source, but there doesn't seem to be any build step that produces the former from the latter, nor does there seem to be any file in the repo for the generator source.\r\n\r\nTh","comments":2,"createdAt":1434632928000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10376674?v=3","loggedByName":"colbyrussell","milestone":"","number":3549,"state":"closed","title":"No source for the diagnosticInformationMap generation?","updatedAt":1434648466000},{"assignedTo":"","body":"Spreading emits as \".push.apply(reciver, values)\".  This pushes every element in\r\nvalues onto the stack before calling the function.  This can easily stack overflow\r\nif the amount of values is high (i hit this with ~10k values on my own system).","comments":1,"createdAt":1434644039000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3557,"state":"closed","title":"Don't use spread operator when pushing arrays onto other arrays.","updatedAt":1434644966000},{"assignedTo":"","body":"```typescript\r\nclass A {\r\n    constructor(...args) {\r\n        \r\n    }\r\n\r\n    q: string;\r\n}\r\n\r\nclass V extends A {\r\n    m: number;\r\n}\r\n\r\n\r\nclass S extends A {\r\n    m: number;\r\n}\r\n\r\nvar m = new A(...[1, 3]);\r\n\r\ndeclare function isVOrS(m): m is V | m is","comments":2,"createdAt":1434633887000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"","number":3552,"state":"closed","title":"[Question] Type predicates and unions ","updatedAt":1434637835000},{"assignedTo":"","body":"https://github.com/Microsoft/TypeScript/blob/6db4faf4883636e70ef7a99401b9dbc5d1a58631/src/compiler/checker.ts#L2894\r\n\r\n```\r\ninterface monster {\r\n\t(a: \"a\"): void;\r\n\t(b: \"b\"): void;\r\n\t(c: \"c\"): void;\r\n\t(d: \"d\"): void;\r\n\t(e: \"e\"): void;\r\n\t(x: string): v","comments":4,"createdAt":1434562948000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3539,"state":"open","title":"Bug with resolveClassOrInterfaceMembers","updatedAt":1434634428000},{"assignedTo":"","body":"Why doens't typescript support Attribute Annotation?\r\n\r\nFor example, in C#, we could do something like:\r\n\r\nMethod 1:\r\n---\r\nWork around that may work. Not the best solution.\r\n\r\n```cs\r\nclass Address {\r\n...\r\n     < Required ( Message = \"Required street\"","comments":3,"createdAt":1434547083000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8090726?v=3","loggedByName":"TiagoBraga39","milestone":"","number":3537,"state":"closed","title":"Attribute Annotation","updatedAt":1434620442000},{"assignedTo":"","body":"Fixes #3544. This is a follow up to #3491, emits `namespace` declarations as `namespaces` instead of `module`s. ","comments":1,"createdAt":1434601239000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3545,"state":"closed","title":"Emit declarations of namespaces correctly","updatedAt":1434610581000},{"assignedTo":"","body":"Following the discussion on #3513. this is the first half of the proposed changes - only those required to package the service as a library, combined with feedback from the same PR. ","comments":4,"createdAt":1434572952000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2932786?v=3","loggedByName":"weswigham","milestone":"","number":3542,"state":"closed","title":"Add build target for packaging tsserver as a library","updatedAt":1434610444000},{"assignedTo":"","body":"DateTimeFormat.format takes a number or _a date object_.\r\nNumberFormatOptions has some additional fields: minimumIntegerDigits, minimumFractionDigits, ...\r\n","comments":3,"createdAt":1434471985000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5451703?v=3","loggedByName":"piloopin","milestone":"TypeScript 1.6","number":3521,"state":"closed","title":"Incomplete intl.d.ts interfaces","updatedAt":1434609391000},{"assignedTo":"","body":"Closes #3521.","comments":2,"createdAt":1434486914000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5451703?v=3","loggedByName":"piloopin","milestone":"","number":3527,"state":"closed","title":"Fix Intl.DateTimeFormat.format and Int.NumberFormatOptions signature","updatedAt":1434609366000},{"assignedTo":"","body":"The language currently only allows dotted identifiers in `extends` clauses, e.g. `class Foo extends X.Y.Bar { }`. The identifier must resolve to a class in both the value and type namespaces.\r\n\r\nWith the advent of class expressions (#497), we'll pres","comments":0,"createdAt":1408670662000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.6","number":511,"state":"closed","title":"Allow arbitrary expressions in 'extends' clauses","updatedAt":1434602493000},{"assignedTo":"","body":"In current stable and also master (de88ede4feeabab91d032359406a19166ed5bbb2), `tsc --watch` will keep recreating `file.js` during recompilation even when the original `file.ts` source file is removed. Only workaround is to restart `tsc --watch` to ma","comments":8,"createdAt":1432723463000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/311534?v=3","loggedByName":"alexzorin","milestone":"Community","number":3277,"state":"open","title":"`tsc --watch` recreates deleted source files","updatedAt":1434592903000},{"assignedTo":"","body":"","comments":4,"createdAt":1434125866000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3491,"state":"closed","title":"use namespaces instead of modules in the codebase","updatedAt":1434590924000},{"assignedTo":"","body":"TypeScript in master contains many new and interesting features. It would be great if pre-release versions could be installed via npm. This would hopefully help get more testing and exposure for these features for downstreams who can tolerate the ris","comments":4,"createdAt":1414230852000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2458?v=3","loggedByName":"robertknight","milestone":"","number":964,"state":"open","title":"Publish pre-release versions of TypeScript via npm","updatedAt":1434589937000},{"assignedTo":"jonathandturner","body":"We should be making preview releases on npm available, preferably in an automated fashion.\r\n\r\nAs discussed a bit on #1818.\r\n\r\nSeems like this should have the 1.5 milestone (but should begin prior to 1.5's release, as would be appropriate).","comments":5,"createdAt":1422851925000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1882,"state":"closed","title":"Make periodic pre-release builds available on npm","updatedAt":1434589929000},{"assignedTo":"","body":"If I need to repeat a union type in multiple places, it would be very nice to have an alias from that union type\r\n\r\nFor example, if I can assign \r\n```ts\r\ninterface AnyElementList = NodeList|[Node]|[Element]|Text\r\n```\r\n\r\nThe above syntax is not someth","comments":6,"createdAt":1434502725000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/543633?v=3","loggedByName":"mohsen1","milestone":"","number":3533,"state":"closed","title":"Feature Request: Allow aliasing unions ","updatedAt":1434587680000},{"assignedTo":"","body":"Some odd/unintuitive Intellisense behaviour:\r\n\r\n``` typescript\r\n/**\r\n * Function description A\r\n * @param name Parameter description A\r\n */\r\nfunction uniqueName(name: string): string {\r\n}\r\n\r\nexport const Uid = {\r\n    /**\r\n     * Function description ","comments":4,"createdAt":1434465310000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4442179?v=3","loggedByName":"jamiewinder","milestone":"","number":3520,"state":"open","title":"Intellisense behaviour of functions and parameters","updatedAt":1434587637000},{"assignedTo":"","body":"When `typeof` is used to create an unresolvable circular type we substitute type `any` (see section 3.6.3 in the spec). For example, all of the following variables are given type `any`:\r\n```typescript\r\nvar c: typeof c;\r\nvar d: typeof e;\r\nvar e: typeo","comments":0,"createdAt":1410373926000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"TypeScript 1.5","number":647,"state":"closed","title":"Error on invalid recursive types","updatedAt":1434585454000},{"assignedTo":"JsonFreeman","body":"Hi. this (ill-formed) source file crashes tsc 1.5.0-beta\r\n\r\n    class VariableDeclarations {\r\n      public {[name:string]:VariableDeclaration};\r\n    }\r\n\r\n$ tsc t.ts\r\nhere's the o/p:\r\n\r\n\r\n    /usr/local/lib/node_modules/typescript/bin/tsc.js:654\r\n\t\t  ","comments":1,"createdAt":1434221163000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3925131?v=3","loggedByName":"img","milestone":"TypeScript 1.5.3","number":3504,"state":"closed","title":"tsc crash for TypeScript 1.5","updatedAt":1434579056000},{"assignedTo":"","body":"Fixes #3514 in release-1.5.\r\n\r\nExport specifiers never put a symbol in scope in a module. Right now, resolveName calls getSymbol on the exports of the module, and if it finds an export specifier, dismisses it and keeps going. The problem is that getS","comments":2,"createdAt":1434501973000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3532,"state":"closed","title":"Make resolveName ignore export specifiers without calling getSymbol","updatedAt":1434578734000},{"assignedTo":"","body":"Fixes #3504.\r\n```ts\r\nclass C { \r\n    public {};\r\n}\r\n```\r\nOur parser function isClassMemberStart treats `public {}` as a class member because it starts with the word \"public\". Starting with a modifier is enough evidence to consider it a class member. ","comments":2,"createdAt":1434411191000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3515,"state":"closed","title":"Parse class member with a missing identifier in the presence of a modifier","updatedAt":1434578725000},{"assignedTo":"mhegazy","body":"The ES6 designates some native objects as subclassable, e.g. Object, Boolean, Error, Map, Promise ..etc. The way these constructs are modeled in lib.d.ts makes is impossible to subclass, as they are defined as a pair of a var and an interface.\r\n\r\nFro","comments":9,"createdAt":1416005746000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":1168,"state":"closed","title":"Can not extend built in types","updatedAt":1434576800000},{"assignedTo":"","body":"This PR allows the `extends` clause of a class to specify an arbitrary expression that computes a constructor function. The PR also relaxes the strict requirement that `extends` specify a class type and instead allows expressions of \"class-like\" cons","comments":3,"createdAt":1434412007000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3516,"state":"closed","title":"Allow expressions in class extends clauses","updatedAt":1434576422000},{"assignedTo":"","body":"With #3516 it is now possible for a class to extend `null` as permitted by ES6. This PR changes the `__extends` helper emitted for derived classes to properly support null base arguments in ES5 environments:\r\n\r\n```typescript\r\nvar __extends = (this &&","comments":6,"createdAt":1434482856000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3524,"state":"closed","title":"Support null in __extends helper","updatedAt":1434572122000},{"assignedTo":"","body":"Fixes issue #3540 \r\n\r\nWhy this change is needed:  \r\n`autocrlf = input` and `whitespace = cr-at-eol` don't help here, because this problem is already in the repo.  This isn't something that has been introduced by my local tools mangling things; it's d","comments":2,"createdAt":1434565590000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10376674?v=3","loggedByName":"colbyrussell","milestone":"","number":3541,"state":"closed","title":"Fix line endings in program.ts","updatedAt":1434566215000},{"assignedTo":"","body":"Too many times do we have new users using function type literals without type annotations on their parameters - recently, #3080. Currently the following:\r\n\r\n```TypeScript\r\nvar x: (number, string) => void;\r\n```\r\n\r\nis implicitly typed like:\r\n\r\n```TypeS","comments":9,"createdAt":1431066491000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3081,"state":"closed","title":"Make type annotations in function type literals mandatory","updatedAt":1434566130000},{"assignedTo":"ahejlsberg","body":"It would make it easier for others to work on TypeScript tooling if we had this available. We've already had #2536 and [people asking internally](https://github.com/Microsoft/TypeScript-Sublime-Plugin/issues/174#issuecomment-98259438).","comments":0,"createdAt":1430525988000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":2993,"state":"open","title":"Spec should include a list of reserved words/keywords","updatedAt":1434565384000},{"assignedTo":"ahejlsberg","body":"According to the grammar in the spec a TypeAliasDeclaration not permitted to appear inside a AmbientExternalModuleDeclaration. \r\n\r\nFor example, on DefinitelyTyped acl.d.ts contains:\r\n\r\n    declare module \"acl\" {\r\n      type strings = string|string[];","comments":0,"createdAt":1430554358000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6926644?v=3","loggedByName":"sedwards2009","milestone":"TypeScript 1.6","number":3004,"state":"open","title":"[spec] tsc accepts a TypeAliasDeclaration inside a AmbientExternalModuleDeclaration, the spec doesn't","updatedAt":1434565384000},{"assignedTo":"ahejlsberg","body":"```TypeScript\r\nfunction foo8(x: number | string | boolean) {\r\n    return typeof x === \"string\"\r\n        ? x === \"hello\"\r\n        : function () {\r\n            var b: number | boolean = x; //  number | boolean\r\n//            ~\r\n//            !!!error T","comments":1,"createdAt":1415221309000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.6","number":1068,"state":"open","title":"Should function block/module block be stopping narrowing of type","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"From spec:\r\n```\r\nâ¢\tIn the true branch statement of an âifâ statement, the type of a variable or parameter is narrowed by any type guard in the âifâ condition when true, provided the true branch statement contains no assignments to the variable or par","comments":1,"createdAt":1415150400000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.6","number":1059,"state":"open","title":"Even though the typeguard variable is assigned in true branch the false branch doesn't have narrowed type and vice versa","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"According to section [9.4] (https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#94-constant-enum-declarations)\r\n\r\n> unlike regular enum declarations, constant enum declarations are completely erased in the emitted JavaScript code. For thi","comments":1,"createdAt":1429144572000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.6","number":2786,"state":"open","title":"Spec restricts uses of const enum from type annotations","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"The compiler widens the left hand side in a dotted property access, but section 4.10 in the spec does not mention the widening.\r\n\r\nIt is also strange that we do this for a dotted property access but not for a bracket access.","comments":0,"createdAt":1420490574000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":1603,"state":"open","title":"Widening LHS in a dotted property access","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"Quoted literal property names with leading or trailing spaces are treated as numeric property names, although they are not treated as numbers by JS.\r\n\r\n    class A {\r\n      [i: number]: number;\r\n      public \"1\": string = \"no space\"; // Error here - ","comments":7,"createdAt":1411481045000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/936705?v=3","loggedByName":"osdm","milestone":"TypeScript 1.6","number":728,"state":"open","title":"\" 1\" with a space is treated like numeric property name","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"> When a parameter type annotation specifies a string literal tyï¿½ï¿½ï¿½ï¿½ï¿½pe, the containing signature is a specialized signature (section 3.8.2.4).\r\n\r\nSee [3.8.2.2](https://github.com/Microsoft/TypeScript/blob/7ee698c450e8317651ecb102534b0601da5ecb9f/doc","comments":0,"createdAt":1428881005000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":2737,"state":"open","title":"Generated markdown issue with spec at section 3.8.2.2","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"This is tracking the spec work for #1082.","comments":0,"createdAt":1422306685000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":1811,"state":"open","title":"Spec integration for ES6 computed properties","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"```ts\r\nfunction isOkOf<a>(anything: { isOk: a }) : a {\r\n\treturn anything.isOk;\r\n}\r\nfunction notOver<a>(is: (value: a) => boolean) : (value: a) => boolean {\r\n\treturn function not(value: a) : boolean {\r\n\t\treturn !is(value);\r\n\t};\r\n}\r\ninterface A {\r\n\tisO","comments":18,"createdAt":1427384409000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"TypeScript 1.6","number":2511,"state":"open","title":"Empty type {} gets inferred to without a warning","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"In section [4.17.1] (https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#4.17), \r\n\r\nAssignmentPattern:\r\nâââObjectAssignmentPattern\r\nâââArrayAssignmentPattern\r\n\r\nââObjectBindingPattern: // This should be ObjectAssignmentPattern\r\nââ    ... ","comments":0,"createdAt":1429043258000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.6","number":2762,"state":"open","title":"Spec incorrectly specify grammar in section 4.17.1","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"In the section 3.8.2.2:\r\n\r\n>A parameter can be marked optional by following its name or binding pattern with a question mark (?) or by including an initializer. Initializers (including binding property or element initializers) are permitted only when","comments":0,"createdAt":1429203027000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.6","number":2797,"state":"open","title":"BindingPattern can't be marked optional using question mark in implementation signature","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"Section 3.10.3 / 3.10.4 need to be updated in the spec to support the code in #2576. The suggested change is:\r\n\r\n* If S is a type parameter whose base constraint is a union type, S is assignable to T if the base constraint of S is assignable to T","comments":1,"createdAt":1429138511000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":2781,"state":"open","title":"Handle type parameter extending a union type in the spec","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"- [ ] In function calls\r\n- [ ] In array literals\r\n\r\nFor each of these, we may have to consider surrogate pairs.","comments":1,"createdAt":1427927559000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":2585,"state":"open","title":"Support spread operator ('...') on strings","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"At the end of 1.3 section of mark down version of language spec., the spec. says \"...as in following screen shot\" but there is no screen shot attached. ","comments":1,"createdAt":1419621433000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.6","number":1566,"state":"open","title":"Missing attached screen shot in Language Specification","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"Current specification for object literals doesn't contain information about short properties-form. For example:\r\nvar a;\r\nvar b = {a} \r\ninstead of  \r\nvar b = {a:a}\r\n\r\nIs it a mistake?","comments":1,"createdAt":1427469013000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1753282?v=3","loggedByName":"anstarovoyt","milestone":"TypeScript 1.6","number":2526,"state":"open","title":"Object literal specification is incomplete","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"Currently,\r\n\"\r\nA parameter is permitted to include a public, private, or protected modifier only if it occurs in the parameter list of a ConstructorImplementation (section 8.3.1) and only if it doesn't specify a BindingPattern.\r\n\"\r\nThe spec should ha","comments":0,"createdAt":1428871355000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.6","number":2733,"state":"open","title":"Spec should say public, private and protected modifiers are not allowed to be used with rest parameter","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"You can constrain a type variable to a primitive type like `number` (useful for a function intended to work on multiple different enum types), but you get an error upon trying to assign it to that type:\r\n\r\n    function binarySearch<T extends number>(","comments":1,"createdAt":1423107006000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1071296?v=3","loggedByName":"jeffreymorlan","milestone":"TypeScript 1.6","number":1935,"state":"open","title":"Type variable constrained to primitive or union type not assignable to it","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"Compiler gives an error for the following code:\r\n```ts\r\nfunction a({x,y}?) {} // error\r\n```\r\n\r\nHowever, in the spec both section 6.4 (Destructuring Parameter Declaration) and 3.8.2.2 (Parameter List), The later one simply specify that \"A parameter ca","comments":0,"createdAt":1428785149000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.6","number":2723,"state":"open","title":"Spec doesn't indicate that binding pattern can't be optional in an implementation signature","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"We've changed these algorithms to do multiple passes at times for various reasons but the spec does not currently reflect this. We also haven't written extensive tests for these new algorithms but bugs are being generated from the changes. We need to","comments":1,"createdAt":1416263549000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.6","number":1186,"state":"open","title":"Spec new overload resolution and type argument inference rules","updatedAt":1434565383000},{"assignedTo":"ahejlsberg","body":"Section 4.17.1 (destructuring assignment) does not say what should happen if the assignment element E in an array assignment pattern is a rest element. It may be implied by something else in the spec, but it would be good to make it explicit.","comments":0,"createdAt":1428692663000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":2713,"state":"open","title":"Spec says nothing about destructuring assignment for rest elements","updatedAt":1434565383000},{"assignedTo":"vladima","body":"On Vlad's machine we're seeing that GetCompletions is taking longer than we would expect inside checker.ts.  Often times being >100ms, and sometimes up to 250ms.  We need to profile this to see where our time is going, and to see if there is low hang","comments":6,"createdAt":1433889734000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"TypeScript 1.5.3","number":3458,"state":"closed","title":"GetCompletionItems needs to be profiled.","updatedAt":1434565298000},{"assignedTo":"aozgaa","body":"There are several places in the code that unnecessarily use `==` or `!=` instead of `===` or `!==`, respectively. This makes the easy change where possible.\r\n\r\nChanges haven't been made in a couple places that do depend on type coercions, as this bre","comments":2,"createdAt":1434494525000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3226984?v=3","loggedByName":"aozgaa","milestone":"","number":3529,"state":"closed","title":"Cleanup double equals","updatedAt":1434563655000},{"assignedTo":"","body":"There are some issues concerning the declaration of an interface index of an enum-type. However, at least the following should be possible in my opinion:\r\n```javascript\r\nenum Num { num1 = 1, num2, num3 };\r\n\r\ninterface numToString {\r\n    [num: number]","comments":9,"createdAt":1434195420000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6279994?v=3","loggedByName":"JirkaDellOro","milestone":"","number":3499,"state":"closed","title":"Use enums in literal definition of objects using interface with index of type number","updatedAt":1434562411000},{"assignedTo":"","body":"If an interface has some deep property and an object from that type has a inner property that is not conforming to the type interface, TypeScript compiler will throw an error which is not very helpful because it's not pointing to exact property that ","comments":3,"createdAt":1434500527000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/543633?v=3","loggedByName":"mohsen1","milestone":"","number":3531,"state":"closed","title":"Deep interface errors are not helpful","updatedAt":1434560244000},{"assignedTo":"","body":"```\r\nconst enum Bar { a, b}\r\nvar c: typeof Bar.a; // 'const' enum can only be used in property or index access expressions or the right hand side of an import declaration or export assignment.\r\n```\r\nShould it be allowed?\r\n","comments":7,"createdAt":1433851079000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"Community","number":3440,"state":"open","title":"typeof const enum","updatedAt":1434555165000},{"assignedTo":"","body":"I have a function like this in my TypeScript+Angular application (using Definitely Typed typings):\r\n\r\n    public login() {\r\n        this.dataModel.login({\r\n            grant_type: \"password\",\r\n            userName: this.userName,\r\n            passwor","comments":2,"createdAt":1434484338000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1752479?v=3","loggedByName":"joelmdev","milestone":"","number":3525,"state":"closed","title":"Lambda losing track of scope of \"this\"","updatedAt":1434509555000},{"assignedTo":"","body":"There is no way to export an enum that has already been imported under the same name\r\n\r\n```typescript\r\nimport m  = require('m');\r\nimport MyEnum = m.MyEnum\r\nexport enum MyEnum\r\n```\r\n\r\n","comments":5,"createdAt":1416324935000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/502412?v=3","loggedByName":"spion","milestone":"","number":1194,"state":"closed","title":"Export imported enum","updatedAt":1434492891000},{"assignedTo":"","body":"","comments":1,"createdAt":1434486382000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3526,"state":"closed","title":"Remove generatorParameter and asyncParameter contexts.","updatedAt":1434489055000},{"assignedTo":"","body":"This is an official proposal for one of the issues outlined in #229.\r\n\r\nFirstly, I'd like to give a big thank you to @ahejlsberg for identifying the issue, and to @redexp, @ivogabe, @cspotcode, and others for their contributions to the original issue","comments":48,"createdAt":1423453132000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719814?v=3","loggedByName":"nathggns","milestone":"","number":1985,"state":"open","title":"Proposal to improve static analysis for the thisArg of a function","updatedAt":1434480500000},{"assignedTo":"","body":"We have a typescript application and a use a file per class. There are lots of benefits to this the major one being source control conflict reduction. \r\n\r\nWe compile our app using the --out compiler flag but I think there is room for some serious opt","comments":10,"createdAt":1407948137000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1564426?v=3","loggedByName":"Davidhanson90","milestone":"","number":447,"state":"open","title":"Partial modules and output optimization","updatedAt":1434475154000},{"assignedTo":"","body":"```\r\nfunction ident(x) { return x; }\r\n\r\nvar Foo = ident(class Foo {})\r\n```\r\n\r\nThrows:\r\n```\r\nerror TS9003: 'class' expressions are not currently supported.\r\n```\r\n\r\nI believe that is a valid ES6 syntax, and it should work.","comments":2,"createdAt":1434473403000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/111951?v=3","loggedByName":"mhevery","milestone":"","number":3522,"state":"closed","title":"Inline classes not supported","updatedAt":1434474729000},{"assignedTo":"","body":"At least it seems that way to me.\r\n\r\nBelow  is the code I entered in the [playground](http://www.typescriptlang.org/Playground) based on your documentation for [specialized types] (http://www.typescriptlang.org/Content/TypeScript%20Language%20Specifi","comments":6,"createdAt":1433900631000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/129061?v=3","loggedByName":"wardbell","milestone":"","number":3462,"state":"closed","title":"Specialized signature yields incorrect intellisense in playground","updatedAt":1434470750000},{"assignedTo":"","body":"When using the Event interface from lib.d.ts, and attaching a listener, the callback will get an object of type Event. However, the Event's currentTarget property is of type EventTarget (whereas it's should be of type Element/HTMLElement). ","comments":7,"createdAt":1406637798000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719814?v=3","loggedByName":"nathggns","milestone":"","number":299,"state":"open","title":"Request to change currentTarget in Event interface for lib.d.ts","updatedAt":1434441876000},{"assignedTo":"","body":"Fixes #3273.","comments":7,"createdAt":1434365649000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3511,"state":"closed","title":"Fixes harness bug","updatedAt":1434426257000},{"assignedTo":"","body":"This PR simplifies our checking for reserved words used as identifiers in strict mode. The logic was previously contained in multiple functions in the checker but is now consolidated in a single function in the binder.\r\n\r\nWe might consider moving mor","comments":2,"createdAt":1434318321000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3509,"state":"closed","title":"Simpler strict mode checking","updatedAt":1434397201000},{"assignedTo":"","body":"Even though Visual Studio 2012 doesn't officially support later versions of TypeScript than 1.0, is there a way to force the plugin to use a later version of the TypeScript compiler?\r\n\r\nI do Xbox One media app development and am therefore forced to s","comments":7,"createdAt":1427825093000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/518271?v=3","loggedByName":"chrisaswain","milestone":"","number":2564,"state":"closed","title":"Visual Studio 2012 and higher versions of TypeScript than 1.0","updatedAt":1434390057000},{"assignedTo":"","body":"A friend recently asked me: \"Is it worth learning advanced JavaScript or just learn TypeScript instead?\" - My response was something along these lines:\r\n\r\n<em>The reason I became a better JavaScript developer was because I paid close attention to the","comments":1,"createdAt":1434214975000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9935122?v=3","loggedByName":"series0ne","milestone":"","number":3503,"state":"closed","title":"TypeScript minification and obfuscation","updatedAt":1434386134000},{"assignedTo":"","body":"This code:\r\n\r\n```typescript\r\nvar canvas = document.createElement('canvas');\r\nvar context = canvas.getContext('2d');\r\nvar drawThing:HTMLImageElement|HTMLCanvasElement;\r\n\r\ncontext.drawImage(drawThing, 0, 0);\r\n```\r\nfails with error:\r\n```\r\n2345 Argument ","comments":1,"createdAt":1434201713000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1189265?v=3","loggedByName":"NekR","milestone":"","number":3501,"state":"closed","title":"CanvasRenderingContext2D#drawImage overloading problem","updatedAt":1434385924000},{"assignedTo":"","body":"Our team hit an issue when turning on strict in our code. Consider the following code:\r\n\r\nclass bug {\r\n\tpublic get id() { return 5; }\r\n}\r\nvar b = new bug();\r\nb.id = 10;\r\n\r\nIn this example, the id property only declares a getter, however, it is still ","comments":1,"createdAt":1434067045000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8453656?v=3","loggedByName":"diegope","milestone":"","number":3485,"state":"closed","title":"Compiler does not enforce read only properties","updatedAt":1434383391000},{"assignedTo":"","body":"Enable the .js, .jsx, .es and .es6 file extensions for TS compiler file inputs and module imports. This is already supported by other transpilers, such as babel.\r\n\r\nThe feature would ideally be added as an option in the compiler. With .js together wi","comments":13,"createdAt":1426106486000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/919580?v=3","loggedByName":"robertsundstrom","milestone":"","number":2302,"state":"open","title":"Enable the .js and .es file extensions for TypeScript files","updatedAt":1434381255000},{"assignedTo":"","body":"Hi guys,\r\n\r\nThe following code is valid in JavaScript.\r\n\r\n````javascript\r\nclass Matrix extends Float32Array {\r\n    constructor() {\r\n        super(9);\r\n    }\r\n}\r\n````\r\n\r\nUnfortunately that isn't possible to do in TypeScript at the moment because all o","comments":3,"createdAt":1434284714000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7645403?v=3","loggedByName":"si-robertson","milestone":"","number":3506,"state":"closed","title":"Typed arrays should be classes.","updatedAt":1434340924000},{"assignedTo":"","body":"# Update\r\n\r\n*Light mode now only skips invariant checking and parent pointer setup.*\r\n\r\n## How to review this PR\r\n\r\nRead <a href=\"#the-description\">the description</a> and probably review commit-by-commit.\r\n\r\n## <a name=\"the-description\">The Descript","comments":4,"createdAt":1430877472000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3049,"state":"closed","title":"Create \"light\" test-running mode and a '--noLibCheck' flag","updatedAt":1434338703000},{"assignedTo":"","body":"I do realize that the SystemJS loader can be used with AMD and CommonJS modules. Is there any interest in outputting directly to the system module format?","comments":25,"createdAt":1428167119000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2096573?v=3","loggedByName":"mikehaas763","milestone":"","number":2616,"state":"closed","title":"Support SystemJS module output.","updatedAt":1434314843000},{"assignedTo":"","body":"Hi,\r\n\r\nI have just installed TSC 1.0.3 via NPM. According to a [MSDN blog article](http://blogs.msdn.com/b/typescript/archive/2015/01/16/announcing-typescript-1-4.aspx) regarding TS 1.4, posted in Janurary, we should be able to `--target` ES6 now. Un","comments":3,"createdAt":1434202242000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7645403?v=3","loggedByName":"si-robertson","milestone":"","number":3502,"state":"closed","title":"Unsupported --target ES6","updatedAt":1434221762000},{"assignedTo":"","body":"I was wondering: Are there any plans to support multiple types with the same name, but with a different number of type parameters, like this (similar to the `Func<T>` type in C#)?\r\n\r\n```typescript\r\ninterface Func<TResult> {\r\n    (): TResult;\r\n}\r\n\r\nin","comments":2,"createdAt":1434009064000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/947523?v=3","loggedByName":"mariusschulz","milestone":"","number":3478,"state":"open","title":"Types with same name but different type parameters","updatedAt":1434187681000},{"assignedTo":"","body":"Typescript debugging does not work when the JS files produced from the TS files are uglified and concated using grunt. (TS map files are ok!). If each file is used separately, the degugging works. Once uglified and concated, typescript debugging in V","comments":16,"createdAt":1430476493000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3442158?v=3","loggedByName":"damienbod","milestone":"","number":2987,"state":"open","title":"Typescript debugging in Visual Studio with IE and grunt uglify concat","updatedAt":1434175671000},{"assignedTo":"","body":"Let's use:\r\n```typescript\r\ninterface A = {\r\n   data: number;\r\n}\r\ninterface B = {\r\n  data: string;\r\n}\r\ninterface C extends A, B {}\r\n```\r\nThis will throw an error as data has two separately defined types. I think that it would be really useful to allow","comments":18,"createdAt":1433386942000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4161445?v=3","loggedByName":"ttowncompiled","milestone":"","number":3375,"state":"closed","title":"Create intersection types when interface members conflict.","updatedAt":1434158759000},{"assignedTo":"","body":"With type predicates in, here is a change to the lib to make it use that in isArray definition.","comments":2,"createdAt":1434132110000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3492,"state":"closed","title":"Define Array.isArray using a type predicate","updatedAt":1434155971000},{"assignedTo":"","body":"When running `jake runtests` with the option `t=` there is maximum call stack error.\r\n\r\n```typescript\r\n$ jake runtests t=amdImportAsPrim\r\nrm -rf tests/baselines/local/\r\nrm -rf internal/baselines/rwc/local\r\nRunning test(s): amdImportAsPrim\r\nmocha -R d","comments":2,"createdAt":1432691510000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"Community","number":3273,"state":"open","title":"Broken test runner when narrowing tests","updatedAt":1434155879000},{"assignedTo":"","body":"TS workspace\r\ncreate a file foo.ts\r\n\r\nexport function foo(): number {\r\n\treturn 10;\r\n}\r\n\r\nObserve: the tsserver complains about missing module option\r\nAdd a tsconfig.json to it:\r\n\r\n{\r\n\t\"compilerOptions\": {\r\n\t\t\"sourceMap\": true,\r\n\t\t\"module\": \"commonjs\"","comments":2,"createdAt":1432216499000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":3244,"state":"open","title":"tsserver: tsconfig.json not honored for files that already exist in workspace","updatedAt":1434154976000},{"assignedTo":"","body":"I am using AMD modules and need to define JQuery Plugins. Here is a sample code:\r\n```javascript\r\n// file: plugin.ts\r\nexport interface plugin_option {\r\n    c1?: C1;\r\n    c2?: C2;\r\n    cn?: Cn;\r\n}\r\nexport class C1 { }\r\nexport class C2 { }\r\nexport class","comments":6,"createdAt":1424259873000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6246343?v=3","loggedByName":"Brentamil","milestone":"","number":2062,"state":"closed","title":"When creating external module, you need to declare your interfaces twice. How to avoid it?","updatedAt":1434154732000},{"assignedTo":"","body":"I'm currently migrating the [WebRx](https://github.com/WebRxJS/WebRx) codebase from a internal modules to external ones. WebRx consumes [RxJS](https://github.com/Reactive-Extensions/RxJS) and implements one extension of the [Observable](https://githu","comments":8,"createdAt":1432749177000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/51688?v=3","loggedByName":"oliverw","milestone":"","number":3282,"state":"closed","title":"Declaring an extension to an ambient internal module inside of an external module","updatedAt":1434154432000},{"assignedTo":"","body":"I am using typescript 1.5 and common js modules type and when i declare my class inside module i get this error:\r\n```\r\nclient/js/main.ts(4,9): Error TS2305: Module '\"client/js/routeController\"' has no exported member 'RouteController'.\r\n```\r\n\r\nrouteC","comments":6,"createdAt":1432053106000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6745730?v=3","loggedByName":"NetanelBasal","milestone":"","number":3218,"state":"closed","title":"Cant export class from a module","updatedAt":1434154013000},{"assignedTo":"","body":"```TS\r\nclass C<T> {\r\n    constructor(x: T);\r\n    constructor(x: T, y: T);\r\n    constructor(public x: T, public y?: T) { }\r\n}\r\n\r\nvar constructC: <T>(CConstructorFunction: new (x: T, y: T) => C<T>) => C<T>;\r\nvar x = constructC(C).x;\r\n```\r\n\r\nThe way the","comments":6,"createdAt":1413246512000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":888,"state":"closed","title":"Missing implicit any error for inferring an \"any\" implicitly as a type argument","updatedAt":1434153995000},{"assignedTo":"","body":"I'm writing tests for my fork and notice the `currentSourceFile.filename` says my file is under `/tests/cases/compiler` instead of in the sub-folder I originally put it in.  I wouldn't figure it out in the jakefile.\r\n\r\nThe file I have was located in ","comments":7,"createdAt":1433551460000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3254987?v=3","loggedByName":"unional","milestone":"","number":3398,"state":"closed","title":"Did `runtests` copy all test files to tests/cases/compiler/ folder?","updatedAt":1434153889000},{"assignedTo":"","body":"While attempting to create a decorator for checking if a parameter is `null` and throwing, I found that the code emitted is overwriting the wrapper function I'm installing.\r\n\r\n```ts\r\nfunction throwIfNull(target: any, key: string, index: number) {\r\n\tl","comments":6,"createdAt":1431543006000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/204106?v=3","loggedByName":"bryanforbes","milestone":"","number":3154,"state":"closed","title":"Unable to install wrapper function from parameter decorator","updatedAt":1434153720000},{"assignedTo":"","body":"This doesn't make any sense, it's just an interface. I should be able to use it wherever I want.\r\n\r\n```TypeScript\r\nexport default function() : IteratorResult<any> {\r\n\treturn { done: true };\r\n}\r\n```\r\n\r\n```sh\r\ntsc Test.ts --modules \"commonjs\"\r\n```\r\nand","comments":11,"createdAt":1433867947000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1540597?v=3","loggedByName":"blesh","milestone":"","number":3445,"state":"closed","title":"Using IteratorResult errors unless you build with --ES6","updatedAt":1434153684000},{"assignedTo":"","body":"I tried to imagine how could I use new Decorator Metadata in order to autowire dependency injection with TS interfaces. Test with tsc 1.5 beta gives me Object constructor instead of interface constructor (perhaps obviously), but that limits the abili","comments":13,"createdAt":1430954189000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/271576?v=3","loggedByName":"pavelsavara","milestone":"","number":3060,"state":"closed","title":"TypeScript interfaces for Dependency Injection","updatedAt":1434153645000},{"assignedTo":"","body":"I know it's possible to build a linter by getting a file's AST - \r\n\r\nHow do I get from the AST to printing out a JavaScript file? I want to make modifications to the AST post parse and then print out the result to a file.","comments":5,"createdAt":1433695891000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1989023?v=3","loggedByName":"n2westman","milestone":"","number":3406,"state":"closed","title":"Compiler API","updatedAt":1434153600000},{"assignedTo":"","body":"I have some questions about the metadata symbols that are added by the TypeScript compiler to the generated JavaScript code when using the `--emitDecoratorMetadata` flag and [decorators](https://github.com/Microsoft/TypeScript/issues/2249).\r\n\r\nI'm aw","comments":7,"createdAt":1431513789000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10656223?v=3","loggedByName":"remojansen","milestone":"","number":3148,"state":"closed","title":"TypeScript type metadata symbols and interfaces","updatedAt":1434153542000},{"assignedTo":"","body":"I'm trying to understand why the following code doesn't compile with TS 1.4+:\r\n\r\n```typescript\r\ninterface ITest<A> {\r\n}\r\n\r\nfunction test(): ITest<void>;\r\nfunction test<A>(a?: A): ITest<A> {\r\n\treturn <any>{};\r\n}\r\nvar t = test<string>();\r\n```\r\n\r\nBut th","comments":1,"createdAt":1434034399000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2389359?v=3","loggedByName":"Ziriax","milestone":"","number":3479,"state":"closed","title":"Generic function overloading in TS 1.4+, dummy declaration needed?","updatedAt":1434153424000},{"assignedTo":"","body":"Hi, I installed 2015 rc and ts 1.5 beta. \r\nI created a sample ts file, and I see that source map is disabled: I would like to configure the map source to create a single file and deploy in the wwwroot so I can debug the code.\r\nI added a tsconfig file","comments":4,"createdAt":1430462420000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/127777?v=3","loggedByName":"lucamorelli","milestone":"","number":2985,"state":"closed","title":"configuration of ts 1.5 beta with vs 2015 rc","updatedAt":1434153137000},{"assignedTo":"","body":"Currently you need to do a main references file when dealing with multiple typescript files. This can become a pain to manage. Could we just use the files from tsconfig.json or better yet use all typescript files in all directories under where the re","comments":10,"createdAt":1429721151000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1020579?v=3","loggedByName":"niemyjski","milestone":"","number":2868,"state":"closed","title":"Resolve references using tsconfig??","updatedAt":1434153102000},{"assignedTo":"","body":"I am trying to use external module within an internal module but Visual Studio won't let me do that.\r\nAs soon as I add an import x = require('xxx'); the internal module no longer consider the file to be part of the module and all exports are not refe","comments":13,"createdAt":1413546022000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6107439?v=3","loggedByName":"linvi","milestone":"","number":909,"state":"closed","title":"Use external modules within internal module","updatedAt":1434153022000},{"assignedTo":"","body":"Fixes #2595 ","comments":4,"createdAt":1428221792000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2623,"state":"closed","title":"Block scoped classes","updatedAt":1434150010000},{"assignedTo":"vladima","body":"code in this [`else if` branch](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/program.ts#L342) will be executed even if `findSourceFile` in `if` above succeeded so incorrect extra diagnostic is reported. \r\nNOTE: ES6 module loader o","comments":0,"createdAt":1434059891000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.6","number":3483,"state":"closed","title":"Extra error is reported when transpile is called for file without extension.","updatedAt":1434150007000},{"assignedTo":"","body":"This is very similar to #3309. It just uses type argument inference instead of assignability.\r\n```ts\r\nfunction foo<T>() {\r\n    var z = foo<typeof y>();\r\n    var y: {\r\n        y2: typeof z\r\n    };\r\n    return y;\r\n}\r\n\r\n\r\nfunction bar<T>() {\r\n    var z ","comments":3,"createdAt":1433877541000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":3451,"state":"closed","title":"Stack overflow with type argument inference on infinitely recursive anonymous type","updatedAt":1434149985000},{"assignedTo":"","body":"I'm getting this exception with TypeScript 1.5.0-beta when I'm creating a class which doesn't satisfy the constraits of the generic type.\r\n\r\n```\r\nC:\\Projects\\my_project\\node_modules\\typescript\\bin\\tsc.js:14007\r\n                    ts.Debug.assert(res","comments":5,"createdAt":1433920631000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2162413?v=3","loggedByName":"panuhorsmalahti","milestone":"TypeScript 1.6","number":3464,"state":"closed","title":"TypeError: Cannot read property 'failedTypeParameterIndex' of undefined","updatedAt":1434149940000},{"assignedTo":"","body":"Hello,\r\n\r\nI'm dealing with an issue specific to TypeScript on a Backbone project, but this seems more generic to any project using underscore/lodash and the return of the `_.result` method:\r\n\r\n```\r\n// With _.result you can work with an object propert","comments":7,"createdAt":1433354792000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1156885?v=3","loggedByName":"adamsea","milestone":"","number":3361,"state":"closed","title":"Properties that may be overridable as methods.","updatedAt":1434149791000},{"assignedTo":"","body":"There's been some previous discussion about this https://typescript.codeplex.com/workitem/2047 but nothing seems to have come of it. I've got a real scenario where this is getting in the way.\r\n\r\nI'm trying to make a .d.ts file for greensock's gsap Tw","comments":7,"createdAt":1433203063000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10672150?v=3","loggedByName":"MikeBall0","milestone":"","number":3334,"state":"closed","title":"Static method inheritance","updatedAt":1434149759000},{"assignedTo":"","body":"Some example of code:\r\n\r\n```typescript\r\nclass Test {\r\n  constructor(elem:Element) {\r\n    elem.style.color = 'red';\r\n  };\r\n}\r\n\r\nlet elem = document.querySelector('#test');\r\nlet test = new Test(elem);\r\n```\r\n\r\nThis produces:\r\n```2339 Property 'style' do","comments":10,"createdAt":1432573558000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1189265?v=3","loggedByName":"NekR","milestone":"","number":3263,"state":"closed","title":"2339 Property 'style' does not exist on type 'Element'.","updatedAt":1434149707000},{"assignedTo":"","body":"Let's say I have the following class\r\n```typescript\r\nclass Foo<A>\r\n```\r\n\r\nNow let's say in a function, we want to take action depending if `A` is `number`, for example.  Is there any way we can check the value of the generic?","comments":1,"createdAt":1432167652000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1448299?v=3","loggedByName":"bluong","milestone":"","number":3240,"state":"closed","title":"Be able to check the type of a generic","updatedAt":1434149689000},{"assignedTo":"","body":"I am using jQuery AJAX to pass in additional data with the settings. I have read various post but nothing that solved this problem.\r\n\r\n       .ajax({\r\n            url: priceUrl,\r\n            type: \"GET\",\r\n            datatype: \"json\",\r\n            co","comments":6,"createdAt":1430225098000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1249683?v=3","loggedByName":"ppumkin","milestone":"","number":2942,"state":"closed","title":"this context in Ajax ","updatedAt":1434149665000},{"assignedTo":"","body":"Out of curiosity, I'm just wondering what kind of benefits of having the nested function syntax(currently in the TS repo) as oppose to having a class-based?\r\n\r\nYou are the only OSS I've seen programming in this fashion.","comments":8,"createdAt":1430631071000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3009,"state":"closed","title":"Question: benefits of nested function syntax","updatedAt":1434149626000},{"assignedTo":"","body":"I have following structure\r\n```\r\nââââsrc\r\n    ââââexternal\r\n    â   ââââlib\r\n    ââââApp\r\n        ââââClass\r\n```\r\n\r\n```src/external/lib/``` contains 2 files, ```lib.js``` and ```lib.d.ts```.\r\nIn ```src/App/Class/Class.ts``` I am importing ```../../ex","comments":3,"createdAt":1430428595000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1189265?v=3","loggedByName":"NekR","milestone":"","number":2974,"state":"closed","title":"rooDir does not seems to work with JS files","updatedAt":1434149600000},{"assignedTo":"","body":"I'm using multiple tsconfig files because I want targeted builds and since the tooling won't support this/isn't there I'm using a single references file to link them all.. I'd like to generate a definition file that doesn't have any xml references so","comments":6,"createdAt":1430155293000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1020579?v=3","loggedByName":"niemyjski","milestone":"","number":2932,"state":"closed","title":"Ability to create definition files with no xml reference definitions","updatedAt":1434149510000},{"assignedTo":"","body":"jQuery (jQuery UI) support method extensions. If we write my own jQuery UI widget, I can do this:\r\nIn myWidget.ts:\r\n```typescript\r\ninterface JQuery {\r\n    myWidget(): JQuery\r\n}\r\n\r\nclass myWidget {\r\n    public foo() {\r\n        // This is okay now, but","comments":3,"createdAt":1429299458000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8441956?v=3","loggedByName":"cnshenj","milestone":"","number":2821,"state":"closed","title":"Need to support declaration merging in external modules","updatedAt":1434149418000},{"assignedTo":"","body":"To me Typescript seems to be a better choice for writing code where the code base is huge and requires more consistency. \r\n\r\nBut the examples and experiences i find around the internet are more on client side , may be coz of the Angular2.0 decision t","comments":9,"createdAt":1428981632000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1706381?v=3","loggedByName":"thetutlage","milestone":"","number":2757,"state":"closed","title":"Nodejs Project Management","updatedAt":1434143984000},{"assignedTo":"","body":"\r\nThe following code:\r\n\r\n```typescript\r\nvar i = 0, j = 0;\r\n\r\n\r\nclass Base {\r\n    get instanceAccessor() { return ++i; }\r\n    static get staticAccessor() { return ++j; }\r\n    toString = () => 'instance: ' + this.instanceAccessor + '   static: ' + Base","comments":5,"createdAt":1418794133000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1252361?v=3","loggedByName":"yortus","milestone":"","number":1520,"state":"closed","title":"Expected behaviour of __extends with static accessors?","updatedAt":1434143948000},{"assignedTo":"","body":"Type argument inference should use the same infrastructure as assignability when it comes to detecting infinite recursion in a type structure. This change makes type argument inference rely on the same isDeeplyNestedGeneric function.\r\n\r\nFixes #3451.","comments":4,"createdAt":1433878518000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3452,"state":"closed","title":"Type argument inference fix for infinitely recursive anonymous types","updatedAt":1434143474000},{"assignedTo":"","body":"Fixes #3464","comments":5,"createdAt":1433982346000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1633923?v=3","loggedByName":"randombk","milestone":"","number":3473,"state":"closed","title":"Fix crash with unmet generic constraints","updatedAt":1434143315000},{"assignedTo":"","body":"On the managed side tracing is disabled by default anyways.  By logging we still\r\ncause tons of allocations of strings on the managed side.  These then cause\r\nexpensive GCs which can pause editing.\r\n\r\nLogging can always be enabled manually (either by","comments":1,"createdAt":1434142309000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3495,"state":"closed","title":"Don't log by default.","updatedAt":1434143032000},{"assignedTo":"","body":"fixes #3483","comments":1,"createdAt":1434059929000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3484,"state":"closed","title":"do not report extra error if file was already found without extension","updatedAt":1434141529000},{"assignedTo":"","body":"Hi, \r\n  I have vs 2015 rc with ts 1.5 beta installed. I tried to enable custom language service file following the indications in the wiki and pointing it to the typescriptServices,js file in the bin directory of a clone of the git bug repo, but when","comments":0,"createdAt":1434141011000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/127777?v=3","loggedByName":"lucamorelli","milestone":"","number":3494,"state":"closed","title":"vs error trying to enable ts custom language service file","updatedAt":1434141123000},{"assignedTo":"","body":"","comments":0,"createdAt":1433985583000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3476,"state":"closed","title":"Don't bother trying to semantically classify names that could never be typenames.","updatedAt":1434140048000},{"assignedTo":"","body":"I ran into some issue because I used `bind` which is ES5 compatible while targeting `ES3`. \r\n\r\nThe problem is that the compiler didn't gave me any warning, so it worked fine until I tested the code on IE8.\r\n\r\nShouldn't the compiler warn us when we us","comments":6,"createdAt":1433088023000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3807458?v=3","loggedByName":"Vadorequest","milestone":"","number":3321,"state":"closed","title":"\"bind\" and ES3 - no compiler warning","updatedAt":1434135430000},{"assignedTo":"","body":"I'm using Typescript to write a content script for a Firefox extension. These run in a [special environment](https://developer.mozilla.org/en-US/Add-ons/SDK/Guides/Two_Types_of_Scripts#API_Access_for_Add-on_Code_and_Content_Scripts) in which a number","comments":6,"createdAt":1432154730000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/376414?v=3","loggedByName":"ChimeraCoder","milestone":"","number":3238,"state":"closed","title":"\"Self\" variable assumes window environment at the top level","updatedAt":1434135007000},{"assignedTo":"","body":"Hello, \r\ni downloaded the ToDoMvc Example. \r\nWhen i build with visual studio the \"application.js\" get compiled wrong... if i compile with \"tsc --out\" everythings fine. ","comments":2,"createdAt":1431673686000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11938150?v=3","loggedByName":"Rian0702","milestone":"","number":3176,"state":"closed","title":"Visual Studio 2013 Compiler cleans .js file","updatedAt":1434134801000},{"assignedTo":"","body":"TS Handbook:\r\n\r\n> The 'any' type is a powerful way to work with existing JavaScript, allowing you to gradually opt-in and opt-out of type-checking during compilation.\r\n\r\nThough when I want to opt-out I often have to cast using `<any>` which isn't ver","comments":15,"createdAt":1432668683000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/959858?v=3","loggedByName":"laktak","milestone":"","number":3267,"state":"closed","title":"Cast to Any","updatedAt":1434134779000},{"assignedTo":"","body":"When creating a es6 based angular project i stumbled about one functionality i have in es6, but i think it's not provided by typescript or i did not find it in the documentation.\r\n\r\nHere is a example:\r\nhttps://github.com/lookfirst/systemjs-material-s","comments":10,"createdAt":1430010452000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/662196?v=3","loggedByName":"DominicBoettger","milestone":"","number":2920,"state":"closed","title":"Html import es6","updatedAt":1434134654000},{"assignedTo":"","body":"What's the best way to accomplish multiple build profiles with tsconfig? I want to have builds that specifically target different platforms like node/browser etc..\r\n\r\n``` javascript\r\n{\r\n   es5: {\r\n      compilerOptions: {\r\n        target: 'es5',\r\n   ","comments":4,"createdAt":1429720992000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1020579?v=3","loggedByName":"niemyjski","milestone":"","number":2867,"state":"closed","title":"tsconfig.json: is multiple build configurations possible?","updatedAt":1434134616000},{"assignedTo":"","body":"Is it possible to debug (set breakpoints, step, etc.) in a Visual Studio 2012 Windows 8 Store app using TypeScript?  I can't get VS to recognize the breakpoints I set in my TypeScript files so I can't debug.  ","comments":2,"createdAt":1428018798000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/518271?v=3","loggedByName":"chrisaswain","milestone":"","number":2600,"state":"closed","title":"Debugging in a Windows 8 Store app?","updatedAt":1434134593000},{"assignedTo":"","body":"I`m switching from TS 0.9.5 to 1.1 CTP and have this simplified .d.ts:\r\n\r\n```ts\r\ninterface FooArray<T> extends Foo<T[]> {\r\n    subscribeTo(transform?: (val: any) => T): FooArray<T>;\r\n}\r\ninterface Foo<T> {\r\n    subscribeTo(transform?: (val: any) => T)","comments":3,"createdAt":1414496249000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5366785?v=3","loggedByName":"ruslanmogilevskiy","milestone":"","number":978,"state":"closed","title":"Types of property 'xxx' are incompatible","updatedAt":1434134504000},{"assignedTo":"","body":"```javascript\r\ntype Json = {}\r\n\r\ninterface Data extends Json {\r\n    foo: string\r\n}\r\n```\r\nIf a type is an alias for {}, should an interface be allowed to extend it?\r\n","comments":11,"createdAt":1423157783000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":1945,"state":"closed","title":"Type alias = {} question","updatedAt":1434134399000},{"assignedTo":"","body":"Looks like things have started to happen, look at the 'demo' and 'thanksLua' branches.\r\n\r\n[thanksLua](https://github.com/Microsoft/TypeScript/compare/thanksLua)\r\n[demo](https://github.com/Microsoft/TypeScript/compare/demo)\r\n\r\nIs there anything TypeSc","comments":2,"createdAt":1423216383000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"","number":1958,"state":"closed","title":"Collaboration with Google/Facebook","updatedAt":1434134338000},{"assignedTo":"","body":"In section 8.2.2 Accessibility private members are not accessible outside of the class they are declared in.\r\n\r\nHowever, you *can* access them using their key and when you do so, the type information is even inferred.\r\n\r\nHere is the example:\r\n\r\n```ts","comments":4,"createdAt":1421317998000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1036595?v=3","loggedByName":"Steve-Fenton","milestone":"","number":1680,"state":"closed","title":"Private member access and type information inconsistency.","updatedAt":1434134301000},{"assignedTo":"","body":"I have this case from using the mongoose library, in which my domain object, A, might have a DB _id, but the mongoose.Document always has an _id.\r\nI use type A when not in the mongoose portions of the app, and type ADocument only within those parts t","comments":6,"createdAt":1418584146000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/940931?v=3","loggedByName":"psnider","milestone":"","number":1481,"state":"closed","title":"Can an optional and required field of merged interfaces yield a required field?","updatedAt":1434134120000},{"assignedTo":"","body":"```TS\r\nclass D<T> { \r\n    x: T;\r\n}\r\nvar x = D.prototype.x;\r\n```\r\n\r\n`x` implicitly has type `any`, but we give no error for it. Should this be an error?","comments":5,"createdAt":1413246278000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":887,"state":"closed","title":"Missing implicit any error for accessing member off a generic class's prototype","updatedAt":1434134073000},{"assignedTo":"","body":"I find the module documentation page very confusing when I try to apply it to Node.js commonjs modules. I think my main difficulty understanding modules is that most documentation focuses on internal modules, with treatment of external modules as an ","comments":2,"createdAt":1412734671000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/940931?v=3","loggedByName":"psnider","milestone":"","number":855,"state":"closed","title":"modules documentation doesn't have pattern for Node.js users","updatedAt":1434133986000},{"assignedTo":"","body":"Given a module `one` which exports a default function, a module `two` that re-exports everything in `one` (`export * from './one'`), and a module `three` which attempts to import the default function from `two`, the compiler outputs an error that `tw","comments":4,"createdAt":1434051454000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/204106?v=3","loggedByName":"bryanforbes","milestone":"","number":3481,"state":"closed","title":"Default export is not re-exported in type information","updatedAt":1434131971000},{"assignedTo":"","body":"â¦ock in function declaration context. Fixed #2628","comments":2,"createdAt":1432682751000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3272,"state":"closed","title":"remove space after close bracket only if next token does not start blâ¦","updatedAt":1434130820000},{"assignedTo":"","body":"> Suggestion moved over from [codeplex](https://typescript.codeplex.com/workitem/2424/).\r\n\r\nI would like to suggest the following: Why not have anonymous/unnamed modules? The following code snippet totally makes sense for me to compile:\r\n\r\n```typescr","comments":22,"createdAt":1406076945000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/767147?v=3","loggedByName":"omidkrad","milestone":"","number":206,"state":"closed","title":"Suggestion: Anonymous/Unnamed Modules","updatedAt":1434129677000},{"assignedTo":"","body":"","comments":2,"createdAt":1434056992000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/12851550?v=3","loggedByName":"ConstantlyVariable","milestone":"","number":3482,"state":"closed","title":"Working with JSX?","updatedAt":1434125869000},{"assignedTo":"","body":"Hi,\r\n\r\nI was wondering why the code below compiles fine!\r\nThe compiler should complain for the last two lines, not?\r\n\r\n```typescript\r\ninterface ViewConfig {\r\n\twidth?:number;\r\n\theight?:number;\r\n}\r\n\r\ninterface ToolbarConfig {\r\n\tsize?:number\r\n}\r\n\r\nclass","comments":2,"createdAt":1434116555000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5524595?v=3","loggedByName":"blendsdk","milestone":"","number":3489,"state":"closed","title":"Why does this compile!!??","updatedAt":1434125493000},{"assignedTo":"","body":"Removed two strange characters which where rendered as <?><?>, probably a encoding issue. The change can be seen on the preview view, the diff view shows no change.","comments":2,"createdAt":1434117254000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/170219?v=3","loggedByName":"irrwitz","milestone":"","number":3490,"state":"closed","title":"Update spec.md","updatedAt":1434125301000},{"assignedTo":"","body":"It would be great if there was a way to relax the current constraint of requiring get/set accessors to have the same type. this would be helpful in a situation like this:\r\n\r\n```\r\nclass MyClass {\r\n\r\n    private _myDate: moment.Moment;\r\n    \r\n    get m","comments":8,"createdAt":1427409532000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8855122?v=3","loggedByName":"irakliy81","milestone":"","number":2521,"state":"closed","title":"Suggestion: allow get/set accessors to be of different types","updatedAt":1434092940000},{"assignedTo":"","body":"Fix formData constructor in lib.d.ts","comments":3,"createdAt":1433966592000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/239037?v=3","loggedByName":"Breate","milestone":"","number":3471,"state":"closed","title":"Fix formData constructor in lib.d.ts","updatedAt":1434072005000},{"assignedTo":"","body":"I found this bug. The property \"options\" is of the same type of its parent, not making sense.","comments":3,"createdAt":1433919288000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7506090?v=3","loggedByName":"matheusmb","milestone":"","number":3463,"state":"closed","title":"Fix HTMLSelectElement property type \"options\"","updatedAt":1434071809000},{"assignedTo":"","body":"Currently when implementing of class inheritance in the output JS-file automatically added the following code:\r\n\r\n\tvar __extends = this.__extends || function (d, b) {\r\n\t\tfor (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t\tfunction __() { this.c","comments":7,"createdAt":1423666802000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/251859?v=3","loggedByName":"Taritsyn","milestone":"","number":2009,"state":"open","title":"Add ability to specify the external `__extends` function","updatedAt":1434065526000},{"assignedTo":"","body":"Various libraries have a concept of applying partial updates to an object. For example:\r\n\r\nhttp://backbonejs.org/#Model-set\r\nhttp://facebook.github.io/react/docs/component-api.html#setstate\r\n\r\nTake the following example (to roughly mimic Backbone)\r\n`","comments":4,"createdAt":1407435940000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/196944?v=3","loggedByName":"jbrantly","milestone":"","number":392,"state":"closed","title":"Allow partial (subset) type matching","updatedAt":1434058486000},{"assignedTo":"","body":"","comments":0,"createdAt":1433818442000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3434,"state":"closed","title":"Port PR 3433 into release 1.5","updatedAt":1434057869000},{"assignedTo":"","body":"While working on updating the node.js definitions on DefinitelyTyped this past weekend, I thought I came up with a very clever idea that turned out not to be very valuable (yet).\r\n\r\nIn the Node.js `fs` module, many functions take an `encoding` proper","comments":2,"createdAt":1434049481000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3755379?v=3","loggedByName":"nycdotnet","milestone":"","number":3480,"state":"closed","title":"JSDoc on custom types","updatedAt":1434052677000},{"assignedTo":"","body":"Once the custom typeguard is check-in, we should add support for its formatting\r\n\r\nFor example,\r\n```ts\r\nclass B { }\r\nfunction isB(b: any): b is     B {\r\n    return true;\r\n}\r\n```\r\n\r\n","comments":8,"createdAt":1433796214000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.6","number":3426,"state":"closed","title":"Formatting for custom Typeguard","updatedAt":1434050017000},{"assignedTo":"","body":"Fixes #3426. ","comments":2,"createdAt":1434004877000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3477,"state":"closed","title":"Fixes type predicate formatting","updatedAt":1434049990000},{"assignedTo":"","body":"We currently only support some baked-in forms of type checking for type guards -- `typeof` and `instanceof`. In many cases, users will have their own functions that can provide run-time type information.\r\n\r\nProposal: a new syntax, valid only in retur","comments":26,"createdAt":1414703134000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"Community","number":1007,"state":"closed","title":"Support user-defined type guard functions","updatedAt":1434044913000},{"assignedTo":"","body":"I've been thinking about project-level modularization with TypeScript, and I think the story is not nearly as good as what's available in other Microsoft languages like C# or VB.  TypeScript urges you to have everything in a single folder structure (","comments":5,"createdAt":1433515060000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3755379?v=3","loggedByName":"nycdotnet","milestone":"","number":3394,"state":"closed","title":"Interproject References in tsconfig.json","updatedAt":1434044522000},{"assignedTo":"","body":"It would be nice to have similar plugabble compile time / editing time analyzer plugins as [introduced in C# in Build 2015, see the video](http://channel9.msdn.com/Events/Build/2015/3-725).\r\n\r\nAnalyzer is a library that can do additional syntax check","comments":5,"createdAt":1430552096000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/64731?v=3","loggedByName":"Ciantic","milestone":"","number":3003,"state":"open","title":"Compile / edit time pluggable analyzers like C#","updatedAt":1434042856000},{"assignedTo":"","body":"I'm getting this error without further details:\r\n/usr/lib/node_modules/typescript/bin/tsc.js:584\r\n                throw new Error(\"Debug Failure. False expression: \" + (message\r\n                      ^\r\nError: Debug Failure. False expression: start m","comments":14,"createdAt":1424186480000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2881353?v=3","loggedByName":"ravitb","milestone":"","number":2056,"state":"closed","title":"Debug Failure. False expression: start must be non-negative, is undefined at Object.assert","updatedAt":1434030717000},{"assignedTo":"","body":"Since doing even simple inlining is [out of scope](https://github.com/Microsoft/TypeScript/issues/2721) of TypeScript, please allow extensions to the code emitter, so that there is a way to get JavaScript other than what is officially endorsed..","comments":6,"createdAt":1428811926000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":2727,"state":"open","title":"Suggestion: Allow customizing the code emitter.","updatedAt":1434027248000},{"assignedTo":"ahejlsberg","body":"Sometimes we need to capture a union of types that may be a mixture of primitives, functions, objects, etc. but we want to leave it parameterised (just as we already can with interfaces).\r\n\r\n## Example\r\n\r\nA simple non-recursive example:\r\n\r\n    type S","comments":34,"createdAt":1420711532000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/365934?v=3","loggedByName":"danielearwicker","milestone":"TypeScript 1.6","number":1616,"state":"closed","title":"Type aliases requiring type parameters","updatedAt":1434011577000},{"assignedTo":"","body":"Using VS 2015 RC and even if all the items in Options/Text Editor/Type Script/Formatting are unchecked when I write a line and press enter the line is formatted.\r\n\r\nEx.:\r\n\tvar\t\tbrb: string = \"test\";     <-- contains spaces or tabs between var and brb","comments":3,"createdAt":1433953247000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5547441?v=3","loggedByName":"WaldemarH","milestone":"","number":3467,"state":"closed","title":"VS plug in: Unchecked automatic formatting still formats the code","updatedAt":1434007234000},{"assignedTo":"","body":"```typescript\r\nconst DATA_END_INDEX = 2;\r\n\r\nenum OptimizedDataIndex {\r\n    start,\r\n    data,\r\n    end\r\n}\r\n\r\ninterface OptimizedData {\r\n    0: number;\r\n    1: any[];\r\n    2: number;\r\n}\r\n\r\nvar data: OptimizedData;\r\nvar start = OptimizedData[OptimizedDa","comments":4,"createdAt":1433734876000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":3411,"state":"open","title":"Should treat const and enum (at least const enum) value the same as literals for indexers.","updatedAt":1433986554000},{"assignedTo":"","body":"","comments":1,"createdAt":1433982555000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3474,"state":"closed","title":"Use full spans in the classifier.  Non-full spans are very expensive to compute.","updatedAt":1433983537000},{"assignedTo":"","body":"We recently allowed type declarations in block contexts, but not module elements (modules, imports, exports, etc). This change adds parsing for module elements in block contexts, and produces the appropriate errors in the checker. This work has 3 ben","comments":5,"createdAt":1433895833000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3461,"state":"closed","title":"Parse module elements in a block context","updatedAt":1433982662000},{"assignedTo":"","body":"","comments":0,"createdAt":1433483319000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3391,"state":"closed","title":"Port PR 3370 into release 1.5","updatedAt":1433978038000},{"assignedTo":"","body":"This is required because of an issue with the sourcemaps generated by the __awaiter wrapping - specifically, the arguments to it are accidentally included in the sourcemap.\r\n\r\nThe awaiter has a null sourcecode mapping, however the generator passed as","comments":6,"createdAt":1433887107000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2932786?v=3","loggedByName":"weswigham","milestone":"","number":3455,"state":"closed","title":"Emit awaiter arguments on new line","updatedAt":1433972060000},{"assignedTo":"","body":"What does the bug make reference to?\r\nhttps://github.com/Microsoft/TypeScript/blob/9a89147587c06ba51181ff2ee5ade69a98b171ea/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/enumIsNotASubtypeOfAnythingButNumber.ts#L123\r\n\r\n","comments":3,"createdAt":1433947712000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3465,"state":"closed","title":"BUG 831833","updatedAt":1433958115000},{"assignedTo":"vladima","body":"Hi,\r\n\r\nThe VS editor is close to unusable after the upgrade to 1.5 Beta. CPU utilisation is running at 70% plus constantly. This makes the editor extremely sticky. Here's a side-by-side shot of the experience:\r\n\r\n![a](https://cloud.githubusercontent.","comments":17,"createdAt":1430922947000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5.3","number":3054,"state":"closed","title":"High CPU for Visual Studio 2015 RC (TS 1.5 Beta)","updatedAt":1433945852000},{"assignedTo":"","body":"TS heavily relies on type assertion in DOM programming. In my experiences, type assertion is a major factor of produtivity-reduction in font-end TS. There is another user expressed similar concern (#3263).\r\n\r\nSo I try to eliminate most type assertion","comments":11,"createdAt":1432923190000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1684137?v=3","loggedByName":"duanyao","milestone":"","number":3304,"state":"closed","title":"Suggestion: introduce UniveralElement to eliminate most type assertions in DOM programming (prototype created)","updatedAt":1433944907000},{"assignedTo":"","body":"#### Current behavior\r\n\r\nThe compiler today elides imports and exports that are types or **not** referenced in a value position in the body of the importing module. See spec sections [section 11.2.5](https://github.com/Microsoft/TypeScript/blob/maste","comments":12,"createdAt":1429231657000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2812,"state":"open","title":"Implicit module import/export elision","updatedAt":1433921795000},{"assignedTo":"","body":"It's a very common situation in our code when we wish TypeScript could infer the result type of a function with a generic result based on the context in which that function is used. Here are a couple of use cases to support the feature request:\r\n\r\nCa","comments":3,"createdAt":1433788921000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":3423,"state":"open","title":"Suggestion: Enable inferring the result type of a generic function based on the context in which it is used","updatedAt":1433903208000},{"assignedTo":"","body":"Typescript is an excellent method of building type checking into compile time validations against javascript. Unfortunately, because the result of this doesn't travel into the runtime (as javascript is basically typeless), there is 0 guarantee that w","comments":6,"createdAt":1433028741000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2426688?v=3","loggedByName":"jhlange","milestone":"","number":3314,"state":"closed","title":"Introduce support for checked casting","updatedAt":1433902970000},{"assignedTo":"","body":"This is a feature request for the TypeScript team to ship an xclangspec file with the TypeScript sources in order to provide support for syntax highlighting of the language in the Xcode IDE.\r\n\r\nGoogle has done the same for their Go language; see here","comments":1,"createdAt":1433618926000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1312511?v=3","loggedByName":"jakepetroules","milestone":"Community","number":3404,"state":"open","title":"Provide an xclangspec file for TypeScript syntax highlighting in Xcode","updatedAt":1433896956000},{"assignedTo":"","body":"","comments":1,"createdAt":1433893699000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3460,"state":"closed","title":"Removed more 'debugger' statements from tests.","updatedAt":1433896738000},{"assignedTo":"mhegazy","body":"Hi !\r\n\r\nActually I work on mobile application (  https://github.com/Masclaux/LightReader )  \r\n\r\nWhen I start to debug break point are not trigger on the correct file.\r\n\r\nThis issue arrive only with \"<\"TypeScriptOutFile>app.js\"</\"TypeScriptOutFile\">\".","comments":0,"createdAt":1433073077000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11290292?v=3","loggedByName":"Masclaux","milestone":"TypeScript 1.6","number":3317,"state":"open","title":"Break point are not trigger in the correct file with option <TypeScriptOutFile> ","updatedAt":1433896644000},{"assignedTo":"","body":"Since we don't have an ability to reference formal generic parameters in the same generic parameter section, I'd be happy with simpler yet powerful solution: type-guarded method subsets in interfaces and classes.\r\n\r\nLet's consider the following examp","comments":7,"createdAt":1427201608000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/185374?v=3","loggedByName":"Artazor","milestone":"","number":2478,"state":"open","title":"Suggestion: Type-guarded method subsets","updatedAt":1433893757000},{"assignedTo":"","body":"I also reworded comments. Sorry, I couldn't help myself.","comments":1,"createdAt":1433887446000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3456,"state":"closed","title":"Ensure files are valid UTF8","updatedAt":1433890980000},{"assignedTo":"","body":"","comments":1,"createdAt":1433890199000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3459,"state":"closed","title":"Removed 'debugger' statements from tests.","updatedAt":1433890814000},{"assignedTo":"","body":"The type guard syntax introduces a new keyword `is`\r\n\r\n#1007 Support user-defined type guard functions\r\n#3262 Custom type guard function\r\n\r\n(the latter was implemented by @tinganho and merged in master recently with https://github.com/Microsoft/TypeS","comments":2,"createdAt":1433836711000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"","number":3437,"state":"closed","title":"Use `instanceof` instead of `is` in type guard function syntax","updatedAt":1433889612000},{"assignedTo":"DanielRosenwasser","body":"```typescript\r\ninterface A {\r\n\tx: number;\r\n}\r\n\r\nvar a: A;\r\nvar { x: x2 } = a;\r\n```\r\n\r\nThis gives the type \"any\" when mousing over `x`\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1096010/8070646/a8984194-0eb7-11e5-82c6-54bf3f66956c.png)\r\n\r\n","comments":1,"createdAt":1433887907000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.6","number":3457,"state":"closed","title":"Intellisense gives \"any\" type for the original name in a destructuring assignment","updatedAt":1433889279000},{"assignedTo":"","body":"This PR is only for review (to check if this is the right way to go)\r\n\r\n**NOTE** The baseline isn't correct yet (it says undefined)\r\n\r\nIf this isn't the right way, feel free to close this right away.\r\nAs mentioned in this [comment](https://github.com","comments":6,"createdAt":1430259817000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":2946,"state":"closed","title":"Review PR: Abstract classes","updatedAt":1433887895000},{"assignedTo":"","body":"I want to be able to work with the ES6 module syntax when loading external packages, for example:\r\n\r\nI want to import angular (Version 1.4, not the TypeScript version), and use the angular.d.ts to be able to get the definitions.\r\n\r\nHow should I do it","comments":1,"createdAt":1433841760000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1621965?v=3","loggedByName":"gilamran","milestone":"","number":3438,"state":"closed","title":"Working with modules and external packages","updatedAt":1433887370000},{"assignedTo":"","body":"The word `stringÃ` appeared in our code.","comments":1,"createdAt":1433882569000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3453,"state":"closed","title":"Remove bad character in checker","updatedAt":1433885176000},{"assignedTo":"","body":"I've got next linking issue:\r\nsever.ts:\r\n/// <reference path='./_server.ts' />\r\nimport restify = require('restify');\r\nimport mongodb = require('mongodb');\r\nimport debug = require('debug');\r\nimport utils = require('utils/utils');\r\nimport routz = requi","comments":4,"createdAt":1433768163000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6002332?v=3","loggedByName":"sneerin","milestone":"","number":3416,"state":"open","title":"modules import failed","updatedAt":1433880145000},{"assignedTo":"JsonFreeman","body":"(1.5 beta)\r\n\r\nThis is the most I can reduce it while still having it crash:\r\n\r\n```typescript\r\nclass Module {\r\n\tpublic members: Class[];\r\n}\r\n\r\nclass Namespace {\r\n\tpublic members: (Class | Property)[];\r\n}\r\n\r\nclass Class {\r\n\tpublic parent: Namespace;\r\n}","comments":23,"createdAt":1430534016000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.5.3","number":2997,"state":"closed","title":"Compiler error - \"Maximum call stack size exceeded\"","updatedAt":1433879962000},{"assignedTo":"","body":"Hi, I'm using TSC 1.5.3 (latest head) and I'm trying to compile following piece of code\r\n```typescript\r\n@SomeDecorator()\r\nexport class App {\r\n  constructor() {\r\n  }\r\n}\r\n```\r\n```json\r\n{\"compilerOptions\": {\r\n    \"emitDecoratorMetadata\": true,\r\n    \"exp","comments":3,"createdAt":1433854012000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6920421?v=3","loggedByName":"subesokun","milestone":"","number":3441,"state":"closed","title":"Issue with systemjs and decorators","updatedAt":1433879247000},{"assignedTo":"","body":"Good day,\r\n\r\nAs it currently stands Typescript's modules are not entirely compatible with Meteor's execution environment, which is caused by Typescript's  compilation procedure whereby modules are created as \"var ModuleName\". This prevents  Meteor fr","comments":1,"createdAt":1433873939000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2282028?v=3","loggedByName":"Nessphoro","milestone":"","number":3450,"state":"closed","title":"Support for modules in Meteor","updatedAt":1433878279000},{"assignedTo":"","body":"Create a project template and project system support for a TypeScript 'library'\r\n\r\nLibrary project outputs would include a .d.ts and a .js file; referencing projects would consume the .d.ts file automatically and have separate compilation. Refactorin","comments":18,"createdAt":1405443398000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":11,"state":"open","title":"Suggestion: TypeScript Library Project in Visual Studio","updatedAt":1433876969000},{"assignedTo":"","body":"ASI should kick in when we parse a type predicate, in a case like this:\r\n```ts\r\ninterface I {\r\n    foo(callback: (a: any, b: any) => void): I\r\n    is(): boolean;\r\n}\r\n```\r\nThis should not be parsed as a type predicate. The grammar production should lo","comments":1,"createdAt":1433873718000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3449,"state":"closed","title":"Don't consume 'is' keyword if there is a preceding line terminator","updatedAt":1433874424000},{"assignedTo":"","body":"Why?\r\n\r\n    ref: [\r\n      {\r\n        value: Number\r\n        date?: Date\r\n      }\r\n    ]\r\n    total() {\r\n      var total = 0\r\n      for (var ind = this.ref.length - 1; ind >= 0; ind--) {\r\n        total += this.ref[ind].value\r\n      }\r\n      return tot","comments":2,"createdAt":1433870754000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Canonical","name":"Canonical","color":"000000"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2001798?v=3","loggedByName":"Akxe","milestone":"","number":3447,"state":"closed","title":"typescript operator '+=' cannot be applied to types Number and Number","updatedAt":1433871400000},{"assignedTo":"vladima","body":"Class declarations are block scoped.  However, we emit them using 'var' declarations.  This will a same-named class in a nested scope to stomp on the outer class.  \r\n\r\nI've looked at the renaming code in the emitter, and it's just complicated enough ","comments":0,"createdAt":1428009344000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"TypeScript 1.6","number":2595,"state":"closed","title":"Class declarations should be renamed (like let/const) when they conflict with something in scope.","updatedAt":1433869291000},{"assignedTo":"","body":"An extension to https://github.com/Microsoft/TypeScript/pull/1692\r\n\r\nOur ts project uses a grunt-based build system, with bower dependencies for the application and node_modules for build-tools. We will need the ability to exclude node_modules and bo","comments":29,"createdAt":1423072819000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/320332?v=3","loggedByName":"JeroMiya","milestone":"","number":1927,"state":"open","title":"support globs in tsconfig.json files property (or just file/directory exclusions)","updatedAt":1433868182000},{"assignedTo":"","body":"Hi.\r\nI've seen in most examples that `typescript` npm-package is considered to be installed globally and we can just run `tsc`. That's nice but I'd like to keep more safe approach and install the `typescript` package locally (on project level). But i","comments":2,"createdAt":1433845452000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1203230?v=3","loggedByName":"evil-shrike","milestone":"","number":3439,"state":"closed","title":"npm typescript-cli wanted","updatedAt":1433861926000},{"assignedTo":"","body":"Implements only the function part of #1007. I thought it was best to have some early feedback first before I implement the class method part. So that I know I'm on the same page.\r\n\r\nI consider the type guard type as a new type. Pls. check my tests fo","comments":56,"createdAt":1432562638000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3262,"state":"closed","title":"Custom type guard function","updatedAt":1433861261000},{"assignedTo":"","body":"Fixes #2595.\r\n\r\nWith this PR all block scoped entities (let, const, class, enum) are properly renamed when they shadow an outer name and we're generating pre-ES6 code. The PR also unifies the renaming logic with the similar logic we have for other ge","comments":3,"createdAt":1433427906000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3380,"state":"closed","title":"Emitter name rewriting","updatedAt":1433858687000},{"assignedTo":"","body":"With this PR type aliases can be generic. For example:\r\n\r\n```typescript\r\ntype Lazy<T> = T | (() => T);\r\n\r\nvar s: Lazy<string>;\r\ns = \"eager\";\r\ns = () => \"lazy\";\r\n\r\ntype Tree<T> = T | { left: Tree<T>, right: Tree<T> };\r\n\r\nvar tree: Tree<number> = {\r\n  ","comments":1,"createdAt":1433541490000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3397,"state":"closed","title":"Generic type aliases","updatedAt":1433857497000},{"assignedTo":"","body":"I have read the thread about keeping private property and methods on prototype `MyClass.prototype.privateMethod` rather than pure private in closure.  I understand the reason behind it.\r\n\r\nHowever, if I subclass it with a different signature, the com","comments":1,"createdAt":1433826008000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3254987?v=3","loggedByName":"unional","milestone":"","number":3435,"state":"closed","title":"private and protected methods incompatible in derived class","updatedAt":1433826480000},{"assignedTo":"","body":"Fixing #2695, or at least #3381.\r\n\r\nI added dom.es6.d.ts to do this. Not all interfaces listed in #2695 are covered because I couldn't find specs for them. I need some help for this. Spec list: https://github.com/SaschaNaz/TypeScript/issues/1\r\n\r\nI th","comments":6,"createdAt":1433507057000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":3393,"state":"closed","title":"Adding iterators to DOM interfaces","updatedAt":1433826002000},{"assignedTo":"","body":"This is a follow-up to #2995. I did not batch these up in the original issue because I wanted to limit the scope of it.\r\n\r\nIn the following, we currently interpret `public` as a modifier to the function declaration, only to report that it is invalid ","comments":1,"createdAt":1433790440000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3425,"state":"closed","title":"Identifiers inappropriately parsed as accessibility modifiers ","updatedAt":1433824155000},{"assignedTo":"","body":"In [`tests/cases/conformance/parser/ecmascript5/RegressionTests/parser579071.ts`](https://github.com/Microsoft/TypeScript/blob/master/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser579071.ts) we have an invalid regex:\r\n\r\n```TypeScri","comments":0,"createdAt":1433812850000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":3432,"state":"open","title":"Compiler should error when encountering invalid regular expressions","updatedAt":1433824014000},{"assignedTo":"","body":"Hi,\r\n\r\nWhen I work on the code, I have to change `SyntaxKind` from `const enum` to `enum` so that I can do ``write(`kind: ${SyntaxKind[node.kind]}`)``.\r\n\r\nIs there a way to config the compiler and jake to treat `const enum` as `enum` so this would wo","comments":5,"createdAt":1433788220000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3254987?v=3","loggedByName":"unional","milestone":"","number":3422,"state":"closed","title":"Config to compile `const enum` as `enum` in development / Get SyntaxKind during development","updatedAt":1433823897000},{"assignedTo":"vladima","body":"From test case [`systemModule8.ts`](https://github.com/Microsoft/TypeScript/blob/3f7e64661d742fc03d51acc9b4b69a538a5b9603/tests/cases/compiler/systemModule8.ts), we generate [a `var` declaration within an object literal](https://github.com/Microsoft/","comments":0,"createdAt":1433812523000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5.3","number":3431,"state":"closed","title":"Invalid System.js output when using destructuring assignment","updatedAt":1433818475000},{"assignedTo":"","body":"fixes #3431","comments":1,"createdAt":1433813577000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3433,"state":"closed","title":"move temp declarations out of object literal","updatedAt":1433818257000},{"assignedTo":"","body":"I'm wondering if it is possible to return a list of values, something like:\r\n\r\n```js\r\nfunction x(){\r\n  return 1,'dsdsq', 45678.45;\r\n}\r\n```\r\n\r\nThe aim is to init several variables at the same time, it exists in other languages but I can't find it in T","comments":4,"createdAt":1433771609000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3807458?v=3","loggedByName":"Vadorequest","milestone":"","number":3418,"state":"closed","title":"Is it possible for a function to return a list of values?","updatedAt":1433815972000},{"assignedTo":"","body":"Currently, we can define an interface for an Array that is indexed by either string, number, or both. However, there is no way to define an Array that is only indexed by number or only indexed by string.\r\n\r\nFor instance,\r\n```\r\ninterface StringArray {","comments":4,"createdAt":1433566561000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4161445?v=3","loggedByName":"ttowncompiled","milestone":"","number":3399,"state":"closed","title":"(suggestion) Array index type enforcement.","updatedAt":1433811890000},{"assignedTo":"","body":"Would be awesome if we could add auto-completion on import paths.\r\n\r\n```typescript\r\nimport {} from \"./\" // gives you an auto-complete suggestions\r\n```\r\n```typescript\r\n/// <reference path=\"./\" // gives you an auto-complete suggestions\r\n```\r\n","comments":1,"createdAt":1433811117000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3430,"state":"closed","title":"Proposal: auto-complete import paths","updatedAt":1433811539000},{"assignedTo":"","body":"in 1.6 or 2.0?","comments":2,"createdAt":1433807195000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3254987?v=3","loggedByName":"unional","milestone":"","number":3429,"state":"closed","title":"Any roadmap on supporting Object.assign?","updatedAt":1433810126000},{"assignedTo":"","body":"```\r\nvar items: [[string, number]];\r\nfor (let item of items) { // item: [string, number]\r\n   let name = item[0];  // name: string\r\n   let quantity = item[1]; // quantity: number\r\n}\r\n```\r\n\r\n```\r\nvar items: [string, number][];\r\nfor (let item of items) ","comments":3,"createdAt":1433800760000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3254987?v=3","loggedByName":"unional","milestone":"","number":3428,"state":"closed","title":"What it type `[[string, number]]` vs `[string, number][]`","updatedAt":1433802405000},{"assignedTo":"","body":"Hi,\r\n\r\nIs there a \"Dependency Map\" export option in the ts compiler. I am working on a fairly large UI framework with many classes and modules. Applications using this framework are not going to use all the classes all the time. Next to that, many of","comments":2,"createdAt":1433759934000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5524595?v=3","loggedByName":"blendsdk","milestone":"","number":3415,"state":"closed","title":"Dependency Map?","updatedAt":1433801561000},{"assignedTo":"","body":"This is a work item to track some of the ideas and work associated with implementing simple control flow analysis for error reporting purposes. @vladima has already implemented a version of this concept in https://github.com/Microsoft/TypeScript/pull","comments":1,"createdAt":1429656376000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":2854,"state":"open","title":"Suggestion: Control flow analysis","updatedAt":1433798920000},{"assignedTo":"","body":"Using this example:\r\n```\r\ninterface A {\r\n  build(): SomeType;\r\n}\r\n\r\ninterface B extends A{\r\n  build(): SomeOtherType;\r\n}\r\n```\r\nThe compiler will thrown an error that SomeOtherType is not assignable to SomeType. However, if I am holding an object of t","comments":4,"createdAt":1433608557000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4161445?v=3","loggedByName":"ttowncompiled","milestone":"","number":3402,"state":"closed","title":"(suggestion) Overrides in extending class and interface definitions.","updatedAt":1433798598000},{"assignedTo":"","body":"Hey all,\r\n\r\nIs it possible to insert the 'use strict' flag within a AMD define callback if the script has no dependencies?\r\n\r\nScript with dependencies:\r\n```typescript\r\nimport dependency = require(\"dependency\");\r\n\"use strict\";\r\nclass myModule {}\r\n```\r","comments":2,"createdAt":1432131559000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3061545?v=3","loggedByName":"u-nikos","milestone":"","number":3235,"state":"open","title":"Use strict within AMD define callback if no dependencies","updatedAt":1433798177000},{"assignedTo":"","body":"It's been a long time since the last release with over 726 commits.. There are a ton of changes the community could benefit from...","comments":3,"createdAt":1433774998000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1020579?v=3","loggedByName":"niemyjski","milestone":"","number":3419,"state":"closed","title":"Please release a new 1.5 beta/rc","updatedAt":1433797104000},{"assignedTo":"paulvanbrenk","body":"We have added support for excludes. this is to track this in the LS https://github.com/Microsoft/TypeScript/pull/3188","comments":0,"createdAt":1433796592000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":3427,"state":"open","title":"Support exclude property in tsconfig in the language service","updatedAt":1433796592000},{"assignedTo":"","body":"Put these two files under tests/cases/compiler, and run `jake runtests tests=Blade`\r\n\r\n**BladeMaterial.ts**\r\n```ts\r\n//@module: amd\r\n\r\n/**\r\n * The base blade material class.\r\n */\r\nexport default class BladeMaterial {\r\n\tstiffness: number\r\n\thardness: nu","comments":5,"createdAt":1433660776000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3254987?v=3","loggedByName":"unional","milestone":"","number":3405,"state":"closed","title":"Cannot find module during runtests","updatedAt":1433795790000},{"assignedTo":"vladima","body":"Original issue: https://github.com/systemjs/builder/issues/181","comments":3,"createdAt":1433356040000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.5.3","number":3362,"state":"closed","title":"transpile function should provide the way to name generated module","updatedAt":1433794808000},{"assignedTo":"","body":"I have tried importing `fs` module using `import fs from 'fs'` but this gives an error: `Module 'path' has no default export.'.\r\n\r\n`import fs = require('fs');` works but this is not ES6 syntax. I would like to stick with ES6 syntax because it is gett","comments":5,"createdAt":1433226189000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/884810?v=3","loggedByName":"astoilkov","milestone":"","number":3337,"state":"closed","title":"Importing default module fails when using ES6 syntax","updatedAt":1433793895000},{"assignedTo":"","body":"I hope this is not a dupe, I was really surprised by this bug because - being so simple in nature - it appears it should have been caught by your tests (or at least stumbled upon by other people), hence there is a slight probability that I misunderst","comments":16,"createdAt":1433759420000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1737586?v=3","loggedByName":"ddotlic","milestone":"","number":3414,"state":"closed","title":"Incorrect JS emitted for a simple case of a base/derived class in 1.5-beta","updatedAt":1433793812000},{"assignedTo":"","body":"See rich diff.","comments":0,"createdAt":1433790007000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3424,"state":"closed","title":"Added 'fileName' metadata tag to 'CONTRIBUTING.md'.","updatedAt":1433790518000},{"assignedTo":"","body":"** Y.ts **\r\n```ts\r\nvar Y = { a: 1}\r\nexport = Y\r\n```\r\n\r\n** A.ts **\r\n```ts\r\nimport X from \"Y\"\r\n```\r\nWould it work or I need to import it using `import X = require(\"Y\")`?\r\nVisual Studio Code underline `X` as error saying `Module 'Y' has no default expor","comments":2,"createdAt":1433753190000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3254987?v=3","loggedByName":"unional","milestone":"","number":3413,"state":"closed","title":"Import `export =` using `import X from \"Y\"` syntax","updatedAt":1433785024000},{"assignedTo":"DanielRosenwasser","body":"Take the following code.\r\n\r\n```TypeScript\r\nvar type;\r\nvar string;\r\nvar Foo;\r\n\r\ntype Foo = string;\r\n```\r\n\r\nNow add a newline between `type Foo`:\r\n\r\n```TypeScript\r\nvar type;\r\nvar string;\r\nvar Foo;\r\n\r\ntype\r\nFoo = string;\r\n```\r\n\r\nStill valid, but should ","comments":0,"createdAt":1430526677000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":2995,"state":"closed","title":"Legal JS is interpreted incorrectly in the presence of certain keywords","updatedAt":1433784474000},{"assignedTo":"","body":"Fixes #2995.\r\n\r\nPreviously, upon encountering a `module`, `namespace`, `type`, `interface`, or `declare` keyword, we would immediately launch into parsing out an \"appropriate\" declaration.\r\n\r\nHowever, this is inappropriate for reasons listed in issue","comments":3,"createdAt":1433358669000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3365,"state":"closed","title":"Parse namespaces/types aliases/interfaces/ambient declarations only when they cannot be legal JS","updatedAt":1433784435000},{"assignedTo":"","body":"Hello!\r\n\r\nToday I did small typo in my TypeScript class:\r\n\r\nclass User {\r\n\r\n\tprotected fId: number;\r\n\tprotected fSocket: SocketIO.Socket;\r\n\tprotected fLastAction: moment.Moment;\r\n\tprotected fQueueTimer: number;\r\n\r\n\tconstructor( socket: SocketIO.Socke","comments":6,"createdAt":1433705324000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10756452?v=3","loggedByName":"nullptr128","milestone":"","number":3407,"state":"closed","title":"Stack overflow on setter/getter","updatedAt":1433784041000},{"assignedTo":"","body":"```typescript\r\nfunction write(array: Uint8Array): void\r\nfunction write(array: number[]): void\r\nfunction write(array: any) {\r\n}\r\n\r\nlet array: number[]|Uint8Array;\r\nwrite(array);\r\n//    ~~~~~\r\n// Argument of type 'Uint8Array | number[]' is not assignab","comments":1,"createdAt":1433768286000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":3417,"state":"closed","title":"Incompatibility between function overload and type union","updatedAt":1433781936000},{"assignedTo":"","body":"Typescript compiler lacks a native way of maintaining compilation options and source files for a given compilation unit like a project or a module. Using /// <references> can help ease the problem, but there is still a tax of adding and managing the ","comments":53,"createdAt":1421219677000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1667,"state":"closed","title":"Add support for a .tsconfig file ","updatedAt":1433769731000},{"assignedTo":"","body":"I am doing this to import external module:\r\n\r\n```typescript\r\nimport * as mod from 'external/mod';\r\n\r\nfunction doSomething(mod:???) {\r\n  // ...\r\n}\r\n\r\ndoSomething(mod);\r\n```\r\n\r\nHow I can define type of ```mod``` in ```doSomething``` if mod declaration ","comments":2,"createdAt":1433717773000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1189265?v=3","loggedByName":"NekR","milestone":"","number":3409,"state":"closed","title":"Imported module type","updatedAt":1433752076000},{"assignedTo":"","body":"This is example of correct code, though compiler raises an error `Property 'bar' does not exist on type 'Function'.`\r\n\r\n```typescript\r\nclass A {\r\n\tstatic bar(): void {\r\n\t\talert(\"Oh hi!\");\r\n\t}\r\n\t\r\n\tfoo(): void {\r\n\t\tthis.constructor.bar(); //<-- compil","comments":5,"createdAt":1432033065000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/694908?v=3","loggedByName":"y-a-r-g","milestone":"","number":3213,"state":"closed","title":"Access to static fields via constructor property","updatedAt":1433733238000},{"assignedTo":"","body":"I've successfully been using SystemJS and TypeScript for a while now. I've been about to use the CommonJS syntax to easily import other TS modules, as well as other resources:\r\n\r\n```\r\nvar OtherModule = require(\"./othermodule\");\r\nvar Html = <string>re","comments":16,"createdAt":1428664350000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4442179?v=3","loggedByName":"jamiewinder","milestone":"","number":2709,"state":"open","title":"Importing files other than TS modules","updatedAt":1433707944000},{"assignedTo":"","body":"Currently when I emitObjectLiteral(), the first element is on the same line as `{`:\r\n\r\n```js\r\nExt.define('Tests.cases.compiler.extjsDefaultClass', { extend: \"Boo\",\r\n    statics: { staticProp: \"abc\",\r\n        static2: 3 } });\r\n```\r\n\r\nI want to make it","comments":8,"createdAt":1433446793000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3254987?v=3","loggedByName":"unional","milestone":"","number":3387,"state":"closed","title":"How to emitObjectLiteral with leading and trailing line breaks?","updatedAt":1433699602000},{"assignedTo":"","body":"Without instantiating and populating an object, it doesn't seem possible with the available reflection built into JavaScript to determine the type of a property or method.  For example, how could you determine that the property Surname of the Employe","comments":1,"createdAt":1433600561000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1449290?v=3","loggedByName":"bahrus","milestone":"","number":3401,"state":"closed","title":"Provide a special decorator in which you can define a type","updatedAt":1433642172000},{"assignedTo":"","body":"Resolves #2577\r\n\r\nAdds support behind an experimental compiler option to emit design-time type metadata for decorated declarations in source. \r\n\r\n- Adds a `__metadata` helper that depends on a [polyfill](https://github.com/rbuckton/ReflectDecorators)","comments":0,"createdAt":1427936561000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2589,"state":"closed","title":"Decorator type metadata","updatedAt":1433639721000},{"assignedTo":"","body":"There is a `delete` member in one of the objects in createFileMap. See here:\r\n\r\nhttps://github.com/Microsoft/TypeScript/commit/113b7ed13d26e246d25d76c9f65f9a15c4997322#diff-66cec844e251a1918deb897eabca206bR24\r\n\r\nDelete is a keyword, not all JS engine","comments":12,"createdAt":1433446642000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"","number":3386,"state":"closed","title":"ES3/IE8/WSH incompatibility in core compiler code","updatedAt":1433629182000},{"assignedTo":"paulvanbrenk","body":"We have added a set of new flags over the course of this release, we need to add MSBuild properties for them in VS 2013 and VS 2015 in .target files as well as in the project properties.\r\n\r\n**VS 2013**\r\n- [x] [--rootDir](https://github.com/Microsoft/","comments":13,"createdAt":1430805934000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5.3","number":3034,"state":"closed","title":"Expose new compiler flags in the .targets file","updatedAt":1433621613000},{"assignedTo":"","body":"Continuing from #3252 \r\n\r\nCurrently, array-destructuring of array-like objects is invalid in Typescript targeting ES5 because of how `slice()` is used in order to implement spread operators (and maybe some other things that I'm not aware of).  If the","comments":5,"createdAt":1433451466000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6686935?v=3","loggedByName":"tylergoodman","milestone":"","number":3389,"state":"open","title":"Array-destructuring of array-like objects when targeting ES5","updatedAt":1433593421000},{"assignedTo":"","body":"I noticed that recently a lot of new APIs are added to `lib.d.ts`. Of cause this is a good thing, however my code breaks badly because of such update.\r\n\r\nPreviously I had added a lot of declarations in my code for HTML5 APIs that were missing in `lib","comments":10,"createdAt":1432035827000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1684137?v=3","loggedByName":"duanyao","milestone":"","number":3215,"state":"open","title":"New APIs added to lib.d.ts may break client codes. Allow duplicated members in interfaces? Make lib.d.ts overridable?","updatedAt":1433555713000},{"assignedTo":"","body":"In Visual Studio if you go into the options for TypeScript(Tools > Options > Text Editor > TypeScript > General) the \"Automatic brace completion\" option is grayed out.\r\n\r\n![Automatic brace completion options grayed out](http://i.imgur.com/rI6M1Q6.png","comments":6,"createdAt":1418605960000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3323504?v=3","loggedByName":"Noah-Huppert","milestone":"","number":1484,"state":"open","title":"Visual Studio: \"Automatic brace completion\" option grayed out","updatedAt":1433546441000},{"assignedTo":"","body":"Now that decorators are supported in TypeScript (#2249), consider adding support for ambient/design-time-only decorators:\r\n\r\nAmbient decorators can be an extensible way to declare properties on or associate special behavior to declarations; design ti","comments":2,"createdAt":1429840261000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2900,"state":"open","title":"Add Support for design-time decorators","updatedAt":1433544147000},{"assignedTo":"","body":"I do not know nearly enough about JavaScript or SystemJS to understand why the semicolon is necessary, but without it the module fails to load in chrome (unsure about other browsers).  A semicolon does not appear to be necessary on the second `export","comments":3,"createdAt":1433395554000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/886059?v=3","loggedByName":"Zoltu","milestone":"","number":3376,"state":"closed","title":"Adds a failing test for System JS compilation.","updatedAt":1433543062000},{"assignedTo":"","body":"â¦spile' function. fixes #3362 ","comments":2,"createdAt":1433368619000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3370,"state":"closed","title":"emit module name for system modules, add moduleName argument to 'tranâ¦","updatedAt":1433542378000},{"assignedTo":"","body":"such as :  inline public int add(a, b): int { return a+b; }\r\nIt's very useful for performance","comments":5,"createdAt":1410508541000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7799988?v=3","loggedByName":"yinhaibo01","milestone":"","number":661,"state":"closed","title":"Feature request: inline function","updatedAt":1433536549000},{"assignedTo":"","body":"","comments":1,"createdAt":1433530941000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3395,"state":"closed","title":"wrap host.getCanonicalFileName in arrow function","updatedAt":1433531807000},{"assignedTo":"","body":"Our `.gitattributes` works sufficiently such that it's not a necessary step.","comments":0,"createdAt":1433531492000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3396,"state":"closed","title":"Remove 'core.autocrlf false' comment from the README","updatedAt":1433531650000},{"assignedTo":"","body":"error TS5001: The current host does not support the '--watch' option.\r\n\r\nI got the really cool watch option working using the typescript spirce cde. but wouldn it be cool to have it working with tsc?","comments":16,"createdAt":1426540298000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9371283?v=3","loggedByName":"urbanhop","milestone":"","number":2375,"state":"open","title":"Implement '--watch' for tsc.exe","updatedAt":1433529186000},{"assignedTo":"","body":"","comments":2,"createdAt":1433441928000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3383,"state":"closed","title":"rename 'FileMap.delete' to 'FileMap.remove'","updatedAt":1433527155000},{"assignedTo":"","body":"The [Playground](http://www.typescriptlang.org/Playground#src=class%20A%20%7B%0A%09constructor(public%20str%3A%20string)%20%7B%0A%09%09%0A%09%7D%0A%7D%0Aclass%20B%20extends%20A%20%7B%0A%09constructor()%20%7B%0A%09%09super(null)%3B%0A%09%7D%0A%7D) doe","comments":1,"createdAt":1433496459000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/995120?v=3","loggedByName":"whitneyit","milestone":"","number":3392,"state":"closed","title":"Parent constructor called with null","updatedAt":1433524275000},{"assignedTo":"mhegazy","body":"Out of nowhere, this error message started to appear constantly in my TS-heavy solution:\r\n\r\nDebug Failure. False expression: start must be non-negative, is undefined\r\nfrom File VSTSC\r\n\r\nInvoking msbuild from the command line, I got a bit more, but no","comments":7,"createdAt":1416252878000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2812989?v=3","loggedByName":"nmehlei","milestone":"TypeScript 1.5","number":1182,"state":"closed","title":"Debug Failure. False expression: start must be non-negative, is undefined","updatedAt":1433511747000},{"assignedTo":"","body":"Adds support for expanding [glob](http://en.wikipedia.org/wiki/Glob_(programming))-like patterns in \"include\" and \"exclude\" properties of tsconfig.json. The following patterns are supported:\r\n\r\n* `*` - Matches zero or more characters, excluding direc","comments":5,"createdAt":1432083608000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3232,"state":"open","title":"Adds glob-style pattern matching for file specifications using new \"include\" property in tsconfig.json","updatedAt":1433476885000},{"assignedTo":"","body":"New PR for #3354 to merge into 1.5 release branch","comments":0,"createdAt":1433459879000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3390,"state":"closed","title":"Add missing overloads for texImage2D and texSubImage2D","updatedAt":1433460345000},{"assignedTo":"jonathandturner","body":"- Name: System Group\r\n- Homepage url: http://www.systemgroup.net/en\r\n- Logo: http://www.systemgroup.net/sites/default/files/uploads/SG-Logo.svg\r\n\r\n","comments":1,"createdAt":1431933219000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11192617?v=3","loggedByName":"maziart","milestone":"","number":3195,"state":"closed","title":"New Website Logo: System Group","updatedAt":1433454386000},{"assignedTo":"jonathandturner","body":"- Name: S Media Link\r\n- Homepage url: http://smedialink.com\r\n- Brand Guidelines/Licensing: We have no restrictions about using our logo\r\n- Logo: https://drive.google.com/file/d/0B9GY39lUz5VeQlVPNzBiYjVWMDA/view?usp=sharing","comments":1,"createdAt":1431077518000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11454479?v=3","loggedByName":"SMediaLink","milestone":"","number":3083,"state":"closed","title":"New Website Logo: [S Media Link]","updatedAt":1433454378000},{"assignedTo":"jonathandturner","body":"- Name: CardsApp\r\n- Homepage url: http://cardsapp.com\r\n- Brand Guidelines/Licensing: Free to use.\r\n- Logo: http://cardsapp.com/Images/CardsApp-Free-Logo.png\r\n","comments":1,"createdAt":1430644954000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1796080?v=3","loggedByName":"mnns","milestone":"","number":3010,"state":"closed","title":"New Website Logo: CardsApp","updatedAt":1433454373000},{"assignedTo":"jonathandturner","body":"- Name: Wallaby.js\r\n- Homepage url: http://wallabyjs.com/\r\n- Logo: http://wallabyjs.com/assets/img/logoWithText.svg\r\n\r\nWallaby.js is an intelligent test runner for JavaScript that continuously runs your tests. It reports code coverage and other resul","comments":5,"createdAt":1430100801000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/979966?v=3","loggedByName":"ArtemGovorov","milestone":"","number":2924,"state":"closed","title":"New Website Logo: Wallaby.js","updatedAt":1433454368000},{"assignedTo":"jonathandturner","body":"- Name: HumongouS.io\r\n- Homepage url: http://www.humongous.io\r\n- Brand Guidelines/Licensing: N/A\r\n- Logo:  https://s3.amazonaws.com/assets.humongous.io/humongous_logo_kit.zip","comments":1,"createdAt":1432762299000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1569859?v=3","loggedByName":"kamagatos","milestone":"","number":3286,"state":"closed","title":"New Website Logo: HumongouS.io","updatedAt":1433454358000},{"assignedTo":"jonathandturner","body":"Name: Language Zen\r\nHomepage: https://www.languagezen.com\r\nBrand Guidelines: You can use the logo to represent us and to indicate we use Typescript exclusive for all our JavaScript needs.\r\n\r\nLogo:\r\n![language-zen-logo](https://cloud.githubusercontent","comments":1,"createdAt":1432022543000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4271135?v=3","loggedByName":"ofirgeller","milestone":"","number":3210,"state":"closed","title":"New Website Logo: Language Zen","updatedAt":1433454352000},{"assignedTo":"jonathandturner","body":"Please fill the following out:\r\n\r\n- Name: ChocolateChip-UI\r\n- Homepage url: http://chocolatechip-ui.com\r\n- Brand Guidelines/Licensing: MIT\r\n- Logo: http://chocolatechip-ui.com/images/CCUI-UI-Only-On-Light.svg\r\n\r\n> Example:\r\n>\r\n> Name: Microsoft\r\n> Ho","comments":1,"createdAt":1432682601000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10430193?v=3","loggedByName":"chocolatechipui","milestone":"","number":3271,"state":"closed","title":"ChocolateChip-UI","updatedAt":1433454346000},{"assignedTo":"jonathandturner","body":"Name: WebRx\r\nHomepage: http://webrxjs.org/\r\nBrand Guidelines/Licensing: MIT License\r\nLogo: http://webrxjs.org/images/Logo@512.png\r\n\r\nDescription:\r\n\r\nWebRx is a browser-based MVVM-Framework that combines functional-reactive programming with declarativ","comments":1,"createdAt":1431948910000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/51688?v=3","loggedByName":"oliverw","milestone":"","number":3196,"state":"closed","title":"New Website Logo: WebRx ","updatedAt":1433454341000},{"assignedTo":"jonathandturner","body":"Please fill the following out:\r\n\r\n- Name: instartlogic\r\n- Homepage url: www.instartlogic.com\r\n- Brand Guidelines/Licensing: (or anything we need to know before using your logo)\r\n- Logo: http://www.instartlogic.com/sites/all/themes/big01Theme/logo.png","comments":1,"createdAt":1432752640000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5490836?v=3","loggedByName":"gvaitheeswaran","milestone":"","number":3284,"state":"closed","title":"instartlogic","updatedAt":1433454334000},{"assignedTo":"","body":"I'm moving this issue here from codeplex:\r\nhttps://typescript.codeplex.com/workitem/1414\r\n\r\nThis feature would help to use \"library projects\" in a way that you only have to specify the actual path once (eg. with a compiler flag).\r\n\r\nI'd love to see t","comments":27,"createdAt":1406621750000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/911440?v=3","loggedByName":"andrewvarga","milestone":"","number":293,"state":"closed","title":"Specify (absolute) path for library projects","updatedAt":1433453860000},{"assignedTo":"","body":"Doesn't work because the IArguments interface isn't defined as an Array type. Is there a reason behind this?\r\n\r\nExample:\r\n```javascript\r\nfunction test () {\r\n  var [a] = arguments; // Error: Type 'IArguments' is not an array type.\r\n}\r\n```\r\n\r\nOne solut","comments":23,"createdAt":1432281869000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6686935?v=3","loggedByName":"tylergoodman","milestone":"","number":3252,"state":"closed","title":"Destructuring the arguments variable","updatedAt":1433451507000},{"assignedTo":"","body":"```TypeScript\r\n\"use strict\"\r\n\r\nvar interface: number\r\n\r\ninterface I\r\n```\r\n\r\nIf you give the interface its braces (`{ }`) you will get the error on the `interface` identifier, but otherwise I only get an error on `I`.","comments":1,"createdAt":1433450492000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3388,"state":"closed","title":"Language service doesn't serve strict mode errors in the presence of incomplete interface","updatedAt":1433450851000},{"assignedTo":"","body":"With default compile settings, the following works under TS 1.4 but fails under TS 1.5.0-alpha due to Color being undefined until the code generated for the exported enum has been evaluated because the default output for enums changed from emitting c","comments":6,"createdAt":1428007111000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2458?v=3","loggedByName":"robertknight","milestone":"TypeScript 1.5","number":2594,"state":"closed","title":"Ordering sensitivity of exported enums and usages","updatedAt":1433450725000},{"assignedTo":"","body":"","comments":0,"createdAt":1433445014000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3384,"state":"closed","title":"Speed up tests by not type-checking lib.d.ts unless the test asks for that.","updatedAt":1433449745000},{"assignedTo":"","body":"","comments":0,"createdAt":1433446296000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3385,"state":"closed","title":"Port PR 3382 into release 1.5","updatedAt":1433447133000},{"assignedTo":"","body":"fixes issue reported in #3376","comments":2,"createdAt":1433440426000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3382,"state":"closed","title":"added missing semicolon after calling exporter function","updatedAt":1433444148000},{"assignedTo":"","body":"Would you please add iterator in NodeList interface as [DOM4 spec](https://dom.spec.whatwg.org/#old-style-collections) says?\r\n\r\n```webidl\r\nIDL[Exposed=Window]\r\ninterface NodeList# {\r\n  getter Node? item(unsigned long index#);\r\n  readonly attribute un","comments":6,"createdAt":1433431165000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":3381,"state":"closed","title":"Add iterator in NodeList interface","updatedAt":1433441930000},{"assignedTo":"","body":"I'm trying to send a `typeDefinition` request as defined [here](https://github.com/Microsoft/TypeScript/blob/113b7ed13d26e246d25d76c9f65f9a15c4997322/src/server/protocol.d.ts#L172)\r\n\r\n``` json\r\n{\r\n  \"seq\": 5,\r\n  \"type\": \"request\",\r\n  \"command\": \"type","comments":5,"createdAt":1433427665000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/943597?v=3","loggedByName":"icholy","milestone":"","number":3379,"state":"closed","title":"TSServer: Unrecognized JSON command: typeDefinition","updatedAt":1433439389000},{"assignedTo":"","body":"As per spec of tyepscript 1.5\r\n\r\nExternal module names may be relative or top-level. An external module name is relative if the first term is \".\" or \"..\"\r\n\r\nbut current implementation interprets \"typings/angular2/angular2.d.ts\" as external because it","comments":2,"createdAt":1433019084000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5064901?v=3","loggedByName":"neermitt","milestone":"","number":3313,"state":"closed","title":"/// <reference path=\"typings/angular2/angular2.d.ts\" /> is considered relative external module","updatedAt":1433433830000},{"assignedTo":"","body":"Filenames that come from tripleslash references\\imports can differ in cases\\slashes so they should be normalized before they can be used as keys","comments":1,"createdAt":1433364652000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3368,"state":"closed","title":"introduce FileMap to store mappings with filenames as keys","updatedAt":1433398386000},{"assignedTo":"jonathandturner","body":"http://typescript.codeplex.com/workitem/645\r\n\r\nAt the moment it's not possible to call super getter/setter when overriding properties:\r\n\r\n```typescript\r\nclass A {\r\n\tprivate _property: string;\r\n\tget property() { return this._property; }\r\n\tset property","comments":20,"createdAt":1406970806000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/96032?v=3","loggedByName":"mwisnicki","milestone":"TypeScript 2.0","number":338,"state":"open","title":"Allow to call getter/setter logic When subclassing","updatedAt":1433385619000},{"assignedTo":"JsonFreeman","body":"Hi,\r\n\r\n**Version**: VS 2015RC/TS 1.5 Beta\r\n\r\nThe following code:\r\n\r\n```typescript\r\ndeclare var router: any;\r\ninterface FooBar {\r\n    edit?: boolean;\r\n}\r\n\r\nconst { edit } = <FooBar> router.foo();\r\n```\r\n\r\nProduces error:\r\n```\r\nVSTSC : tsc.js(21567, 25)","comments":0,"createdAt":1433361241000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5.3","number":3366,"state":"closed","title":"JavaScript runtime error : Unable to get property 'kind' of undefined or null reference","updatedAt":1433379797000},{"assignedTo":"","body":"The emitter should not fight itself. If it synthesized a node with parentheses, then it should not try to strip away those parentheses on emit. If parentheses are not needed, they should not be added in the first place.\r\n\r\nThis PR retains the parenth","comments":1,"createdAt":1433377568000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3374,"state":"closed","title":"Emit parenthesized type assertion","updatedAt":1433379345000},{"assignedTo":"","body":"1. Never reference 'anyType' directly, unless it is the result of some operation.  i.e. do not use it when checking if some type is the 'any' type or not.\r\n2. Always use the TypeFlags.Any flag to see if a type is the 'any' type.\r\n3. When possible, pr","comments":1,"createdAt":1433376410000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3372,"state":"closed","title":"Simplify handling of the 'any' type inside the checker.","updatedAt":1433377515000},{"assignedTo":"","body":"Fix #3344; removed duplicated overloads for ``createEvent`` and some\r\nminor fixes.","comments":2,"createdAt":1433298202000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3354,"state":"closed","title":"Dom lib file bug fix","updatedAt":1433377347000},{"assignedTo":"zhengbli","body":"Calling the base version of the webgl function texImage2D (taking an ArrayBufferView of pixel data) results in:\r\n\r\n`error TS2346: Supplied parameters do not match any signature of call target.`\r\n\r\nLooks like the lib.d.ts only includes the definition ","comments":5,"createdAt":1433262792000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/40109?v=3","loggedByName":"atebits","milestone":"TypeScript 1.5.3","number":3344,"state":"closed","title":"texImage2D broken as of tsc 1.5","updatedAt":1433377347000},{"assignedTo":"","body":"From `tests\\cases\\conformance\\types\\members\\duplicateNumericIndexers.ts`:\r\n\r\n```TypeScript\r\ninterface Number {\r\n    [x: number]: string;\r\n    [x: number]: string;\r\n}\r\n\r\ninterface String {\r\n    [x: number]: string;\r\n    [x: number]: string;\r\n}\r\n\r\ninte","comments":0,"createdAt":1433376522000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3373,"state":"open","title":"No errors for duplicate index signatures in global intrinsic types","updatedAt":1433376522000},{"assignedTo":"","body":"","comments":1,"createdAt":1433374136000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3371,"state":"closed","title":"Remove HarnessDiagnostics.  Just use the normal ts Diagnostic instead.","updatedAt":1433374942000},{"assignedTo":"ahejlsberg","body":"tsconfig.json picks all files in the containing folder by default, this is problematic with \"node_modules\" that contain .ts/.d.ts that are not relevant to the project. \"files\" is not useful here because of the lack of support for globs (see #1927).\r\n","comments":1,"createdAt":1430848320000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":3043,"state":"closed","title":"Add support for \"exclude\" in tsconfig.json","updatedAt":1433371015000},{"assignedTo":"","body":"```ts\r\ntype Point = [number, number]; var x = [1, 2]; var p: Point = x;\r\n```\r\n\r\nIn this case `p` won't typecheck because x has been inferred as `number[]` instead of `[number, number]`.  It would be really nice if the type system could check against ","comments":7,"createdAt":1433365330000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/297992?v=3","loggedByName":"ccapndave","milestone":"","number":3369,"state":"closed","title":"Tuples constructed via array literals don't typecheck against tuple constraints","updatedAt":1433370342000},{"assignedTo":"ahejlsberg","body":"```ts\r\nfunction foo<T>() {\r\n    var z = foo<typeof y>();\r\n    var y: {\r\n        y2: typeof z\r\n    };\r\n    return y;\r\n}\r\n\r\n\r\nfunction bar<T>() {\r\n    var z = bar<typeof y>();\r\n    var y: {\r\n        y2: typeof z;\r\n    }\r\n    return y;\r\n}\r\n\r\nvar a = foo","comments":0,"createdAt":1432948521000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":3309,"state":"closed","title":"Stack overflow for infinitely recursive anonymous type","updatedAt":1433369365000},{"assignedTo":"","body":"Fixes #3309 (and revises fix for #3237).\r\n\r\nThis PR switches our `isDeeplyNestedGeneric` function to track both type references and instantiated anonymous types. The key change is that we use the symbol associated with the type as the tracked identit","comments":1,"createdAt":1433033219000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3316,"state":"closed","title":"Detect circular instantiated types","updatedAt":1433369281000},{"assignedTo":"","body":" It would be nice to be able to decorate enum members (in the same way as properties?).","comments":4,"createdAt":1432737536000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1662412?v=3","loggedByName":"billccn","milestone":"","number":3279,"state":"open","title":"Feature request: Decorators on enum members","updatedAt":1433366057000},{"assignedTo":"","body":"* Fixes #3065\r\n* Fixes #3230\r\n\r\nTip: Just review the changed files.","comments":3,"createdAt":1432238390000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3247,"state":"closed","title":"Fix findAllRefs, getHighlightSpans, renameLocs, renameInfo for default exports and functions expressions","updatedAt":1433359963000},{"assignedTo":"","body":"Make index types optional in ResolvedType","comments":4,"createdAt":1433347212000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3359,"state":"closed","title":"Make index types optional in ResolvedType","updatedAt":1433357596000},{"assignedTo":"JsonFreeman","body":"Hi,\r\n\r\n**Version**: Visual Studio 2015 RC/TS 1.5 beta.\r\n\r\nI have a repro for this. \r\n\r\n* Download the Visual Studio project from here: https://typescript.codeplex.com/workitem/2670\r\n* Build the project.\r\n\r\nError:\r\n\r\n```\r\n------ Rebuild All started: P","comments":4,"createdAt":1431603465000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5.3","number":3166,"state":"closed","title":"error MSB6006: \"tsc.exe\" exited with code 1","updatedAt":1433357288000},{"assignedTo":"rbuckton","body":"Original issue: https://github.com/systemjs/builder/issues/178","comments":0,"createdAt":1433356178000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.6","number":3364,"state":"open","title":"Allow non-global helper functions","updatedAt":1433357214000},{"assignedTo":"","body":"Back in March, my co-worker and I started a TypeScript Meetup here in Portland, Oregon (see [http://www.meetup.com/Portland-TypeScript-Meetup/](http://www.meetup.com/Portland-TypeScript-Meetup/)). We're now 67 members strong with our third meeting co","comments":3,"createdAt":1432846878000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1811552?v=3","loggedByName":"smashdevcode","milestone":"","number":3295,"state":"closed","title":"Meetup Support","updatedAt":1433355218000},{"assignedTo":"","body":"The following TypeScript:\r\n\r\n    const enum MyEnum {This,That};\r\n    MyEnum[\"That\"] = 1;\r\n\r\ncompiles down to the following javascript:\r\n\r\n    ;\r\n    1 /* \"That\" */ = 1;\r\n\r\nThis holds true for standard `enum`s as well, a `const enum` was just a more s","comments":1,"createdAt":1425592027000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1752479?v=3","loggedByName":"joelmdev","milestone":"Community","number":2215,"state":"open","title":"Assignment of string literal indexed enum member passes compilation but results in invalid javascript","updatedAt":1433355093000},{"assignedTo":"","body":"Fix error message typo","comments":1,"createdAt":1433294050000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3353,"state":"closed","title":"Fix error message typo","updatedAt":1433354072000},{"assignedTo":"","body":"Fixes #3166. Because we get return types from signatures on demand, and we defer checking function expression bodies, any noImplicitAny errors resulting from widening a return expression may be missed. This change forces these checks when we visit fu","comments":2,"createdAt":1433293046000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3352,"state":"closed","title":"Always check return expressions when type checking a file","updatedAt":1433354062000},{"assignedTo":"","body":"clean hostCache to avoid extending lifetime of script snapshots","comments":0,"createdAt":1433352642000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3360,"state":"closed","title":"Port PR 3331 into release-1.5","updatedAt":1433353659000},{"assignedTo":"","body":"I'm trying to write a declaration file for keystonejs. But it seems like I can't write a function named `import` for it.\r\n\r\n**source**:\r\n```typescript\r\nimport keystone from \"keystone\";\r\nkeystone.import(\"models\");\r\n```\r\n\r\n**Declaration file**:\r\n```typ","comments":2,"createdAt":1433340014000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3358,"state":"closed","title":"import function in ambient declaration","updatedAt":1433345985000},{"assignedTo":"","body":"It would be nice if we can have some way (maybe attribute) that will convert enum like that:\r\n```enum MyEnum<flags> { First, Second, Third}```\r\n\r\nto \r\n```enum MyEnum  { First = 1 << 0, Second = 1 << 1, Third = 1 << 2}```\r\n\r\nAnd later on to JavaScript","comments":7,"createdAt":1423081764000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1133579?v=3","loggedByName":"jj09","milestone":"","number":1929,"state":"closed","title":"Proposal: Add concatenable enum","updatedAt":1433343871000},{"assignedTo":"","body":"Creating an if-statement in typescript without a block body moves the statement one line down which breakes the if-statement.\r\n\r\nMinimal example:\r\nThe code:\r\n```\r\nif(false) console.log(\"Should not happen.\");\r\n```\r\nIs compiled to: \r\n```\r\nif (false)\r\n ","comments":2,"createdAt":1433329356000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1044467?v=3","loggedByName":"SiXoS","milestone":"","number":3357,"state":"closed","title":"If-statements without block body breaks the statement","updatedAt":1433334923000},{"assignedTo":"","body":"I'm writing some custom code in my fork and realize it is not populated.  If needed, I can create a pull request for it. (should be just 4 lines of change).","comments":11,"createdAt":1433182562000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3254987?v=3","loggedByName":"unional","milestone":"","number":3327,"state":"closed","title":"Should commonSourceDirectory be undefined when outDir, sourceRoot, mapRoot is not specified?","updatedAt":1433318857000},{"assignedTo":"","body":"# Proposal\r\n\r\nTo better support the development and consumption of node.js modules in TypeScript, I propose that we add the ability to emit a single declaration file for a node.js package. To that end, I suggest we add the following features:\r\n\r\n* Ad","comments":9,"createdAt":1431108127000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3089,"state":"open","title":"Suggestion: package declaration file for commonjs packages","updatedAt":1433317014000},{"assignedTo":"","body":"","comments":0,"createdAt":1433311212000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3355,"state":"closed","title":"Update LKG.","updatedAt":1433311217000},{"assignedTo":"mhegazy","body":"I'm working on implementing the `isolatedModules` option using the transpile method in gulp-typescript. I get errors that `lib.d.ts` hasn't been found and that it cannot find global types:\r\n```\r\nerror TS2318: Cannot find global type 'Array'.\r\nerror T","comments":2,"createdAt":1432222640000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"TypeScript 1.5.3","number":3245,"state":"closed","title":"Filter transpile diagnostics","updatedAt":1433294702000},{"assignedTo":"","body":"Also add correct handling to --newLine in transpile as well as unit tests","comments":1,"createdAt":1432696760000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3274,"state":"closed","title":"Fix #3245: ensure transpile diagnostics only include syntactic and compiler options diagnostics","updatedAt":1433294681000},{"assignedTo":"","body":"CR notes: I recommend reading this CR one commit at a time to better understand what's going on.\r\n\r\n---\r\n\r\nPreviously, it was very difficult to reason about the flow of the binder.  Different parts of the binder recursed in different ways.  For examp","comments":5,"createdAt":1429489385000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2832,"state":"closed","title":"Simplify binder flow.","updatedAt":1433293227000},{"assignedTo":"","body":"This approach differs from PR https://github.com/Microsoft/TypeScript/pull/2832 in that it no longer uses SymbolFlags to control recursion and container setting logic in the binder.  Instead, we simply use the kind of the node we're currently on to d","comments":4,"createdAt":1429598313000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2843,"state":"closed","title":"Simplify binder flow. (alternate approach)","updatedAt":1433293225000},{"assignedTo":"","body":"Return the path of the config file and the file name list of the project (optionally). This is helpful in differentiate the build command behavior for loose files and configured projects in sublime.","comments":3,"createdAt":1432945506000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3307,"state":"closed","title":"Add APIs to provide project info for a given file","updatedAt":1433287899000},{"assignedTo":"","body":"This is just slight reognizations/cleanups to our code.  However, they make doing the work in the JSDoc branch easier as there is less to merge and less chance of conflicts.  ","comments":1,"createdAt":1433286358000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3351,"state":"closed","title":"Simple changes to the compiler to make the jsDoc work easier.","updatedAt":1433287235000},{"assignedTo":"","body":"```typescript\r\nfoo(./* expecting no suggestion */);\r\nfoo(../* expecting no suggestion */);\r\nfoo(.../* expecting suggestions */);\r\n\r\nfunction foo(./* expecting no suggestion */) { }\r\nfunction foo(../* expecting no suggestion */) { }\r\nfunction foo(.../","comments":1,"createdAt":1433284721000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":3350,"state":"closed","title":"Should not give suggestions when typing spread operator `...`.","updatedAt":1433285072000},{"assignedTo":"","body":"","comments":2,"createdAt":1432849596000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3296,"state":"closed","title":"Add syntactic classification for doc comments.","updatedAt":1433283459000},{"assignedTo":"","body":"This change should remove the requirement that people have to set a global git config flag in order for the tests to pass on clean clone.\r\n\r\nVerification steps:\r\n\r\n1. delete local repo\r\n1. clone repo\r\n1. build\r\n1. run tests\r\n1. make code change\r\n1. v","comments":5,"createdAt":1433113177000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/886059?v=3","loggedByName":"Zoltu","milestone":"","number":3324,"state":"closed","title":"Never normalize end-of-lines on clone/commit.","updatedAt":1433280742000},{"assignedTo":"DanielRosenwasser","body":"![image](https://cloud.githubusercontent.com/assets/970430/7934003/356ceba4-0956-11e5-831c-e39dfad26bc4.png)\r\n","comments":0,"createdAt":1433241917000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"TypeScript 1.6","number":3339,"state":"closed","title":"Should not give suggestion at the position of regular expression flags.","updatedAt":1433279802000},{"assignedTo":"","body":"Fixes #3339.","comments":1,"createdAt":1433275531000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3347,"state":"closed","title":"Block completion when in the flags of a regular expression","updatedAt":1433279747000},{"assignedTo":"","body":"This is somewhat related to #2923, but I'm deliberately opening a separate item because the discussion there has abruptly stopped and more importantly I don't think we're on the right track for the issue at hand.\r\n\r\nLet's restate the issue differentl","comments":22,"createdAt":1433236103000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1737586?v=3","loggedByName":"ddotlic","milestone":"","number":3338,"state":"closed","title":"Avoiding pollution of environment's namespace","updatedAt":1433279339000},{"assignedTo":"","body":"Brings in changes from #3288 into `master`.","comments":0,"createdAt":1433275535000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3348,"state":"closed","title":"Fix resolution of named function & class expressions as well as 'arguments' (for master branch)","updatedAt":1433278611000},{"assignedTo":"","body":"","comments":1,"createdAt":1433277984000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3349,"state":"closed","title":"Bump services version to 0.5.","updatedAt":1433278539000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\nvar x = function f(x = f(), y = f => f) {\r\n    f(/**/f, f)\r\n}\r\n```\r\n\r\nInsert a `<` at the cursor (i.e. replace the `/**/`)\r\n\r\n```\r\ngetSignatureHelpItems('C:\\Users\\drosen\\AppData\\Local\\Temp\\~vsA6D0.ts', 50)\r\n\r\nError: Debug Failure. Fals","comments":2,"createdAt":1432761340000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5.3","number":3285,"state":"closed","title":"Failed assertion in 1.5 crashes compiler and gets triggered in semantic LS","updatedAt":1433275716000},{"assignedTo":"paulvanbrenk","body":"As a result, I get an error whenever I try to for-of over an array.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/972891/7921280/4ccd3b26-0859-11e5-90d0-6c12e6fcee3c.png)\r\n\r\n\r\n![image](https://cloud.githubusercontent.com/assets/972891/792126","comments":6,"createdAt":1433186775000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5.3","number":3328,"state":"closed","title":"Loose file settings are not communicted to Script LS as expected","updatedAt":1433275516000},{"assignedTo":"","body":"In resolution, we special case the `arguments` object as well as names of function and class expressions.\r\n\r\nHowever, when resolving, we ignore the resolution meaning and special case these unconditionally. That means in the following case, we will a","comments":2,"createdAt":1432768214000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3288,"state":"closed","title":"Fix resolution of named function & class expressions as well as 'arguments'","updatedAt":1433275025000},{"assignedTo":"","body":"```typescript\r\nclass Test { /* enter */}\r\n```\r\n\r\nresults in:\r\n\r\n```typescript\r\nclass Test { /* remaining space */ \r\n    /* cursor */\r\n}\r\n```\r\n\r\nexpects:\r\n\r\n```typescript\r\nclass Test {/* no spaces */ \r\n    /* cursor */\r\n}\r\n```","comments":3,"createdAt":1433242129000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"Community","number":3340,"state":"open","title":"Should remove tailing whitespaces when auto formatting.","updatedAt":1433269930000},{"assignedTo":"","body":"I know ES6 imports are different than the regular requireJS format, however the exporter currently strips regular import from exported ES6 JS:\r\n\r\nI.e. the following is removed from resulting export:\r\nimport Matrix               = require(\"../../../li","comments":2,"createdAt":1433252945000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/789754?v=3","loggedByName":"karimbeyrouti","milestone":"","number":3341,"state":"closed","title":"ES6 - stripping common / require imports from exported code","updatedAt":1433269404000},{"assignedTo":"","body":"This code\r\n\r\n        var fd = new FormData();\r\n        fd.append(file.name, file);\r\n        var xhr = new XMLHttpRequest();\r\n        //...\r\n        xhr.send(fd);\r\n\r\ndoes not work anymore with TS 1.5:\r\n\r\n    Severity\tCode\tDescription\tProject\tFile\tLine","comments":3,"createdAt":1433080854000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9371283?v=3","loggedByName":"urbanhop","milestone":"","number":3319,"state":"closed","title":"FormData vs Document","updatedAt":1433268476000},{"assignedTo":"","body":"Added 'ArrayBufferView' variant of texImage2D function.\r\n\r\nIssue: https://github.com/Microsoft/TypeScript/issues/3344","comments":3,"createdAt":1433262900000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/40109?v=3","loggedByName":"atebits","milestone":"","number":3345,"state":"closed","title":"Fix WebGL / texImage2D base definition","updatedAt":1433267779000},{"assignedTo":"","body":"","comments":1,"createdAt":1433205411000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3335,"state":"closed","title":"perf: use normalized path as a key in document registry","updatedAt":1433267297000},{"assignedTo":"","body":"@RyanCavanaugh, this can be viewed as a much-simplified version of #3314.\r\n\r\nWhen a new command line option is passed, then wherever `<class_name_or_primitive_type>e` occurs in a line of code `L` (and let's assume for simplicity that there is only on","comments":2,"createdAt":1433253112000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1623534?v=3","loggedByName":"DustinWehr","milestone":"","number":3342,"state":"closed","title":"(Imperfect, inefficient) checked casting for debugging-only compilation mode","updatedAt":1433258969000},{"assignedTo":"","body":"I'd like to suggest a language feature. The \"is\" keyword would check if an object is of a specific type (using duck typing).\r\n\r\n```typescript\r\ninterface myInterface {\r\n    myVar1: number;\r\n    myVar2: number;\r\n}\r\nvar a;\r\nconsole.log(a is myInterface)","comments":4,"createdAt":1417117149000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5099081?v=3","loggedByName":"alidorosty1234","milestone":"","number":1289,"state":"closed","title":"proposal: \"is\" keyword","updatedAt":1433255414000},{"assignedTo":"","body":"I am exporting my Lib to ES6, and for some reason it is stripping my comments from my code.\r\n\r\nTSC command:\r\n\r\ntsc --rootDir libtses6/ --outDir libtses6/ -t ES6 \r\n\r\nHappy to include some source files it it helps.\r\n","comments":7,"createdAt":1432731844000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/789754?v=3","loggedByName":"karimbeyrouti","milestone":"","number":3278,"state":"closed","title":"Exporting ES6 seems to strip comments","updatedAt":1433252038000},{"assignedTo":"","body":"Hi there... I am struggling trying to find documentation on the TypeScript metadata annotation features that are apparently coming in 1.5... my question is how will interfaces work with metadata annotations knowing that TS interfaces have no runtime ","comments":6,"createdAt":1426111162000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6955833?v=3","loggedByName":"giancarloa","milestone":"","number":2305,"state":"closed","title":"TypeScript 1.5 - Metadata Annotations / Interfaces","updatedAt":1433233125000},{"assignedTo":"","body":"Consider this code:\r\n\r\n```\r\nfunction fact( x: number, acc?: number ) {\r\n\tif (x <= 1) return acc;\r\n\telse return fact( x - 1, (acc||1)*x );\r\n}\r\n\r\nvar res = fact( 5 );\r\n```\r\n([same thing on playground](http://www.typescriptlang.org/Playground/#src=%0Afu","comments":1,"createdAt":1433212138000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4219105?v=3","loggedByName":"fsoikin","milestone":"","number":3336,"state":"closed","title":"Recursive functions are inferred to have return type `any`","updatedAt":1433221373000},{"assignedTo":"","body":"Consider this code:\r\n\r\n```typescript\r\nclass Super {\r\n  _view:Element;\r\n\r\n  constructor(view?:Element) {\r\n    this._view = view || document.createElement('div');\r\n  };\r\n}\r\n\r\nclass Inherits extends Super {\r\n  test = 1;\r\n  view:Element;\r\n\r\n  constructor","comments":10,"createdAt":1433012058000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1189265?v=3","loggedByName":"NekR","milestone":"","number":3311,"state":"open","title":"Cannot do anything before super()","updatedAt":1433220814000},{"assignedTo":"","body":"","comments":2,"createdAt":1433200194000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3331,"state":"closed","title":"perf: clean hostCache to avoid extending lifetime of script snapshots","updatedAt":1433206055000},{"assignedTo":"","body":"This is a proposal for allowing generics as type parameters.  It's currently possible to write specific examples of monads, but in order to write the interface that all monads satisfy, I propose writing\r\n```javascript\r\ninterface Monad<T<~>> {\r\n  map<","comments":11,"createdAt":1416422762000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/857592?v=3","loggedByName":"metaweta","milestone":"Community","number":1213,"state":"open","title":"Allow classes to be parametric in other parametric classes","updatedAt":1433199671000},{"assignedTo":"","body":"Adds an experimental flag and a warning for decorators.","comments":1,"createdAt":1433196150000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3330,"state":"closed","title":"Added experimentalDecorators flag","updatedAt":1433198099000},{"assignedTo":"","body":"When using tsconfig.json without explicit `files` key, it's not possible to use symbolic links to share files across projects in a single source tree, as they will be skipped by the `readDirectory` function.\r\n\r\nAs a simple example of such a setup, se","comments":3,"createdAt":1432909304000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11211653?v=3","loggedByName":"OleksandrChekhovskyi","milestone":"TypeScript 1.6","number":3301,"state":"closed","title":"Symbolic links are not followed when enumerating files","updatedAt":1433192772000},{"assignedTo":"","body":"This resolves issue #3301.\r\n\r\nAs it seems from discussion here https://github.com/Microsoft/TypeScript/commit/25e52a3975bfb7774323931bc1b5b7b438622dfa, the main concern with symlinks was a possibility of circular links. Instead of ignoring symlinks e","comments":10,"createdAt":1432909722000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11211653?v=3","loggedByName":"OleksandrChekhovskyi","milestone":"","number":3302,"state":"closed","title":"Follow symlinks when enumerating files in a directory","updatedAt":1433192003000},{"assignedTo":"","body":"With the introduction of WeakMap, the JS runtime now has [restrictions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap#Description) on where primitive types are disallowed. Is it possible (or planned) to have","comments":4,"createdAt":1433029202000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"","number":3315,"state":"closed","title":"Distinguish between primitive and object types in generic type constraints?","updatedAt":1433188827000},{"assignedTo":"","body":"I have been having issues with union types when using a function type as the second type in the union.\r\n\r\nAccording to the TypeScript 1.4 Language Specification: (3.4 Union Types, page 29)\r\n* A | B is equivalent to B | A\r\n\r\nThe following example comp","comments":2,"createdAt":1433187107000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/12286274?v=3","loggedByName":"joeskeen","milestone":"","number":3329,"state":"closed","title":"Function type error in union type","updatedAt":1433187414000},{"assignedTo":"","body":"I have an idea for how to make function overloads work:\r\n\r\n```typescript\r\nfunction foo(bar: string) {};\r\nfunction foo(bar: number) {};\r\n\r\nfoo('hi');\r\nfoo(42);\r\n```\r\nCompiles to:\r\n```js\r\nfunction foo__string(bar) {};\r\nfunction foo__number(bar) {};\r\nfu","comments":2,"createdAt":1433014674000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4495750?v=3","loggedByName":"Gaelan","milestone":"","number":3312,"state":"closed","title":"Implement Overloads by Generating Separate Functions","updatedAt":1433187006000},{"assignedTo":"jonathandturner","body":"Would it be possible to support different themes on the TypeScript website?\r\n\r\nThe below is rather hard to read, especially when switching back and forth between pages:\r\n![lightfontcolor](https://cloud.githubusercontent.com/assets/4054178/7898229/c1c","comments":0,"createdAt":1433003854000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4054178?v=3","loggedByName":"r2d2Proton","milestone":"","number":3310,"state":"open","title":"Support Multiple Themes on TypeScript Website","updatedAt":1433186813000},{"assignedTo":"","body":"In es6 one can define an arrow function with optional parens\r\n\r\n```js\r\n[1, 2, 3].map( v => v + 1)\r\n```\r\n\r\nhttps://babeljs.io/repl/#?experimental=true&evaluate=true&loose=true&spec=false&code=%5B1%2C2%2C3%5D.map(v%20%3D%3E%20v%2B%2B)%0A\r\n\r\nIn typescri","comments":8,"createdAt":1433107700000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/883126?v=3","loggedByName":"samccone","milestone":"","number":3323,"state":"closed","title":"Optional parens for single argument arrow functions","updatedAt":1433182814000},{"assignedTo":"","body":"I got the impression that an explicit cast just changes the type of what a function return (in order to avoid some type errors during compilation). No checks or casting code are emitted.\r\n\r\nI think that in some cases a casting could be used to force ","comments":1,"createdAt":1415892980000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8328164?v=3","loggedByName":"Gas3","milestone":"","number":1152,"state":"closed","title":"Castint object: parse a JSON string and casting the returned object","updatedAt":1433182269000},{"assignedTo":"ahejlsberg","body":"Currently the following is allowed:\r\n\r\n```typescript\r\nenum Color { red, green, blue }\r\n\r\nfunction fun(myColor) {\r\n\tif (myColor == Color.red) {\r\n\t\tconsole.log(\"awesome\");\r\n\t} else {\r\n\t\tconsole.log(\"bummer\");\r\n\t}\r\n}\r\n```\r\n\r\nThis compiles, but gives a w","comments":1,"createdAt":1432051194000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/171086?v=3","loggedByName":"joshuacc","milestone":"TypeScript 1.6","number":3217,"state":"closed","title":"Allow enums in local scopes","updatedAt":1433181049000},{"assignedTo":"","body":"It is impossible to define local interface in the function, but you can do it in the module.\r\n\r\n```typescript\r\nmodule A {\r\n  interface B{} // OK \r\n}\r\n\r\n(function X() {\r\n  interface Y { } // Error\r\n})();\r\n```","comments":2,"createdAt":1424942309000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"TypeScript 1.6","number":2148,"state":"closed","title":"Allow local interface definition","updatedAt":1433180848000},{"assignedTo":"","body":"Hello!\r\n\r\nI'm trying to build a module that the user (developer) will consume by either using:\r\n- Pure javascript: He'll have my ```class``` loaded in the global scope, for example.\r\n- Commonjs: He'll be able to call it using ```require``` - and mayb","comments":5,"createdAt":1433099979000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7040162?v=3","loggedByName":"ericmdantas","milestone":"","number":3322,"state":"closed","title":"[Question] Is there any way to transpile to vanilla js? No commonjs or adm.","updatedAt":1433179163000},{"assignedTo":"","body":"# The `object` primitive type\r\n\r\nThis proposal describe a new primitive type for typescript `object`. \r\n\r\n## Use case\r\n\r\nJavaScript core api contains some functions that takes `object` as parameter : \r\n \r\n* `Object.getPrototypeOf`\r\n* `Object.getOwnPr","comments":6,"createdAt":1422286931000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":1809,"state":"open","title":"Suggestion: The `object` primitive type","updatedAt":1433179010000},{"assignedTo":"","body":"This proposal is to use a ```stringIndexType``` on enums to declare which values are valid. \r\n\r\nWe also introduce 'set types' which allow to declare a smaller domain of valid values for string|number|boolean.\r\n```\r\n// Declare a set type with a minimu","comments":4,"createdAt":1431293312000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3105,"state":"open","title":"Proposal: Declaring an enum restricted by a number,string or boolean set","updatedAt":1433158598000},{"assignedTo":"","body":"This is less an issue but a request for advice. I try to change the way code for namespaces is emitted.\r\n\r\nCurrently the typescript code\r\n\r\n\tnamespace A{\r\n\t\tvar x = 42;\r\n\t}\r\n\t\r\nis  emitted as\r\n\t\r\n\tvar A;\r\n\t(function (A) {\r\n\t    var x = 42;\r\n\t})(A || ","comments":2,"createdAt":1433079073000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9371283?v=3","loggedByName":"urbanhop","milestone":"","number":3318,"state":"closed","title":"How can I debug compilation?","updatedAt":1433152923000},{"assignedTo":"paulvanbrenk","body":"I'm trying to install TypeScript 1.3 (TypeScript_Dev12.exe) for Visual Studio 2013 Community Edition.  The installation doesn't display/throw any exceptions.  When I enter Visual Studio there is no evidence that it has been installed (no templates, n","comments":27,"createdAt":1415974127000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2005032?v=3","loggedByName":"csuzw","milestone":"TypeScript 1.5","number":1162,"state":"closed","title":"Installing TypeScript 1.3 for Visual Studio 2013 Community on Windows 8.1 failure","updatedAt":1433151183000},{"assignedTo":"","body":"I have watched this PR #2673 and this #296 discussion for a while. But I somehow don't think it is the right approach to accept `JSX` directly into `TS`. There seem to be a demand of embedding HTML and even CSS in JS. Facebook might be the pioneer in","comments":47,"createdAt":1430761025000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3022,"state":"closed","title":"Proposal: embedded syntax block","updatedAt":1433134228000},{"assignedTo":"","body":"```typescript\r\nexport default\r\nenum Foo {\r\n  Bar, Baz\r\n}\r\n```\r\n\r\ncauses\r\n\r\n```\r\ntest.ts(2,1): error TS1109: Expression expected.\r\n```\r\n\r\nerror. (file is `test.ts`)\r\n\r\n```typescript\r\nexport\r\nenum Foo {\r\n  Bar, Baz\r\n}\r\n```\r\n\r\ncompiles successfully.","comments":1,"createdAt":1433085494000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1025246?v=3","loggedByName":"seanchas116","milestone":"","number":3320,"state":"closed","title":"`export default` enums causes error","updatedAt":1433104020000},{"assignedTo":"ahejlsberg","body":"```ts\r\nvar a27: {prop: number} | {prop: T27};\r\ntype T27 = typeof a27;\r\n\r\nvar b: T27;\r\nvar s: string = b;\r\n```","comments":1,"createdAt":1431541445000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/936705?v=3","loggedByName":"osdm","milestone":"TypeScript 1.6","number":3152,"state":"closed","title":"Stack overflow on master branch when creating a cycle between a type alias and a union type","updatedAt":1433088612000},{"assignedTo":"","body":"Why?\r\nI'm not giving reasons for this to happen:\r\n   1- Running on windows.\r\n   2- I've closed the tsconfig.json file.\r\n   2- The command is \"tsc\" under a folder that has the following tsconfig.json file:\r\n```\r\n{\r\n    \"files\": [\r\n        './js/**/*.t","comments":4,"createdAt":1428977034000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1425398?v=3","loggedByName":"Acaspita","milestone":"","number":2755,"state":"closed","title":"error TS6050: Unable to open file 'tsconfig.json'.","updatedAt":1433035439000},{"assignedTo":"","body":"This PR implements support for local class, interface, enum, and type alias declarations. For example:\r\n\r\n```typescript\r\nfunction f() {\r\n    enum E {\r\n        A, B, C\r\n    }\r\n    class C {\r\n        x: E;\r\n    }\r\n    interface I {\r\n        x: E;\r\n    ","comments":4,"createdAt":1432668548000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3266,"state":"closed","title":"Local types","updatedAt":1433033337000},{"assignedTo":"","body":"","comments":1,"createdAt":1432947568000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3308,"state":"closed","title":"Fix JSDoc error code for to avoid duplicate error code","updatedAt":1432948550000},{"assignedTo":"","body":"This covers part of the proposal in https://github.com/Microsoft/TypeScript/issues/2873. Namely, it handles checking types in a generator function, and inferring the return type of a generator function.\r\n\r\nSpecifically, here is what is implemented (c","comments":6,"createdAt":1430786839000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3031,"state":"closed","title":"Basic support for generators as iterators","updatedAt":1432946891000},{"assignedTo":"","body":"Fixes #3252.","comments":1,"createdAt":1432937953000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3306,"state":"closed","title":"Give 'arguments' an iterator","updatedAt":1432938785000},{"assignedTo":"","body":"I know many users of TypeScript are from a C# background and expect to write conditionals like in that language. However, for JavaScript developers the standard for formatting conditionals is different. When TypeScript converts conditionals to JavaSc","comments":5,"createdAt":1432855464000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1772622?v=3","loggedByName":"sourcebits-robertbiggs","milestone":"","number":3297,"state":"closed","title":"Formatting of conditionals not consistent with JavaScript conventions","updatedAt":1432924796000},{"assignedTo":"","body":"When adding JSDoc to an overloaded function, It seems that the JSDoc comment must immediately precede the actual function. When preceding the list of overloads, the JSDoc comment is dropped after compilation.\r\n\r\nExample:\r\n\r\nmodule app {\r\n\r\n    /**\r\n ","comments":3,"createdAt":1432846545000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11507384?v=3","loggedByName":"danmarshall","milestone":"","number":3294,"state":"closed","title":"JsDoc for overloads","updatedAt":1432871628000},{"assignedTo":"","body":"","comments":2,"createdAt":1432861096000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3299,"state":"closed","title":"Generators crlf","updatedAt":1432870514000},{"assignedTo":"","body":"Hi all, \r\n\r\nI was hoping that typescript could support interface extending generic types like the following example:\r\n\r\n    interface IHttpPromise<T extends {}> extends T{\r\n        $resolved: boolean;\r\n        $error: boolean;\r\n    }\r\n    \r\n    inter","comments":2,"createdAt":1425653516000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1227433?v=3","loggedByName":"andreasbotsikas","milestone":"","number":2225,"state":"open","title":"Suggestion: Interface extend generic type","updatedAt":1432865729000},{"assignedTo":"vladima","body":"# What works\r\nUsing momentjs as an example. Note the following *compiles* and *runs* fine if `module:commonjs`\r\n\r\n```ts\r\nimport * as _ from 'lodash';\r\n```\r\n# Whats broken\r\nWith `module:system`, \r\n\r\nthe following compiles fine *but fails at runtime*: ","comments":4,"createdAt":1431410310000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"TypeScript 1.6","number":3125,"state":"closed","title":"SystemJS semantics for commonjs libraries failing","updatedAt":1432858753000},{"assignedTo":"","body":"```ts\r\ntype undefined = string;\r\nvar x: undefined; // Error, cannot find name 'undefined'\r\n```\r\nExpected: Type alias should be an error, or the type annotation should work","comments":0,"createdAt":1431104027000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"Community","number":3087,"state":"open","title":"Type alias named `undefined` is allowed, but doesn't work","updatedAt":1432854938000},{"assignedTo":"","body":"```ts\r\nclass A {\r\n    foo(x: A): boolean {throw new Error;}\r\n}\r\nclass B extends A {\r\n    value: number;\r\n    foo(x:A) {\r\n        return x instanceof B && this.value === x.value;\r\n    }\r\n}\r\n```\r\nError:(7, 51) TS2339: Property 'value' does not exist on","comments":1,"createdAt":1431454540000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2237165?v=3","loggedByName":"JonathanMEdwards","milestone":"","number":3132,"state":"closed","title":"Type guarding broken in overriding method","updatedAt":1432854464000},{"assignedTo":"yuit","body":"Hi,\r\n\r\nIn the code below, I'm attempting to refer to the `foo` module, but the compiler issues an error:\r\n\r\n```typescript\r\ndeclare module foo {\r\n\t\r\n\tinterface Bar {\r\n\t\t\r\n\t}\r\n}\r\n\r\n// Error: Block-scoped variable 'foo' used before its declaration.\r\nlet","comments":2,"createdAt":1431627599000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.6","number":3168,"state":"open","title":"Disambiguating between module and variable when using `let`","updatedAt":1432851668000},{"assignedTo":"","body":"When using a tsconfig file with no `files` property all declaration files under node_modules are currently pulled in. This is especially problematic if typescript itself resides under node_modules since you wind up with duplicate identifiers from `li","comments":5,"createdAt":1432783385000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/196944?v=3","loggedByName":"jbrantly","milestone":"","number":3289,"state":"open","title":"Better default experience when using a tsconfig file with no \"files\" property.","updatedAt":1432850808000},{"assignedTo":"","body":"These are the same code changes as in https://github.com/Microsoft/TypeScript/pull/2646.  However, this only contains the changes necessary for parsing, and none of the binding/checking changes.\r\n\r\nThose will be coming in later once we agree on an ov","comments":2,"createdAt":1432833371000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3291,"state":"closed","title":"Parsing support for jsDocComments.","updatedAt":1432849934000},{"assignedTo":"","body":"","comments":0,"createdAt":1432839210000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3292,"state":"closed","title":"Add a couple of tests for jsdoccomments.","updatedAt":1432849571000},{"assignedTo":"","body":"We are seeing this issue mentioned on [codeplex workitem 2281](https://typescript.codeplex.com/workitem/2281). I'm pulling it forward to GitHub since it is still an issue for us. We are using TypeScript 1.4.\r\n\r\nWe get the emit errors on *.js.map file","comments":1,"createdAt":1431359492000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6050885?v=3","loggedByName":"Bebo2345","milestone":"","number":3114,"state":"closed","title":"Periodic build emit errors when concurrently compiling projects to a single bin folder","updatedAt":1432844511000},{"assignedTo":"","body":"Try writing a getOccurrences test for a keyword in a syntactically invalid construct; for instance:\r\n\r\n```TypeScript\r\nswitch (100) {\r\n    /*1*/continue;\r\n}\r\n```\r\n\r\nTry to verify that the occurrence count is 0.\r\n\r\nExpected: Test passes.\r\nActual:\r\n```\r","comments":2,"createdAt":1428481397000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2667,"state":"closed","title":"fourslash-server tests can't handle negative tests","updatedAt":1432844414000},{"assignedTo":"","body":"Adapted from #3275:\r\n\r\n```TypeScript\r\nclass GenericThingamabob<T> {\r\n    constructor(private entity: T) {}\r\n    add(item: T) { }\r\n}\r\n\r\nclass CouponInfo {\r\n    private couponTag: {};\r\n}\r\n\r\nclass Snake {\r\n    private snakeTag: {};\r\n}\r\n\r\nvar blah = new ","comments":0,"createdAt":1432710459000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":3276,"state":"open","title":"Diagnostic elaboration is not consistently reported in language service","updatedAt":1432844333000},{"assignedTo":"","body":"Paste code at http://www.typescriptlang.org/Playground\r\n```typescript\r\ninterface Number2Number\r\n{\r\n\t[id:number]:number;\r\n}\r\n\r\nvar y:Number2Number;\r\nvar z;\r\n\r\nvar x = (y = {});\r\nvar x2 = (z = 1);\r\nvar x3 = (z = {});\r\n\r\nx[1] = 0;\r\n```\r\nthe x's type is ","comments":10,"createdAt":1429582030000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/54468?v=3","loggedByName":"heroboy","milestone":"","number":2841,"state":"closed","title":"The type of assignment expression is not left value's type.","updatedAt":1432843934000},{"assignedTo":"","body":"Most module bundlers bundles everything into one file e.g.  `browserify`, `requirejs` etc. But if you are developing a very large scale application you might not find it suitable to have everything bundled into a single file. What you might want is t","comments":5,"createdAt":1431238965000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3100,"state":"closed","title":"Proposal: Async imports","updatedAt":1432843875000},{"assignedTo":"","body":"I would be nice to support that I can define which library .d.ts are used for my project in the tsconfig.json file. In this way I do not have to add /// refs in all the files in the project.","comments":6,"createdAt":1429712305000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/172399?v=3","loggedByName":"egamma","milestone":"","number":2865,"state":"closed","title":"Support to define the used .d.ts files in the tsconfig.json","updatedAt":1432843576000},{"assignedTo":"","body":"E.g. when running `tsc @TSCOptions.txt`, it would be cool if there was a way to include comments in the options file since they can become very long. For instance:\r\n\r\n    --sourcemap\r\n    -t ES5                 # ECMAscript 5\r\n    -d                 ","comments":5,"createdAt":1430249505000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4859660?v=3","loggedByName":"JoshMcCullough","milestone":"","number":2945,"state":"open","title":"Allow comments in options file?","updatedAt":1432843475000},{"assignedTo":"","body":"Hello,\r\n\r\nWhen I start a new .ts file and do;\r\n\r\n```\r\nvar name:string;\r\nname = \"foo\";\r\n```\r\n\r\nIt compiles as expected.\r\n\r\nThen I change name's type;\r\n\r\n```\r\nvar name:string[];\r\nname = [\"foo\",\"bar\",\"baz\"];\r\n```\r\n\r\nCompiler complains thus;\r\n\r\n> test.ts","comments":2,"createdAt":1432839782000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4752656?v=3","loggedByName":"Norm-","milestone":"","number":3293,"state":"closed","title":"Problem with type inference. Caching?","updatedAt":1432840531000},{"assignedTo":"","body":"After update the typescript compiler from version 1.4.1 to 1.5.0 beta, the source code included in my project became to make error log such as 'Map is not found'.\r\nThus, I researched this problem, and I reached an conclusion. The lib.d.ts became not ","comments":2,"createdAt":1432803179000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6434708?v=3","loggedByName":"LimeStreem","milestone":"","number":3290,"state":"closed","title":"Map,Set ... in ES5 target","updatedAt":1432835357000},{"assignedTo":"","body":"(Open a new PR that sorts the old dom files first for better diff)\r\n\r\nThe IE team started to issue new specs in the format of XML files instead of webidl files for upcoming API changes. The new dom.generated.d.ts and webworker.d.ts are generated from","comments":8,"createdAt":1428888197000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":2739,"state":"closed","title":"Updated dom related reference files according to new IE spec","updatedAt":1432834756000},{"assignedTo":"","body":"It would be useful to have a class diagram tool for typescript classes where i could drag multiple classes and create a visual overview of the methods and properties for each.  \r\n\r\nIt would also be useful if the editor would show dependency arrows be","comments":7,"createdAt":1418568584000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/438304?v=3","loggedByName":"technicalmedia","milestone":"","number":1479,"state":"open","title":"typescript class diagram editor","updatedAt":1432830261000},{"assignedTo":"","body":"Please see following:\r\n\r\n```\r\nclass A {\r\n\tname: String = 'test A';\r\n\tconstructor() {\r\n\t\tconsole.log(this.name);\r\n\t} \r\n}\r\n\r\nclass B extends A {\r\n\tname: String = 'test B'\r\n}\r\n\r\nnew B(); // 'test A'\r\n```\r\n\r\nIt will return 'test A', but 'test B' is more ","comments":1,"createdAt":1432745329000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/742167?v=3","loggedByName":"alexfluger","milestone":"","number":3280,"state":"closed","title":"Inheritance and property default value","updatedAt":1432756892000},{"assignedTo":"mhegazy","body":"I'm currently working on converting our product at work to use Typescript 1.4. One Javascript feature we use quite extensively is the possibility to make instances of Intl.NumberFormat and Intl.DateTimeFormat objects in the Intl namespace based on a ","comments":5,"createdAt":1422978761000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1041049?v=3","loggedByName":"kivle","milestone":"TypeScript 1.6","number":1911,"state":"closed","title":"Instances of Intl.NumberFormat and Intl.DateTimeFormat does not expose the format() function","updatedAt":1432751788000},{"assignedTo":"","body":"they were incorrectly producing a Collator","comments":6,"createdAt":1432747619000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/24711?v=3","loggedByName":"bavardage","milestone":"","number":3281,"state":"closed","title":"fix constructors for DateTimeFormat, NumberFormat","updatedAt":1432751764000},{"assignedTo":"","body":"consider the following class.\r\n```\r\nclass GenericPractice<T>{\r\n    private entity: T;\r\n    constructor(entity: T) {\r\n        this.entity = entity;\r\n    }\r\n\r\n    public add(item: T): string {\r\n        return item.toString();\r\n    }\r\n\r\n}\r\nclass CouponI","comments":2,"createdAt":1432704431000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Canonical","name":"Canonical","color":"000000"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8835114?v=3","loggedByName":"Paul-Lo","milestone":"","number":3275,"state":"closed","title":"is this a Generic bug?","updatedAt":1432745769000},{"assignedTo":"","body":"I have this situation:\r\n\r\nFile /com/a/A.ts\r\n```javascript\r\n/// <reference path='../b/B.ts' />\r\nmodule com.a {\r\n    import B = com.b.B;\r\n    \r\n    export class A {\r\n        constructor() {             \r\n        }\r\n        \r\n        test() { \r\n        ","comments":4,"createdAt":1431958863000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2906197?v=3","loggedByName":"pofuk","milestone":"","number":3200,"state":"open","title":"Error when modules depend on each other","updatedAt":1432738174000},{"assignedTo":"","body":"I found that my comments in interface is stripped out even I use -c option. It makes some issue when I use jsdoc to generate the document from the generated js file. All the interface doc is missing.","comments":3,"createdAt":1432651472000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6345392?v=3","loggedByName":"bidumicrosoft","milestone":"","number":3265,"state":"closed","title":"Keep comments in the interface even there is no code generated","updatedAt":1432686732000},{"assignedTo":"ahejlsberg","body":"Courtesy of @danquirk \r\n\r\n4.19 Contextual Typing says:\r\n \r\n> Contextual typing of an expression e by a type T proceeds as follows:\r\nÂ·         ...\r\nÂ·         If e is an expression of a function type that contains exactly one generic call signature and","comments":0,"createdAt":1409086871000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":536,"state":"open","title":"Can contextual typing apply to merged declarations?","updatedAt":1432685828000},{"assignedTo":"ahejlsberg","body":"```TypeScript\r\nclass C {\r\n     constructor(public x?, public y = 1) { }\r\n}\r\n```\r\n \r\nThe spec does not clearly explain whether x and y are optional properties of C. The old compiler treats them as required properties, but optional parameters. I am not","comments":0,"createdAt":1409087445000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":541,"state":"open","title":"[spec] Parameter properties with question marks and initializers are not clearly specified","updatedAt":1432685828000},{"assignedTo":"ahejlsberg","body":"Courtesy of @danquirk \r\n\r\nThe sections on modules and module merging are very subtle, and appear ambiguous.  For example, module declaration merging has this to say:\r\n \r\n\r\n> Internal modules are âopen-endedâ and internal module declarations with the ","comments":0,"createdAt":1409086773000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":535,"state":"open","title":"Clarify wording of declaration merging as it relates to parent modules and where exactly the merged declaration is visible","updatedAt":1432685828000},{"assignedTo":"ahejlsberg","body":"Section 3.8.1 should be augmented to say that a string literal type should have as its apparent type the interface String.\r\n \r\nThis is to enable things like:\r\n ```TypeScript\r\ndeclare function f(x: \"str\");\r\ndeclare function f(x: String);\r\n ```\r\n\r\nThe ","comments":0,"createdAt":1409087585000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":543,"state":"open","title":"[spec] Apparent type of string literal type should be global interface String","updatedAt":1432685828000},{"assignedTo":"ahejlsberg","body":"Courtsey of @CyrusNajmabadi \r\n\r\nThe spec currently lists this in the grammar productions for an Enum:\r\n \r\n> ConstantEnumMemberSection:\r\n  PropertyName   =   NumericLiteral\r\n  PropertyName   =   NumericLiteral   ,   ConstantEnumMembers\r\n \r\nThis is sli","comments":1,"createdAt":1409087166000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":538,"state":"open","title":"Specification for Enum's needs to use 'SignedInteger' in constant productions, not NumericLiteral","updatedAt":1432685828000},{"assignedTo":"ahejlsberg","body":"Courtesy of @danquirk \r\n\r\n```\r\ninterface N {\r\n     y: number;\r\n     x: typeof y; // error (y is not a value)\r\n}\r\n```\r\n\r\nSection 2.4 Scopes says:\r\n \r\n>Note that class and **enum** members are never directly in scopeâthey can only be accessed by applyi","comments":0,"createdAt":1409087029000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":537,"state":"open","title":"Update spec for scoping of interface member names","updatedAt":1432685828000},{"assignedTo":"ahejlsberg","body":"An exported member depends on a (possibly empty) set of named types (section 3.5). Those named types must be at least as accessible as the exported member, or otherwise an error occurs.\r\n\r\nnamed types include classes, interfaces and enums. However th","comments":0,"createdAt":1409087286000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":539,"state":"open","title":"[spec] Update accesibility bits in language spec","updatedAt":1432685828000},{"assignedTo":"ahejlsberg","body":"In some cases, we do not emit a value import because it is never referenced in value position, and a reference can never be added in another .js file. Spec this behavior","comments":0,"createdAt":1409087315000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":540,"state":"open","title":"[spec] Spec elision of value imports in emitted code","updatedAt":1432685828000},{"assignedTo":"ahejlsberg","body":"Contextual typing of destructuring parameters seems to be an obvious idea, but I could not find any mention of this in 1.5 spec draft in master branch. Just wanted to know if you have plans to do it or not, so we could support it in our external tool","comments":2,"createdAt":1423618754000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/936705?v=3","loggedByName":"osdm","milestone":"TypeScript 1.6","number":2006,"state":"open","title":"Contextual typing of destructuring parameters is not described in the spec","updatedAt":1432685819000},{"assignedTo":"ahejlsberg","body":"Currently the compiler support parsing and emitting classExpression, we should update our spec to reflect this update","comments":1,"createdAt":1427921712000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.6","number":2582,"state":"open","title":"Update Spec for ClassExpression","updatedAt":1432685819000},{"assignedTo":"","body":"In 1.5 alpha (VS 2013):\r\n\r\n```typescript\r\nfunction listAPIFiles(path: string): string[] {/*press enter here*/}\r\n```\r\n\r\nResults in:\r\n\r\n```typescript\r\nfunction listAPIFiles(path: string): string[]{\r\n}\r\n```\r\n","comments":2,"createdAt":1428301344000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"TypeScript 1.6","number":2628,"state":"closed","title":"Missing space after formatting array return type.","updatedAt":1432685769000},{"assignedTo":"","body":"A **static constructor** is a function that is run only once when the class is loaded. It can be used to initialize static class members and maybe as entry point to the application.\r\n\r\nSuggested syntax is:\r\n\r\n```typescript\r\nclass MyClass {\r\n\tstatic i","comments":18,"createdAt":1406415664000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/767147?v=3","loggedByName":"omidkrad","milestone":"","number":265,"state":"closed","title":"Suggestion: static constructors","updatedAt":1432685055000},{"assignedTo":"","body":"I've noticed an easy area to make a mistake in the language because of this [SO question](http://stackoverflow.com/q/30467906/188246). Take this example:\r\n\r\n```typescript\r\nclass MyClass {\r\n    @SetDefaultValue\r\n    filePath: string;\r\n}\r\n\r\nvar c = new","comments":2,"createdAt":1432682484000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1609021?v=3","loggedByName":"dsherret","milestone":"","number":3270,"state":"closed","title":"Optional argument decorator parentheses","updatedAt":1432683133000},{"assignedTo":"","body":"We do some math stuff, and I've found that I'd like to provide more information about types to the other programmers by using the `type` keyword to rename/alias commonly used expressions:\r\nE.g.\r\n``` Typescript\r\ntype Vec2 = Array<number>|Float32Array;","comments":1,"createdAt":1430191748000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3665998?v=3","loggedByName":"Griffork","milestone":"","number":2939,"state":"open","title":"Intellisense uses type's value instead of name.","updatedAt":1432678633000},{"assignedTo":"","body":"For instance, in the following example where we declare the return type as an array type, we go from\r\n\r\n```TypeScript\r\nfunction foo(): blah[] {/**/\r\n```\r\n\r\nto\r\n\r\n```TypeScript\r\nfunction foo(): blah[]{\r\n/**/\r\n```\r\n\r\nNotice the lack of whitespace betwe","comments":2,"createdAt":1432675008000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3269,"state":"closed","title":"Whitespace for open curly ('{') after close bracket (']') is removed in function return types","updatedAt":1432676295000},{"assignedTo":"","body":"If compiling external modules, with --declaration, each module gets its own declaration file. this is not useful for library authors, who probably want to hand off a single .d.ts file for all their modules. the only way to do this now, is to either h","comments":27,"createdAt":1427836259000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2568,"state":"open","title":"Generate a single declaration file for external modules","updatedAt":1432670518000},{"assignedTo":"DanielRosenwasser","body":"**`fileA.ts`**\r\n```TypeScript\r\nexport function __foo() {\r\n}\r\n```\r\n\r\n**`fileB.ts`**\r\n```TypeScript\r\nimport { __foo/**/ as bar } from \"./fileA\";\r\n\r\nbar();\r\n```\r\n\r\nTry renaming `__foo` at the marker. This won't work.","comments":0,"createdAt":1432669372000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3268,"state":"open","title":"Cannot rename LHS of import specifier when its name is prefixed with two underscores","updatedAt":1432670377000},{"assignedTo":"CyrusNajmabadi","body":"In VS 2013 with the TypeScript 1.4.0 plugin, it is possible to edit a TS file and to refresh the browser with the updated JS file while the code is running. With VS 2015 CTP 6 this is not possible.\r\n\r\n![image](https://cloud.githubusercontent.com/asse","comments":2,"createdAt":1429114448000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5596378?v=3","loggedByName":"rdesimone","milestone":"TypeScript 1.5.3","number":2777,"state":"closed","title":"Edit & Continue not working in Visual Studio 2015 CTP6","updatedAt":1432666810000},{"assignedTo":"","body":"One of our biggest pain points in implementing typescript has been the fact that TypeScript redefines `this` to point to the class for lambdas. This is especially complicated when interacting with external libraries that require callback functions. N","comments":3,"createdAt":1432648493000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4964780?v=3","loggedByName":"SonofNun15","milestone":"","number":3264,"state":"closed","title":"Use `self` instead of `this` for compatibility reasons","updatedAt":1432656200000},{"assignedTo":"sheetalkamat","body":"Not even sure how this has happened, but I was able to use Visual Studio and debug with Internet Explorer 11 for the longest time without any issues. Then, one day the breakpoints started not to load. After emptying the cache in Internet Explorer, th","comments":28,"createdAt":1409208867000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7259610?v=3","loggedByName":"Zenoware","milestone":"TypeScript 1.6","number":556,"state":"closed","title":"Can no longer debug typescript files in Visual Studio 2013 Update 3","updatedAt":1432596661000},{"assignedTo":"sheetalkamat","body":"Per the newest spec in #1878:\r\n\r\n5.1.1\r\n_When a variable declaration has a type annotation, it is an error for that type annotation to use the typeof operator to reference the variable being declared._\r\n\r\nWe haven't implemented this check though, sho","comments":1,"createdAt":1422926600000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.6","number":1902,"state":"closed","title":"No error for variable initializer that references itself with typeof","updatedAt":1432596475000},{"assignedTo":"","body":"Add a third variant `umd` ([Universal Module Definition](https://github.com/umdjs/umd)) in module flag on compiler.\r\n\r\n    tsc --module umd\r\n\r\nThis way you can reuse your JS code in both Nodejs and Browser without needing to compile twice (amd and co","comments":15,"createdAt":1423937382000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/102052?v=3","loggedByName":"codler","milestone":"","number":2036,"state":"closed","title":"Suggestion: Module code generation UMD","updatedAt":1432591623000},{"assignedTo":"","body":"implement #2869\r\ndoes this repository not have tests for command line options?\r\nI was create a sample file on gist. https://gist.github.com/vvakame/1d10fbef9a19fc8c05f7\r\n\r\nI think ` -p DIRECTORY, --project DIRECTORY  Compile the project in the given ","comments":7,"createdAt":1431274227000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"","number":3102,"state":"closed","title":"Change project option resolution","updatedAt":1432490221000},{"assignedTo":"","body":"```javascript\r\ndeclare module wx {\r\n    interface IComponentViewModelDescriptor {\r\n        (params: any): any;\r\n        require?: string;\r\n        resolve?: string;\r\n        instance?: any;\r\n    }\r\n    interface IComponentTemplateDescriptor {\r\n      ","comments":7,"createdAt":1432108889000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/51688?v=3","loggedByName":"oliverw","milestone":"","number":3234,"state":"closed","title":"Compilation error","updatedAt":1432375099000},{"assignedTo":"","body":"In Visual Studio 2015, the feature *\"format line after ENTER\"* is always active even if it's un-flagged in the Options->Text Editor->TypeScript->Formatting->General. That is, lines are always formatted after I press `Enter`. \r\n\r\nI tried refreshing th","comments":2,"createdAt":1432310869000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2598443?v=3","loggedByName":"nippur72","milestone":"TypeScript 1.5.3","number":3255,"state":"closed","title":"VS2015 can't turn off \"format line after ENTER\"","updatedAt":1432335075000},{"assignedTo":"","body":"I realize I might get sent to nit-pickers jail for this ... but:\r\n\r\nRight now the following code:\r\n\r\n```\r\nfunction f(...a: any[]) { }\r\n```\r\nGets outputted like:\r\n```\r\nfunction f() {\r\n    var a = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) ","comments":10,"createdAt":1432329862000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2212259?v=3","loggedByName":"Back-io","milestone":"","number":3259,"state":"closed","title":"Rest parameter code change suggestion","updatedAt":1432334755000},{"assignedTo":"","body":"Okay, before you completely discount this idea, I just want to say that I think could be really useful.   For instance, Python has doc-tests, which are light-weight and much-constrained unit-tests.   I've also used compiler preprocessing to simulate ","comments":2,"createdAt":1432325518000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2384797?v=3","loggedByName":"kasajian","milestone":"","number":3258,"state":"closed","title":"Embed unit testing in production code","updatedAt":1432327914000},{"assignedTo":"","body":"When I create a subclass and export it to ES6, then try to run it through Babel, it complains that super() has to be called before this is referenced. There is indeed no call to super in the outputted ES6 code. A quick google search turned up this do","comments":4,"createdAt":1432321032000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1368543?v=3","loggedByName":"Ixonal","milestone":"","number":3257,"state":"closed","title":"Inheriting class not calling super() when targeting ES6","updatedAt":1432326913000},{"assignedTo":"","body":"It would be great if the TypeScript repo could follow the example of the [CoreCLR](https://gitter.im/dotnet/coreclr) and [CoreFx](https://gitter.im/dotnet/corefx) guys and create a Gitter room for general chatter.","comments":3,"createdAt":1432299650000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/178242?v=3","loggedByName":"markrendle","milestone":"","number":3254,"state":"closed","title":"Please get on Gitter","updatedAt":1432323759000},{"assignedTo":"","body":"I've implemented a downlevel emit for block scoped variables that are used inside callbacks in a loop.\r\nExample:\r\n```typescript\r\nfor (let i = 0; i < 9; i++) {\r\n  setTimeout(i, () => console.log(i));\r\n}\r\n```\r\nIs emitted as\r\n```javascript\r\nvar _a = fun","comments":1,"createdAt":1432282100000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"","number":3253,"state":"closed","title":"Downlevel emit for let/const inside loops","updatedAt":1432321062000},{"assignedTo":"","body":"### Microsoft/TypeScript now has a Chat Room on Gitter\n\n@danquirk has just created a chat room. You can visit it here: [https://gitter.im/Microsoft/TypeScript](https://gitter.im/Microsoft/TypeScript?utm_source=badge&utm_medium=badge&utm_campaign=pr-b","comments":1,"createdAt":1432319208000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8518239?v=3","loggedByName":"gitter-badger","milestone":"","number":3256,"state":"closed","title":"Add a Gitter chat badge to README.md","updatedAt":1432319618000},{"assignedTo":"","body":"It would be nice if the new sintax `for (let value of values)` works with iterators; ie:\r\n``` typescript\r\nfor (let value of myMap.values()) {\r\n    doSomething(value);\r\n}\r\n```\r\nRelated with #2695 .","comments":2,"createdAt":1431597554000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4521712?v=3","loggedByName":"SergioMorchon","milestone":"","number":3164,"state":"closed","title":"for..of with iterators","updatedAt":1432318157000},{"assignedTo":"","body":"After experiencing a problem caused by using [Element.classList](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList#Browser_compatibility) in some TypeScript code that was intended to run on IE8, I'm thinking it would be nice to inclu","comments":2,"createdAt":1432263133000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/384747?v=3","loggedByName":"flcdrg","milestone":"","number":3250,"state":"open","title":"Include browser compatibility notes in lib.d.ts comments","updatedAt":1432317969000},{"assignedTo":"billti","body":"Now `npm install typescript` installs v1.5.0-alpha, but most users need stable v1.4.x.\r\nBecause v1.5 has breaking changes and is not stable yet.\r\n\r\nnpm provides dist-tag command for this purpose.\r\n\r\n> [dist-tag | npm Documentation](https://docs.npmjs","comments":14,"createdAt":1428395467000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/26476?v=3","loggedByName":"teppeis","milestone":"TypeScript 1.5","number":2650,"state":"closed","title":"Suggestion: Use npm dist-tag to install v1.4 stable by default instead of v1.5 alpha","updatedAt":1432314297000},{"assignedTo":"mhegazy","body":"Building a project using --target es6 results in error:\r\nFile 'C:\\program files(x86)/Microsoft SDKs/TypeScript/1.4/lib.es6.d.ts' not found","comments":2,"createdAt":1421429954000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.4.2","number":1696,"state":"closed","title":"Building with --target es6 in VS with release 1.4 fails","updatedAt":1432308609000},{"assignedTo":"","body":"Fixes #3237.","comments":3,"createdAt":1432164794000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3239,"state":"closed","title":"Detect cycles during type instantiation","updatedAt":1432272815000},{"assignedTo":"","body":"Good progress is made on supporting the case of packages that carry their own typings in #2338.\r\n\r\nThat proposal doesn't currently deal with modules that do not carry their own typings, a.k.a. all modules that need typings from DefinitelyTyped.\r\n\r\nTh","comments":20,"createdAt":1429566893000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1025628?v=3","loggedByName":"poelstra","milestone":"","number":2839,"state":"open","title":"External module resolution for non-Typescript packages","updatedAt":1432266415000},{"assignedTo":"vladima","body":"The compiler does not do emit based on semantic information in most cases. this allows us to provide an api for transpiling a module that does not require typecheck or full program information. just single file syntactic transformation. \r\nThis can be","comments":6,"createdAt":1427333357000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5.3","number":2499,"state":"closed","title":"Support single-module transpilation mode","updatedAt":1432253391000},{"assignedTo":"","body":"After updated TS to 1.5-beta, my code failed to compile. My code uses a few ES6 APIs such as `Set`, but the `--target` is still ES5. It seems TS 1.5-beta removed those ES6 APIs from `lib.d.ts` when targeting ES5. I think this is a bad change.\r\n\r\nES6+","comments":15,"createdAt":1432031163000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1684137?v=3","loggedByName":"duanyao","milestone":"","number":3211,"state":"closed","title":"Make ES6+ APIs available when lower target version is specified for tsc","updatedAt":1432252900000},{"assignedTo":"","body":"Currently, this *TypeScript* code\r\n\r\n```js\r\n\r\nclass PreserveLineNumbers {\r\n\r\n    myMethod()  {\r\n\r\n    }\r\n\r\n}\r\n```\r\n\r\nis transpiled to this *JavaScript* code\r\n\r\n```js\r\nvar PreserveLineNumbers = (function () {\r\n    function PreserveLineNumbers() {\r\n   ","comments":3,"createdAt":1431474563000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9773803?v=3","loggedByName":"streamich","milestone":"","number":3142,"state":"closed","title":"Suggestion: Preserve line numbers","updatedAt":1432250012000},{"assignedTo":"ahejlsberg","body":"```ts\r\nimport foo = A.bar;\r\n\r\nnamespace A {\r\n    export namespace bar { } // completion is fine if this namespace is removed\r\n\r\n    export import bar = baz.boo;\r\n\r\n    export namespace baz {\r\n        export var boo = 1;\r\n    }\r\n}\r\nfoo./*no number com","comments":3,"createdAt":1431556346000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":3158,"state":"open","title":"Clarify spec regarding what symbol an alias refers to","updatedAt":1432249811000},{"assignedTo":"","body":"To completely fix #1587 TypeScript should also support:\r\n\r\n```typescript\r\nfunction repro(message: Object | Object[]) {\r\n    if (message instanceof Array) {\r\n        message = message.filter;  // error\r\n    }\r\n}\r\n```\r\n\r\nCurrently it results in `Proper","comments":7,"createdAt":1431392505000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/211513?v=3","loggedByName":"yjbanov","milestone":"","number":3123,"state":"closed","title":"RHS expression type in assignment incorrectly inferred","updatedAt":1432249307000},{"assignedTo":"ahejlsberg","body":"```typescript\r\nfunction foo<T>(x: T) {\r\n    var y: {\r\n        y1: T;\r\n        y2: typeof y\r\n    };\r\n    return y;\r\n}\r\n\r\n\r\nfunction bar<T>(x: T) {\r\n    var y: {\r\n        y1: T;\r\n        y2: typeof y;\r\n    }\r\n    return y;\r\n}\r\n\r\nvar a = foo<string>(\"he","comments":2,"createdAt":1432149964000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.6","number":3237,"state":"closed","title":"Stack Overflow with InstatiateType","updatedAt":1432246438000},{"assignedTo":"","body":"We need to split the \"Duplicate identifier\" error in to a suite of more detailed errors about various types of illegal merges. \"Duplicate identifier\" is too general. Some examples of cases that warrant their own message:\r\n \r\n- Would be a legal merge ","comments":2,"createdAt":1409085370000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":529,"state":"open","title":"Improve error messages for duplicate identifiers","updatedAt":1432246239000},{"assignedTo":"DanielRosenwasser","body":"... to prevent tests with broken emit getting checked in, like the original one in https://github.com/Microsoft/TypeScript/commit/55af7b3#diff-5a553969b7d75b3baab89d60e61bcd5b.\r\n\r\nRunning the output will require too much effort in the test as well as","comments":2,"createdAt":1429297553000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.6","number":2818,"state":"open","title":"Add a step to verify the JS emitted by the tests is valid","updatedAt":1432240537000},{"assignedTo":"rbuckton","body":"BROKEN: `constructor(@Parent() public graph: Graph)`\r\nBROKEN: `constructor(public @Parent() graph: Graph)`\r\nWORKS: `constructor(@Parent() graph: Graph)`, but missing `public` keyword\r\n","comments":9,"createdAt":1431988583000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/111951?v=3","loggedByName":"mhevery","milestone":"TypeScript 1.5.3","number":3206,"state":"closed","title":"Better error for decorators on parameter properties","updatedAt":1432240461000},{"assignedTo":"","body":"It looks like WithStatement and WhileStatement have the same structure, so this didn't give an error.","comments":1,"createdAt":1432238703000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"","number":3248,"state":"closed","title":"emitWithStatement should emit a WithStatement","updatedAt":1432239459000},{"assignedTo":"","body":"Hello,\r\n\r\nI am having the same issue, which had lot of activity on  codeplex.  \r\nhttps://typescript.codeplex.com/workitem/627\r\n\r\n```ts\r\nclass A extends B {\r\n  // ...\r\n}\r\n\r\nclass B {\r\n  // ...\r\n}\r\n```\r\n\r\nCompiles without error but obviously fails at r","comments":2,"createdAt":1411697053000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1966521?v=3","loggedByName":"bsr203","milestone":"","number":754,"state":"open","title":"Report an error if a class is inherited from before it is defined","updatedAt":1432238986000},{"assignedTo":"","body":"When a tsconfig.json file is used to target a directory instead of an explicit file list, inherited classes aren't guaranteed to be ordered correctly unless they contain /// <reference tags. It would be nice if directory based compilation could work ","comments":4,"createdAt":1431218353000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1900643?v=3","loggedByName":"bmingles","milestone":"","number":3098,"state":"closed","title":"Directory Compilation based on tsconfig.json to Properly Order Inherited Classes","updatedAt":1432238806000},{"assignedTo":"DanielRosenwasser","body":"If I have code that looks something like this: \r\n\r\n```typescript\r\n/// <reference path=\"nounreachable.test.ts\" />\r\n\r\nmodule S {\r\n  var template = '';\r\n}\r\n```\r\n\r\nand I try to do getDocumentHighlights on \"template\" in just that one file, I get a \"Maximu","comments":14,"createdAt":1430760541000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2463526?v=3","loggedByName":"gscshoyru","milestone":"","number":3021,"state":"closed","title":"Getting \"Maximum call stack size exceeded\" when using \"getDocumentHighlights\" with reference paths and modules in 1.5.0-beta","updatedAt":1432233044000},{"assignedTo":"","body":"car.ts:\r\n```\r\nexport class Car {\r\n\tpublic beep(): void {}\r\n}\r\n```\r\n\r\ntruck.ts:\r\n```\r\nimport Car = require(\"./car\");\r\nclass Truck extends Car.Car {}\r\nnew Truck().beep();\r\n```\r\n\r\n**I expected ./car to be defined in both of these scenarios but it's elid","comments":19,"createdAt":1431388256000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/74692?v=3","loggedByName":"breck7","milestone":"","number":3122,"state":"closed","title":"Compiling with --noResolve elides needed imports","updatedAt":1432231362000},{"assignedTo":"","body":"this works in older versions.\r\n\r\nwhen I have the following code in 1.5beta:\r\n\r\n```\r\nimport refs = require(\"../refs\");\r\nvar xlib = refs.xlib;\r\n\r\nexport class PjscBe extends xlib.ClassBase{}\r\n```\r\n\r\nI get the following error:\r\n``` 265  Cannot find name","comments":2,"createdAt":1432214964000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/814134?v=3","loggedByName":"jasonswearingen","milestone":"","number":3243,"state":"closed","title":"vs plugin, 1.5beta regression: can not extend from class in external import","updatedAt":1432230292000},{"assignedTo":"vladima","body":"Hi,\r\n\r\n**Version**: VS 2015 RC, TS 1.5 Beta, no modifications.\r\n\r\nI ran into this while editing a code file. I cannot remember the actual context, but there was nothing unusual. I believe this is the first time I've run into this particular problem.\r","comments":4,"createdAt":1431369129000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5.3","number":3115,"state":"closed","title":"VS 2015 `System.OutOfMemoryException` while editing","updatedAt":1432227883000},{"assignedTo":"JsonFreeman","body":"The constructor for an ES6 Set takes an optional iterable parameter (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) but the declaration in `lib.d.ts` doesn't include it\r\n\r\n```\r\ndeclare var Set: {\r\n    new <T>():","comments":13,"createdAt":1431013717000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4347752?v=3","loggedByName":"robianmcd","milestone":"","number":3069,"state":"closed","title":"Working with ES6 Sets in Typescript","updatedAt":1432223614000},{"assignedTo":"","body":"Some users want to use the built-in compilation of their IDE, but some want to use grunt or gulp. If you want to use grunt or gulp for compilation, you need to disable compilation in your IDE. Since a big team can use multiple IDEs, I think this shou","comments":20,"createdAt":1426185266000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"","number":2326,"state":"open","title":"Add no-compile option to tsconfig","updatedAt":1432167001000},{"assignedTo":"rbuckton","body":"```typescript\r\nclass A {\r\n    @(x => {\r\n        var a = 3;\r\n        document.writeln(a); // no error here, though it should be\r\n        return x; })\r\n    m() {\r\n\r\n    }\r\n}\r\n```","comments":1,"createdAt":1430408569000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.5.3","number":2971,"state":"closed","title":"No error highlighting for type compatibility inside a decorator lambda","updatedAt":1432160684000},{"assignedTo":"","body":"Fix issue in the parsing of tsConfig file, this was fixed in master before, but never ported.\r\n\r\nThe realizeDiagnosticS function already returns an array, no need to wrap again. The realizeDiagnostic (no S) function returns a single diagnostic.","comments":2,"createdAt":1432084111000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":3233,"state":"closed","title":"Fix issue in the parsing of tsConfig file","updatedAt":1432149968000},{"assignedTo":"","body":"","comments":5,"createdAt":1432077457000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3227,"state":"closed","title":"Fix for #2971, adds missing logic in checkFunctionExpressionBodies","updatedAt":1432142693000},{"assignedTo":"","body":"The early discussions about generics had this feature outlined, but it never made it into the final version for some reason. Meanwhile, it would be extremely helpful in some cases. The use case that it most dear to my heart is Knockout:\r\n\r\n```\r\ninter","comments":17,"createdAt":1406589199000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4219105?v=3","loggedByName":"fsoikin","milestone":"","number":285,"state":"open","title":"Allow type system to represent `this` in function inputs/outputs","updatedAt":1432131988000},{"assignedTo":"rbuckton","body":"// file a.ts\r\n```typescript\r\nexport var test = 'abc';\r\n```\r\n\r\n// file b.ts\r\n```typescript\r\nimport { test } from './a';\r\n\r\n/**\r\n * if we give handler type `() => boolean`, then it emits as expected.\r\n * seems union type doesn't work here, either.\r\n */","comments":1,"createdAt":1431317413000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"TypeScript 1.5.3","number":3108,"state":"closed","title":"Arguments in a function passing to decorators are ignored when counting module references for emitting.","updatedAt":1432084323000},{"assignedTo":"","body":"When dealing with interfaces, I am not able to define a method as static within the interface. Example:\r\n\r\n```ts\r\ninterface Foo{\r\n   static bar():void;\r\n}\r\n\r\nclass FooBar implements Foo{\r\n   static bar():void{\r\n      console.log(\"Foo bar\");\r\n   }\r\n}\r","comments":1,"createdAt":1432082778000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1396615?v=3","loggedByName":"fmsouza","milestone":"","number":3228,"state":"closed","title":"Cannot declare static method in interface","updatedAt":1432083921000},{"assignedTo":"","body":"I know the tsconfig.json file is small, but it's a distraction to have to go look up a copy-paste example while you're starting a new project in VSCode. And that makes the screencast not as cool :)\r\n\r\n`npm` and other javascripty tools have an init co","comments":4,"createdAt":1431058101000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/47395?v=3","loggedByName":"alexeagle","milestone":"Community","number":3079,"state":"open","title":"Suggestion: tsc init to generate tsconfig.json","updatedAt":1432082616000},{"assignedTo":"","body":"A require hook, when installed, will hook into the require-function, replace the current functionality, to make TypeScript compiler transpile files on-the-fly (through Node.js) when required.\r\n\r\nShould be configurable. \r\n\r\nBabel (formerly e6to5) has ","comments":1,"createdAt":1425670995000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/919580?v=3","loggedByName":"robertsundstrom","milestone":"","number":2232,"state":"open","title":"Enable devs to hook into \"require\" and extend module loading","updatedAt":1432081060000},{"assignedTo":"","body":"otherwise people will get test failures which are not immediately obvious","comments":15,"createdAt":1431472670000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":3139,"state":"closed","title":":memo: document autocrlf needs to be off","updatedAt":1432080971000},{"assignedTo":"","body":"Code for #2338. This is just for the node_modules resolution. Does everything for `node_modules` except for the `typings` stuff as I don't see the rational for that considering there is no way to have tsc send `.js` to one location and `.d.ts` to ano","comments":14,"createdAt":1431513753000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":3147,"state":"closed","title":"external modules resolve by node_modules and package.json-main","updatedAt":1432080777000},{"assignedTo":"billti","body":"![vs_main_thread](https://cloud.githubusercontent.com/assets/4499495/7681497/089ea55e-fd71-11e4-8532-0f2ced02d667.png)\r\n\r\nTyping in JS editor is sometimes very laggy. I took a snapshot using dotTrace Timeline, and it shows that some Visual Studio's a","comments":6,"createdAt":1431955359000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"","number":3199,"state":"open","title":"Visual Studio JS completion blocks main thread leading to typing delays","updatedAt":1432075453000},{"assignedTo":"","body":"","comments":4,"createdAt":1432012949000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3208,"state":"closed","title":"Update singleCompilation flag name to isolatedModules","updatedAt":1432069083000},{"assignedTo":"","body":"specifying the type and URL is deprecated:\r\n\r\nhttps://docs.npmjs.com/files/package.json#license\r\nhttp://npm1k.org/","comments":3,"createdAt":1432032416000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4533329?v=3","loggedByName":"pgilad","milestone":"","number":3212,"state":"closed","title":"update license attribute","updatedAt":1432068864000},{"assignedTo":"paulvanbrenk","body":"We have added two new module targets, umd and system, we need to expose both in:\r\n\r\n-  [x] Project properties in C#/VB project -- Dev12 \r\n-  [x] Project properties in C#/VB project -- Dev14\r\n-  [x] Project properties in JSProj project -- Dev12\r\n-  [x","comments":3,"createdAt":1430805521000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5.3","number":3033,"state":"closed","title":"Expose new module targets in Project properties and build targets","updatedAt":1432067492000},{"assignedTo":"","body":"","comments":0,"createdAt":1432059242000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3226,"state":"closed","title":"Port PR 3183 into release 1.5","updatedAt":1432061596000},{"assignedTo":"","body":"","comments":0,"createdAt":1432059085000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3225,"state":"closed","title":"Port PR 3131 into release 1.5","updatedAt":1432060968000},{"assignedTo":"","body":"","comments":0,"createdAt":1432058940000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3224,"state":"closed","title":"Port PR 3117 into release 1.5","updatedAt":1432060426000},{"assignedTo":"","body":"","comments":0,"createdAt":1432056767000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3223,"state":"closed","title":"Port PR 3109 into release 1.5","updatedAt":1432058626000},{"assignedTo":"","body":"","comments":0,"createdAt":1432056613000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3222,"state":"closed","title":"Port PR 3110 into release 1.5","updatedAt":1432058616000},{"assignedTo":"","body":"","comments":0,"createdAt":1432056372000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3221,"state":"closed","title":"Port PR 3144 to release 1.5","updatedAt":1432058601000},{"assignedTo":"","body":"","comments":2,"createdAt":1431552598000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3156,"state":"closed","title":"Adds tasks.json to easily use VSCode with TypeScript sources","updatedAt":1432058284000},{"assignedTo":"","body":"You could imagine that someone had the following:\r\n```ts\r\nvar tuple: [string, number] = [\"\", 0];\r\nvar [a, ...b] = tuple;\r\n```\r\n\r\nRight now, a is string, but b is `(string | number)[]`. This is because the type associated with b is the array of the el","comments":1,"createdAt":1428692936000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2714,"state":"closed","title":"Tuple suffix associated with rest element in a binding pattern","updatedAt":1432057149000},{"assignedTo":"","body":"A contextual type assertion expression, `<?>`, is like a regular type assertion (e.g. `<string>`), but asserts to the contextual type of the expression.\r\n\r\nAbout half of all type assertions can be rewritten this way with no loss of type safety.\r\n\r\nEx","comments":9,"createdAt":1429737212000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":2876,"state":"closed","title":"Contextual type assertion operator","updatedAt":1432056999000},{"assignedTo":"","body":"```ts\r\nvar [x, y, ...z] = [0, \"\", true, \"\"];\r\n```\r\n\r\nx and y are `string | number | boolean` because the rest element causes the contextual type to be an array. It seems like there is no reason for this. I think the contextual type here should be a t","comments":9,"createdAt":1422401433000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1824,"state":"closed","title":"Rest binding element should contextually type initializer as a tuple","updatedAt":1432056809000},{"assignedTo":"","body":"Address issue #1940","comments":1,"createdAt":1431998346000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3207,"state":"closed","title":"Declare modifier for interface","updatedAt":1432056212000},{"assignedTo":"","body":"Is there a reason that rest parameters emit a for loop instead of a slice call? For example:\r\n\r\n```ts\r\nfunction foo(...args: any[]): void {\r\n}\r\nfunction bar(first: number, ...args: any[]): void {\r\n}\r\n```\r\n\r\nemits:\r\n\r\n```js\r\nfunction foo() {\r\n    var ","comments":2,"createdAt":1432054179000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/204106?v=3","loggedByName":"bryanforbes","milestone":"","number":3219,"state":"closed","title":"Should rest parameters emit Array.prototype.slice instead of for loop?","updatedAt":1432056026000},{"assignedTo":"","body":"What, all this business with union types, indeed a veritable managerie of type-related tricks, and we can't make the basics work?\r\n\r\n    function borked(): number {\r\n        if (false)\r\n            return 1;\r\n    }\r\n\r\nI know this will be flagged with","comments":4,"createdAt":1425245029000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/121074?v=3","loggedByName":"rolyp","milestone":"","number":2176,"state":"open","title":"Suggestion: errors based on control flow analysis","updatedAt":1432054324000},{"assignedTo":"","body":"I think it is a pretty common pattern to have a static factory method to create a class and the constructor of this class being otherwise private so that you cannot instantiate the class unless you use the factory method.","comments":6,"createdAt":1426237301000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/900690?v=3","loggedByName":"bpasero","milestone":"Community","number":2341,"state":"open","title":"Allow visibility on constructors","updatedAt":1432053391000},{"assignedTo":"","body":"We'll be meeting weekly to get through the large number of suggestion-tagged issues that have sat idle for too long. I'll be posting notes here.","comments":5,"createdAt":1430176871000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":2936,"state":"open","title":"Suggestion Backlog Slog Log","updatedAt":1432053324000},{"assignedTo":"","body":"I wanted to document some properties of a class, and be able to iterate over the properties to automatically produce help information documenting its use at runtime. I had something like\r\n\r\n    class Foo {\r\n      /** JSDoc documentation here */\r\n    ","comments":1,"createdAt":1431380253000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4579237?v=3","loggedByName":"Laguana","milestone":"","number":3119,"state":"open","title":"Suggestion: Preserve JSDoc comments on class properties","updatedAt":1432020098000},{"assignedTo":"","body":"Hi, I'm not using any external libraries in my project but when I try to re export some modules I get this errors:\r\n\r\nsrc/layer/layers.ts(1,14): error TS1005: ';' expected.\r\nsrc/layer/layers.ts(1,19): error TS1005: ';' expected.\r\nsrc/layer/layers.ts(","comments":7,"createdAt":1431103806000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3519520?v=3","loggedByName":"gotenxds","milestone":"","number":3086,"state":"open","title":"Typescript 1.5 import module","updatedAt":1432019896000},{"assignedTo":"vladima","body":"ts\r\n```\r\ndeclare class Promise { }\r\nexport var foo = Promise;\r\n```\r\njs\r\n```\r\nSystem.register([], function(exports_1) {\r\n\tvar Promise, foo;\r\n\treturn {\r\n\t\tsetters:[],\r\n\t\texecute: function() {\r\n\t\t\texports_1(\"foo\", foo = Promise);\r\n\t\t}\r\n\t}\t\r\n});\r\n```\r\nTh","comments":2,"createdAt":1431309313000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/886059?v=3","loggedByName":"Zoltu","milestone":"TypeScript 1.5.3","number":3106,"state":"closed","title":"Compiling to ES5 with module type system breaks declare.","updatedAt":1432018852000},{"assignedTo":"","body":"Is it possible to prohibit TS to emit helper function declarations (e.g. _extend, _decorate) into every compiled file?\r\n\r\nI have a setup, when we storm is compiling every TS file separately and I end up with many isolated helper function declarations","comments":2,"createdAt":1431381100000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2682705?v=3","loggedByName":"tomitrescak","milestone":"","number":3120,"state":"closed","title":"Do not emit helper function declarations on compilation","updatedAt":1432018723000},{"assignedTo":"vladima","body":"tsconfig\r\n```json\r\n    \"compilerOptions\": {\r\n        \"target\": \"es5\",\r\n        \"module\": \"system\",\r\n        \"declaration\": false,\r\n        \"noImplicitAny\": false,\r\n        \"removeComments\": true,\r\n        \"noLib\": false,\r\n        \"preserveConstEnums\"","comments":2,"createdAt":1431312790000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/886059?v=3","loggedByName":"Zoltu","milestone":"TypeScript 1.5.3","number":3107,"state":"closed","title":"Declaration merging broken when targeting 'system' module loader.","updatedAt":1432018103000},{"assignedTo":"","body":"TS code:\r\n```typescript\r\nmodule myModule {\r\n    export var a: number = 1;\r\n    export var b: number;\r\n}\r\n```\r\nCompiled to: \r\n```javascript\r\nvar myModule;\r\n(function (myModule) {\r\n    myModule.a = 1;\r\n    myModule.b;\r\n})(myModule || (myModule = {}));\r","comments":0,"createdAt":1429522563000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/557081?v=3","loggedByName":"vasa-c","milestone":"TypeScript 1.6","number":2834,"state":"closed","title":"Export of not initialized variable and useless statement","updatedAt":1432017951000},{"assignedTo":"","body":"","comments":0,"createdAt":1432015633000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3209,"state":"closed","title":"Merge PR #3137 into release-1.5","updatedAt":1432017359000},{"assignedTo":"","body":"Fixes #3096.","comments":3,"createdAt":1431471207000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3137,"state":"closed","title":"Ensure spread always copies array","updatedAt":1432015663000},{"assignedTo":"","body":"I am using VS2013, Typescript 1.5, Windows 8.1.\r\n\r\nI am trying to setup Angular2 so I can go through the starting steps and examples, alas I am failing to do the basic and include the angular2 modules.\r\n\r\nThis is the first issue I got.\r\n\r\n![image](ht","comments":1,"createdAt":1431420641000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/807882?v=3","loggedByName":"josecasimiro","milestone":"","number":3126,"state":"closed","title":"Recognizing .js and .es6 files as modules","updatedAt":1432014593000},{"assignedTo":"","body":"tsc -help reports\r\n```\r\n--noEmitOnError         Do not emit outputs if any type checking errors were reported.\r\n```\r\nWe no longer distinguish between type checking and other errors here so the help should simply say 'any errors were reported.' We'll ","comments":0,"createdAt":1431465899000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.6","number":3134,"state":"closed","title":"Update help text for noEmitOnError","updatedAt":1432012637000},{"assignedTo":"","body":"there seems to be a problem with \r\n\r\nit should be `elementRef: ElementRef` without `@Inject`\r\nhttps://github.com/gdi2290/ng-vegas-angular2-d3/blob/c6e1910a080a2b85681acc017e37275655e80407/app.ts#L20\r\n\r\ncompiles down to\r\nhttps://github.com/gdi2290/ng-","comments":2,"createdAt":1431632776000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1016365?v=3","loggedByName":"gdi2290","milestone":"","number":3169,"state":"closed","title":"ng2: emitDecoratorMetadata problem with deconstructing imports","updatedAt":1432011920000},{"assignedTo":"","body":"Hey guys,\r\n\r\nI'm trying out angular2, and I was having this issue where I could (while following the tutorials) use their dependency injection feature, but then in my project I kept getting errors.\r\n\r\nI followed the tutorials just using the regular c","comments":16,"createdAt":1431592974000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/807882?v=3","loggedByName":"josecasimiro","milestone":"","number":3163,"state":"open","title":"Compiling with TSC vs Compiling in VisualStudio2013","updatedAt":1432001768000},{"assignedTo":"mhegazy","body":"I'm assuming this is unexpected, because I definitely did not expect it. `findConfigFile` will always return the string `tsconfig.json` and not use the search path when a `tsconfig.json` exists in the current working directory. Here's the offending l","comments":0,"createdAt":1430363425000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1088987?v=3","loggedByName":"blakeembrey","milestone":"TypeScript 1.6","number":2965,"state":"open","title":"TypeScript returns an unexpected value for `findConfigFile`","updatedAt":1432001663000},{"assignedTo":"","body":"Could someone please explain to me why the Typescript Compiler is written in Typescript (JS) ??\r\n\r\nOne funky reason I can think of, is that it enables the online Typescript showcase / editor...\r\n\r\nBut for productivity it would make a lot more sense t","comments":3,"createdAt":1409649349000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/456040?v=3","loggedByName":"Montago","milestone":"","number":579,"state":"closed","title":".NET (DLL) Compiler","updatedAt":1431997376000},{"assignedTo":"","body":"There doesn't seem to be a safe cast in Typescript. (&lt;T&gt; x) does no dynamic check. This is a very common need and is provided in every other optionally and gradually typed language I know of. What is needed is something like:\r\n```\r\nfunction cas","comments":8,"createdAt":1431908647000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2237165?v=3","loggedByName":"JonathanMEdwards","milestone":"","number":3193,"state":"closed","title":"type-safe cast","updatedAt":1431989035000},{"assignedTo":"","body":"I'm not sure if this is a bug, or I'm missing something.\r\n\r\nI am compiling my TypeScript to ES6 and then using the babel preprocessor to run my tests in Karma. The class is as follows\r\n```typescript\r\nimport { BaseModel, notEmpty } from '../main';\r\n\r\n","comments":3,"createdAt":1431460229000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1998134?v=3","loggedByName":"dotDeeka","milestone":"TypeScript 1.5.3","number":3133,"state":"closed","title":"Compiling class with decorator to ES6 wont load in karma test","updatedAt":1431985113000},{"assignedTo":"","body":"Currently in Visual Studio selection from the code-completion list can be done only with `Tab` and `Enter` keys, but in other Visual Studio supported languages (e.g. C#), code completion works also with `.` and `(`.\r\n\r\nI think the plugin should be ex","comments":4,"createdAt":1431965943000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2598443?v=3","loggedByName":"nippur72","milestone":"","number":3202,"state":"closed","title":"Visual Studio allow code completion with \".\" and \"(\" keys too","updatedAt":1431983833000},{"assignedTo":"","body":"i'm trying to port [Aurelia dependency-injection unit tests](https://github.com/aurelia/dependency-injection/blob/master/test/container.spec.js) to TypeScript 1.5 Beta.\r\n\r\nI'm getting an error with the class declarations that are embedded within the ","comments":3,"createdAt":1431862870000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10272832?v=3","loggedByName":"cmichaelgraham","milestone":"","number":3191,"state":"closed","title":"declare class within function?","updatedAt":1431981795000},{"assignedTo":"","body":"This transplies and works as expected (in chrome and opera and firefox since custom elements are fully implemented) but, if you paste it on the playground it will display some errors\r\n\r\n```typescript\r\n             class View extends HTMLElement{\r\n\t\t\t","comments":2,"createdAt":1431754148000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11486435?v=3","loggedByName":"0Decoherence","milestone":"","number":3187,"state":"closed","title":"Custom elements support","updatedAt":1431981109000},{"assignedTo":"","body":"I started using TypeScript as the first language for teaching programming at our university. Though it's sometimes recommended to leave typing to TypeScript, I force my students to explicitly type in order to create the proper mental modell and simpl","comments":6,"createdAt":1431675594000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6279994?v=3","loggedByName":"JirkaDellOro","milestone":"","number":3177,"state":"closed","title":"Warning on implicit typing / inference","updatedAt":1431978479000},{"assignedTo":"vladima","body":"Compiler improperly normalizes filenames that are 'file' uri. In particular is 'host' part is omitted compiler removes mandatory slash that should be present after '://' so uri \r\n```\r\nfile:///a/b/c.txt\r\n```\r\nbecomes\r\n```\r\nfile://a/b/c\r\n```\r\n\r\nThis is","comments":2,"createdAt":1431654327000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.5.3","number":3173,"state":"closed","title":"'file' urls are improperly normalized","updatedAt":1431972520000},{"assignedTo":"","body":"A web project that includes typescript and makes use of the \"Redirect Javascript output to folder\" option can currently not be published (local file system) because Microsoft.TypeScript.targets does not honor TypeScriptOutDir when populating FilesFor","comments":6,"createdAt":1406610827000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/51688?v=3","loggedByName":"oliverw","milestone":"TypeScript 1.5","number":292,"state":"closed","title":"Publishing web project fails when custom output folder is used","updatedAt":1431972235000},{"assignedTo":"","body":"I've found that #1931 supports this only for ES6, but it seems ES5 also can do this in any way.\r\n\r\n```typescript\r\nvar arguments = [1, 2, 3, 4, 5];\r\nnew Array(...arguments);\r\n```\r\n\r\nThis can be converted to ES5:\r\n\r\n```javascript\r\n// Thanks to: http://","comments":6,"createdAt":1426488587000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"TypeScript 1.6","number":2369,"state":"closed","title":"Spread operator in 'new' expressions support for ES5?","updatedAt":1431971975000},{"assignedTo":"","body":"Say you have 2 files:\r\n\r\ncar.ts:\r\n```\r\nexport class Car {\r\n\tpublic beep(): void {}\r\n}\r\n```\r\n\r\ntruck.ts:\r\n```\r\nimport Car = require(\"./car\");\r\nclass Truck extends Car.Car {}\r\nnew Truck().beep();\r\n// changing this file should not recompile car.ts\r\n```\r","comments":7,"createdAt":1431728015000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/74692?v=3","loggedByName":"breck7","milestone":"","number":3184,"state":"open","title":"tsc --watch recompiles unmodified dependencies","updatedAt":1431971834000},{"assignedTo":"","body":"Can I have an instance of a generic function?\r\n\r\nFor example I have a function like this:\r\n```javascript\r\nfunction pushType<T>(item: T, list: T[]): T[]{\r\n    list.push(item);\r\n    return list;\r\n}\r\n```\r\n\r\nIf I would like to use with number parameter i","comments":4,"createdAt":1430952212000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1766891?v=3","loggedByName":"f3c0","milestone":"","number":3057,"state":"closed","title":"Have instances of a generic function","updatedAt":1431970365000},{"assignedTo":"","body":"Implements #2369. Adds ES5 support for spread operator in `new expressions`. ES3 targets should still output warning as before, because it doesn't support `Function.prototype.bind` which I use in this ES5 implementation. I refactored some of the code","comments":38,"createdAt":1430989660000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3066,"state":"closed","title":"New with spread","updatedAt":1431969828000},{"assignedTo":"DanielRosenwasser","body":"As part of #3085, we stopped emitting exports for variable declarations with no initializers in <ES6 targets. However, we still emit trailing/leading comments per node.","comments":0,"createdAt":1431567937000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":3161,"state":"closed","title":"Don't emit trailing/leading comments for omitted variable statements","updatedAt":1431969776000},{"assignedTo":"","body":"Currently it is possible to redefine a static `name` property for classes which leads to some _unclear_ results in runtime - it returns class name at runtime.\r\n\r\n```javascript\r\nclass A {\r\n\tstatic name = 'Some name'\r\n\t\r\n\tstatic getName() {\r\n\t\treturn t","comments":2,"createdAt":1431860815000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1035026?v=3","loggedByName":"lazutkin","milestone":"","number":3190,"state":"closed","title":"Do not allow to define a static `name` property on classes","updatedAt":1431969361000},{"assignedTo":"","body":"Raised on SO. The following is an error:\r\n\r\n```ts\r\nexport default interface Foo {\r\n}\r\n```\r\nBy design or bug?","comments":1,"createdAt":1431910008000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":3194,"state":"closed","title":"Export default on interface not allowed","updatedAt":1431969298000},{"assignedTo":"","body":"\r\nWhen my project contains a custom typescipt output directory, I cannot publish my project using VS 2013 Update 3/4 or when pushed to Azure/Kudu.\r\n\r\ne.g. Inside Host.csproj:\r\n\r\n```\r\n <TypeScriptOutDir>.\\obj\\jsoutput</TypeScriptOutDir>\r\n```\r\n\r\nwill c","comments":1,"createdAt":1431685403000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/275706?v=3","loggedByName":"mcintyre321","milestone":"TypeScript 1.5","number":3178,"state":"closed","title":"Cannot publish when using TypeScriptOutDir","updatedAt":1431969010000},{"assignedTo":"","body":"â¦ecks, if this functionality is supported by the host","comments":3,"createdAt":1431454229000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3131,"state":"closed","title":"add optional 'getProjectVersion' method to perform fast up-to-date châ¦","updatedAt":1431966963000},{"assignedTo":"","body":"Instead of writing:\r\n```typescript\r\nfoo/*1*/\r\n// and then go back with the cursor\r\n/*1*/foo\r\n// and then write the type assertion\r\n(<Foo>foo).bar/*1*/\r\n// and then go back with the cursor\r\n/*1*/(<Foo>foo).bar\r\n// and then write the type assertion\r\n(<","comments":10,"createdAt":1431742657000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3186,"state":"closed","title":"Back type assertion","updatedAt":1431966943000},{"assignedTo":"","body":"I have the React type definition file (that is declared using an external module). In my source files, I usually do:\r\n```typescript\r\nimport * as R from \"react\"\r\n```\r\nand can then happily use `R.createElement(...` etc in a strongly typed fashion.  I c","comments":6,"createdAt":1431695859000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1211772?v=3","loggedByName":"dfaivre","milestone":"","number":3180,"state":"closed","title":"Allow module definitions to be declared as global variables","updatedAt":1431963619000},{"assignedTo":"","body":"It would be an issue if there is a method exported from the current module named `hasOwnProperty`:\r\n\r\n```javascript\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n```\r\n\r\nPersonally I would write i","comments":1,"createdAt":1431952133000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":3197,"state":"closed","title":"Re-export issue with hasOwnProperty.","updatedAt":1431958214000},{"assignedTo":"","body":"Currently, the following DOM methods has a return type definition of <code>NodeList</code>, but the type of nodes returned is actually always <code>Element</code>:\r\n\r\n<code>getElementsByClassName</code>\r\n<code>getElementsByTagNameNS</code>\r\n<code>get","comments":3,"createdAt":1407759972000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8416067?v=3","loggedByName":"FranklinWhale","milestone":"","number":424,"state":"open","title":"NodeList, NodeListOf<Element> and HTMLCollection","updatedAt":1431939535000},{"assignedTo":"","body":"**Motivation**\r\n\r\nThe shape of JSON stored in files can be validated using [JSON schema](http://json-schema.org/). However, JSON schema cannot be used to ensure the stored JSON corresponds to a specific TypeScript interface.\r\n\r\nUnderstandably, most J","comments":15,"createdAt":1424267042000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":2064,"state":"open","title":"Consider annotations and compilation of .json files","updatedAt":1431874709000},{"assignedTo":"","body":"The following typescript program is accepted:\r\n\r\n```typescript\r\nclass C {\r\n    static length ()  { return \"twelve\"; }\r\n}\r\n```\r\n\r\nHowever, in the generated code:\r\n\r\n```javascript\r\nvar C = (function () {\r\n    function C() {\r\n    }\r\n    C.length = funct","comments":5,"createdAt":1407869589000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/75477?v=3","loggedByName":"hesselink","milestone":"Community","number":442,"state":"open","title":"Impossible to define static 'length' function on class","updatedAt":1431861813000},{"assignedTo":"","body":"I am currently trying out typescript 1.5 alpha but the compiler always tells me:\r\n\r\nsrc\\Person.ts(4,1): 1128 Declaration or statement expected.\r\nsrc\\Person.ts(4,8): 1109 Expression expected.\r\nsrc\\Person.ts(4,13): 1005 ';' expected.\r\nsrc\\Person.ts(4,2","comments":20,"createdAt":1429875591000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11756211?v=3","loggedByName":"KhaosTheory1012","milestone":"","number":2907,"state":"closed","title":"Modules imports","updatedAt":1431857122000},{"assignedTo":"","body":"Hello,\r\n\r\nWhy can't I do following?\r\n\r\n![image](https://cloud.githubusercontent.com/assets/3153438/6201530/e3db597e-b4af-11e4-9f5c-7eff7d518acf.png)\r\n\r\nIn above case TypeScript compiler knows lexically that T is MyData, so why it can't exchange new T","comments":4,"createdAt":1423958759000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3153438?v=3","loggedByName":"pankleks","milestone":"","number":2037,"state":"closed","title":"Creating instance of generic types","updatedAt":1431832764000},{"assignedTo":"","body":"Fixes #3161.","comments":1,"createdAt":1431734615000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3185,"state":"closed","title":"Don't emit leading/trailing comments for omitted variable statements","updatedAt":1431816647000},{"assignedTo":"","body":"â¦host","comments":2,"createdAt":1431725367000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3183,"state":"closed","title":"perf: during file update request only changed portion of the text from the â¦","updatedAt":1431734955000},{"assignedTo":"paulvanbrenk","body":"here is the schema: http://json.schemastore.org/tsconfig\r\nhere is the store: https://github.com/SchemaStore/schemastore\r\n\r\nand here are the new flags:\r\n* [--rootDir](https://github.com/Microsoft/TypeScript/pull/2772)\r\n* [--module umd](https://github.","comments":4,"createdAt":1430861862000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5.3","number":3046,"state":"closed","title":"Update tsconfig.json schema on SchemaStore for new commandline options for TypeScript 1.5","updatedAt":1431730829000},{"assignedTo":"","body":"Proposal: generate code to create a `Date` from a `string` when the specified TypeScript type expects a `Date`.\r\n\r\nI noticed that TypeScript will implicitly cast a `number` to an enumeration type. I know this happens because enumerations are represen","comments":3,"createdAt":1431710295000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8803?v=3","loggedByName":"panesofglass","milestone":"","number":3181,"state":"closed","title":"Suggestion: generate conversion from string to Date implicitly when casting","updatedAt":1431718033000},{"assignedTo":"paulvanbrenk","body":"Open 'emitter.ts' in compiler code and try to save it. \r\n\r\n**Expected**: single output file is written\r\n**Actual**: nothing happens. \r\n\r\nResult of 'get emit output' request that is returned from the script side has a relative path so when VS tries to","comments":3,"createdAt":1430859621000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.5.3","number":3045,"state":"closed","title":"Compile on save don't work when tsconfig.json specifies 'out' relative path ","updatedAt":1431715331000},{"assignedTo":"","body":"Fixes #2997 and #3152. Subsumes #3071.","comments":1,"createdAt":1431556293000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3157,"state":"closed","title":"Fix infinite recursion in union type reduction","updatedAt":1431713972000},{"assignedTo":"","body":"I have a TypeScript AMD class located at \"/Scripts/App/MyClass.ts\".  I have another class with the same relative file path inside of an MVC Area located at \"/Areas/MyArea/Scripts/App/MyClass.ts\" that inherits from the original class.\r\n\r\n```typescript","comments":4,"createdAt":1431570794000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/324606?v=3","loggedByName":"troyji","milestone":"","number":3162,"state":"closed","title":"False recursive inheritance error when paths are similar","updatedAt":1431713272000},{"assignedTo":"","body":"","comments":0,"createdAt":1431711683000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3182,"state":"closed","title":"Update LKG","updatedAt":1431712404000},{"assignedTo":"","body":"This seems to be valid (tested in playground):\r\n\r\n```\r\nclass Greeter {\r\n    greeting1: void;\r\n    greeting2: () => void;\r\n}\r\n\r\nvar greeter = new Greeter();\r\n```\r\n\r\nCan you explain me what is gain to allow declaration of \"greeting1\" field?\r\n","comments":8,"createdAt":1431602649000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1898040?v=3","loggedByName":"wgebczyk","milestone":"","number":3165,"state":"closed","title":"void type field on class","updatedAt":1431711821000},{"assignedTo":"","body":"Fixes #3173","comments":1,"createdAt":1431497442000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3144,"state":"closed","title":"handle triple slashes in url schema 'file' correctly","updatedAt":1431705291000},{"assignedTo":"","body":"","comments":1,"createdAt":1431673457000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3175,"state":"closed","title":"Merge release-1.5 into master","updatedAt":1431673742000},{"assignedTo":"JsonFreeman","body":"```typescript\r\nmodule bar { }\r\n\r\nimport bar = bar;\r\n````\r\n\r\nWhen you hover over the `bar` alias you get the following stack overflow.\r\n\r\n   at getSymbolLinks (:10887:13)\r\n   at getTypeOfAlias (:12806:13)\r\n   at getTypeOfSymbol (:12836:17)\r\n   at getT","comments":2,"createdAt":1430156609000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"TypeScript 1.5.3","number":2933,"state":"closed","title":"Stack overflow when getting quickinfo on alias with same name as module","updatedAt":1431672257000},{"assignedTo":"","body":"This PR is intended to replace #3141, to fix #2933. Essentially, we have a design for aliases (#3158) that only continues to follow aliases if the symbol it hits is a pure alias. If it has any other meanings, it stops. This way, an alias can only ref","comments":1,"createdAt":1431564620000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3160,"state":"closed","title":"Only call getTypeOfSymbol recursively if it's a value","updatedAt":1431672204000},{"assignedTo":"","body":"If you have a file with the following contents:\r\n\r\n    export default function(a: string, b: number) {\r\n      return Promise.resolve(a + b);\r\n    }\r\n\r\nThen there is no way to see function signature through hovering. Basically, because it has no name?","comments":13,"createdAt":1428880914000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2736,"state":"open","title":"Hover information over `export default`","updatedAt":1431672028000},{"assignedTo":"","body":"Given the following code:\r\n````typescript\r\nclass Parent {\r\n\tpublic doStuff() {\r\n\t\t/* stuff */\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nclass Child extends Parent {\r\n\tpublic doOtherStuff() {\r\n\t\t/* other stuff */\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nvar child = new Child();\r\nch","comments":6,"createdAt":1431634353000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3979433?v=3","loggedByName":"lucasmciruzzi","milestone":"","number":3170,"state":"closed","title":"Intellisense/TSServer bug with self reference of class in inheritance","updatedAt":1431668954000},{"assignedTo":"","body":"A string literal annotation currently emits:\r\nhttps://github.com/Microsoft/TypeScript/blob/78197ed60b92ca54b6b88c044e7016d1f6090e09/tests/baselines/reference/parserErrorRecovery_IncompleteMemberVariable1.js#L41\r\n\r\nIs this a bug?\r\n\r\nIf it is, good hav","comments":2,"createdAt":1431649419000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3172,"state":"closed","title":"[Question] Current emit for string literal type annotations","updatedAt":1431651548000},{"assignedTo":"","body":"Use CRLF instead of system one when generating test files by default. \r\nTodo: run on Mac/Unix machine\r\n\r\nEdited: Test on Mac and Ubuntu","comments":2,"createdAt":1431550333000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3155,"state":"closed","title":"Use crlf by default in test","updatedAt":1431644364000},{"assignedTo":"","body":"I'm using the latest TypeScript Visual Studio 1.5 Beta plugin and VS almost always hangs on startup.\r\n\r\nNoticed it scans tons of files:\r\n![snap](https://cloud.githubusercontent.com/assets/199519/7617967/c319cd08-f97c-11e4-831c-5c7cd93e470f.png)\r\n\r\nWh","comments":8,"createdAt":1431541966000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3153,"state":"open","title":"Visual Studio 1.5 slow/ almost hangs on startup","updatedAt":1431644248000},{"assignedTo":"","body":"I think that it should be special **bottom** type with the following properties:\r\n\r\n* ( T | **bottom** ) = ( **bottom** | T ) = T   â **bottom** is unit for type unions;\r\n* expression of type **bottom** is assignable to any other type;\r\n* **bottom** ","comments":18,"createdAt":1431037168000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/185374?v=3","loggedByName":"Artazor","milestone":"","number":3076,"state":"open","title":"Special `bottom` type","updatedAt":1431628754000},{"assignedTo":"","body":"It seems the index constraint doesn't seem to constrain anymore... if it does, then I blame it being early in the morning.\r\n\r\nCopying the code from Ryan's post [here](http://stackoverflow.com/a/13631733/188246):\r\n\r\n```\r\nclass Customer {\r\n\tdummyProper","comments":4,"createdAt":1431527044000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1609021?v=3","loggedByName":"dsherret","milestone":"","number":3150,"state":"closed","title":"Index constraint does not constrain","updatedAt":1431624006000},{"assignedTo":"","body":"I was going to upgrade a project at work from TS 1.1.0-1 to TS 1.4, and was surprised at the difference in compile times. Here are the results from our codebase (we're using grunt-ts to perform the compilation, so the output is generated by it).\r\n\r\n`","comments":12,"createdAt":1431505747000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/815188?v=3","loggedByName":"scriby","milestone":"","number":3145,"state":"closed","title":"TS 1.4 compiler slower?","updatedAt":1431623742000},{"assignedTo":"","body":"currently when using enums it is  impossible to resolve enum type at runtime because enum values are converted into nu=numbers\r\n\r\nmy proposal is change how  tsc generates enum into this:\r\n```javascript\r\nvar Enum = (function () {\r\n    function Enum(na","comments":1,"createdAt":1431606329000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/12444673?v=3","loggedByName":"CzBuCHi","milestone":"","number":3167,"state":"closed","title":"[Proposal] Enum emitted code change","updatedAt":1431623425000},{"assignedTo":"","body":"Works well in C#, C++ and other languages but not in TypeScript VS integration:\r\n\r\n```\r\n// TODO: ABC\r\n// HACK: CDE\r\n```\r\n\r\nOpen Task List -> Comments, you see nothing.","comments":4,"createdAt":1423148140000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1942,"state":"closed","title":"Task List tokens are not honored","updatedAt":1431618967000},{"assignedTo":"","body":"Interface is a useful tool in TypeScript, but sometimes we'll need to write two pieces of almost identical code for intellisense and functionality respectively.\r\n\r\nIs it acceptable to add a simple statement for generating part of interface informatio","comments":14,"createdAt":1419355874000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":1549,"state":"closed","title":"Suggestion: reflection for interface?","updatedAt":1431591378000},{"assignedTo":"","body":"Implements #2834. I added test on internal modules and external modules(amd, cjs, system, umd).","comments":11,"createdAt":1431097701000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3085,"state":"closed","title":"No emit on non initialized exports","updatedAt":1431578852000},{"assignedTo":"","body":"Updating all files slows down debugging.\r\n\r\nCompile on save would also do but I can't expect it would soon be there in Visual Studio Code, even it would be there, it might not be stable enough since the very beginning. It would be great if `tsc` upda","comments":11,"createdAt":1431349190000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":3113,"state":"open","title":"Change only updated files when using watch option.","updatedAt":1431577247000},{"assignedTo":"paulvanbrenk","body":" Completion shouldn't appear after \"type\" when typing a type alias.","comments":2,"createdAt":1429747952000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"TypeScript 1.6","number":2882,"state":"closed","title":"Completion interferes with typing a \"type alias\".","updatedAt":1431568368000},{"assignedTo":"","body":"D language has a great feature that allows to [write unit tests right in the class/module itself](http://dlang.org/unittest.html).\r\n\r\nCould typescript have something similar? When defining a class one could inline testing code using the `unittest` bl","comments":1,"createdAt":1431472156000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9773803?v=3","loggedByName":"streamich","milestone":"","number":3138,"state":"open","title":"Unit test feature inside the language","updatedAt":1431567318000},{"assignedTo":"","body":"Fixes #2933. The issue is that getTypeOfAlias needs to resolve the alias as a value, which would cause resolveAlias to detect a cycle. However, resolveAlias has no idea that it's looking for a value, so it stops early. This causes getTypeOfAlias to i","comments":3,"createdAt":1431473988000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3141,"state":"closed","title":"Add resolveAliasAsValue to fix a stack overflow","updatedAt":1431564634000},{"assignedTo":"","body":"Implements #3089.\r\n\r\n* Adds a `packageName` compiler option, used to specify the name of the package. \r\n* Adds a `packageMain` compiler option, used to specify the path to the main typescript module for the package.\r\n* Adds a `packageDeclaration` com","comments":0,"createdAt":1431564009000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3159,"state":"open","title":"Package declaration file for commonjs packages","updatedAt":1431564011000},{"assignedTo":"paulvanbrenk","body":"![builder](https://cloud.githubusercontent.com/assets/4564579/6836093/6a65960c-d2fc-11e4-976e-49b522bff7df.gif)\r\n\r\nNote that i'm just trying to write ```(a: string) =>``` but i get 'a' completing out to some value.  We need a builder here.","comments":1,"createdAt":1427319472000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"TypeScript 1.6","number":2494,"state":"closed","title":"Aggressive completion makes it difficult to type function types.","updatedAt":1431557740000},{"assignedTo":"paulvanbrenk","body":"```TypeScript\r\nvar {x: html/*1*/\r\n```\r\n\r\nPress space\r\n\r\nExpected: `html` stays as `html`.\r\nActual: ~~have your hopes and dreams crushed~~ `html` becomes `HTMLAllCollection`.","comments":1,"createdAt":1428617091000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":2693,"state":"closed","title":"No builder in right-hand side of object binding pattern element","updatedAt":1431557701000},{"assignedTo":"","body":"This fixes 3 issues in the completion list, where we either didn't allow for a new identifier or shouldn't show the completion list at all.","comments":3,"createdAt":1430433745000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":2979,"state":"closed","title":"Completion fixes","updatedAt":1431557611000},{"assignedTo":"","body":"Many features do not work correctly when an alias is merged with other things:\r\n```ts\r\nimport foo = A.bar;\r\n\r\nnamespace A {\r\n    export namespace bar { } // completion is fine if this namespace is removed\r\n\r\n    export import bar = baz.boo;\r\n\r\n    ex","comments":3,"createdAt":1431473755000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3140,"state":"closed","title":"Alias resolution does not account for symbol merging","updatedAt":1431556376000},{"assignedTo":"","body":"When declaring a private field, the resulting JavaScript is:\r\n```javascript\r\nvar Example;\r\n(function (Example) {\r\n    var Test = (function () {\r\n        function Test() {\r\n            this._value = 0;\r\n        }\r\n        Object.defineProperty(Test.pr","comments":1,"createdAt":1431536326000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/922497?v=3","loggedByName":"stevenbey","milestone":"","number":3151,"state":"closed","title":"Private fields are not private.","updatedAt":1431536935000},{"assignedTo":"","body":"Given this code:\r\n```typescript\r\nfunction a() {\r\n  /*cmd+shift+p*/\r\n}\r\n\r\nfunction b() {\r\n  a();\r\n}\r\n\r\nfunction c() {\r\n  b();\r\n}\r\n\r\nfunction d() {\r\n  c();\r\n}\r\n```\r\nI want to know the path:\r\n```\r\na() -> b() -> c() -> d()\r\n```","comments":2,"createdAt":1431348838000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3112,"state":"open","title":"Suggestion: support Call Hierarchy view","updatedAt":1431535070000},{"assignedTo":"","body":"\r\nI am working with 1.5.0-beta\r\n\r\n```javascript\r\nexport interface IPrcbNumOptions {\r\n    options?: any;\r\n    events?: any;\r\n}\r\n\r\n@customAttribute('prcb-num')\r\n@inject(Element)\r\nexport default class PrcbNum {\r\n  @bindable options: IPrcbNumOptions|stri","comments":1,"createdAt":1431514124000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/383517?v=3","loggedByName":"luboid","milestone":"","number":3149,"state":"closed","title":"Problem with interpreting of union into context","updatedAt":1431525427000},{"assignedTo":"","body":"Hi! \r\nI was playing around with typescript and did't like that i have to put paths to references in order to specify order of files in single output file. My suggestion is that at beggining of single output file, compiler generates declaration for al","comments":3,"createdAt":1431428377000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2906197?v=3","loggedByName":"pofuk","milestone":"","number":3128,"state":"closed","title":"Generate declarations for classes and imports as function","updatedAt":1431516442000},{"assignedTo":"","body":"refs https://github.com/Microsoft/TypeScript/pull/3139#issuecomment-101460746\r\ndocs https://help.github.com/articles/dealing-with-line-endings/#per-repository-settings","comments":1,"createdAt":1431475053000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":3143,"state":"closed","title":"preserve whatever crlf is already there in the repo","updatedAt":1431487115000},{"assignedTo":"","body":"There's currently a NumericLiteral:\r\nhttps://github.com/Microsoft/TypeScript/blob/master/src/compiler/types.ts#L23\r\n\r\nAnd a numberIndex:\r\nhttps://github.com/Microsoft/TypeScript/blob/master/src/compiler/types.ts#L1507\r\n\r\nI'm trying to add:\r\n```\r\n    ","comments":7,"createdAt":1431276395000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":3104,"state":"closed","title":"Renaming NumericLiteral to NumberLiteral?","updatedAt":1431486515000},{"assignedTo":"ahejlsberg","body":"```js\r\nlet a = ['a', 'b', 'c'];\r\nlet b = [...a]; // should create an array copy\r\nconsole.log(a === b); // should be false but it's true when compiled to <ES6\r\n```","comments":3,"createdAt":1431177628000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/900769?v=3","loggedByName":"maryo","milestone":"TypeScript 1.5.3","number":3096,"state":"closed","title":"Copying arrays using spread operator","updatedAt":1431476555000},{"assignedTo":"","body":"Fix #3134","comments":1,"createdAt":1431466493000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":3135,"state":"closed","title":"Update help description for noEmitOnError","updatedAt":1431473200000},{"assignedTo":"","body":"for some reason emit for enums was missing - added it in this PR.\r\nAlso it fixes #3107","comments":3,"createdAt":1431328279000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3110,"state":"closed","title":"system: fix emit for enums and exported non-top level items","updatedAt":1431472933000},{"assignedTo":"","body":"I am creating a new Html TypeScript project from Visual Studio. Now I want to use emitDecoratorMetadata option but from Project properties there is no way to specify this option","comments":1,"createdAt":1431453868000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4114592?v=3","loggedByName":"ReverseBlade","milestone":"","number":3130,"state":"closed","title":"No way to specify emitDecoratorMetadata option from Visual Studio 2015","updatedAt":1431460369000},{"assignedTo":"","body":"So instead of having to type:\r\n```javascript\r\nimport {} from \"whatever\";\r\n```\r\nand then go back to fill in the {} with IntelliSense, a LINQ-like syntax would be easier to use like this:\r\n```javascript\r\nfrom \"whatever\" import {Something};\r\n```","comments":8,"createdAt":1431423755000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2797449?v=3","loggedByName":"BenedekFarkas","milestone":"","number":3127,"state":"closed","title":"Suggestion: reversed syntax for importing symbols from a module","updatedAt":1431460247000},{"assignedTo":"","body":"Fixes inconsistencies found in #3118.","comments":0,"createdAt":1431381777000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":3121,"state":"closed","title":"Consistent usage of 'sourceMap' in diagnostics","updatedAt":1431456529000},{"assignedTo":"","body":"I have been looking at dependency injection and a few issues with refactoring in regards to `_.pluck`.  One of the primary things I run into is that I want these things to enforce the interface for refactoring.\r\n\r\nA few examples\r\n\r\nInterface used as ","comments":6,"createdAt":1429847835000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/276898?v=3","loggedByName":"park9140","milestone":"","number":2902,"state":"open","title":"Suggestion: Interfaces as string literals","updatedAt":1431445047000},{"assignedTo":"","body":"TLDR: How to generated .d.ts from function-scoped class expressions?\r\n\r\nConsider the following snippet:\r\n\r\n```ts\r\nclass MyService {\r\n\tconstructor(private dependency) { }\r\n\tmyMethod() {\r\n\t\treturn this.dependency.someMethod();\r\n\t}\r\n}\r\n\r\nfunction myFact","comments":2,"createdAt":1431437240000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/589286?v=3","loggedByName":"awerlang","milestone":"","number":3129,"state":"closed","title":"Declarations for function-scoped class expressions","updatedAt":1431444540000},{"assignedTo":"","body":"The parser has a function called nextTokenCanFollowModifier and another one called nextTokenCanFollowContextualModifier. There is no reason for these to be two different functions. I used the following reasoning:\r\n\r\n* A contextual modifier is a token","comments":2,"createdAt":1431376423000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3116,"state":"closed","title":"Remove nextTokenCanFollowContextualModifier","updatedAt":1431418495000},{"assignedTo":"","body":"Hello,\r\n\r\nWanted to highlight that there appears to be a difference between the use of `sourceMap` vs `sourcemap` within the project (likely just documentation related).\r\n\r\nWhile using the [gulp-tsc](https://www.npmjs.com/package/gulp-tsc) plugin I f","comments":5,"createdAt":1431379979000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/156715?v=3","loggedByName":"staxmanade","milestone":"","number":3118,"state":"closed","title":"sourcemap vs sourceMap inconsistencies","updatedAt":1431406579000},{"assignedTo":"","body":"Would the following be a valid `tsconfig.json` file:\r\n\r\n```json\r\n{\r\n    \"compilerOptions\": {\r\n        \"target\": \"es5\",\r\n        \"module\": \"commonjs\",\r\n        \"declaration\": false,\r\n        \"noimplicitany\": false,\r\n        \"removecomments\": true\r\n   ","comments":8,"createdAt":1423099210000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1933,"state":"closed","title":"Should the keys to `tsconfig` be case insensitive","updatedAt":1431402047000},{"assignedTo":"","body":"Using new ES5 and ES6 features should be seamless. And they aren't today using TypeScript, because developers need to manually polyfill themselves. The TypeScript compiler have all the information it needs to enable auto-polyfilling(the type and the ","comments":8,"createdAt":1431243427000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3101,"state":"closed","title":"Proposal: Auto-polyfilling","updatedAt":1431399526000},{"assignedTo":"zhengbli","body":"Current definition allows only string and Document argument. But it should allows BodyInit defined as:\r\ntypedef (Blob or BufferSource or FormData or URLSearchParams or USVString) BodyInit;\r\n\r\nhttps://fetch.spec.whatwg.org/#bodyinit\r\nhttps://xhr.spec.","comments":3,"createdAt":1430551018000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/304745?v=3","loggedByName":"janousek","milestone":"TypeScript 1.5.3","number":3002,"state":"closed","title":"lib.d.ts - XMLHttpRequest - send","updatedAt":1431391697000},{"assignedTo":"","body":"The property `name` of function does not seem to be available in Typescript:\r\n\r\n```\r\nfunction foo() {â¦}\r\nfoo.name; // 'foo'\r\n\r\nerror TS2339: Property 'name' does not exist on type '() => string'.\r\n```\r\n\r\nI can declare an interface but it requires a c","comments":7,"createdAt":1424346585000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2182874?v=3","loggedByName":"mblinsitu","milestone":"","number":2076,"state":"closed","title":"Cannot access name of function or class in a type-safe way","updatedAt":1431388702000},{"assignedTo":"","body":"fixes perf issue on services layer when 'is program up-to-date' check failed because of difference is directory separators","comments":2,"createdAt":1431378203000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3117,"state":"closed","title":"program should store file names with normalized slashes","updatedAt":1431385628000},{"assignedTo":"yuit","body":"Currently:\r\n```ts\r\n\"use strict\"\r\nfunction e6([a,a]) { }\r\n```\r\n\r\nAbove code when emitted with target ES6, generated javascript when executed will give an error  duplicate identifier name. See ES6 spec section [19.2.1.1.1](https://people.mozilla.org/~j","comments":0,"createdAt":1429210837000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.6","number":2800,"state":"closed","title":"Destructuring Parameter allow duplicate identifier ","updatedAt":1431382258000},{"assignedTo":"","body":"fixes #3106","comments":4,"createdAt":1431321895000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3109,"state":"closed","title":"Do not hoist ambient declarations in System.js emit","updatedAt":1431381722000},{"assignedTo":"","body":"Hi,\r\n\r\nI'm using an external library through a .d.ts file. This file contains the following module definition:\r\n\r\n```ts\r\ndeclare module ExternalLibrary \r\n{\r\n  interface ExternalLibraryInterface { ... }\r\n}\r\n```\r\n\r\nNow I want declare my own module (MyM","comments":4,"createdAt":1409145542000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6196882?v=3","loggedByName":"laszlojakab","milestone":"","number":551,"state":"closed","title":"Module name collosion","updatedAt":1431368756000},{"assignedTo":"","body":"https://developer.mozilla.org/zh-CN/docs/Web/API/notification/Using_Web_Notifications\r\n![unf _n c9y b 1_n 3phz h](https://cloud.githubusercontent.com/assets/3072571/7559928/4c1e3906-f7f0-11e4-8e1b-97c619972410.png)","comments":1,"createdAt":1431328385000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3072571?v=3","loggedByName":"kk80805588","milestone":"","number":3111,"state":"closed","title":"Please add Notification.requestPermission()","updatedAt":1431365633000},{"assignedTo":"","body":"Hi all,\r\nI think I found an issue with the new TSC 1.5 const support.\r\n\r\nConsider this code:\r\n\r\n````TypeScript\r\nconst A = \"5\"\r\n\r\nclass P {\r\n\tconst K = \"6\"\r\n\tconst J = \"7\"\r\n}\r\n````\r\n\r\nIn Playground, the generated code is:\r\n\r\n```JavaScript\r\nvar A = \"5\"","comments":14,"createdAt":1431009427000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5443453?v=3","loggedByName":"teobugslayer","milestone":"","number":3068,"state":"closed","title":"Possibly bad code generated for const inside classes","updatedAt":1431334666000},{"assignedTo":"","body":"","comments":0,"createdAt":1431233477000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3099,"state":"closed","title":"Proposal Sub-tree loading","updatedAt":1431238985000},{"assignedTo":"","body":"When i'm trying to get a prototype of constructor, which is passed as method option, compiler is throwing error 'Property \"prototype\" is missing,'.\r\n\r\nLink: http://www.typescriptlang.org/Playground#src=declare%20class%20Foo%20%7B%0A%09bar%3A%20number","comments":2,"createdAt":1431180050000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6064327?v=3","loggedByName":"yakimchuk","milestone":"","number":3097,"state":"closed","title":"Property \"prototype\" is missing.","updatedAt":1431232153000},{"assignedTo":"","body":"Support compiling multiple input .ts files into one external module.\r\n\r\nNeed to determine exactly how the module boundaries are defined when doing this.","comments":38,"createdAt":1405445404000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":17,"state":"open","title":"Suggestion: multi-file external modules","updatedAt":1431191470000},{"assignedTo":"","body":"Version: 1.5 beta.\r\n\r\nI found that operate the getEncodedSyntacticClassifications function in \"typescriptServices.js\",  the services will come into endless loop.\r\n\r\nFor example:\r\nA script: length 800:\r\nThe span:(0,500); \r\n\r\nOperate the getEncodedSynt","comments":5,"createdAt":1431066632000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4094135?v=3","loggedByName":"featherJ","milestone":"","number":3082,"state":"closed","title":"Endless loop in getEncodedSyntacticClassifications(fileName,span)","updatedAt":1431174997000},{"assignedTo":"","body":"Address Issue #2800.One of the decision I made is to give a duplicate identifier error even in non-strict mode code because it is consistency with non destructing parameter declaration.","comments":2,"createdAt":1430863835000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3048,"state":"closed","title":"Duplicate identifier binding element","updatedAt":1431134247000},{"assignedTo":"","body":"```typescript\r\nexport function keyOf<a>(value: { key: a; }): a {\r\n\treturn value.key;\r\n}\r\nexport interface Data {\r\n\tkey: number;\r\n\tvalue: Date;\r\n}\r\n\r\nvar data: Data[] = [];\r\n\r\nexport function toKeys<a>(values: a[], toKey: (value: a) => string): string","comments":9,"createdAt":1430839767000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":3038,"state":"closed","title":"Inference bug","updatedAt":1431127089000},{"assignedTo":"","body":"Not sure if this one relates to #3038 \r\n\r\n```typescript\r\ninterface A {\r\n\tx: string;\r\n}\r\n\r\ninterface B {\r\n\tx: string;\r\n\ty: string;\r\n}\r\n\r\nfunction copyB(value: B): B {\r\n\treturn undefined;\r\n}\r\n\r\nvar values: A[] = [];\r\n\r\nvalues.map(value => copyB(value))","comments":3,"createdAt":1431007602000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":3067,"state":"closed","title":"Another inference bug","updatedAt":1431126932000},{"assignedTo":"","body":"Since it is necessary to type check a source file before you emit it, it is necessary to type check all files before emitting -out.\r\n\r\nThanks @vladima for your help on this fix. It fixes #2061.","comments":7,"createdAt":1431118810000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3094,"state":"closed","title":"Type check all files when emitting a file under -out","updatedAt":1431122938000},{"assignedTo":"JsonFreeman","body":"Hi,\r\n\r\nI'm using VS 2015 CTP 5 and wanted to try out `typescriptservices.js` from LKG of 12-Feb-2015.\r\n\r\nCode like the following:\r\n\r\n```typescript\r\n// my.d.ts\r\ndeclare module foo.bar {\r\n  class Baz { }\r\n}\r\n```\r\n\r\nWhen referenced from another project ","comments":8,"createdAt":1424253167000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5.3","number":2061,"state":"closed","title":"Compile-on-save with typescriptservices.js from LKG drops module prefixes","updatedAt":1431122747000},{"assignedTo":"","body":"Today, if you say \r\n```\r\n//@declaration: false\r\n```\r\nin a test, it will emit declarations! The harness just checks for the presence or absence of these options. It does not respect false.","comments":2,"createdAt":1431117910000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3093,"state":"closed","title":"Make boolean compiler options in harness true only if they say 'true'","updatedAt":1431119267000},{"assignedTo":"","body":"","comments":1,"createdAt":1431115924000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3092,"state":"closed","title":"Prevent infinite loop when classifying.","updatedAt":1431118789000},{"assignedTo":"","body":"Fixes https://github.com/Microsoft/TypeScript/issues/3082","comments":1,"createdAt":1431114170000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3091,"state":"closed","title":"Prevent infinite loop when classifying.","updatedAt":1431114845000},{"assignedTo":"","body":"This completely breaks the managed LS as the data shape no longer matches our established API.","comments":2,"createdAt":1431104219000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3088,"state":"closed","title":"Don't wrap an array of errors in an additional array.","updatedAt":1431105028000},{"assignedTo":"","body":"The new module format outputs global-less modules that are compatible with both AMD and CJS loaders.\r\n\r\nFixes #2036.","comments":45,"createdAt":1428043150000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"","number":2605,"state":"closed","title":"Add support for combined AMD+CommonJS module export format","updatedAt":1431084620000},{"assignedTo":"","body":"This issue describes TypeScript's support for [ECMAScript 6 modules](http://www.2ality.com/2014/09/es6-modules-final.html) as implemented in #1983, #2197, and #2460.\r\n\r\nTypeScript 1.5 supports ECMAScript 6 (ES6) modules. ES6 modules are effectively T","comments":66,"createdAt":1425688405000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"TypeScript 1.5","number":2242,"state":"closed","title":"ES6 Modules","updatedAt":1431076955000},{"assignedTo":"","body":"Consider this:\r\n\r\n```\r\nvar foo: (number) => void = (bar: string) => bar.substr(0);\r\n```\r\n\r\nAccording to spec, 3.10.4 Assignment Compatibility:\r\n\r\n> * M is a non-specialized call or construct signature and S has an apparent call or construct signature","comments":2,"createdAt":1431060628000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3143139?v=3","loggedByName":"akaza-akari","milestone":"","number":3080,"state":"closed","title":"Function assignment compatibility differs from spec.","updatedAt":1431065577000},{"assignedTo":"","body":"This is the definition of Geolocation in lib.d.ts:\r\n```javascript\r\ninterface Geolocation {\r\n    clearWatch(watchId: number): void;\r\n    getCurrentPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOpt","comments":3,"createdAt":1431030326000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1424661?v=3","loggedByName":"yebrahim","milestone":"","number":3075,"state":"closed","title":"interface Geolocation (lib.d.ts) has the wrong type for watchId","updatedAt":1431061684000},{"assignedTo":"JsonFreeman","body":"The following code used to type-check fine (Using the types for Promises prior to: https://github.com/borisyankov/DefinitelyTyped/commit/c95561be3526f90f0e717734a659d1c01d0492d4 ), but since they now use types based on:  https://github.com/Microsoft/","comments":11,"createdAt":1423671727000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/415450?v=3","loggedByName":"iislucas","milestone":"TypeScript 1.6","number":2010,"state":"closed","title":"Promise-type checking gives false errors","updatedAt":1431049916000},{"assignedTo":"","body":"Fixes #2997","comments":1,"createdAt":1431024188000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3071,"state":"closed","title":"Make removeSubtypes resilient to reentry","updatedAt":1431038515000},{"assignedTo":"","body":"We explicitly list \".ts\" and \".d.ts\" files every time we resolve files or modules. This change puts the two extensions in a list of supported extensions, and uses it everywhere. This allows for easy addition to supported extensions, e.g. the work @Cy","comments":2,"createdAt":1430805000000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3032,"state":"closed","title":"unify file extension resolution logic","updatedAt":1431034063000},{"assignedTo":"","body":"for example:\r\n\r\nFunctionExpression is checked for on line 4547 and also 4559\r\n\r\n![screen shot 2015-05-07 at 3 24 45 pm](https://cloud.githubusercontent.com/assets/1409121/7524024/523b49bc-f4cd-11e4-8a01-638c3ed5dc2c.png)\r\n","comments":2,"createdAt":1431026815000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1409121?v=3","loggedByName":"Connoropolous","milestone":"TypeScript 1.6","number":3072,"state":"closed","title":"isFunctionLike cases contains duplicates","updatedAt":1431030019000},{"assignedTo":"","body":"No matter in which line is dot, code is dislocated after formatting:\r\n![format_bug](https://cloud.githubusercontent.com/assets/11413326/7524334/f7c87c24-f509-11e4-8534-c832cef9cb96.png)\r\n\r\nMy environment:\r\nMicrosoft Visual Studio Community 2013 (12.0","comments":1,"createdAt":1431027908000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11413326?v=3","loggedByName":"ArtemAvramenko","milestone":"","number":3074,"state":"closed","title":"TS 1.5 formatter â arrow function body should be indented","updatedAt":1431029292000},{"assignedTo":"","body":"Fixes #3072","comments":0,"createdAt":1431027018000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3073,"state":"closed","title":"remove duplicate case labels","updatedAt":1431028750000},{"assignedTo":"","body":"I want to write TypeScript and run my program using Node/io.js. Obviously, for this to happen, the type annotations will need to be stripped before the program is run.\r\n\r\nIt's easy enough to do this manually for one file, but for a large dependency g","comments":6,"createdAt":1430570455000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/921609?v=3","loggedByName":"OliverJAsh","milestone":"","number":3007,"state":"closed","title":"Use in Node/io.js","updatedAt":1431028546000},{"assignedTo":"","body":"","comments":0,"createdAt":1431024106000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3070,"state":"closed","title":"Make removeSubtypes resilient to reentry","updatedAt":1431024119000},{"assignedTo":"","body":"Refactor narrowTypeByInstanceof to be more uniform for its two branches (prototype and construct signature return types), also fixed an issue we ran into in real world code. Added a regression test for it.","comments":1,"createdAt":1430969287000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3064,"state":"closed","title":"Refactor narrow type by instance of","updatedAt":1431023980000},{"assignedTo":"","body":"Currently (TS v.1.5.2) the compiler does not do inference correctly for certain cases:\r\n\r\nhttps://github.com/Microsoft/TypeScript/issues/3038\r\n\r\nAlthough it is by design, reflected in the spec and there is no viable way for doing it correctly, I thin","comments":5,"createdAt":1430922952000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":3055,"state":"closed","title":"Suggestion: Display a honest message when inference cannot be done correctly","updatedAt":1431020690000},{"assignedTo":"","body":"The spec does not define any case in Assignment Compatibility where `S` is a type parameter constrained to a primitive type and `T` is that same primitive type.\r\n\r\nThis leads to some weird errors, e.g. `T` is not assignable to `number` even though `T","comments":6,"createdAt":1428617766000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"Community","number":2694,"state":"open","title":"Define assignability relation for primitive-constrained type parameters","updatedAt":1431020278000},{"assignedTo":"","body":"Fixes #2010. I will also check in a fix to definitely typed.","comments":3,"createdAt":1430952838000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3058,"state":"closed","title":"Fix typing for Promises so that a void error callback doesn't mess up inference","updatedAt":1431020002000},{"assignedTo":"vladima","body":"Typing semicolon at the end of ```export type ClassificationTriple = [number, number, number];``` removes the space before the open bracket, leaving ```export type ClassificationTriple =[number, number, number];```","comments":0,"createdAt":1429747987000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"TypeScript 1.5.3","number":2883,"state":"closed","title":"Formatting removes space innapropriately from type alias.","updatedAt":1430977942000},{"assignedTo":"","body":"I am running the latest [code](https://github.com/Arnavion/typescript-github) compiled from master, but when trying to compile in the browser under strict mode it is throwing this error.\r\n\r\nThe problem is caused by a function parameter in [emitter.ts","comments":1,"createdAt":1430566132000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4387473?v=3","loggedByName":"frankwallis","milestone":"TypeScript 1.5.3","number":3006,"state":"closed","title":"error: 'static is a reserved identifier' when running in strict mode","updatedAt":1430977942000},{"assignedTo":"ahejlsberg","body":"According to spec, circular references are prohibited for type aliases and should be reported as errors. But in 1.4 it depends on the order of declarations. For example, no error is reported in the following code:\r\n```ts\r\ntype typeAlias = typeof varO","comments":1,"createdAt":1430435076000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/936705?v=3","loggedByName":"osdm","milestone":"TypeScript 1.5.3","number":2980,"state":"closed","title":"Type alias circular reference is not detected","updatedAt":1430977942000},{"assignedTo":"CyrusNajmabadi","body":"Compile the following in ES6:\r\n```ts\r\nmodule M {\r\n    export class C { }\r\n}\r\nmodule M {\r\n    {\r\n        let M = 0;\r\n        new C();\r\n    }\r\n}\r\n```\r\n\r\nThe output you get will cause a crash:\r\n```js\r\nvar M;\r\n(function (M) {\r\n    class C {\r\n    }\r\n    M","comments":2,"createdAt":1429653617000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5.3","number":2852,"state":"closed","title":"Module local renaming does not take into account block scoped locals","updatedAt":1430977942000},{"assignedTo":"ahejlsberg","body":"In section 3.9, it says what kinds of constructs depend on what type references when resolving a type alias. An interface or class should not depend on any of its members. Namely, the following should work:\r\n```ts\r\nvar s: stringOrFoo;\r\ntype stringOrF","comments":3,"createdAt":1429313062000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5.3","number":2823,"state":"closed","title":"An interface should not depend on its signatures","updatedAt":1430977941000},{"assignedTo":"yuit","body":"Tracking the test work associated with the spec changes here https://github.com/Microsoft/TypeScript/pull/1878\r\n\r\n* [x] Updates to parameter declarations (3.8.2.2).\r\n* [x]  Spread elements in array literals (4.6).\r\n* [x]  Updates to contextually type","comments":5,"createdAt":1422919896000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.5.3","number":1898,"state":"closed","title":"Conformance tests for updated language spec","updatedAt":1430977941000},{"assignedTo":"mhegazy","body":"In core.d.ts the definition comment for atan2 is the following:\r\n\r\n`Returns the angle (in radians) from the X axis to a point (y,x).`  \r\n\r\nAlthough the function does take in the arguments in the order \"y, x\", the point in the comment should be define","comments":5,"createdAt":1429556292000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2774296?v=3","loggedByName":"mheavenor","milestone":"TypeScript 1.5.3","number":2837,"state":"closed","title":"Incorrect definition for atan2","updatedAt":1430977941000},{"assignedTo":"vladima","body":"Before we would have:\r\n\r\n```ts\r\nvar doSomethingThatReturnsAPromise: any;\r\nthis.doSomethingThatReturnsAPromise()\r\n    .then(() => {\r\n        // more code\r\n    })\r\n    .then(() => {\r\n        // even more code\r\n    });\r\n```\r\n\r\nNow we have \r\n```ts\r\nvar d","comments":23,"createdAt":1423003625000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"TypeScript 1.5.3","number":1917,"state":"closed","title":"TypeScript 1.4 indentation issue on chained function calls","updatedAt":1430977941000},{"assignedTo":"JsonFreeman","body":"The following code should compile just fine, but there is an error when doesNotWork tries to pass `this` to the constructor for CBase.\r\n\r\n```ts\r\nclass C<T1> extends CBase<T1> {\r\n    public works() {\r\n        new CBaseBase<Wrapper<T1>>(this);\r\n    }\r\n","comments":4,"createdAt":1418173546000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5.3","number":1424,"state":"closed","title":"Inheriting constructor through extends clause with a wrapped type argument does not work","updatedAt":1430977941000},{"assignedTo":"ahejlsberg","body":"```typescript\r\nclass Foo {\r\n\tprivate member: number;\r\n}\r\n\r\nclass Bar {\r\n\tpublic member: string;\r\n}\r\n\r\nvar baz: Foo | Bar;\r\nconsole.log(baz.member); // Compiles. baz.member is number | string even though it's private in Foo\r\n```\r\n\r\nhttps://github.com/","comments":1,"createdAt":1422639612000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.5.3","number":1870,"state":"closed","title":"Union type gives public access to private members of the constituent types","updatedAt":1430977941000},{"assignedTo":"CyrusNajmabadi","body":"I updated the compiler such that a file no longer generated errors. When I did a `jake runtests`, I got a new `.types `file and the `.errors.txt` file disappeared. However, only after I did a `jake runtests` did I get the `.symbols` file.","comments":3,"createdAt":1429303269000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5.3","number":2822,"state":"closed","title":"'.symbol' baselines don't always get generated, even after a full 'jake runtests'","updatedAt":1430977941000},{"assignedTo":"ahejlsberg","body":"```ts\r\nenum E { x }\r\nfunction enumThing<T extends number>() {\r\n    var t: T;\r\n    var num: number = t; // Should work\r\n    var enumMember: E = t; // Should not work\r\n}\r\n```\r\n\r\nRight now both of these are an error. But the number one should work becau","comments":3,"createdAt":1429057675000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":2767,"state":"closed","title":"Type parameter constrained to number is not assignable to number","updatedAt":1430975033000},{"assignedTo":"","body":"otherwise if spelling of the file name in tripleslash reference and on disk differs we won't be able to find the file","comments":1,"createdAt":1430953381000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3059,"state":"closed","title":"use canonical file name when asking the host if file exists","updatedAt":1430971261000},{"assignedTo":"","body":"When a variable named `arguments` is used in a property initializer, our emitted code refers to the wrong `arguments`.\r\n\r\nInput\r\n```TypeScript\r\nvar arguments = 100;\r\n\r\nclass C {\r\n    y = arguments;\r\n    constructor() {\r\n    }\r\n}\r\n```\r\n\r\nOutput\r\n```Ja","comments":1,"createdAt":1429133810000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":2779,"state":"open","title":"Property initializers capture the wrong 'arguments' value","updatedAt":1430970702000},{"assignedTo":"","body":"Check out this code:\r\n\r\n```ts\r\ninterface I {\r\n\tX?: number;\r\n\tY?: string;\r\n}\r\n\r\nvar i: I;\r\ni.X = 5;\r\n\r\nfunction f() {\r\n\treturn <I> { X: 1, Y: 'a' };\r\n}\r\n```\r\n\r\n([playground link](http://www.typescriptlang.org/Playground/#src=interface%20I%20%7B%0D%0A%","comments":3,"createdAt":1406588319000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4219105?v=3","loggedByName":"fsoikin","milestone":"TypeScript 1.5","number":282,"state":"closed","title":"Rename function / find all references doesn't affect inline object literals","updatedAt":1430970505000},{"assignedTo":"","body":"```\r\nApplication: devenv.exe\r\nFramework Version: v4.0.30319\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: System.AggregateException: One or more errors occurred. ---> System","comments":1,"createdAt":1428625439000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2702,"state":"closed","title":"VS in Dev Mode crashes when services file is in use by another process","updatedAt":1430970182000},{"assignedTo":"","body":"Unable to install typescript version 1.4.0.0 .\r\n\r\nIt always gives error \"acess denied\" when I try to install it .\r\n\r\nNote : I have admin rights and this error comes always even I have installed VS 2013 update 3 and then tried to install TS 1.4.0.0\r\n\r","comments":4,"createdAt":1429707743000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4437154?v=3","loggedByName":"mt406","milestone":"","number":2863,"state":"closed","title":"Unable to install typescript version 1.4.0.0","updatedAt":1430970016000},{"assignedTo":"","body":"![quick info union types](https://cloud.githubusercontent.com/assets/972891/7506179/4d044708-f411-11e4-91f8-b9339bc33627.gif)\r\n\r\nYou can see this in the type-writer as well, so I'm sure the issue can also be reproduced in the compiler.","comments":1,"createdAt":1430957018000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":3062,"state":"open","title":"Quick info & signature help for properties of a union type depend on previous uses of properties of a constituent type","updatedAt":1430969646000},{"assignedTo":"","body":"In TypeScrip 1.5 beta, is it possible to set `emitDecoratorMetadata` flag in Visual Studio 2013?\r\n\r\nI can see the `__metadata` call in the generated JS code when compile from command line but I cannot find corresponding option in VS.\r\n\r\nThanks!","comments":2,"createdAt":1430955395000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5304673?v=3","loggedByName":"abakirov","milestone":"","number":3061,"state":"closed","title":"emitDecoratorMetadata in Visual Studio","updatedAt":1430968037000},{"assignedTo":"","body":"implement #1283","comments":11,"createdAt":1430403230000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"","number":2969,"state":"closed","title":"Type narrowing by construct signature of interface or object type literal","updatedAt":1430959922000},{"assignedTo":"","body":"Fixes #2836, though we lose Function#name for decorated classes in ES6. A later fix will look at an alternative to make this work.","comments":1,"createdAt":1430958305000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":3063,"state":"closed","title":"Removed Object.defineProperty for function name","updatedAt":1430959275000},{"assignedTo":"","body":"It would be great if we could have wildcard support for files.\r\n\r\n```bash\r\ntsc -w -m amd -t es5 **/*.ts\r\n```\r\n\r\nCurrently we need to use unix commands.\r\n\r\n```unix\r\nfind . -name \"*.ts\" | xargs tsc -w -m amd -t es5\r\n```\r\n\r\nThere are also cases when we ","comments":2,"createdAt":1413567976000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/287744?v=3","loggedByName":"prabirshrestha","milestone":"","number":911,"state":"open","title":"Support for wildcards in command line","updatedAt":1430958977000},{"assignedTo":"","body":"You will encounter the pattern below very often in the wild. Despite TypeScript having classes as a valid replacement, this should be support IMO, especially when migration a code base or when looking at plain JS code.\r\n\r\n```\r\nfunction X() {\r\n       ","comments":1,"createdAt":1430940972000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"","number":3056,"state":"open","title":"Recognize type definitions in ctor-like functions","updatedAt":1430958766000},{"assignedTo":"rbuckton","body":"I believe it's expected that `tsc -t es6` should be externally transpilable to ES5 (eg with Babel)\r\n \r\nSee https://gist.github.com/alexeagle/24243fbb87dbd8bad6f1\r\n\r\nBabel replaces the __decorate line `this.__decorate` with `undefined.__decorate` so t","comments":12,"createdAt":1429551782000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/47395?v=3","loggedByName":"alexeagle","milestone":"TypeScript 1.5.3","number":2836,"state":"closed","title":"decoratorMetadataEmit not compatible with Babel's 6-to-5","updatedAt":1430956368000},{"assignedTo":"","body":"## What does we need?\r\n\r\nWe need type guards by constructor signature.\r\n\r\n```ts\r\n// class decomposed. from http://www.typescriptlang.org/Handbook#writing-dts-files\r\ninterface A_Static {\r\n    new(m: any): A_Instance;\r\n    st: string;\r\n}\r\ninterface A_I","comments":11,"createdAt":1417021864000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"TypeScript 1.5.3","number":1283,"state":"closed","title":"proposal: type guards by constructor signature","updatedAt":1430943173000},{"assignedTo":"mhegazy","body":"I have a fairly complex project, and notice that if I import one of my modules, it causes a large percentage of intellisense function signatures to stop working.  I can still navigate objects/classes/functions but do not see the signatures for a numb","comments":3,"createdAt":1423616968000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/814134?v=3","loggedByName":"jasonswearingen","milestone":"TypeScript 1.6","number":2004,"state":"open","title":"VS2013 Plugin: missing intellisense for function signatures in small but complex project","updatedAt":1430940247000},{"assignedTo":"","body":"The format string:\r\n\r\n> \"Individual declarations in merged declaration {0} must be all exported or all local.\"\r\n\r\nshould have single quotes around the `{0}`.","comments":1,"createdAt":1429753215000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2885,"state":"closed","title":"Use single quotes in error message for inconsistently exported merged declarations","updatedAt":1430936067000},{"assignedTo":"","body":"Do a Refactor->Rename on some identifier defined in lib.d.ts. Ideally you'd get an error that this isn't allowed and why. I think we used to have an error to this effect. Now we just pop up a Save As dialog to try to save lib.d.ts elsewhere since it'","comments":4,"createdAt":1429739852000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.5","number":2878,"state":"closed","title":"Add an error when doing Refactor->Rename on a lib.d.ts value","updatedAt":1430935941000},{"assignedTo":"CyrusNajmabadi","body":"In the image below, I would like to see `bar` in `var b: bar.Baz` to have colour.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1106823/7299670/35acd42c-e9cf-11e4-8f7e-90732cca885f.png)\r\n\r\nThe alias declaration itself should also be colouris","comments":5,"createdAt":1429800265000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.6","number":2890,"state":"open","title":"Please consider colourising aliases (Visual Studio)","updatedAt":1430935889000},{"assignedTo":"","body":"ES6 module loader assumes that there should be only one entry for every imported module in the module dependency list and as a consequence there should be only one setter for every module.This does not play well with the current TypeScript emit where","comments":0,"createdAt":1430242991000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2943,"state":"closed","title":"Duplicate items in dependency list don't work correctly with System.register modules","updatedAt":1430935811000},{"assignedTo":"","body":"I just updated to latest. Would like API equivalents for the following: \r\n\r\n```ts\r\nts.typeToDisplayParts\r\nts.getTokenAtPosition\r\nsourceFile.getNamedDeclarations\r\n```\r\n\r\n\r\nError log: \r\n```\r\n/fixmyts/addClassMember.ts(5,31): error TS2305: Module '\"type","comments":3,"createdAt":1429836434000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2899,"state":"closed","title":"Language Service API review","updatedAt":1430935608000},{"assignedTo":"mhegazy","body":"The previous (1.0 or 1.1) compiler emitted a table of identifier renames into the source map. Principally this was for renames of \"this\" into \"_this\". The IE developer tools used this to make this scenario work\r\n- User is debugging Typescript in the ","comments":3,"createdAt":1429663144000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6385855?v=3","loggedByName":"danmosemsft","milestone":"TypeScript 2.0","number":2859,"state":"open","title":"Port from old compiler code to emit identifier renames into source map","updatedAt":1430935456000},{"assignedTo":"","body":"Observed in VS2013, TS1.4\r\n\r\nThis is a hard one to be exact about. I will do what I can:\r\n\r\nSay I have \r\n```\r\ninterface Range<a> {\r\nfrom: a;\r\nto: a;\r\n}\r\n```\r\n\r\nI have a lot of code  using this interface. Now I want to rename `from` -> `start` and `to","comments":11,"createdAt":1428698471000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":2716,"state":"closed","title":"Consequent renaming of 2 identifiers mentioned in the same lines is broken","updatedAt":1430935435000},{"assignedTo":"","body":"implement #722\r\n","comments":5,"createdAt":1430836430000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"","number":3037,"state":"closed","title":"Error message improvement. show \"Cannot find namespace '{0}'.\" message.","updatedAt":1430933763000},{"assignedTo":"","body":"The return signature of `readConfigFile()` changed in f8424d0b0c91a487a2c8cc226c89ffb359816b7b and the code using it in `ProjectService` was never updated to match. This lead to the language services attempting to parse an object that doesn't match w","comments":9,"createdAt":1430863237000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/204106?v=3","loggedByName":"bryanforbes","milestone":"","number":3047,"state":"closed","title":"ProjectService passing incorrect object to parseConfigFile()","updatedAt":1430933553000},{"assignedTo":"","body":"I just installed the 1.1.0.0 tsc compiler, and found a misleading error message, in which the compiler indicates that an existing symbol doesn't exist. \r\n\r\nI work with external modules, so this minimal example has two files:\r\n\r\n**Envelope.d.ts**:\r\n``","comments":6,"createdAt":1411399042000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/940931?v=3","loggedByName":"psnider","milestone":"TypeScript 1.5.3","number":722,"state":"closed","title":"version 1.1.0.0: misleading error for incorrectly referenced interface","updatedAt":1430932950000},{"assignedTo":"","body":"Hi, \r\n\r\nTS: 1.4/1.5\r\n\r\nIn the following, the compiler issues an error on the last line:\r\n\r\n```typescript\r\nmodule foo {\r\n\t\r\n\texport module bar {\r\n\t\texport class F { }\r\n\t}\r\n\t\r\n\texport module empty {\r\n\t}\r\n}\r\n\r\nvar x: typeof foo.bar; // okay\r\nvar y: type","comments":2,"createdAt":1430915677000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":3053,"state":"open","title":"Cannot use `typeof` on an empty module","updatedAt":1430927870000},{"assignedTo":"","body":"I have the following variable\r\n\r\n``` typescript\r\nvar dataset: DOMStringMap = ...\r\n```\r\n\r\nTrying to read the attributes of the object will make the compilation to js fail \r\n\r\n``` typescript\r\nvar someValue: string =  dataset.someValue\r\n```\r\n\r\nTreating ","comments":1,"createdAt":1430899449000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/717143?v=3","loggedByName":"maroun-baydoun","milestone":"","number":3051,"state":"closed","title":"Access values inside DOMStringMap as object attributes","updatedAt":1430927002000},{"assignedTo":"","body":"The only thing about TypeScript that I really, really do not like is misuse of comments to specify reference paths. I.e. ///<reference path=\"\\blabla\\reflect-metadata\\blabla.d.ts\"/>\r\n\r\nThis is a very bad idea because:\r\n1) Comments are meant for humans","comments":2,"createdAt":1430900985000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/12269205?v=3","loggedByName":"bluemmc","milestone":"","number":3052,"state":"closed","title":"Worst idea ever of misusing comments inside source code to specify code paths","updatedAt":1430926367000},{"assignedTo":"","body":"Typescript:\r\n\r\n```\r\n    private isIdentifierCharacter(char: string): boolean {\r\n        var charCode = char.charCodeAt(0);\r\n        return\r\n            ((charCode >= 'a'.charCodeAt(0) && charCode <= 'z'.charCodeAt(0)) ||\r\n            charCode == '_'.","comments":4,"createdAt":1428637786000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5921642?v=3","loggedByName":"victorhurdugaci","milestone":"","number":2704,"state":"closed","title":"If the expression after the return statement is on a new line, the generated code is incorrect","updatedAt":1430906071000},{"assignedTo":"","body":"It makes very little sense that IO-bound operations (e.g. readFile, writeFile) are synchronous when we run on a platform whose touted strength is in writing IO-bound applications through asynchronous non-blocking APIs.\r\n\r\nCompile times could probably","comments":15,"createdAt":1422578782000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1857,"state":"open","title":"Make the Compiler and Language Service API Asynchronous","updatedAt":1430886535000},{"assignedTo":"","body":"","comments":3,"createdAt":1430758326000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3020,"state":"closed","title":"Fix #3012: expose scanner","updatedAt":1430880226000},{"assignedTo":"","body":"process.execPath could have any name, but defaults on `iojs` for iojs and `node` on node. The current node check is not doable i iojs. This PR fixes it.","comments":1,"createdAt":1430878509000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3050,"state":"closed","title":"Fixes iojs environment check issue","updatedAt":1430879005000},{"assignedTo":"","body":"This PR adds more Travis test targets. The `iojs` targets defaults to latest stable. There is also a fix issue with the node check environment `process.execPath` has the path `**/iojs` instead of `**/node` in iojs.","comments":8,"createdAt":1430841195000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3039,"state":"closed","title":"Adds more travis test targets","updatedAt":1430878645000},{"assignedTo":"","body":"When matching references of a symbol, display the declaration and the usages slightly differently in Visual Studio.\r\n\r\nAs I can see you already support this (the Monaco editor):\r\n![monaco-ts-declaration](https://cloud.githubusercontent.com/assets/904","comments":7,"createdAt":1430682782000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9047283?v=3","loggedByName":"Peter-Juhasz","milestone":"","number":3014,"state":"closed","title":"Distinguish declaration and usages when matching references in Visual Studio","updatedAt":1430877842000},{"assignedTo":"","body":"You only have `node 0.10` as a travis test target right now. You probably should add more test targets to TS:\r\n\r\n```yaml\r\nlanguage: node_js\r\n\r\nnode_js:\r\n  - iojs\r\n  - '0.12'\r\n  - '0.10'\r\n\r\nsudo: false\r\n```\r\nhttp://docs.travis-ci.com/user/languages/ja","comments":1,"createdAt":1430810777000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3035,"state":"closed","title":"Add multiple travis test targets","updatedAt":1430877757000},{"assignedTo":"DanielRosenwasser","body":"# Description\r\nIntellisense is not provided for a class in the same outer module from a different file unless the inner module being edited is the last module in the file. Using a recent build of Dev14.\r\n\r\n# Repro\r\n\r\n## item.ts\r\n```typescript\r\nmodule","comments":10,"createdAt":1427320004000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/518655?v=3","loggedByName":"AdamTReineke","milestone":"TypeScript 1.6","number":2496,"state":"closed","title":"Intellisense fails to find class in different file unless editing location is last module in file","updatedAt":1430863176000},{"assignedTo":"","body":"```TypeScript\r\nfunction foo() {\r\n    arguments;\r\n\r\n    arguments;\r\n}\r\n```\r\n\r\n*Expected*: Find all refs on either `arguments` will give you both of the above. Get occurrences will highlight both.\r\n\r\n*Actual*: No highlighting, no references found.","comments":0,"createdAt":1426810779000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":2432,"state":"open","title":"'arguments' object not supported by findAllRefs/getOccurrences","updatedAt":1430862920000},{"assignedTo":"","body":"```TypeScript\r\nfunction foo() {\r\n    argu/**/\r\n```\r\n\r\n*Expected*: Get completions at the cursor gives `arguments`\r\n*Actual*: Just `IArguments`.","comments":0,"createdAt":1426810833000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":2433,"state":"closed","title":"'arguments' object not supported by getCompletions","updatedAt":1430861928000},{"assignedTo":"","body":"Fixes #2980.","comments":6,"createdAt":1430518056000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":2991,"state":"closed","title":"Error when variable is circularly referenced in type annotation","updatedAt":1430856449000},{"assignedTo":"DanielRosenwasser","body":"As of recently, we do not allow references to 'arguments' in an arrow function. So the following code will error:\r\n```ts\r\nfunction foo() {\r\n     () => {\r\n           arguments;\r\n     }\r\n}\r\n```\r\nHere is what the ES6 spec has to say in section 14.2.16:\r","comments":4,"createdAt":1426806946000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":2430,"state":"closed","title":"arguments reference in an arrow function in ES5/ES6","updatedAt":1430855244000},{"assignedTo":"ahejlsberg","body":"Hi, I'm switching to ES6 modules. The type definition below worked fine in 1.5.0-alpha, but gives an error in 1.5.0-beta\r\n\r\n```\r\ndeclare var io: SocketIOClientStatic;\r\n\r\ndeclare module 'socket.io-client' {\r\n    export default io;\r\n}\r\n```\r\n\r\nIt seems ","comments":3,"createdAt":1430728077000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2162413?v=3","loggedByName":"panuhorsmalahti","milestone":"TypeScript 1.5.3","number":3018,"state":"closed","title":"error TS2303: Circular definition of import alias 'default'.","updatedAt":1430853981000},{"assignedTo":"","body":"Fixes #3018.","comments":1,"createdAt":1430845496000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":3041,"state":"closed","title":"Fix circular alias error","updatedAt":1430853854000},{"assignedTo":"","body":"","comments":2,"createdAt":1430786180000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":3030,"state":"closed","title":"Harness now reports a difference in line endings when comparing baselines","updatedAt":1430853466000},{"assignedTo":"","body":"Fix issue #3002","comments":1,"createdAt":1430846658000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3042,"state":"closed","title":"Add missing overload to XMLHttpRequest.send","updatedAt":1430850654000},{"assignedTo":"","body":"lib.d.ts should be created from http://www.w3.org/TR/dom/. \r\n\r\nWe already have a script that generates the lib from a webidl file. ","comments":5,"createdAt":1430777010000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":3027,"state":"open","title":"Generate lib.d.ts from w3c dom spec","updatedAt":1430850640000},{"assignedTo":"","body":"I think the file https://github.com/Microsoft/TypeScript/blob/master/src/compiler/emitter.js should not be there?","comments":3,"createdAt":1430848412000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":3044,"state":"closed","title":"Emitter.js accidentally committed?","updatedAt":1430850364000},{"assignedTo":"","body":"(NOTE, this is *not* a duplicate of Issue #1524. The proposal here is more along the lines of the C++ override specifier, which makes much more sense for typescript)\r\n\r\nAn override keyword would be immensely useful in typescript. It would be an optio","comments":10,"createdAt":1423568410000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10917360?v=3","loggedByName":"rwyborn","milestone":"","number":2000,"state":"closed","title":"Support override keyword on class methods","updatedAt":1430848746000},{"assignedTo":"","body":"In 1.5 beta the following is an error\r\n\r\n```typescript\r\n    class Foo {\r\n\r\n        foo() {\r\n\r\n            // Error: Invalid use of 'eval'. Class definitions are automatically in strict mode.\r\n            var eval = true;\r\n\r\n        }\r\n    }\r\n```","comments":4,"createdAt":1430822134000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":3036,"state":"closed","title":"Spurious \"Invalid use of 'eval'\" error","updatedAt":1430845554000},{"assignedTo":"","body":"In ES6 specification, class declaration is in strict-mode [here](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-strict-mode-code). Currently, we only consider class declaration to be in strict-mode if users target ES6. However, should we wi","comments":1,"createdAt":1427137284000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.5","number":2465,"state":"closed","title":"Class Declaration in strict mode","updatedAt":1430844304000},{"assignedTo":"","body":"According to MDN, `MouseEvent` takes two arguments, type and an initializer object.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent\r\n\r\n`lib.d.ts` only defines a zero-argument ctor.","comments":1,"createdAt":1430842075000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7208?v=3","loggedByName":"mprobst","milestone":"TypeScript 1.5.3","number":3040,"state":"closed","title":"MouseEvent defines no constructor arguments, takes two","updatedAt":1430843524000},{"assignedTo":"mhegazy","body":"### Summary\r\n* Implement annotations in TypeScript.\r\n* Align with Traceur and AtScript on syntax and ES5 representation.\r\n* Implement feature similarly to modules, with the following settings for output representation:\r\n - -annotations=none (default)","comments":31,"createdAt":1419458256000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/320332?v=3","loggedByName":"JeroMiya","milestone":"","number":1557,"state":"closed","title":"Proposal: Annotations (alignment with Traceur/AtScript)","updatedAt":1430826895000},{"assignedTo":"","body":"Expose the line ending option in VS, as discussed in Issue #1693 and PR #2921 ","comments":5,"createdAt":1430680935000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":3013,"state":"closed","title":"Expose new line ending option in VS","updatedAt":1430806011000},{"assignedTo":"","body":"...nd 'separateCompilation' flags are specified (used in 'transpile' related scenarios)\r\n\r\nThis PR forces emit for in-browser transpile scenarios when .js es6 file is converted to downlevel","comments":1,"createdAt":1430785233000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3029,"state":"closed","title":"emit input non .ts files as separate files when 'allowNonTsExtensions' a...","updatedAt":1430787739000},{"assignedTo":"yuit","body":"Given:\r\n```TypeScript\r\ndeclare type Foo = string;\r\n```\r\n\r\nwe report no error; however, for\r\n\r\n```TypeScript\r\ndeclare interface Foo {\r\n}\r\n```\r\n\r\nwe report\r\n\r\n```\r\nA 'declare' modifier cannot be used with an interface declaration.\r\n```\r\n","comments":1,"createdAt":1430526343000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":2994,"state":"closed","title":"'declare' modifier shouldn't be allowed on a type alias.","updatedAt":1430785123000},{"assignedTo":"","body":"The following lines are not formatted:\r\n```ts\r\n+     1;\r\n-      1;\r\n```\r\nI expect them to be formatted to the following:\r\n```ts\r\n+1;\r\n-1;\r\n```","comments":0,"createdAt":1430780223000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":3028,"state":"open","title":"Formatting of unary operands is missing some cases","updatedAt":1430784956000},{"assignedTo":"","body":"```ts\r\nconst enum E {\r\n    x\r\n}\r\n\r\nvar v = {\r\n    [E.x]: \"\"\r\n};\r\n```\r\n\r\nThere are two things we can do by taking advantage of our static knowledge of const enums. One is that we can downlevel this without using an element access:\r\n```js\r\nvar v = {\r\n ","comments":3,"createdAt":1422490786000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1844,"state":"closed","title":"Add downlevel and typing support for const enum members in computed properties","updatedAt":1430784828000},{"assignedTo":"","body":"The following gets contextually typed:\r\n```ts\r\nvar x: ((p: string) => number)[] = [p => p.length];\r\n```\r\nBut the following arguably should also be:\r\n```ts\r\nvar x: ((p: string) => number)[] = [...[p => p.length]];\r\n```\r\nSame is true for calls:\r\n```ts\r","comments":2,"createdAt":1425090828000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2172,"state":"closed","title":"Contextual typing of spread elements","updatedAt":1430780497000},{"assignedTo":"","body":"``` ts\r\nclass NumberWrapper {\r\n\tconstructor(private value: number) {}\r\n\tvalueOf(): number { return this.value; }\r\n}\r\n\r\nvar x = new NumberWrapper(1);\r\n\r\n// The right-hand side of an arithmetic operation \r\n// must be of type 'any', 'number' or an enum ","comments":8,"createdAt":1426356175000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/943597?v=3","loggedByName":"icholy","milestone":"","number":2361,"state":"open","title":"Allow wrapped values to be used in place of primitives.","updatedAt":1430779509000},{"assignedTo":"","body":"As a continuation to #2346 I decided to re-target the discussion specifically with the new ES6 module syntax (#2242) in mind, and open it as a new issue (my apologies if I got some of the ES6 module semantics wrong here, as it's still very new to me)","comments":4,"createdAt":1426324524000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8589488?v=3","loggedByName":"rotemdan","milestone":"","number":2357,"state":"closed","title":"Proposal: new ES6 style syntax to apply typeof on an ambient external module","updatedAt":1430779471000},{"assignedTo":"","body":"The following fails to compile even though T is constrained to an array type:\r\n\r\n```typescript\r\nfunction attach<T extends any[]>(cb: (...args: T) => void): void { }\r\n```\r\n\r\n```\r\nA rest parameter must be of an array type.\r\n(parameter) args: T extends ","comments":3,"createdAt":1426190851000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"","number":2328,"state":"closed","title":"Generic type constraint does not apply to rest parameters","updatedAt":1430779396000},{"assignedTo":"","body":"I have the following code:\r\n\r\n``` ts\r\nfunction logNumber(v: number) { console.log(\"number:\", v); }\r\nfunction logString(v: string) { console.log(\"string:\", v); }\r\n\r\nfunction foo1(v: number|string) {\r\n\tswitch (typeof v) {\r\n\t\tcase 'number':\r\n\t\t\tlogNumbe","comments":3,"createdAt":1425588353000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/943597?v=3","loggedByName":"icholy","milestone":"Community","number":2214,"state":"open","title":"Allow switch type guards","updatedAt":1430779192000},{"assignedTo":"","body":"I'm seeing some strange results from calling `LanguageService.getReferencesAtPosition()` on a named import.\r\n\r\nI have `file.ts` which starts with these lines:\r\n\r\n```ts\r\nimport  $ = require(\"jquery\");\r\nimport  _ = require(\"underscore\");\r\nimport  xyz =","comments":1,"createdAt":1430714130000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/723999?v=3","loggedByName":"adidahiya","milestone":"","number":3017,"state":"open","title":"LanguageService.getReferencesAtPosition reports wrong references for named imports","updatedAt":1430777357000},{"assignedTo":"","body":"Implementation for goto type in the services and server layers.","comments":4,"createdAt":1430373825000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2966,"state":"closed","title":"Get type definition at position","updatedAt":1430776270000},{"assignedTo":"","body":"I have been trying out the 1.5 beta, but I am confused about importing modules from 3rd-party JS libraries. As I understand it, TS is intended as a superset of JS so if, for example, I have a CommonJS library called foo.js, then in my app.ts, I shoul","comments":5,"createdAt":1430738939000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/183786?v=3","loggedByName":"jonrimmer","milestone":"","number":3019,"state":"closed","title":"Importing untyped JS modules","updatedAt":1430775889000},{"assignedTo":"","body":"i'm having difficulty figuring out the correct declaration for a class decorator.\r\n\r\nhere is the `.d.ts` i have:\r\n\r\n```javascript\r\n\texport function autoinject(target: any): void | ((target: any) => void);\r\n```\r\n\r\nhere is the autoinject class decorato","comments":4,"createdAt":1430768433000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10272832?v=3","loggedByName":"cmichaelgraham","milestone":"","number":3024,"state":"closed","title":"proper declaration for class decorator?","updatedAt":1430772941000},{"assignedTo":"","body":"I have an patch to TypeScript compiler options to solve issues with different newlines as in this item:\r\nhttps://typescript.codeplex.com/workitem/258\r\n\r\nIt adds this option to tsc, and uses it in program.ts / createCompilerHost() / getNewline():\r\n--n","comments":7,"createdAt":1429983338000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1635392?v=3","loggedByName":"kmashint","milestone":"","number":2918,"state":"closed","title":"tsc compiler option for --newLine NEWLINE Use newline: 'CRLF' (dos) or 'LF' (unix).","updatedAt":1430772752000},{"assignedTo":"","body":"All generated js-files have windows-style line endings.\r\nIt would be great, if we could specify the line endings - windows, unix etc.\r\n\r\nWe use PhpStorm as editor, and it keeps marking generated js, d.ts etc files as changed, even though the code is ","comments":10,"createdAt":1421393830000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/832842?v=3","loggedByName":"fMads","milestone":"","number":1693,"state":"closed","title":"Compiler flag to specify line ending ","updatedAt":1430772738000},{"assignedTo":"","body":"This is a first pass, unit tests still TODO, of adding a compiler flag to specify the line ending:\r\nhttps://github.com/Microsoft/TypeScript/issues/1693\r\n --newLine NEWLINE                  Emit newline: 'CRLF' (dos) or 'LF' (unix).\r\n\r\nI'll next add u","comments":11,"createdAt":1430066047000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1635392?v=3","loggedByName":"kmashint","milestone":"","number":2921,"state":"closed","title":"Compiler flag to specify line ending","updatedAt":1430772336000},{"assignedTo":"","body":"Examples of where we could be better:\r\n\r\n1. Quick info for an alias could present information about the alias, as well as information about what the alias points to.\r\n2. Goto-type for a union type could allow you to go to any constituent union-type-e","comments":0,"createdAt":1430771000000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":3025,"state":"open","title":"Rationalize our presentation and handling of merged/alias symbols in the IDE.","updatedAt":1430772141000},{"assignedTo":"","body":"Ported from : https://typescript.codeplex.com/workitem/1085\r\n\r\nSome core ambient `var`s already do this when the *only* interface is the static one e.g. `JSON` : https://github.com/Microsoft/TypeScript/blob/master/src/lib/core.d.ts#L916-L959\r\n\r\nWould","comments":20,"createdAt":1406007973000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":182,"state":"closed","title":"Use static interfaces for Ambient declarations in lib.d.ts","updatedAt":1430771370000},{"assignedTo":"","body":"fixes #1917, #1888\r\n\r\n```typescript\r\nfoo\r\n    .bar(() = {\r\n     })\r\n```\r\nin cases like this nodes are processed in order: `CallExpresson` -> `PropertyAccess and its child nodes` -> `ParameterList and its child nodes`. Fact that indentation was insert","comments":3,"createdAt":1430548073000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":3001,"state":"closed","title":"fix formatting for chained callbacks","updatedAt":1430770303000},{"assignedTo":"","body":"","comments":0,"createdAt":1430763587000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":3023,"state":"closed","title":"Update baselines from merging conformance test","updatedAt":1430764550000},{"assignedTo":"zhengbli","body":"I've got a bunch of TypeScript code that calls `getContext('2d')` on HTML canvas elements.\r\n\r\nSince the update to 1.5 beta this morning I now get a union type of `CanvasRenderingContext2D` and `WebGLRenderingContext`.  That makes sense for the genera","comments":13,"createdAt":1430448230000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1314477?v=3","loggedByName":"IanYates","milestone":"TypeScript 1.5.3","number":2984,"state":"closed","title":"HTMLCanvasElement.getContext('2d') incorrectly returns union type in 1.5 beta","updatedAt":1430762252000},{"assignedTo":"","body":"No just the update in those two section. See this PR #1878 for the spec change","comments":2,"createdAt":1428879849000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2735,"state":"closed","title":"Conformance test for Spec Change in Section 3.8.2.2 parameter Declaration and 6.4 Destructuring parameter declarations","updatedAt":1430761853000},{"assignedTo":"","body":"Adding conformance tests for update in spec in section 4.6  Array Literal (See PR #1878 for details)","comments":0,"createdAt":1428967042000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2753,"state":"closed","title":"Conformance test for update in section 4.6 Array Literal","updatedAt":1430761841000},{"assignedTo":"","body":"Conformance in update spec section 4.9.3 PR #1878","comments":1,"createdAt":1429032757000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2761,"state":"closed","title":"Conformance test for update spec section 4.9.3 contextual typing in function expression","updatedAt":1430761722000},{"assignedTo":"","body":"Conformance for spec change 4.17.1, 5.1.2 [See] (https://github.com/Microsoft/TypeScript/pull/1878)","comments":1,"createdAt":1429080354000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2773,"state":"closed","title":"Conformance test spec change in section 4.17.1 destructuring assignment and 5.1.2 variable declaration conformance tests","updatedAt":1430761678000},{"assignedTo":"","body":"We already have type guard (section 4.20) conformance tests. Below is an additional test for update spec in this PR #1878 ","comments":0,"createdAt":1429142240000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2785,"state":"closed","title":"Conformance for spec update section 4.20 Add additional tests for typeguard for class or object property","updatedAt":1430761626000},{"assignedTo":"","body":"See PR #1878 section 9.4, 12.1.4","comments":0,"createdAt":1429165630000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2792,"state":"closed","title":"Conformance for spec update section 9.4, 12.1.4 const enum","updatedAt":1430761581000},{"assignedTo":"","body":"See PR #1878","comments":0,"createdAt":1429239791000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2814,"state":"closed","title":"Conformance test for 4.19 Contextually Typed Expressions","updatedAt":1430761556000},{"assignedTo":"","body":"This pull request adds support for named AMD modules and addresses the pain point of using TypeScript-generated AMD modules when anonymous modules and out-of-the-box bundlers (like r.js) are not an option.   \r\n\r\nThis feature was previously discussed ","comments":13,"createdAt":1415913359000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/641505?v=3","loggedByName":"gisenberg","milestone":"","number":1158,"state":"closed","title":"Adding support for named AMD modules. ","updatedAt":1430759536000},{"assignedTo":"","body":"Issue #2392 mentions this for .filter but it is true for many array callbacks (may also be true throughout the def file for other callbacks). While it is true you can pass less args to the callback, that is not what the definition is telling us in th","comments":3,"createdAt":1430540661000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Canonical","name":"Canonical","color":"000000"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1149049?v=3","loggedByName":"daltin","milestone":"","number":3000,"state":"closed","title":"lib.d.ts: interface Array<T> should communicate optional variables","updatedAt":1430759079000},{"assignedTo":"mhegazy","body":"Hello: TSLint is using the scanner interface for a few things -- like walking through all tokens for enabling/disabling rules [selectively](https://github.com/palantir/tslint/blob/master/src/enableDisableRules.ts#L25) or for enforcing [indentation](h","comments":2,"createdAt":1430680292000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/362990?v=3","loggedByName":"ashwinr","milestone":"TypeScript 1.5.3","number":3012,"state":"closed","title":"typescriptServices.d.ts in 1.5-beta is missing Scanner interface","updatedAt":1430758872000},{"assignedTo":"rbuckton","body":"For `-t ES5`, I use the es6-promise typing here:\r\nhttps://github.com/borisyankov/DefinitelyTyped/blob/00e7f3fede5f2df55b56c72f40a144824f0f0bfa/es6-promise/es6-promise.d.ts\r\nwhich looks like\r\n```\r\ninterface Thenable<R> {\r\n\tthen<U>(onFulfilled?: (value","comments":3,"createdAt":1430156905000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/47395?v=3","loggedByName":"alexeagle","milestone":"TypeScript 1.5.3","number":2934,"state":"closed","title":"Promise typing incompatible between ES5 and ES6 emit","updatedAt":1430758015000},{"assignedTo":"","body":"This PR adds a new compiler option: separateCompilation that should be used when we compile one file at a time. In this mode when some name is not resolved (and thus is `unknownSymbol`) we conservatively assume that this name can possibly refer to a ","comments":5,"createdAt":1427745983000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2550,"state":"closed","title":"Relax import/export elision rules for separate compilation","updatedAt":1430719513000},{"assignedTo":"","body":"Issue: when opening a new file on the server, the host loads \"compiler default format options\" instead of \"host default format options\"; and the \"translate tabs to spaces option\" is hard-coded to \"true\" on the server.\r\n\r\nRelated issue on typescript s","comments":1,"createdAt":1430692414000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":3016,"state":"closed","title":"Fix host formatting configuration issues","updatedAt":1430719386000},{"assignedTo":"","body":"","comments":1,"createdAt":1430530312000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2996,"state":"closed","title":"Replace awkward last-element selection pattern with 'lastOrUndefined'","updatedAt":1430717331000},{"assignedTo":"","body":"...ier' error when running in strict mode (#3006)","comments":5,"createdAt":1430677161000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4387473?v=3","loggedByName":"frankwallis","milestone":"","number":3011,"state":"closed","title":"Rename parameter static -> isStatic, fixes 'static is a reserved identif...","updatedAt":1430700911000},{"assignedTo":"","body":"See screenshot for repro code, its much clearer.\r\n![minimal repro code](https://cloud.githubusercontent.com/assets/1753927/7439840/db615cf0-f0c1-11e4-8c1d-4e29e33a6e5b.png)\r\n\r\nGenerated using grunt-typescript 0.6.1/typescript 1.4.1 with the following","comments":3,"createdAt":1430539247000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1753927?v=3","loggedByName":"blackening","milestone":"","number":2999,"state":"closed","title":"Files ending with comments causes generated code to append the original code.","updatedAt":1430542269000},{"assignedTo":"","body":"What steps will reproduce the problem?\r\n1. Use custom typescript 1.5 beta compiler.\r\n2. Type a code snippet:    let a: typeof DataView.\r\n3. Get an error:   Error:(1, 15) TS2304: Cannot find name 'DataView'.\r\n\r\nWhat is the expected result?\r\nIt should ","comments":3,"createdAt":1430534911000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3363650?v=3","loggedByName":"raregrass","milestone":"","number":2998,"state":"closed","title":"typescript 1.5 beta in webstorm 10.0.2, get an error: TS2304-Cannot find name 'DataView'","updatedAt":1430542239000},{"assignedTo":"","body":"I am unable to assign an object literal to an extended generic type without a cast, and when the type has optional fields not even a cast will compile.\r\nI've tested the below using 1.5.0-beta\r\n\r\n```TypeScript\r\ninterface Foo {\r\n\tx?: string;\r\n\ty?: numb","comments":1,"createdAt":1430418897000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/713938?v=3","loggedByName":"acornett","milestone":"","number":2972,"state":"open","title":"Unable to assign object literal to generically typed field","updatedAt":1430540356000},{"assignedTo":"","body":"This PR is a Work In Progress that addresses multiple `__extends`\r\nbeing output as described in #1350: Multiple `__extends` being output\r\nwhen `--module amd` is set.\r\n\r\nThe issue still exists as of `v1.5.0 - f53e6a8`.\r\n\r\nApparently a fix was created ","comments":18,"createdAt":1429842608000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/995120?v=3","loggedByName":"whitneyit","milestone":"","number":2901,"state":"closed","title":"Add support for --noEmitHelpers flag","updatedAt":1430527389000},{"assignedTo":"","body":"Updated typings for Promise in ES6. Fixes #2934","comments":0,"createdAt":1430441840000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2982,"state":"closed","title":"Updated ES6 declarations for Promise, updated baselines","updatedAt":1430525489000},{"assignedTo":"","body":"Is there a list of reserved keywords for Typescript somewhere? I have looked around and couldn't find it, even in the [language specification](http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf).","comments":3,"createdAt":1427510443000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1388219?v=3","loggedByName":"chinhodado","milestone":"","number":2536,"state":"closed","title":"List of reserved keywords","updatedAt":1430524667000},{"assignedTo":"","body":"We can do this:\r\n\r\n    memberName: { [index: number]: string };\r\n\r\nAnd then use enums as index signature parameters, since they are some kind of numbers:\r\n\r\n    this.memberName[EnumType.EnumMember] = \"\";\r\n\r\nBut the language **does not allow** definin","comments":1,"createdAt":1430521861000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/214506?v=3","loggedByName":"iravanchi","milestone":"","number":2992,"state":"closed","title":"Allow enum types to be index parameters in array interfaces","updatedAt":1430523352000},{"assignedTo":"","body":"Fixes helper emit for #2836.\r\nDoes not fix `Object.defineProperty` issue.","comments":1,"createdAt":1430503533000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2989,"state":"closed","title":"Fixes helpers in strict mode","updatedAt":1430520101000},{"assignedTo":"","body":"Fix #2984 ","comments":0,"createdAt":1430505280000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":2990,"state":"closed","title":"Added overloads for HTMLCanvasElement.getContext method","updatedAt":1430518101000},{"assignedTo":"","body":"Hi guys, i'd like to talk about creating multiple js files from one tsconfig.json:\r\n\r\nWould it be possible to have the \"out\" accept object(in addition to string ofc) so that the following tsconfig.json:\r\n```json \r\n\"compilerOptions\": {\r\n    \"out\": { \r","comments":3,"createdAt":1430473050000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6986076?v=3","loggedByName":"AbubakerB","milestone":"","number":2986,"state":"open","title":"Suggestion: Multiple js files from one tsconfig.json","updatedAt":1430507612000},{"assignedTo":"jonathandturner","body":"- Name: CSG Pro\r\n- Homepage url: http://www.csgpro.com\r\n- Brand Guidelines/Licensing: make it big!\r\n- Logo: http://www.csgpro.com/img/logo.svg\r\n","comments":2,"createdAt":1430146283000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1892667?v=3","loggedByName":"kenhowardpdx","milestone":"","number":2928,"state":"closed","title":"New Website Logo: CSG Pro","updatedAt":1430500618000},{"assignedTo":"","body":"Opening this separate issue as suggested by @mhegazy in the PR mentioned below. I'm not the most informed on this issue but I am opening it because I do not want it to get lost/forgot.\r\n\r\nQuoting @mhegazy here:\r\n> @ahejlsberg proposed a import * from","comments":3,"createdAt":1430329800000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2096573?v=3","loggedByName":"mikehaas763","milestone":"","number":2956,"state":"open","title":"Add new syntax to import namespaces","updatedAt":1430480448000},{"assignedTo":"","body":"This is the work to port this change to release-1.5\r\n\r\nAdd a common, dense, format for classification operations to lower cost of processing on the host side.\r\n\r\nWe now just return an array of triples to represent classified results.  The triple cont","comments":0,"createdAt":1430441795000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2981,"state":"closed","title":"Release-1.5: Add a common, dense, format for classification operations to lower cost of processing on the host side.","updatedAt":1430444151000},{"assignedTo":"","body":"A generator is a syntactic way to declare a function that can yield. Yielding will give a value to the caller of the next() method of the generator, and will suspend execution at the yield point. A generator also supports `yield *` which means that i","comments":102,"createdAt":1429732926000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2873,"state":"open","title":"Proposal for generators design","updatedAt":1430443226000},{"assignedTo":"","body":"Add a common, dense, format for classification operations to lower cost of processing on the host side.\r\n    \r\n    We now just return an array of triples to represent classified results.  The triple contains:\r\n    1) the start of the classification.\r","comments":0,"createdAt":1430429458000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2977,"state":"closed","title":"Add a common, dense, format for classification operations to lower cost of processing on the host side.","updatedAt":1430442165000},{"assignedTo":"","body":"Via #919 \r\n\r\nEven with union types, we still require that a best common type can be selected from the types of the return expressions in a function:\r\n```ts\r\nfunction fn() { // Error, return expressions do not have a BCT\r\n  if(x) {\r\n    return 'foo';\r","comments":3,"createdAt":1413827864000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":921,"state":"closed","title":"Consider using union types for function return expressions","updatedAt":1430442118000},{"assignedTo":"","body":"Since single and double quotes are historically the same in JavaScript the ES6/7 standard cannot just use double quotes for string interpolation like CoffeeScript does (for performance reasons). However, the backticks chosen by the ES6 team are horri","comments":1,"createdAt":1430431232000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/164625?v=3","loggedByName":"pke","milestone":"","number":2978,"state":"closed","title":"TS should support double quotes instead of backticks for string interpolation too","updatedAt":1430432854000},{"assignedTo":"zhengbli","body":"Coppied from @NekR  coment in: https://github.com/Microsoft/TypeScript/issues/2029#issuecomment-97964753\r\n\r\nThis:\r\n```typescript\r\nvar event = document.createEvent('CustomEvent');\r\nevent.initCustomEvent('test', true, true, void 0);\r\nthis.node.dispatch","comments":3,"createdAt":1430428880000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5.3","number":2975,"state":"closed","title":"CustomEvent is missing for the list of specialized signatures on document.createEvent","updatedAt":1430431464000},{"assignedTo":"","body":"","comments":2,"createdAt":1430429161000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":2976,"state":"closed","title":"Added missing createEvent overloads","updatedAt":1430429708000},{"assignedTo":"zhengbli","body":"Type definition of CustomEvent constructor needs at least one parameter.\r\n(The constructor of Event class also needs one parameter, actually.)\r\n\r\nSince the current definition has no parameter, I encountered an error when I run a generated JS code by ","comments":12,"createdAt":1423823172000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3614589?v=3","loggedByName":"takeohman","milestone":"TypeScript 1.5","number":2029,"state":"closed","title":"Type definition of CustomEvent constructor needs parameter(s).","updatedAt":1430428943000},{"assignedTo":"","body":"Consider the following code:\r\n\r\n```ts\r\nmodule Test {\r\n    interface ITest {\r\n        c(p1: boolean, p2: boolean): void;\r\n    }\r\n\r\n    class TestClass1 implements ITest {\r\n        c(p1: boolean) {\r\n        }\r\n    }\r\n\r\n    var t1: TestClass1 = new Test","comments":11,"createdAt":1430389785000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8177153?v=3","loggedByName":"Chieleman","milestone":"","number":2967,"state":"closed","title":"Inconsistent behaviour between interfaces, parameterlist and function calls","updatedAt":1430428900000},{"assignedTo":"","body":"The new option fixes #2644, which is a reactivation of #287, and has been in discussion in #2034.\r\n\r\n#### Background\r\nThe current behavior of the compiler when using `--outDir` is to duplicate the input structure in the output under the value of `--o","comments":4,"createdAt":1429076359000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2772,"state":"closed","title":"Add new compiler option --rootDir","updatedAt":1430428652000},{"assignedTo":"","body":"(Using Typescript 1.5 Beta) With the source file below, when I walk through the nodes looking for import declarations, the first node I find is foo. The node.pos and node.end are (0,86). Why is the reference comment being lumped together with the foo","comments":4,"createdAt":1430406730000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/918658?v=3","loggedByName":"ToddThomson","milestone":"","number":2970,"state":"closed","title":"Import statement includes preceding comment","updatedAt":1430427870000},{"assignedTo":"paulvanbrenk","body":"In the project that I was working on, we used a TextTransform to generate TypeScript classes from our C# classes.  However, I couldn't add the TextTransform Target before the TypeScriptCompile Target because the TypeScriptCompile Target didn't use an","comments":5,"createdAt":1423442586000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1937187?v=3","loggedByName":"kevindaub","milestone":"TypeScript 1.5","number":1982,"state":"closed","title":"Add TypeScriptCompile DependsOn Target to TypeScript Targets","updatedAt":1430426201000},{"assignedTo":"jonathandturner","body":"- Name: Ecocion, Inc.\r\n- Homepage URL: http://Ecocion.com\r\n- Brand Guidelines/Licensing: \r\nMust remain above 100px X 100px\r\nMust remain square\r\nTrademark Ecocion, Inc.\r\n- Logo: https://ecocionacts.com/acts/images/vector/leafDark.svg","comments":1,"createdAt":1429819740000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1652525?v=3","loggedByName":"TomTom1229","milestone":"","number":2894,"state":"closed","title":"New Website Logo: Ecocion, Inc.","updatedAt":1430418399000},{"assignedTo":"jonathandturner","body":"- Name: AssureSign\r\n- Homepage url: https://www.assuresign.com/\r\n- Logo: https://assuresignmedia.blob.core.windows.net/public/AssureSign_Logos_Final.svg\r\n\r\nWe use TypeScript in our SaaS product. We also maintain the webpack TypeScript loader at https","comments":1,"createdAt":1429885272000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/196944?v=3","loggedByName":"jbrantly","milestone":"","number":2909,"state":"closed","title":"New Website Logo: AssureSign","updatedAt":1430418394000},{"assignedTo":"jonathandturner","body":"Please fill the following out:\r\n\r\n- Name: Heat Rivals\r\n- Homepage url: https://play.google.com/store/apps/details?id=com.perfectedz.heatrivals\r\n- Brand Guidelines/Licensing: Nothing specific\r\n- Logo: http://heatrivals.com/images/about-logo.png\r\n\r\nHea","comments":1,"createdAt":1429913337000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Website%20Logo","name":"Website Logo","color":"fef2c0"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2011858?v=3","loggedByName":"NickTsitlakidis","milestone":"","number":2914,"state":"closed","title":"New Website Logo: Heat Rivals - Android Game","updatedAt":1430418387000},{"assignedTo":"","body":"A very nice addition to TypeScript's type system would be sum types in the spirit of ML-like languages.  This is one of basic and simple programming constructs from functional programming which you really miss once you get used to it, but which seem ","comments":33,"createdAt":1406020042000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3305274?v=3","loggedByName":"alainfrisch","milestone":"","number":186,"state":"open","title":"Suggestion: sum types / tagged union","updatedAt":1430413914000},{"assignedTo":"","body":"```typescript\r\ninterface IAddressBook {}\r\ninterface INavModel {}\r\n\r\nfunction foo() {\r\n    let a: IAddressBook = {};\r\n    let b: INavModel[] = [];\r\n    return [a, b];\r\n}\r\n\r\nlet [p, q] = foo();\r\n\r\nlet x: IAddressBook = p;\r\nlet y: INavModel[] = q;  // <","comments":1,"createdAt":1430392878000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/417406?v=3","loggedByName":"donnut","milestone":"","number":2968,"state":"closed","title":"Function return-type with decomposition not inferred correctly","updatedAt":1430411446000},{"assignedTo":"mhegazy","body":"DefinitelyTyped is full of the old `export =` syntax. One random example I ran into:\r\nhttps://github.com/borisyankov/DefinitelyTyped/blob/master/selenium-webdriver/selenium-webdriver.d.ts#L4847\r\n\r\nBut when I want to emit ES6, the compiler tells me I ","comments":7,"createdAt":1430153463000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/47395?v=3","loggedByName":"alexeagle","milestone":"TypeScript 1.5.3","number":2929,"state":"closed","title":"DefinitelyTyped largely incompatible with ES6 emit due to export syntax","updatedAt":1430353641000},{"assignedTo":"","body":"`export =` is an error in ES6 and system module outputs as there is no way to emit it correctly. There is no reason why to make this an error for ambient declarations though. \r\nThe change allows the use of export= in ambient declarations.","comments":1,"createdAt":1430167714000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2935,"state":"closed","title":"Fix #2929: relax the check for export= in ES6 if it is resulting from an ambient declaration","updatedAt":1430353615000},{"assignedTo":"","body":"","comments":0,"createdAt":1430345442000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2964,"state":"closed","title":"Restore checker simplification that was reverted due to a bad merge.","updatedAt":1430346094000},{"assignedTo":"","body":"Rename HeritageClauseElement to ExpressionWithTypeArguments + related methods.","comments":1,"createdAt":1430344238000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":2963,"state":"closed","title":"Rename HeritageClauseElement to ExpressionWithTypeArguments + related methods.","updatedAt":1430344889000},{"assignedTo":"","body":"Fix #2953","comments":1,"createdAt":1430334701000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2960,"state":"closed","title":"Fix #2953: Put DataView definition back into lib.d.ts","updatedAt":1430344632000},{"assignedTo":"","body":"Hi,\r\n\r\nI have code that I want to rewrite in typescript, and for that I want to do few things that looks like this:\r\n```ts\r\ninterface msg {\r\n    x: number;\r\n    Run: ()=>string;\r\n    Run: (number) => string;\r\n}\r\n\r\ninterface msg {\r\n    Code: number;\r\n","comments":3,"createdAt":1430334010000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5566402?v=3","loggedByName":"sandeepkalra","milestone":"","number":2958,"state":"closed","title":"Suggestion: interface to allow overloading variables (similar to unions in C lang)","updatedAt":1430343429000},{"assignedTo":"","body":"Generate a local object that will store names of local/indirectly exported entries. This object is later used to check that names from star exports don't shadow local/indirectly exported names.","comments":1,"createdAt":1430264426000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2948,"state":"closed","title":"Store exported names locally","updatedAt":1430341700000},{"assignedTo":"","body":"Hi guys I'm developing an IoC container for TypeScript apps called [InversifyJS](http://inversify.io/). I have implemented a class named `TypeBinding<TServiceType>` which is used to define a binding between a `service type` (interface) and a `impleme","comments":2,"createdAt":1429183777000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10656223?v=3","loggedByName":"remojansen","milestone":"","number":2794,"state":"closed","title":"Argument of type 'typeof FooBar' is not assignable to parameter of type 'new () => FooBarInterface'","updatedAt":1430341348000},{"assignedTo":"","body":"`?` is sufficient enough after a parameter name.","comments":1,"createdAt":1430338980000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2962,"state":"closed","title":"Don't show square brackets around optional parameters in VS","updatedAt":1430339730000},{"assignedTo":"","body":"# Summary\r\nTo better support subclassing built-ins, and still support built-ins and pre-ES6 \"classes\" that can also be called as functions, we should be able to merge the call signatures of ambient function declarations with the static side of a clas","comments":0,"createdAt":1430334297000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2959,"state":"open","title":"Suggestion: Merge ambient function and class declarations with the same name.","updatedAt":1430336189000},{"assignedTo":"","body":"# Summary\r\nTo support both the semantics of subclassing built-ins in ES6 and still allow authors to augment built-ins, we need a mechanism to reopen the static and instance sides of a class. \r\n\r\n# Current state\r\nToday we can re-open interfaces, allow","comments":2,"createdAt":1430332749000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2957,"state":"open","title":"Suggestion: Reopen static and instance side of classes","updatedAt":1430336177000},{"assignedTo":"","body":"# Summary\r\nTo support re-opening classes and built-ins as classes, I have proposed two suggestions (#2957, #2959) to help to better re-classify built-ins as `class` declarations, rather than the current `interface`-`interface`-`var` pattern we are us","comments":0,"createdAt":1430336154000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2961,"state":"open","title":"Suggestion: Merge ambient class and interface declarations.","updatedAt":1430336154000},{"assignedTo":"","body":"I noticed a breaking change while testing TypeScript 1.5.0-alpha. In 1.4.1, the enum's are replaced with numerical values in the JavaScript output. In 1.5.0-alpha, they're not compiled at all.\r\n\r\n```\r\n// mylib.d.ts\r\ndeclare module Test {\r\n\texport enu","comments":4,"createdAt":1430222785000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2162413?v=3","loggedByName":"panuhorsmalahti","milestone":"","number":2941,"state":"closed","title":"Enums don't work with TypeScript 1.5.0-alpha properly","updatedAt":1430332571000},{"assignedTo":"","body":"Support for inline source maps. As referenced in #2233, this change allows us to emit single file with source maps instead of having a separate file.","comments":10,"createdAt":1427234739000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2484,"state":"closed","title":"Inline source maps","updatedAt":1430331737000},{"assignedTo":"","body":"I isolated it to having the following text within the `.csproj` file:\r\n```\r\n  <ItemGroup>\r\n    <Service Include=\"{4A0DDDB5-7A95-4FBF-97CC-616D07737A77}\" />\r\n  </ItemGroup>\r\n```\r\nI created the project in Visual Studio 2015, and tried to open it in Vis","comments":0,"createdAt":1430277263000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3665998?v=3","loggedByName":"Griffork","milestone":"","number":2952,"state":"open","title":"Visual Studio hangs on project load.","updatedAt":1430330754000},{"assignedTo":"","body":"Fixes an issue with project runner not creating baselines","comments":0,"createdAt":1430327995000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2955,"state":"closed","title":"Run all checks in it blocks","updatedAt":1430328307000},{"assignedTo":"","body":"I used to think Monaco is great, but just find it awesome! And the features it has are definitely far beyond the range of a playground. Is Microsoft going to release some kind of Web IDE (or cross-platform IDE based on web techniques)?","comments":3,"createdAt":1430297476000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":2954,"state":"closed","title":"What does Microsoft going to do with Monaco?","updatedAt":1430326909000},{"assignedTo":"","body":"Context: Visual Studio 2013 Ultimate w/ Update 4 with TS 1.3\r\nI've got a TS project with 500+ files that compiled fine until today when I added a few new files. Now the order of the output file is messed up, parent class gets defined after subclass. ","comments":17,"createdAt":1417643821000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8079428?v=3","loggedByName":"bjornbacklund","milestone":"","number":1359,"state":"closed","title":"Issues with order of files in combined output","updatedAt":1430324635000},{"assignedTo":"","body":"","comments":1,"createdAt":1430272422000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3072571?v=3","loggedByName":"kk80805588","milestone":"","number":2950,"state":"closed","title":"__extends","updatedAt":1430321110000},{"assignedTo":"","body":"Things done here:\r\n\r\n* Cache the emit of `fourslash.ts`.\r\n* `Jakefile` has been renamed to `Jakefile.js`\r\n* Removed `global.runners`\r\n* Removed `reverse` option in test harness.\r\n\r\nThe most meaningful change here is the caching, which on my machine h","comments":1,"createdAt":1430267143000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2949,"state":"closed","title":"Cleanup and speedup fourslash","updatedAt":1430268625000},{"assignedTo":"ahejlsberg","body":"Now that we have ES6 modules in TypeScript, we should probably move towards a cleaner separation in the module types.\r\n\r\nIn truth, \"internal modules\" have been a bit of confusion for developers new to TypeScript.  They're much closer to what most peo","comments":32,"createdAt":1424993619000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":2159,"state":"closed","title":"Namespace keyword","updatedAt":1430267277000},{"assignedTo":"paulvanbrenk","body":"![image](https://cloud.githubusercontent.com/assets/970430/5548641/780c2af6-8bb1-11e4-9bc2-b7ab25c90797.png)\r\n\r\nIs this by design or a bug?","comments":13,"createdAt":1419426763000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"Community","number":1554,"state":"open","title":"typeof this.xxx gives \"identifier expected\" error.","updatedAt":1430264911000},{"assignedTo":"","body":"In below code, the line ```var vaaa = <Aaa>v;``` reports error: ```error TS2352: Build: Neither type 'T' nor type 'Aaa' is assignable to the other.```. I should be able to even access Aaa members without case because of this guard check.\r\n\r\nIs this b","comments":5,"createdAt":1429906827000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1898040?v=3","loggedByName":"wgebczyk","milestone":"","number":2912,"state":"open","title":"Cannot cast to type after instanceof operator check","updatedAt":1430257492000},{"assignedTo":"","body":"There's a library written by @gcanti called [tcomb-ats](https://github.com/gcanti/tcomb-ats), which is a 3rd-party assertion library for AtScript. Now that [AtScript has been replaced with TypeScript](http://blogs.msdn.com/b/typescript/archive/2015/0","comments":1,"createdAt":1430248204000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1058243?v=3","loggedByName":"jedmao","milestone":"","number":2944,"state":"closed","title":"Support Pluggable, 3rd-party Type Systems","updatedAt":1430250098000},{"assignedTo":"","body":"Another of my bugbears with TypeScript is it's use of public/private declarations. Since TypeScript currently binds everything to the prototype, everything (once compiled to JavaScript) is public, even when it is declared private in TypeScript.\r\n\r\nTh","comments":2,"createdAt":1430207077000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9935122?v=3","loggedByName":"series0ne","milestone":"","number":2940,"state":"open","title":"Decorators and closures vs. prototypical class design","updatedAt":1430248859000},{"assignedTo":"","body":"I just pulled down the master branch and tried to compile my project but got the error:\r\n\r\n[TsProject] src/submission/DefaultSubmissionClient.ts(76,25): error TS2304: Cannot find name 'XDomainRequest'.\r\n[TsProject] src/submission/DefaultSubmissionCli","comments":4,"createdAt":1430145788000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1020579?v=3","loggedByName":"niemyjski","milestone":"TypeScript 1.5","number":2927,"state":"closed","title":"Error TS2304: Cannot find name 'XDomainRequest'.","updatedAt":1430246925000},{"assignedTo":"","body":"","comments":2,"createdAt":1430177955000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2937,"state":"closed","title":"emit file as external module if separateCompilation flag is specified","updatedAt":1430245150000},{"assignedTo":"","body":"This is an editor only addition to the tsconfig.json project, which allows an IDE to show a custom name for a tsconfig.json based project.\r\n\r\n```json\r\n{\r\n    \"name\": \"Language Service Server\",\r\n    \"compilerOptions\": {\r\n        \"module\": \"commonjs\",\r","comments":6,"createdAt":1430181442000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":2938,"state":"open","title":"Add a \"name\" property to tsconfig.json to allow for naming of a project","updatedAt":1430244669000},{"assignedTo":"","body":"Hello,\r\n\r\nThe compiler it producing errors such as this:\r\n\r\nError TS2339: Property 'checkBody' does not exist on type 'Request'\r\n\r\nI have the typings referenced so i don't think this is the issue.  I notice that the typing file for express-validator ","comments":7,"createdAt":1426733404000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8433718?v=3","loggedByName":"teamzone","milestone":"","number":2424,"state":"closed","title":"TS2339 errors in express-validator","updatedAt":1430237024000},{"assignedTo":"","body":"## Motivations\r\n\r\nA lot of JavaScript library/framework/pattern involve computation based on the property name of an object. For example [Backbone](http://backbonejs.org/) model, functional transformation `pluck`, [ImmutableJS](https://github.com/fac","comments":20,"createdAt":1417188688000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"Community","number":1295,"state":"open","title":"Suggestion: Type Property type","updatedAt":1430218650000},{"assignedTo":"","body":"TypeScript is really stingy about the *way* you call `super` from the child constructor. I have seen questions on SO e.g. [this one](http://stackoverflow.com/q/28115865/390330), where people want to splice and dice arguments they receive from varargs","comments":3,"createdAt":1422049946000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1790,"state":"closed","title":"Support super.apply from child constructor","updatedAt":1430179898000},{"assignedTo":"","body":"ORIGINALLY PROPOSED IN http://typescript.codeplex.com/workitem/838\r\n\r\nTraits, as \"compile-time\" partial classes, would perfectly fit with TS ideology and resolve problems of multiple inheritance/mixins.\r\n\r\nTraits in Scala: http://en.wikibooks.org/wik","comments":32,"createdAt":1406734069000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/757990?v=3","loggedByName":"yasselavila","milestone":"","number":311,"state":"closed","title":"Feature Request / Proposal: Traits","updatedAt":1430179325000},{"assignedTo":"","body":"Hi,\r\nUnion type inference is not working inside classes functions. For example trying to compile the below code : \r\n```TypeScript\r\ntype NameOrNameArray = string | string[];\r\n\r\nclass NameCreator {\r\n\t\r\n\tconstructor(public name:NameOrNameArray) {}\r\n\t\r\n\t","comments":8,"createdAt":1421500397000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6756203?v=3","loggedByName":"erichillah","milestone":"Community","number":1706,"state":"open","title":"Union Type inference not working in class (ts version 1.4)","updatedAt":1430178863000},{"assignedTo":"","body":"This order is significant:\r\n\r\n```ts\r\n        \"../compiler/diagnosticInformationMap.generated.ts\",\r\n        \"../compiler/commandLineParser.ts\",\r\n```\r\n\r\nAlso not having these extra files referenced caused https://github.com/TypeStrong/atom-typescript/i","comments":5,"createdAt":1429942861000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2917,"state":"closed","title":"services tsconfig.json added missing file references and fixed the order","updatedAt":1430177964000},{"assignedTo":"","body":"Here's a small external module that explicitly exports a module:\r\n\r\n```ts\r\nmodule Foo {\r\n\texport var foo = 42;\r\n}\r\nexport = Foo;\r\n```\r\n\r\nThe code generated for this is:\r\n\r\n```js\r\ndefine([\"require\", \"exports\"], function(require, exports) {\r\n    var Fo","comments":2,"createdAt":1410560437000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/639216?v=3","loggedByName":"xirzec","milestone":"Community","number":669,"state":"open","title":"External modules with AMD always requires \"exports\" even when it is not used","updatedAt":1430177771000},{"assignedTo":"","body":"Would be useful to be able to use gradle+jvm to run tsc directly to reduce complexity in our build system (today we use gradle to run node to run grunt to run tsc).\r\n\r\nSome recent improvements in the JDK suggest this is likely now a fast enough envir","comments":13,"createdAt":1422046967000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/685891?v=3","loggedByName":"markelliot","milestone":"Community","number":1789,"state":"open","title":"Make tsc runnable on Nashorn","updatedAt":1430171645000},{"assignedTo":"","body":"Consider some code:\r\n\r\n```ts\r\n/* ... disjoint classes Giraffe, Elephant which extend Animal ... */\r\nfunction f(n: string): Giraffe;\r\nfunction f(n: number): Elephant;\r\nfunction f(n: any): Animal {\r\n  if(typeof n === 'string') {\r\n    return new Giraffe","comments":2,"createdAt":1414004574000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":943,"state":"open","title":"Use different relation when checking overload vs implementation signature compatibility","updatedAt":1430169668000},{"assignedTo":"vladima","body":"## Motivation\r\n\r\nIn TypeScript it is a lot harder to re-use typescript modules compared to re-using npm modules in JavaScript.\r\n\r\nIt would be beneficial if the typescript compiler is smart enough to look in node_modules folders and package.json files","comments":43,"createdAt":1406298134000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/357737?v=3","loggedByName":"chanon","milestone":"TypeScript 2.0","number":247,"state":"open","title":"Support looking for modules under node_modules when importing","updatedAt":1430168792000},{"assignedTo":"","body":"I'm currently using the tsconfig file in our project and I want to have two of them one that outputs es5 and one that outputs es6. Things are working great until I try and target es6 and run into the issue where I'm supplying a definition file for ES","comments":12,"createdAt":1430155081000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1020579?v=3","loggedByName":"niemyjski","milestone":"","number":2931,"state":"closed","title":"Compiler Conditionals","updatedAt":1430164204000},{"assignedTo":"","body":"I'm using a tsconfig file in our project: https://github.com/exceptionless/Exceptionless.Javascript and I'm  seeing the following behavior (Everything is in the same module, but multiple files..).\r\n\r\n![image](https://cloud.githubusercontent.com/asset","comments":9,"createdAt":1430154898000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1020579?v=3","loggedByName":"niemyjski","milestone":"","number":2930,"state":"open","title":"tsconfig: using out option results in really ugly/duplicated output.","updatedAt":1430162606000},{"assignedTo":"","body":"This can be broken down to 3 areas:\r\n\r\n1. basic (parser) support, even if we lose typechecking locally\r\n2. Typechecking support\r\n3. Transpiling like facebook/regenerator or Traceur, for targeting ES3/ES5.\r\n\r\nAny timelines on this?\r\n","comments":2,"createdAt":1419608939000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/424619?v=3","loggedByName":"wizzard0","milestone":"","number":1564,"state":"open","title":"ES6 Generator support","updatedAt":1430161597000},{"assignedTo":"","body":"The vast majority of JavaScript libraries I'm trying to use TypeScript with require what the handbook refers to as a hybrid type. The creation of these types as far as I can tell requires a detyped function definition that in addition to being awkwar","comments":2,"createdAt":1430081518000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/332210?v=3","loggedByName":"starksm64","milestone":"","number":2922,"state":"open","title":"Simplify hybrid type creation","updatedAt":1430160521000},{"assignedTo":"","body":"this fixes a stack overflow when resolving aliases on imported modules.","comments":3,"createdAt":1429916242000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":2915,"state":"closed","title":"Circular alias error","updatedAt":1430157390000},{"assignedTo":"","body":"using `it` is a correct way to work with mocha. This change also has positive perf impact when we run tests selectively - now project tests will be executed only if they have  to instead of running them every time.","comments":1,"createdAt":1430108016000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2925,"state":"closed","title":"wrap project runner tests in 'it' instead of executing them in 'describe'","updatedAt":1430152795000},{"assignedTo":"","body":"Brief description: [System.register explained](https://github.com/ModuleLoader/es6-module-loader/wiki/System.register-Explained)","comments":4,"createdAt":1429574564000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2840,"state":"closed","title":"Added support for emitting System.register modules","updatedAt":1430152749000},{"assignedTo":"","body":"If I write this code combining computed properties with shorthand properties:\r\n\r\n    var greet = \"hi\",\r\n        object = {\r\n            greet, // Shorthand for greet: greet\r\n            [\"fare\" + \"well\"]: \"bye\" // Computed\r\n        };\r\n\r\nI get this o","comments":2,"createdAt":1430109690000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3979433?v=3","loggedByName":"lucasmciruzzi","milestone":"TypeScript 1.5","number":2926,"state":"closed","title":"Enhanced Object Literals error","updatedAt":1430131485000},{"assignedTo":"","body":"There are plenty of template engines for JS - but to my knowledge, there is currently no template engine that provides any meaningful level of IDE support, e.g. for view-models written in TypeScript. In fact, most template engines don't provide auto-","comments":9,"createdAt":1429608895000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/103348?v=3","loggedByName":"mindplay-dk","milestone":"","number":2846,"state":"closed","title":"Feature: embedded TypeScript syntax (a'la EJS)","updatedAt":1429943692000},{"assignedTo":"","body":"a.ts:\r\n```ts\r\n'use strict'\r\n/// <reference path='b.d.ts'/>\r\n\r\nvar x: Foo;\r\n```\r\nb.d.ts:\r\n```ts\r\ninterface Foo { x: string; }\r\ndeclare module \"b\" {\r\n        export = Foo;\r\n}\r\n```\r\n```\r\nD:\\test\\refs\\a> tsc a.ts\r\na.ts(4,8): error TS2304: Cannot find nam","comments":9,"createdAt":1423011229000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"Community","number":1920,"state":"open","title":"Report error if code precedes /// reference","updatedAt":1429923755000},{"assignedTo":"","body":"Extend the rules for merging type members in case of extends as follows:\r\nMerge interfaces [like they had the same name](https://github.com/Microsoft/TypeScript/wiki/Declaration-Merging#merging-interfaces). Afterwards, go through the merged members l","comments":4,"createdAt":1429790702000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10807766?v=3","loggedByName":"benjamin-hg","milestone":"","number":2888,"state":"closed","title":"Extend rules for merging specialized call signatures in case of interface ... extends A, B","updatedAt":1429920298000},{"assignedTo":"","body":"Hi. This PR resolves issue #2214 allowing the following code to work\r\n```\r\nfunction logNumber(v: number) { console.log(\"number:\", v); }\r\nfunction logString(v: string) { console.log(\"string:\", v); }\r\n\r\nfunction foo1(v: number|string) {\r\n    switch (ty","comments":6,"createdAt":1425665132000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7459695?v=3","loggedByName":"BSteephenson","milestone":"","number":2230,"state":"closed","title":"Allow switch statement type guards (need help..)","updatedAt":1429919427000},{"assignedTo":"","body":"Now that emitNode is modified to emit comments, it resulted in unintentional incorrect behavior for emitting span of the node. When emitting comments and sourcemap we would like to start the record of the span only after emitting the comments otherwi","comments":1,"createdAt":1423698799000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":2014,"state":"closed","title":"Fixes the interaction between sourcemaps and comments generation so that the source spans are emitted correctly","updatedAt":1429919320000},{"assignedTo":"","body":"This implements the error as discussed in #1920.\r\n\r\nI know I have not yet submitted a CLA. I have sent it to my employer asking them to sign it and I am waiting on it back. I know this will not be merged until a CLA is submitted, and I will submit it","comments":7,"createdAt":1423585322000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719814?v=3","loggedByName":"nathggns","milestone":"","number":2002,"state":"closed","title":"Make references appearing after non-trivia trigger an error","updatedAt":1429919241000},{"assignedTo":"","body":"These will be used in .js files to help inform the type system of the types of JS vars and functions.\r\n","comments":2,"createdAt":1428367849000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2646,"state":"open","title":"Support for understanding some JSDoc annotations within JavaScript files.","updatedAt":1429911018000},{"assignedTo":"yuit","body":"```ts\r\ninterface A {\r\n    foo();\r\n}\r\n\r\nfunction foo() { }\r\nvar a: A = { foo };\r\na.foo(); // find references on call to foo\r\n```\r\n\r\nIf you find references on the call to foo, it should also turn up the actual function definition. But the function defi","comments":7,"createdAt":1418759241000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 2.0","number":1507,"state":"open","title":"Find references for shorthand properties","updatedAt":1429907169000},{"assignedTo":"","body":"#### Auto referring to last identifier:\r\nInstead of:\r\n```typescript\r\nif(value > 2 && value !== 3) {}\r\n```\r\nwe can have this:\r\n```typescript\r\nif(value > 2 && !== 3) {}\r\n```\r\n\r\n#### Auto referring to last identifier and operator:\r\nInstead of:\r\n```types","comments":6,"createdAt":1429849070000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2903,"state":"closed","title":"Proposal: syntax sugar for binary compare expressions","updatedAt":1429906940000},{"assignedTo":"","body":"The `--import` compiler option can be specified multiple times on the command line, or would be a string array in tsconfig.json. Its argument is a module name which would be imported at the top of every external module in the project. \r\n\r\nFor example","comments":1,"createdAt":1429904377000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2911,"state":"open","title":"Add `--import` compiler options to specify module imports that should happen for every module.","updatedAt":1429904515000},{"assignedTo":"","body":"For example two class in two files:\r\n`class A extends B{}`\r\n`class B{}`\r\nCompile with `tsc -t ES5 --out out.js A.ts B.ts`, generate js is:\r\n~~~~~~~~~~~~~\r\nvar __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(","comments":3,"createdAt":1429866311000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1472963?v=3","loggedByName":"J-F-Liu","milestone":"","number":2906,"state":"closed","title":"Automatically resolve class dependency","updatedAt":1429896000000},{"assignedTo":"","body":"Currently a compiler can be given one single file from where it can resolve all dependencies by looking at the file system. Most of the time it is a very convenient feature, but when I need to clearly separate one set of files from another I wish I c","comments":2,"createdAt":1429884367000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":2908,"state":"closed","title":"Suggestion: Add a special key that would disable resolving files that are missing in file list passed to the compiler","updatedAt":1429895568000},{"assignedTo":"DanielRosenwasser","body":"This works correctly, you cannot put a breakpoint on the comment:\r\n\r\n```\r\nfunction P() {\r\n\t// Test this\r\n\tvar a = 1;\r\n}\r\n```\r\n\r\nThis is the sourcemap:\r\n\r\n```\r\n{\"version\":3,\"file\":\"W.js\",\"sourceRoot\":\"\",\"sources\":[\"W.ts\"],\"names\":[\"P\"],\"mappings\":\"AAA","comments":4,"createdAt":1423337421000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"TypeScript 1.5","number":1980,"state":"closed","title":"Incorrect sourcemap for comments in module function","updatedAt":1429892723000},{"assignedTo":"","body":"When compiling a script (main.ts) that imports another module (dependency.ts):\r\n\r\n* typescript 0.9.5 used to take as input the definition file (dependency.d.ts) when available.\r\n* since 1.0.x, it seems like typescript always compiles dependency.ts ev","comments":10,"createdAt":1408287168000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5462440?v=3","loggedByName":"klarezz","milestone":"","number":470,"state":"closed","title":"Option for a light compilation using *.d.ts files?","updatedAt":1429890427000},{"assignedTo":"","body":"```\r\ninterface Files {\r\n\t[key: number]: SomeFile\r\n\tlength: number\r\n}\r\nvar data: Files = []\r\n// no complaints\r\nfor (var i in data) {\r\n}\r\n\r\n// Type 'Files' is not an array type or a string type\r\nfor (let file of data) {\r\n}\r\n```\r\nI'm not sure what is th","comments":19,"createdAt":1429701319000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":2862,"state":"open","title":"Index signature & iterators","updatedAt":1429886984000},{"assignedTo":"vladima","body":"Hi,\r\nI installed Visual Studio Community 2013 and Typescript 1.4. When I changed all my enums to const enum (btw, very nice feature, thanks!) I noticed that compile-on-save feature doesn't  handle this feature well.\r\n\r\nWhen I use those const enums in","comments":8,"createdAt":1421775353000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2056282?v=3","loggedByName":"mpawelski","milestone":"TypeScript 1.5","number":1742,"state":"closed","title":"Visual Studio Community 2013, Typescrip 1.4: When saving file, const enum doesn't resolve to constant when enum is defined in other file.","updatedAt":1429864600000},{"assignedTo":"","body":"I'm trying to parse some typescript code for a project of mine.\r\n\r\nI'm stuck at figuring out what BindingPattern interface represent in TS code?\r\n```typescript\r\nexport interface VariableDeclaration extends Declaration {\r\n    parent?: VariableDeclarat","comments":2,"createdAt":1429859614000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2905,"state":"closed","title":"Question: What is BindingPattern?","updatedAt":1429862822000},{"assignedTo":"","body":"Primarily : do you guys ever pull into master with failing tests?\r\n\r\nJust a friendly question :)","comments":2,"createdAt":1429853013000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2904,"state":"closed","title":"Question: What's the quality requirement for `master`","updatedAt":1429858818000},{"assignedTo":"","body":"Please consider the following in your on going efforts:\r\n\r\nFrom node-sass readme https://github.com/sass/node-sass/#sourcecomments:\r\n\r\n### omitSourceMapUrl\r\nType:  `Boolean` Default: `false` \r\n\r\n`true` values disable the inclusion of source map infor","comments":15,"createdAt":1429770101000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2031765?v=3","loggedByName":"jasonwilliams200OK","milestone":"","number":2887,"state":"open","title":"Some missing source maps variants and options in TypeScript compiler","updatedAt":1429846762000},{"assignedTo":"","body":"Run the following and see what is going wrong with TS package on npm:\r\n\r\n```bash\r\nnpm info typescript\r\nnpm dist-tag ls typescript\r\n# only one dist-tag: latest which points to alpha release..\r\n# so when I run:\r\n#\r\n# npm install typescript\r\n#\r\n# it ins","comments":2,"createdAt":1429834917000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2031765?v=3","loggedByName":"jasonwilliams200OK","milestone":"","number":2898,"state":"closed","title":"Only publish stable version to \"latest\" dist-tag","updatedAt":1429842054000},{"assignedTo":"","body":"This PR fixes #1980.\r\n\r\nThis is an alternative to PR #2014.\r\n\r\n----------------------\r\n\r\nRather than fixing up each use site to choose between how to emit, we create a common path that understands the sourcemap/comment ordering.\r\n\r\nWe now have 4 func","comments":1,"createdAt":1429745722000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2880,"state":"closed","title":"Take comments into account when tracking sourcemap spans","updatedAt":1429837511000},{"assignedTo":"","body":"I am converting some TypeScript code from using a hard-coded capture of \"this\":\r\n```\r\nvar _this = this;\r\nvar querySucceeded = function(data){\r\n    this.doSomething(data);\r\n}\r\nvar test = this.executeQuery().then(function(data){\r\n    _this.querySucceed","comments":2,"createdAt":1428171836000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/959447?v=3","loggedByName":"fwanicka","milestone":"","number":2617,"state":"open","title":"Issue with debugging âthisâ in VS2013 when using lambdas","updatedAt":1429836015000},{"assignedTo":"","body":"Partial fix for #1622, specifically addressing new decorator helpers. \r\n\r\nIt is out of scope to fix `__extends` for this PR.","comments":3,"createdAt":1429828761000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2897,"state":"closed","title":"Fix this in decorator helpers","updatedAt":1429830805000},{"assignedTo":"","body":"This change should only apply to ES3 & ES5.\r\n\r\nWhen an identifier named `arguments` is used in an arrow function, and can be resolved in some contained scope, we will capture `arguments` as `_arguments` if necessary and use `_arguments` at every use-","comments":3,"createdAt":1429047502000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2764,"state":"closed","title":"Capture 'arguments' in arrow functions in pre-ES6 targets","updatedAt":1429830448000},{"assignedTo":"","body":"This adds a method to the language service to parse a tsconfig file and correctly calculate the initial collection of files to consider. \r\n\r\nWe expect the 'host' to find the files in the file system.","comments":2,"createdAt":1429738314000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":2877,"state":"closed","title":"tsconfig parsing in Language Service","updatedAt":1429827668000},{"assignedTo":"","body":"The following typescript (using the new module system syntax)\r\n\r\n    import \"foo\";\r\n\r\ngenerates the following invalid javascript:\r\n\r\n    define([\"require\", \"exports\", \"foo\"], function (require, exports, ) ","comments":1,"createdAt":1429826273000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/693294?v=3","loggedByName":"joaompneves","milestone":"","number":2896,"state":"open","title":"ES6 Bare imports generates invalid Javascript","updatedAt":1429826384000},{"assignedTo":"DanielRosenwasser","body":"See https://github.com/Microsoft/TypeScript/pull/2684#issuecomment-94633608\r\n\r\n>With this change, `import * as set from \"set\";` no longer compiles - `error TS1212: Identifier expected. 'set' is a reserved word in strict mode` (because name.originalKe","comments":0,"createdAt":1429632663000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.5","number":2849,"state":"closed","title":"checkGrammarImportDeclarationNameInStrictMode does not check whether nameText is actually a reserved word or not","updatedAt":1429826285000},{"assignedTo":"rbuckton","body":"Using lib.d.ts from 1.0, against 1.5 you get errors for missing types:\r\n\r\n> error TS2318: Cannot find global type 'ClassDecorator'.\r\n> error TS2318: Cannot find global type 'MethodDecorator'.\r\n> error TS2318: Cannot find global type 'ParameterDecorat","comments":2,"createdAt":1429748851000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":2884,"state":"closed","title":"Errors using lib.d.ts from 1.0","updatedAt":1429826199000},{"assignedTo":"","body":"Because keywords like `set`, `yield`, and `as` are only *contextually* reserved, they should be allowed as identifiers in import and exported clauses.\r\n\r\nFixes #2849.\r\n\r\nReview commit-by-commit.","comments":1,"createdAt":1429824374000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2895,"state":"closed","title":"Allow contextually reserved names in import/export clauses","updatedAt":1429825977000},{"assignedTo":"","body":"Fixes #2884 by lazily resolving the global decorator types.\r\n","comments":4,"createdAt":1429812446000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2892,"state":"closed","title":"Lazy resolution of global decorator types","updatedAt":1429825656000},{"assignedTo":"","body":"What would be the best approach to transpile ts to us live in browser and to obtain transpiration warnings?\r\n\r\nI've found that typescript.js has a method transpile, but\r\n\r\n1. It has 2mb\r\n2. It does not show warnings\r\n\r\nHow can I minimise the transput","comments":8,"createdAt":1429225208000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2682705?v=3","loggedByName":"tomitrescak","milestone":"","number":2808,"state":"closed","title":"Transpile in browser and show warnings","updatedAt":1429824672000},{"assignedTo":"","body":"It would be really helpful to be able to fix import statements in editor by using ctrl+. or clicking lightbulb style in visual studio 2015. \r\n\r\nexample from 2013 style c# using statement fix support.\r\n\r\n![typescript_github_lightbulb](https://cloud.gi","comments":0,"createdAt":1429816032000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5769869?v=3","loggedByName":"gautamsi","milestone":"","number":2893,"state":"open","title":"Provide Visual Studio LightBulb style fixup support for <reference> and import statements","updatedAt":1429816595000},{"assignedTo":"ahmad-farid","body":"Hi,\r\n\r\nVisual Studio (2013 Ultimate) provides intellisense for the src attribute for script elements, by reading the file system and displaying available files or folders.\r\n\r\n![Image](http://www.imageurlhost.com/images/igi4eydgq04p74llpu7e.png)\r\n\r\n\r\n","comments":9,"createdAt":1406023055000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":188,"state":"open","title":"Please provide autocomplete for <reference> and import paths","updatedAt":1429814790000},{"assignedTo":"","body":"It's common for JavaScript code to capture `this` to a variable like `self` or `that`.  One of the pain points when converting existing JavaScript functional-style \"class\" code to an idiomatic TypeScript class is the required chore of going through t","comments":14,"createdAt":1422591848000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3755379?v=3","loggedByName":"nycdotnet","milestone":"","number":1859,"state":"closed","title":"Allow captured `this` in a class","updatedAt":1429813714000},{"assignedTo":"","body":"","comments":3,"createdAt":1429807065000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2891,"state":"closed","title":"Fix #2837: remove (y, x) from the comment","updatedAt":1429811308000},{"assignedTo":"","body":"Fixes #2883 ","comments":3,"createdAt":1429764455000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2886,"state":"closed","title":"fixed formatting for equals token in type aliases","updatedAt":1429809105000},{"assignedTo":"","body":"The code\r\n\r\n```typescript\r\nclass A {}\r\n\r\nclass B extends A {}\r\n```\r\n\r\nCompiled to\r\n\r\n```javascript\r\nvar __extends = this.__extends || function (d, b) {\r\n    // ...\r\n};\r\n\r\nvar A = (function () {\r\n    // ...\r\n})();\r\n\r\nvar B = (function (_super) {\r\n    ","comments":1,"createdAt":1429794715000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/557081?v=3","loggedByName":"vasa-c","milestone":"","number":2889,"state":"closed","title":"this.__extends in wrapper-function","updatedAt":1429805426000},{"assignedTo":"","body":"TypeScript should support decimal values and arithmetic, similar to .NET's `Decimal` and/or Java's `BigDecimal` type. This would solve some serious problems when writing business applications in JavaScript. \r\n\r\nFor the following TS code:\r\n\r\n```ts\r\nva","comments":3,"createdAt":1429729870000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7115274?v=3","loggedByName":"BalassaMarton","milestone":"","number":2872,"state":"closed","title":"Support decimal values and arithmetic","updatedAt":1429804998000},{"assignedTo":"","body":"    declare class Super {\r\n        set(property:string, value:any);\r\n    }\r\n\r\n    declare class SubA extends Super {\r\n        set(property:\"name\", value:string);\r\n        set(property:string, value:any); // don't know why this is needed, as it should","comments":3,"createdAt":1429726956000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10807766?v=3","loggedByName":"benjamin-hg","milestone":"","number":2871,"state":"closed","title":"Why must two methods with the same name be identical when inheriting them from different interfaces?","updatedAt":1429789355000},{"assignedTo":"paulvanbrenk","body":"```TypeScript\r\ntype lol/*$*/\r\n```\r\n\r\nnow press space, and get `HTMLOListElement`.","comments":1,"createdAt":1427407825000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":2520,"state":"closed","title":"No builder when writing a type alias","updatedAt":1429751686000},{"assignedTo":"","body":"create a tsconfig.json file with a typo in it (invalid json)\r\nrun tsc\r\nerror TS6050: Unable to open file 'tsconfig.json'.\r\n\r\nIf I can't spot the typo I have to paste it into a json validator to find it. Can it give a nice error, eg., Sublime gives \"U","comments":9,"createdAt":1428296657000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1924055?v=3","loggedByName":"custarddog","milestone":"Community","number":2627,"state":"open","title":"tsconfig.json parsing errors aren't helpful","updatedAt":1429749336000},{"assignedTo":"","body":"Using tsc v1.1.0-1 we get an error when compiling : \r\nerror TS2323: Type 'Timer' is not assignable to type 'number'.\r\n\r\nthe following code throws the compile error:\r\n\r\nthis.sTimeout = setTimeout( () => this.showDelay() , 250 );\r\n\r\nsTimeout is defined","comments":7,"createdAt":1412673751000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/789754?v=3","loggedByName":"karimbeyrouti","milestone":"","number":842,"state":"closed","title":"setTimeout - assigning timeout id to a variable throws an error TS2323: Type 'Timer' is not assignable to type 'number'.","updatedAt":1429744317000},{"assignedTo":"","body":"Just a rename.","comments":1,"createdAt":1429734610000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2875,"state":"closed","title":"Rename iterator property of ForStatement to incrementor","updatedAt":1429740429000},{"assignedTo":"","body":"Minor fixes to the iterator type in es6.d.ts to make it more correct.","comments":1,"createdAt":1429734275000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2874,"state":"closed","title":"Fix Iterator type in es6.d.ts","updatedAt":1429739295000},{"assignedTo":"JsonFreeman","body":"I honestly don't have the vocabulary to explain this correctly, so please bear with me...\r\n\r\nThe example provided is giving me an \"error TS2349: Cannot invoke an expression whose type lacks a call signature.\" error. \r\n\r\nIt is my understanding that th","comments":4,"createdAt":1424996483000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1248716?v=3","loggedByName":"EToreo","milestone":"TypeScript 1.6","number":2160,"state":"closed","title":"Union Type With Function Return of Sub-Union Type Gives Error","updatedAt":1429739096000},{"assignedTo":"","body":"With this PR a property is included in a union type only if all underlying properties are public.\r\n\r\nFixes #1870.\r\n","comments":2,"createdAt":1429220870000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":2804,"state":"closed","title":"Only public properties accessible through union type","updatedAt":1429737390000},{"assignedTo":"","body":"Fixes #2823.","comments":2,"createdAt":1429640657000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":2851,"state":"closed","title":"Support circular type aliases in signatures","updatedAt":1429736812000},{"assignedTo":"","body":"Badly needed for commonjs modules where you are more likely to ship JS code plus a generated `.d.ts` file.\r\n\r\nFrom codeplex : https://typescript.codeplex.com/workitem/2080 ","comments":5,"createdAt":1416604579000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1236,"state":"open","title":"Add ability to generate ambient declarations for external commonjs modules","updatedAt":1429733867000},{"assignedTo":"","body":"Fixes #2491","comments":28,"createdAt":1428409735000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":2652,"state":"closed","title":"Index signature parameter type allows Enum and type alias = number|strin...","updatedAt":1429732574000},{"assignedTo":"","body":"*Edit from DanielRosenwasser: this fixes #2822.*","comments":0,"createdAt":1429661116000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2857,"state":"closed","title":"Produce type and symbol baselines when running tests.","updatedAt":1429725248000},{"assignedTo":"","body":"This would resolve a problem when you have tsconfig.json files in a folder. It would be cool if you could select the configuration (Think Debug or Release). By default it would just be the default configuration.\r\n\r\nThat's why I think it would be nice","comments":1,"createdAt":1429723279000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1020579?v=3","loggedByName":"niemyjski","milestone":"","number":2870,"state":"closed","title":"Editor configuration support based on a tsconfig.json naming convention.","updatedAt":1429723573000},{"assignedTo":"","body":"This would allow you to specify a tsconfig.json that has a different name. \r\n\r\nIf you specify a directory, it should first try to resolve tsconfig.json. If it can't find it, it should find the first tsconfig*.json file\r\n\r\nReferences: https://github.c","comments":0,"createdAt":1429723108000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1020579?v=3","loggedByName":"niemyjski","milestone":"","number":2869,"state":"open","title":"--p command line option should support taking a full path or directory.","updatedAt":1429723207000},{"assignedTo":"","body":"```javascript\r\nclass stack<T>\r\n{\r\n    data: T[] = [];\r\n};\r\n\r\nfunction push<T>(stack: stack<T>,  n : T)\r\n{\r\n    stack.data.push(n);\r\n}\r\n\r\nfunction main()\r\n{\r\n    var s = new stack<number>();    \r\n\r\n    //fine\r\n    push(s, 1);\r\n \r\n    //Invalid type al","comments":2,"createdAt":1429713397000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6605998?v=3","loggedByName":"thradams","milestone":"","number":2866,"state":"closed","title":"Generic function allowing invalid type","updatedAt":1429722872000},{"assignedTo":"","body":"I've converted a project to use the tsconfig.json support.\r\nAfter adding the tsconfig.json I had to restart the TSServer to pick up the addition of the tsconfig.json file.","comments":1,"createdAt":1429712172000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/172399?v=3","loggedByName":"egamma","milestone":"","number":2864,"state":"open","title":"TSServer doesn't pickup the addition of a tsconfig.json","updatedAt":1429722085000},{"assignedTo":"","body":"It would be nice to import internal modules with ES6 syntax. Example:\r\nyou could write...\r\n```javascript\r\nimport \"Lib/Utils\" // new syntax (maybe import \"Lib/Utils.ts\" should work too?)\r\n```\r\n... instead of the old way\r\n```javascript\r\n/// <reference ","comments":13,"createdAt":1428314911000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3415381?v=3","loggedByName":"boris-kolar","milestone":"","number":2630,"state":"closed","title":"Suggestion: importing internal modules with ES6 syntax","updatedAt":1429720705000},{"assignedTo":"","body":"It would be nice to have a generic callback interface as a core type in Typescript.\r\nIts very common to have a callback with just one result-parameter.\r\n\r\n    interface ICallback<T> {\r\n        (result: T) : void;\r\n    }","comments":1,"createdAt":1429690535000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8426147?v=3","loggedByName":"frodegil","milestone":"","number":2861,"state":"closed","title":"Suggestion: Generic Callback interface","updatedAt":1429719712000},{"assignedTo":"","body":"Hi\r\n\r\nI create the new \"typescript\" project.\r\nI generate the description file for the app.ts by `tsp --target es5 -d app.ts`\r\n\r\nI immediately receive the duplicate identifier error.\r\nI am not sure how to deal with this issue as I want to have both im","comments":7,"createdAt":1429601794000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2682705?v=3","loggedByName":"tomitrescak","milestone":"","number":2844,"state":"closed","title":"Duplicate identifier error in Visual Studio 2015 CTP","updatedAt":1429708379000},{"assignedTo":"","body":"```typescript\r\nclass Company {\r\n    constructor(public name: string) {\r\n    }\r\n}\r\n\r\nclass Employee {\r\n    constructor(public name: string) {\r\n    }\r\n}\r\n\r\nvar array = new Array<Employee>();\r\narray.push(new Company('Google')); // No error or warning.\r\n","comments":5,"createdAt":1426023072000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2404666?v=3","loggedByName":"Dzienny","milestone":"","number":2288,"state":"closed","title":"Question: is it intended?","updatedAt":1429691353000},{"assignedTo":"","body":"```javascript\r\nclass Player{}\r\nclass Batter extends Player{}\r\nclass Bowler extends Player{}\r\nclass Game{\r\n    private _batter:Batter;\r\n    private _bowler:Bowler;\r\n    constructor( batter:Batter,  bowler:Bowler)\r\n    {\r\n       this._batter = batter;\r","comments":3,"createdAt":1429673508000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Canonical","name":"Canonical","color":"000000"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1289830?v=3","loggedByName":"harsimranmaan","milestone":"","number":2860,"state":"closed","title":"Type mismatch not detected for inheriting classes","updatedAt":1429687231000},{"assignedTo":"","body":"Repro:\r\n\r\n1. Add test file `tests/cases/compiler/yaddayaddayadda.ts`.\r\n2. Run `jake runtests tests=yaddayaddayadda`\r\n\r\nExpected: local '.symbols' baselines created\r\nActual: local '.symbols' baselines are not created","comments":3,"createdAt":1429224737000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2806,"state":"closed","title":"'.symbol' baselines not emitted if 'tests' parameter is used in 'jake runtests'","updatedAt":1429684281000},{"assignedTo":"","body":"From the ES6 Specification Draft\r\n\r\n> 18. Else if **`\"arguments\"`** is an element of *parameterNames*, then<br />\r\n> &nbsp;&nbsp;a. Let *argumentsObjectNeeded* be **false**.\r\n\r\nHowever, if you have\r\n\r\n```TypeScript\r\nfunction f() {\r\n    var arguments:","comments":2,"createdAt":1422485425000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1839,"state":"closed","title":"'arguments' resolution is incorrect","updatedAt":1429684238000},{"assignedTo":"","body":"Issue 1:\r\n\r\nTS Server breaks text into lines using the ts.computeLineStarts function.  However, this function is intended for use only by the compiler to indicate what ecmascript believes a newline should be.  This view of what newlines are may or ma","comments":4,"createdAt":1426244995000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2343,"state":"open","title":"TS Server assumes editors work uniformly wrt file encoding and newlines.","updatedAt":1429679107000},{"assignedTo":"","body":"This seems to cause our target=es5 build to fail, though we haven't investigated much.\r\n\r\nhttps://github.com/Microsoft/TypeScript/blob/863f0b61807b3f2aa91fbc7f43fed32915dcc589/bin/typescript.d.ts#L1463","comments":4,"createdAt":1428444747000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/47395?v=3","loggedByName":"alexeagle","milestone":"","number":2663,"state":"closed","title":"ES6-only feature 'let' is in typescript.d.ts","updatedAt":1429678752000},{"assignedTo":"","body":"Suppose you have the following declaration for a generic data structure:\r\n\r\n```typescript\r\ndeclare class MySet<T> {\r\n  constructor();\r\n  add(key: T): MySet<T>;\r\n  delete(key: T): boolean;\r\n  has(key: T): boolean;\r\n}\r\n```\r\n\r\nIf you attempt to initiali","comments":1,"createdAt":1424065255000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/418473?v=3","loggedByName":"coreh","milestone":"","number":2042,"state":"open","title":"Inconsistencies when type arguments are missing from generics","updatedAt":1429677851000},{"assignedTo":"mhegazy","body":"```var a = new Uint8Array(7);``` works, ```var a = new Uint8ClampedArray(7);``` produces an error.","comments":4,"createdAt":1423537721000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/83939?v=3","loggedByName":"webbedspace","milestone":"TypeScript 1.5","number":1995,"state":"closed","title":"TypeScript doesn't recognise Uint8ClampedArray","updatedAt":1429677201000},{"assignedTo":"mhegazy","body":"<https://github.com/Microsoft/TypeScript/blob/master/src/lib/dom.generated.d.ts#L211>\r\n\r\nThe property `document` on `HTMLElement` interface is not defined in current browsers and the spec. ","comments":1,"createdAt":1427380131000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8700285?v=3","loggedByName":"Knagis","milestone":"TypeScript 1.5","number":2510,"state":"closed","title":"Remove HTMLElement.document property from lib.d.ts","updatedAt":1429677077000},{"assignedTo":"","body":"The 1.0 (or 1.1) compiler emitted the compilation flags into the source map. We added this for hypothetical tooling scenarios, where browser tools could trigger a simple recompilation of a file discovered by a source map, in the case where it was liv","comments":0,"createdAt":1429662890000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6385855?v=3","loggedByName":"danmosemsft","milestone":"","number":2858,"state":"open","title":"Port from old compiler code to emit compilation flags into the source map","updatedAt":1429665356000},{"assignedTo":"zhengbli","body":"I'd like to overload the E6 Collections constructor declarations to accept an optional parameter per the ECMA specifications. However, the lib.d.ts file declares the collection constructors with anonymous interfaces.\r\n\r\n```ts\r\n// Cannot extend a vari","comments":1,"createdAt":1426212492000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5642383?v=3","loggedByName":"edevine","milestone":"TypeScript 1.5","number":2336,"state":"closed","title":"Allow static extensions to Set, Map and WeakMap","updatedAt":1429664062000},{"assignedTo":"","body":"By doing this we can accurately handle name collisions with block scoped locals.\r\n\r\nFixes https://github.com/Microsoft/TypeScript/issues/2852","comments":1,"createdAt":1429661033000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2856,"state":"closed","title":"Blocks with locals should be added to the container chain.","updatedAt":1429663252000},{"assignedTo":"","body":"This bug is very similar to #1953.\r\n\r\n0.ts:\r\n```ts\r\n///<reference path=\"1.ts\"/>\r\n///<reference path=\"2.ts\"/>\r\nvar i: A | B;\r\nvar param: any;\r\ni.foo(param); // May or may not produce an error\r\n```\r\n1.ts:\r\n```ts\r\n///<reference path=\"0.ts\"/>\r\n///<refere","comments":1,"createdAt":1423182743000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1954,"state":"closed","title":"Passing files on the command line in a different order produces different errors","updatedAt":1429663228000},{"assignedTo":"","body":"The type definition file for the Q module has the following problem:\r\n```\r\n //export function try(method: Function, ...args: any[]): Promise<any>; // <- This is broken currently - not sure how to fix.\r\n```\r\n\r\nThe compiler doesn't accept the type defi","comments":2,"createdAt":1422012730000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2162413?v=3","loggedByName":"panuhorsmalahti","milestone":"","number":1784,"state":"open","title":"Exporting a keyword-named function in a module ","updatedAt":1429663094000},{"assignedTo":"","body":"I am writing a d.ts for hapi, and wish to specify that some types used by the API are nodejs types.\r\n\r\nFor example:\r\n```\r\nserver.route({handler:(request,reply)=>{\r\n//can pass a nodejs stream to reply\r\n }});\r\n```\r\nhowever, as nodejs's stream.Stream is","comments":18,"createdAt":1425485989000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/814134?v=3","loggedByName":"jasonswearingen","milestone":"","number":2198,"state":"open","title":"1.4:  d.ts definitions can only import ambient external modules in other ambient modules","updatedAt":1429661841000},{"assignedTo":"mhegazy","body":"I have searched the github project for any release changes bud my import statements are broken from a code migration of 1.0.3 to version 1.1 or higher. (http://stackoverflow.com/questions/26543594/import-statement-broken-from-migration-1-0-3-to-1-1-o","comments":5,"createdAt":1414138913000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1705836?v=3","loggedByName":"epinxteren","milestone":"TypeScript 2.0","number":954,"state":"closed","title":"import statement broken from migration 1.0.3 to 1.1 or higher","updatedAt":1429661834000},{"assignedTo":"mhegazy","body":"```Typescript\r\nexport declare function equal(actual: any, expected: any);\r\nexport declare function equal(actual: any, expected: any, message: string);\r\n \r\nequal(1, 3);\r\nequal(1, 3, \"4\"); \r\n```\r\n \r\ngo to def on each should go to the matching signature","comments":1,"createdAt":1418758817000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 2.0","number":1504,"state":"closed","title":"GoToDef should go to the matching signature and not the signature block","updatedAt":1429661669000},{"assignedTo":"CyrusNajmabadi","body":"Completion list should not slide (and repositioned with every keystroke) with the location of the caret:\r\n![completion-alignment](https://cloud.githubusercontent.com/assets/9047283/5095297/ccec9be2-6f68-11e4-9efc-2f538d5a7251.png)\r\n\r\nIt should be ali","comments":6,"createdAt":1416342383000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9047283?v=3","loggedByName":"Peter-Juhasz","milestone":"TypeScript 2.0","number":1195,"state":"closed","title":"Completion list should be aligned to the completion span","updatedAt":1429661612000},{"assignedTo":"","body":"Can we have an official SVG version of the logo? It would help with HiDPI screens.","comments":11,"createdAt":1417746682000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1254431?v=3","loggedByName":"pedromaltez","milestone":"","number":1375,"state":"closed","title":"SVG version of logo","updatedAt":1429661421000},{"assignedTo":"JsonFreeman","body":"```ts\r\ninterface I {\r\n    x: (p: number) => void;\r\n}\r\n\r\nvar obj: I = {\r\n    get x() {\r\n        return q => { };\r\n    }\r\n}\r\n```\r\n\r\nq has type any, but should be number.\r\n\r\nThis is related to #1610 ","comments":1,"createdAt":1420591347000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1611,"state":"open","title":"Contextual typing of object literal getters not working for return expressions","updatedAt":1429661336000},{"assignedTo":"mhegazy","body":"The compiler has an option noLib which disables the default inclusion of lib.d.ts during compilation. Unfortunately there is no compiler option to specify a .d.ts file or files to automatically include before compiling each .ts file. Such an option w","comments":4,"createdAt":1408569856000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6926644?v=3","loggedByName":"sedwards2009","milestone":"","number":494,"state":"open","title":"Request: Compiler option to specify an alternate lib.d.ts","updatedAt":1429661336000},{"assignedTo":"","body":"This is a recreation of the TypeScript logo in SVG. Previous discussion at #1375.","comments":2,"createdAt":1429660879000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1254431?v=3","loggedByName":"pedromaltez","milestone":"","number":2855,"state":"closed","title":"Add SVG version of logo as per #1375","updatedAt":1429661256000},{"assignedTo":"rbuckton","body":"Helpers are emitted at the top of the file before any imports. This way these helpers can not be imported using external module imports.\r\n\r\n```ts\r\nimport 'reflect-metadata';\r\n@inject\r\nclass House {\r\n}\r\n```\r\n```js\r\nvar __metadata = this.__metadata || ","comments":3,"createdAt":1429231318000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":2811,"state":"closed","title":"Helpers are emitted after imports","updatedAt":1429660144000},{"assignedTo":"","body":"Fixes part of #2811, by deferring the execution of calls to `Reflect.decorate` and `Reflect.metadata` to when the helper is called rather than when it is defined.\r\n\r\nThis PR will not cover other concerns related to `this` binding, and does not attemp","comments":2,"createdAt":1429656316000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2853,"state":"closed","title":"Updated emit for __decorator and __metadata helpers","updatedAt":1429660006000},{"assignedTo":"","body":"https://github.com/rwaldron/exponentiation-operator I don't think it needs proposal. \r\nFew emitting examples : \r\n```javascript \r\nx**y \r\nMath.pow(x,y)\r\n\r\nx **= y \r\nx = Math.pow(x, y);\r\n```","comments":9,"createdAt":1424554160000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES7","name":"ES7","color":"bfd4f2"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":2102,"state":"closed","title":"Support es7 exponation operator","updatedAt":1429659392000},{"assignedTo":"","body":"Consider the following:\r\n`var [,,y] = [1, [[2], 3]];`\r\n\r\nThe error I get is Type '[number, (number | number[])[]]' has no property '2'. This is not actionable.","comments":7,"createdAt":1422490010000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"Community","number":1843,"state":"closed","title":"Unhelpful error in destructuring assignment","updatedAt":1429658352000},{"assignedTo":"","body":"Currently, we can only verify number of errors and position of errors through marker. However, in some scenarios, ability to verify correctness of diagnostic messages and their arguments can be useful.  ","comments":1,"createdAt":1414708215000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"Community","number":1009,"state":"open","title":"Support error message verification in Fourslash ","updatedAt":1429657916000},{"assignedTo":"","body":"![image](https://cloud.githubusercontent.com/assets/937933/5271428/367ce272-7a42-11e4-858d-e3d749c62a99.png)\r\n","comments":1,"createdAt":1417556586000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"Community","number":1340,"state":"closed","title":"reference path directive is considered despite being inside a /**/ comment","updatedAt":1429657661000},{"assignedTo":"vladima","body":"The compiler should issue an error when code uses values before they could possibly be initialized.\r\n\r\n```TypeScript\r\n// Error, 'Derived' declaration must be after 'Base'\r\nclass Derived extends Base { }\r\nclass Base { }\r\n```","comments":23,"createdAt":1405446211000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.6","number":21,"state":"closed","title":"Suggestion: disallow use before definition","updatedAt":1429656431000},{"assignedTo":"","body":"It is incredibly easy to make a copy/paste error for `case` clauses in a `switch` statement.\r\n\r\n```TypeScript\r\nswitch (node.kind) {\r\n    // ...\r\n    case SyntaxKind.TupleType:\r\n        // Do something with tuple types.\r\n    case SyntaxKind.TupleType:","comments":5,"createdAt":1412728349000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":854,"state":"closed","title":"Report errors for duplicate case clauses","updatedAt":1429656409000},{"assignedTo":"","body":"#### Compiler interface changes\r\n\r\n- New compiler flag: ```-symbolForPrivates```\r\n\r\n\r\n#### Codegen example\r\n\r\nTS source (unchanged)\r\n\r\n```typescript\r\nclass Clazz {\r\n\t// Private member var\r\n    private _var1: number;\r\n\r\n\t// Private member var with def","comments":8,"createdAt":1410917147000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":684,"state":"closed","title":"Implement private variables, getter/setters and methods using Symbols","updatedAt":1429655887000},{"assignedTo":"","body":"Here is a pattern I use in my unit tests all the time:\r\n\r\n```TypeScript\r\nimport MyModule = module(\"../../../../Web/Scripts/SubComponent/MyModule\");\r\ndeclare module 'app/SubComponent/MyModule' { };\r\nimport _m = module('app/SubComponent/MyModule');\r\nva","comments":1,"createdAt":1406587410000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4219105?v=3","loggedByName":"fsoikin","milestone":"","number":278,"state":"open","title":"Separate Module ID from type information location","updatedAt":1429654587000},{"assignedTo":"","body":"That would allow for a nice formatting in the UI and makes the overall API more consistence.","comments":3,"createdAt":1429635761000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":2850,"state":"open","title":"TSServer: 'quickInfo' request should return symbol display parts as completion does","updatedAt":1429646665000},{"assignedTo":"","body":"At the moment the initialValue parameter of Array.reduce is only marked as optional for the overload where previousValue and currentValue are both of the same type T (i.e. the callback returns a value of the same type as the items in the array being ","comments":1,"createdAt":1429611649000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1149322?v=3","loggedByName":"smfeest","milestone":"","number":2847,"state":"closed","title":"initialValue parameter of Array.reduce<U> should be optional","updatedAt":1429641022000},{"assignedTo":"","body":"Could it be possible to implement different access modifier for getter and setter? This way the setter could be for example private/protected and the getter public. In some cases this in really useful when the value shall be read-only.\r\n\r\nExample:\r\n\r","comments":1,"createdAt":1429606922000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6212595?v=3","loggedByName":"Andree643","milestone":"","number":2845,"state":"closed","title":"Different access modifier for getter and setter","updatedAt":1429640964000},{"assignedTo":"JsonFreeman","body":"Value type of indexers is ending up now as `undefined` when implicitly created from another type on the RHS as in the following test case:\r\n\r\n```ts\r\nvar bar:{ [key:string]: boolean; };\r\nvar foo = bar = {};\r\nfoo['a'] = true; // error TS2323: Type 'boo","comments":12,"createdAt":1421131581000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"TypeScript 1.5","number":1655,"state":"closed","title":"Incompatible change in indexer type inference","updatedAt":1429640761000},{"assignedTo":"jonathandturner","body":"The following should log `true` but logs `false` instead:\r\n\r\n```javascript\r\nclass Foo {}\r\nclass Bar extends Foo {}\r\n\r\nconsole.log(Object.getPrototypeOf(Bar) === Foo);\r\n```\r\n\r\nThis is due to how the __extends helper is implemented. It generates this:\r","comments":25,"createdAt":1420487349000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/131485?v=3","loggedByName":"EisenbergEffect","milestone":"TypeScript 1.6","number":1601,"state":"closed","title":"Class Inheritance is Not ES6 Spec Compliant","updatedAt":1429639966000},{"assignedTo":"","body":"Here is a common scenario for my open source projects:\r\n\r\n```\r\nmodule-a (depends on module-b)\r\nâââ bower_components\r\nâ   âââ dt-foo (depends on ../dt-node)\r\nâ   âââ dt-node\r\nâ       âââ node.d.ts (v0.10)\r\nâââ node_modules\r\n    âââ module-b\r\n        â","comments":7,"createdAt":1415682949000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1058243?v=3","loggedByName":"jedmao","milestone":"","number":1125,"state":"closed","title":"d.ts dependency resolution errors when referencing the same file contents in different folders","updatedAt":1429638985000},{"assignedTo":"","body":"So basically no emitting on errors is not configurable (as of 1.4 for VS).","comments":6,"createdAt":1429627663000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":2848,"state":"closed","title":"Microsoft.TypeScript.targets  shipped with 1.4 doesn't mention TypeScriptNoEmitOnError or --noEmitOnError","updatedAt":1429638204000},{"assignedTo":"mhegazy","body":"...with a second TypeScript project in a solution that uses  ```/// <reference path=``` comments.  I found this issue as I was migrating a Jasmine unit test project to TypeScript.  You can see the full details in [this blog post](http://icanmakethisw","comments":15,"createdAt":1410604448000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1010525?v=3","loggedByName":"johnnyreilly","milestone":"","number":673,"state":"closed","title":"TypeScript Language Service implicit referencing functionality breaks in Visual Studio...","updatedAt":1429634051000},{"assignedTo":"sheetalkamat","body":"I was recently compiling TypeScript files into JavaScript using `tsc` with the `--sourcemap` option set. And I noticed that the paths in the \"sources\" field of the generated source-map changed in different ways depending on how I set the `--sourceRoo","comments":10,"createdAt":1418769210000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4542064?v=3","loggedByName":"ymengesha","milestone":"","number":1513,"state":"closed","title":"Calculation of paths in the âsourcesâ field of source-maps generated by tsc","updatedAt":1429608388000},{"assignedTo":"","body":"Right now when doing a fourslash test for a file's lexical structure, the idea is to set up markers which represent portions of the lexical tree, and do something like \r\n\r\n```TypeScript\r\ntest.markers().forEach((marker) => {\r\n    verify.getScriptLexic","comments":5,"createdAt":1412113880000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":789,"state":"open","title":"Fourslash facilities for testing script lexical structure are lacking","updatedAt":1429601311000},{"assignedTo":"","body":"In the typeBaselines branch, we get the following error when running the tests:\r\n\r\ncompiler tests for tests/cases/conformance/types/members/duplicateStringIndexers.ts Correct errors for tests/cases/conformanc\r\ne/types/members/duplicateStringIndexers.","comments":2,"createdAt":1409164636000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":555,"state":"closed","title":"[typeBaselines] Poor message from harness when a compiler test causes errors in lib.d.ts","updatedAt":1429599763000},{"assignedTo":"","body":"Compile this code and generate a declaration file:;\r\n\r\n```TypeScript \r\n/// <reference no-default-lib=\"true\"/>\r\n```\r\n","comments":0,"createdAt":1409087815000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":545,"state":"open","title":"no-default-lib reference is not persisted into declarations file","updatedAt":1429599630000},{"assignedTo":"","body":"I should be able to get to `ts.forEachChild` by typing it in like that.\r\n\r\n![qualified names](https://cloud.githubusercontent.com/assets/972891/4985060/54dbf3ea-6929-11e4-8061-ad9f183106ff.gif)\r\n","comments":5,"createdAt":1415658772000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":1115,"state":"closed","title":"NavigateTo should work on fully qualified names.","updatedAt":1429599312000},{"assignedTo":"","body":"In bringing in the efficient line handling / change set handling code from TSServer I've found that the heart of the code is really just the `ScriptInfo`. \r\n\r\nI've needed to bring in all this code :   https://github.com/TypeStrong/atom-typescript/blo","comments":3,"createdAt":1426066732000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2297,"state":"closed","title":"TSServer : make the ScriptInfo standalone","updatedAt":1429599133000},{"assignedTo":"","body":"I'm using commonjs modules on node.\r\n\r\nI want to find a way to hide **all** implementation details from users of my modules.\r\nBut I cannot figure out how to protect my users from the dependencies on modules that are required by my modules.\r\n\r\nFor exa","comments":1,"createdAt":1414286420000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/940931?v=3","loggedByName":"psnider","milestone":"","number":969,"state":"closed","title":"v1.1.0.0: suggestion: support exporting types from within module to sever implementation dependencies","updatedAt":1429598952000},{"assignedTo":"","body":"I'm in the process of updating a language service client and re-provider (provides access to language services from the commandline, for editor plugins) from codeplex to github versions of typescript, and once again I'm struggling with the sparse doc","comments":11,"createdAt":1422020039000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/837040?v=3","loggedByName":"clausreinke","milestone":"","number":1786,"state":"closed","title":"please clarify language service import/reference resolution and set-of-files handling","updatedAt":1429598913000},{"assignedTo":"","body":"This is related to borisyankov/DefinitelyTyped#2734\r\nSee repo at https://github.com/jt000/RepoForTypescriptBuildIssue\r\n\r\nThe issue is that in a single project I have two TS files that are for separate scenarios, which don't overlap in functionality (","comments":19,"createdAt":1418773281000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8368448?v=3","loggedByName":"jt000","milestone":"","number":1516,"state":"closed","title":"TS2134 build error for 2 isolated TS files (shouldn't conflict)","updatedAt":1429598549000},{"assignedTo":"","body":"I'm new on TypeScript, so sorry if it no make sense. But I like to know if to I import first I really need use the \"reference\" tag. If yes, why not have only a \"import\" or similar to do same, as a shortcut?\r\n\r\n    import \"myfile.ts\";\r\n    class Anima","comments":2,"createdAt":1425695985000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/421851?v=3","loggedByName":"rentalhost","milestone":"","number":2247,"state":"closed","title":"Support import?","updatedAt":1429598498000},{"assignedTo":"","body":"I'm just trying to understand the main difference between Typescript and Flow. So far I have the following questions.\r\n\r\n1. Does the typescript Compiler caches any informations from the last compile or does it just watch for changes to a file and the","comments":9,"createdAt":1421006665000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/98088?v=3","loggedByName":"rogergl","milestone":"","number":1639,"state":"closed","title":"Some questions regarding some concepts of TypeScript","updatedAt":1429598478000},{"assignedTo":"","body":"[MS Research has done some interesting work](http://research.microsoft.com/apps/pubs/?id=224900) adding gradual typing and run-time type checking to TS [[source code](http://research.microsoft.com/en-us/downloads/b250c887-2b79-4413-9d7a-5a5a0c38cc57/","comments":3,"createdAt":1416438758000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4587515?v=3","loggedByName":"0x1mason","milestone":"","number":1218,"state":"closed","title":"Safe & Efficient Gradual Typing for TypeScript","updatedAt":1429598443000},{"assignedTo":"","body":"Some time ago Visual Studio started to exclude the generated .js and .map from projects by default. The update was far from gracefull, but we finally managed to update the different branches in source control.\r\n\r\nHowever, since these files were exclu","comments":6,"createdAt":1426588653000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7566821?v=3","loggedByName":"realbart","milestone":"","number":2391,"state":"closed","title":"TypeScript debugging does not work when using Kerberos authentication. (workaround: include js and map in project)","updatedAt":1429598399000},{"assignedTo":"","body":"Let's say I declared the following types\r\n\r\ntype Foo;\r\ntype FooGenerator = () => Foo;\r\ntype FooGeneratorGenerator = () => FooGenerator;\r\n\r\nIs there any way to differentiate between FooGenerator and FooGeneratorGenerator?  (If I were to replace Foo wi","comments":5,"createdAt":1427769334000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1448299?v=3","loggedByName":"bluong","milestone":"","number":2556,"state":"closed","title":"Differentiate between two type aliases.","updatedAt":1429598386000},{"assignedTo":"","body":"I'm compiling a number of .ts files and using the --out  option to concatenate them into a single .js file.  I've got some files in different folders, and using internal modules.  Without <reference path=... to reference the .js, the compiler still f","comments":3,"createdAt":1423862824000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/540402?v=3","loggedByName":"mconner","milestone":"","number":2032,"state":"closed","title":"Smarter contatenation based on import.","updatedAt":1429598356000},{"assignedTo":"","body":"I want to be able to programmatically create a TS file and emit it.\r\n\r\n@DanielRosenwasser [mentioned last week](https://github.com/Microsoft/TypeScript/issues/1514#issuecomment-69105512):\r\n\r\n>It honestly may be better to do a straight TS emit if what","comments":13,"createdAt":1421107534000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/80104?v=3","loggedByName":"ctaggart","milestone":"","number":1651,"state":"closed","title":"How do you do a straight TS emit?","updatedAt":1429598287000},{"assignedTo":"","body":"I have documented the question more on Stack Overflow (http://stackoverflow.com/questions/28150967/typescript-cloning-object)\r\n\r\nIs there a way to clone an object in typescript? Currently I'm using the following hack\r\n\r\nvar cloneObj = new this.constr","comments":3,"createdAt":1423160855000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7648312?v=3","loggedByName":"dlaberge","milestone":"","number":1946,"state":"closed","title":"cloning object ","updatedAt":1429598261000},{"assignedTo":"","body":"Is there a way to only emit the declaration file (.d.ts) with the compiler and not the js file ?","comments":1,"createdAt":1422621846000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5285425?v=3","loggedByName":"paztis","milestone":"","number":1866,"state":"closed","title":"Can compiler only emit declaration file ?","updatedAt":1429598248000},{"assignedTo":"","body":"Are there release notes for 1.1 somewhere that show what changed? I read on the roadmap and official blog post that it's a drop-in replacement and is faster, but is there more details than that?\r\n\r\nThanks,\r\n\r\nSam\r\n","comments":3,"createdAt":1414416932000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1799385?v=3","loggedByName":"samuelneff","milestone":"","number":972,"state":"closed","title":"Release notes for TypeScript 1.1?","updatedAt":1429598170000},{"assignedTo":"","body":"Check the examples:\r\n//generated/example.js\r\ntsc --outDir generated src/directory/subdirectory/example.ts\r\n\r\n//generated/example.js\r\ntsc --outDir generated src/directory/example.ts\r\n\r\n//generated/example.js\r\ntsc --outDir generated src/example.ts\r\n\r\n/","comments":14,"createdAt":1412322338000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6594837?v=3","loggedByName":"jzalucki","milestone":"","number":812,"state":"closed","title":"Generation of javascript files with --outDir is foolish.","updatedAt":1429597973000},{"assignedTo":"","body":"tests/cases/compiler/primaryExpressionMods.ts \r\n\r\n```TypeScript\r\nmodule M\r\n{\r\nexport interface P { x: number; y: number; }\r\nexport var a = 1;\r\n}\r\n\r\nvar p: M.P; // Used as ModuleName\r\n\r\nvar m: M = M; // Used as TypeName and PrimaryExpression (error on","comments":0,"createdAt":1405627064000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":102,"state":"open","title":"[Errors][Message] Module in type reference","updatedAt":1429597903000},{"assignedTo":"","body":"\nExpected: continue checking the rest of the file\n\nActual: compiler stops processing the file immediately","comments":2,"createdAt":1405627085000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":120,"state":"closed","title":"[Errors] error recovery when /// or import cannot be resolved","updatedAt":1429596851000},{"assignedTo":"","body":"```TypeScript\r\nvar x = {\r\n    a: \"Hello\"\r\n    `b`: 123\r\n}\r\n```\r\n\r\nRight now, the parser encounters the template string, decides it should bail out of object literal parsing, and we more or less recover thinking we have something like the following:\r\n","comments":0,"createdAt":1415139635000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":1057,"state":"open","title":"Gracefully handle template literal properties in the parser","updatedAt":1429596655000},{"assignedTo":"","body":"When generating source maps, if the sourceRoot option is specified and the\r\nprojectRoot is specified, then the filenames that appear in the \"sources\" field\r\nof the source map are relative to the projectRoot.","comments":15,"createdAt":1423872740000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10673049?v=3","loggedByName":"msprotz","milestone":"","number":2034,"state":"closed","title":"Add a new project root option (fixes #1513).","updatedAt":1429596355000},{"assignedTo":"","body":"When you declare a constructor parameter as ```public``` or ```private``` the IntelliSense in VS 2013 doesn't pick up the @param JSDoc description if you access the member like  ```var x = this.msg```. For example:\r\n\r\n![issue_1](https://cloud.githubu","comments":2,"createdAt":1412113424000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3857782?v=3","loggedByName":"rwhepburn","milestone":"","number":788,"state":"open","title":"VS 2013 IDE should show documentation in IntelliSense for parameter properties","updatedAt":1429596200000},{"assignedTo":"","body":"When import external module, we should have a completion list for names of external modules. ","comments":3,"createdAt":1411586836000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":739,"state":"closed","title":"Completion list for external module","updatedAt":1429596136000},{"assignedTo":"","body":"The following code should be disallowed in strict mode and ES5:\r\n```\r\n\"\\5\";\r\n\"\\05\";\r\n\"\\55\";\r\n\"\\055\";\r\n```\r\n\r\nThis is disallowed by Annex B.1.2 of the EcmaScript 5 spec.","comments":0,"createdAt":1407442837000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":396,"state":"open","title":"Octal escape sequences should be a lexical/syntactic error in strict mode and ES5","updatedAt":1429595215000},{"assignedTo":"","body":"- tests/cases/conformance/types/typeParameters/typeArgumentLists/callGenericFunctionWithIncorrectNumberOfTypeArguments.ts\r\n\r\n```TypeScript\r\nfunction f<T, U>(x: T, y: U): T { return null; }\r\nvar r1 = f<number>(1, '');\r\n\r\n``` \r\n\r\nOld Compiler\r\n\r\n    !!","comments":0,"createdAt":1405627063000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":101,"state":"open","title":"[Errors][Message] Generic type argument count mismatch error","updatedAt":1429593823000},{"assignedTo":"","body":"Move strict mode check into type checker so we can give better error messages. This will be useful particularly when class declaration and ES6 module become strict mode code. One thing worth pointing out is that strict mode is a grammar check which m","comments":1,"createdAt":1428561760000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2684,"state":"closed","title":"Migrate strict mode check","updatedAt":1429589977000},{"assignedTo":"","body":"```typescript\r\n/*\r\naa\r\n*/var c = 1;\r\n```\r\ngenerate\r\n```\r\n/*\r\naa\r\n/*\r\naa\r\n var c = 1;\r\n```","comments":1,"createdAt":1429584105000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/54468?v=3","loggedByName":"heroboy","milestone":"","number":2842,"state":"closed","title":"If no return after /* ... */, generate wrong js","updatedAt":1429587366000},{"assignedTo":"mhegazy","body":"We would like some sort of <TypeScriptCompile exclude=true> tag added to the TypeScript targets to give the language service the ability to resolve project outputs in project to project references, but not include them in the build.\r\n","comments":0,"createdAt":1409087737000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 2.0","number":544,"state":"open","title":"Support <TypeScriptCompile exclude=true>","updatedAt":1429581190000},{"assignedTo":"","body":"# Proposal\r\n\r\nSupport `typescript.definition` in package.json of node packages as a part of module resolution.\r\n\r\n# Example \r\n\r\nConsider this simple NPM package : https://www.npmjs.com/package/example-typescript-a (src: https://github.com/TypeStrong/","comments":7,"createdAt":1429402879000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2829,"state":"closed","title":"Recommendation: Simplify NPM/Node code sharing","updatedAt":1429574538000},{"assignedTo":"","body":"It looks like `import` is not allowed inside functions, like so:\r\n\r\n```javascript\r\nfunction my_function() {\r\n    import MyClass = require(\"./MyClass\");\r\n}\r\n```\r\n\r\nOne can do `var` instead:\r\n\r\n```javascript\r\nfunction my_function() {\r\n    var MyClass =","comments":1,"createdAt":1428492957000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9773803?v=3","loggedByName":"streamich","milestone":"","number":2670,"state":"closed","title":"`import` in functions","updatedAt":1429571771000},{"assignedTo":"","body":"tests/cases/conformance/parser/ecmascript5/Generics/parserMemberAccessExpression1.ts\r\n\r\n```TypeScript\r\nFoo<T>.Bar();\r\n```\r\n\r\nOld: \r\n\r\n!!! A parameter list must follow a generic type argument list. '(' expected.\r\n\r\nNew: \r\n\r\n!!! Expression expected.\r\n\r","comments":2,"createdAt":1405627065000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":103,"state":"closed","title":"[Errors][Message] Generic type argument on identifier expression","updatedAt":1429570881000},{"assignedTo":"","body":"```TypeScript\r\nvar v = { areturn;\r\n```\r\n\r\nExpected: \r\n\r\n!!! ':' expected.\r\n\r\nActual: \r\n\r\n!!! ':' expected.!!! ':' expected.\r\n\r\n \r\n\r\nDon't want to consume the 'return' as the next property name in the object literal \r\n\r\n \r\n\r\nSee also:\r\n\r\ntests/cases/c","comments":2,"createdAt":1405627084000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":118,"state":"closed","title":"[Errors] error recovery of object literals with missing :","updatedAt":1429570674000},{"assignedTo":"","body":"Starting from 5a2fb94, the EmitHost returned from ts.createEmitHostFromProgram() returns functions on the compilerHost like so:\r\n\r\n```javascript\r\n        return {\r\n            getCanonicalFileName: compilerHost.getCanonicalFileName,\r\n            getC","comments":13,"createdAt":1419113766000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.5","number":1545,"state":"closed","title":"ts.createEmitHostFromProgram doesn't bind compilerHost methods to the compilerHost instance","updatedAt":1429570494000},{"assignedTo":"","body":"```TypeScript\r\nexport function foo() {\r\n       export var x = this;    \r\n}\r\n```\r\n \r\nExpected: \r\n\r\n!!! Modifiers cannot appear here.\r\n\r\nActual: \r\n\r\n```TypeScript\r\n    export function foo() {\r\n       export var x = this;\r\n!!! Statement expected.\r\n    }","comments":1,"createdAt":1405627088000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":123,"state":"closed","title":"[Errors] error recovery with illegal modifiers inside function bodies","updatedAt":1429570277000},{"assignedTo":"","body":"Hi, I've noticed that the current typescript module implementation is different from the proposal in Ecmascript 6 - is this planned to be changed?","comments":2,"createdAt":1405991454000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4100142?v=3","loggedByName":"hsdk123","milestone":"","number":177,"state":"closed","title":"Module Implementation","updatedAt":1429570055000},{"assignedTo":"","body":"Say we have the File structure (`--outDir js`): \r\n\r\n```bash\r\nts\r\n    a.ts\r\n    foo\r\n    |> b.ts\r\n    |> c.ts\r\njs\r\n    a.js\r\n    foo\r\n    |> b.js\r\n    |> c.js\r\n```\r\nIf we compile with all three files with `outDir` its all okay. But if we only compile ","comments":4,"createdAt":1406590993000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":287,"state":"closed","title":"TypeScript needs a `baseDir` option","updatedAt":1429569853000},{"assignedTo":"","body":"```TypeScript\r\nvar s = $.extend< { workItem: any }, { workItem: any, width: string }>({ workItem: this._workItem }, {});\r\n```\r\n\r\nExpected: \r\n\r\n!!! ';' expected.!!! Cannot find name '$'.!!! Untyped function calls may not accept type arguments.\r\n\r\nActu","comments":1,"createdAt":1405627076000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":115,"state":"closed","title":"[Errors] parser error recovery with comma in type member list","updatedAt":1429569727000},{"assignedTo":"","body":"```TypeScript\r\nfoo((1)=>{return 0;}); \r\n```\r\n\r\nExpected: \r\n\r\n!!! ',' expected.\r\n\r\nActual: \r\n\r\n!!! '=>' not preceded by parameter list.!!! ':' expected.!!! ',' expected.!!! Declaration or statement expected.!!! Declaration or statement expected.!!! Ca","comments":2,"createdAt":1405627072000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":111,"state":"closed","title":"[Errors] error recovery with incorrect lambda syntax","updatedAt":1429569720000},{"assignedTo":"","body":"```TypeScript\r\nclass C implements A extends B {}\r\n```\r\n\r\nExpected: 'extends' clause must precede 'implements' clause.\r\n\r\nActual: \r\n\r\n!!! '{' expected.!!! ';' expected.","comments":1,"createdAt":1405627070000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":108,"state":"closed","title":"[Errors] incorrectly ordered implements and extends","updatedAt":1429569714000},{"assignedTo":"","body":"There was an discussion about generating ambient declarations for external CommonJS modules: http://typescript.codeplex.com/workitem/2080\r\n\r\nBut even if typescript generates the definitions as we what we want, we'll still need to add references manua","comments":16,"createdAt":1409465431000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":575,"state":"open","title":"Proposal of a convention about npm modules distribution.","updatedAt":1429569099000},{"assignedTo":"JsonFreeman","body":"Our ordering scheme for type argument inference defers contextually typed lambdas so that we don't fix type parameters too early. However, it does not work for nested functions.\r\n\r\n```ts\r\ndeclare function foo1<T>(xx: (xx: T) => void, yy: T);\r\nfoo1(x ","comments":1,"createdAt":1418256897000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.6","number":1444,"state":"closed","title":"Nested contextually sensitive function expressions cause early fixing in overload resolution","updatedAt":1429568970000},{"assignedTo":"JsonFreeman","body":"It appears that the type inference degraded with the release of the TypeScript compiler version 1.3.0.0.\r\nI have a project which compiles successfully when using the TypeScript compiler in version 1.0.3.0. Since I switched to version 1.3.0.0 I get er","comments":7,"createdAt":1416530028000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9468599?v=3","loggedByName":"lord-saumagen","milestone":"TypeScript 1.6","number":1231,"state":"closed","title":"Type inference error in compiler version 1.3.0.0","updatedAt":1429568884000},{"assignedTo":"","body":"The following, when present in a .ts file in any Visual Studio 2013 Update 4 project will generate an error.  That error is immediately visible if Web Essentials 2.5.4 is installed, otherwise you won't see it until you examine the generated .js file:","comments":9,"createdAt":1423169754000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7603753?v=3","loggedByName":"fmorriso","milestone":"","number":1948,"state":"closed","title":"TypeScript 1.4 does not work in VS 2013 Update 4","updatedAt":1429567375000},{"assignedTo":"","body":"I tried without success to use promises with TypeScript, both with [bluebird](https://github.com/petkaantonov/bluebird) and with es6-promise, using in both cases the definition files of DefinitelyTyped.\r\n\r\nThese two promise definitions should work:\r\n","comments":4,"createdAt":1422467603000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1002436?v=3","loggedByName":"ntrrgc","milestone":"","number":1834,"state":"closed","title":"Promises don't work. An issue with callback overloading, maybe?","updatedAt":1429567078000},{"assignedTo":"","body":"I sometimes find myself in need of a type operator that allows me to derive (anonymous) types from function signatures.\r\n\r\nPlease pay no attention to the syntax - the use of `$` as operator here is an arbitrary choice, I'm not sure what this should l","comments":0,"createdAt":1426437576000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/103348?v=3","loggedByName":"mindplay-dk","milestone":"","number":2365,"state":"open","title":"Feature: method signature type operators","updatedAt":1429566222000},{"assignedTo":"mhegazy","body":"I have a source structure in which there is a single top-level directory, and I expect the same structure to be produced in the outDir, instead it is dropped. It seems that tsc trims singleton parent directories.\r\nThat behavior is okay, but I would l","comments":1,"createdAt":1428360106000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/47395?v=3","loggedByName":"alexeagle","milestone":"TypeScript 1.5","number":2644,"state":"closed","title":"Empty parent directories are not preserved with --outDir","updatedAt":1429566171000},{"assignedTo":"mhegazy","body":"Provide documentation for compiler\r\n\r\nwould be great, as well as documenting version changes.","comments":4,"createdAt":1413366599000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/878397?v=3","loggedByName":"raDiesle","milestone":"TypeScript 1.5","number":896,"state":"closed","title":"Provide documentation for compiler","updatedAt":1429563015000},{"assignedTo":"jonathandturner","body":"We do not have any samples showcasing the new type constructs added e.g. union types, tuple types, and type aliases.","comments":0,"createdAt":1415169703000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":1062,"state":"closed","title":"Add new sample for new type constructs in the playground","updatedAt":1429562593000},{"assignedTo":"jonathandturner","body":"Possibly add it to the \"simple inheritance\" sample, or create a new sample of it.","comments":7,"createdAt":1415169593000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":1061,"state":"closed","title":"Add \"protected\" sample to the playground","updatedAt":1429562509000},{"assignedTo":"jonathandturner","body":"* let and const\r\n* templates\r\n* short hand properties and functions\r\n* destructuring\r\n* etc..","comments":2,"createdAt":1415169761000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":1064,"state":"closed","title":"Add new sample for ES6 features","updatedAt":1429562473000},{"assignedTo":"ahejlsberg","body":"Not sure this even allowed, but it seems like a reasonable request.  Encountered during the transition of `require` to ES6 modules.\r\nAs an example:\r\n#### Code\r\nFoo.ts\r\n```\r\nclass Foo {}\r\nexport default Foo;\r\n```\r\nBar.ts\r\n```\r\nexport * from './Foo';\r\n","comments":14,"createdAt":1428805551000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5741321?v=3","loggedByName":"mtraynham","milestone":"TypeScript 1.5","number":2726,"state":"closed","title":"ES6 Modules & CommonJS: Re-export with wildcard of export default fails","updatedAt":1429560240000},{"assignedTo":"","body":"Fixes #1424.\r\n\r\nWhen you have a chain of instantiated generics, like this:\r\n```ts\r\ninterface Type<T1> {\r\n    x: T1;\r\n}\r\ninterface Type2<T2> {\r\n    y: Type<T2>; // Replace T1 with T2 in Type\r\n}\r\nvar v: Type2<string>; // Replace T2 with string in Type2","comments":1,"createdAt":1429321367000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2824,"state":"closed","title":"Fix combineTypeMappers to use instantiateType","updatedAt":1429559585000},{"assignedTo":"","body":"Are there any ways to program using ES6 modules and compile everything down to one file? I guess you treat ES6 modules as external modules and therefore not doing any bundling.\r\n\r\nI have tried using `--out` option to compile everything down to one fi","comments":38,"createdAt":1428941257000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2743,"state":"open","title":"How to use ES6 modules on the browser?","updatedAt":1429559199000},{"assignedTo":"","body":"This eases the proposal of snippets on the editor side. For example if the completions are member completions no or different snippets can be provided","comments":1,"createdAt":1429477410000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":2831,"state":"open","title":"TSServer: completions request should return isMemberCompletion & isNewIdentifierLocation","updatedAt":1429558123000},{"assignedTo":"","body":"doesn't work\r\n```typescript \r\ndeclare module M {\r\n   interface I {\r\n     fn: {\r\n          (value: number): string;\r\n     }\r\n   }\r\n}\r\n\r\ndeclare module M {\r\n   interface I {\r\n     fn: {\r\n         (value: Date): boolean;\r\n     }\r\n   }\r\n}\r\n```\r\n\r\nworks\r\n","comments":2,"createdAt":1429323628000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":2825,"state":"open","title":"Handbook: clarify different declaration merging scenarios","updatedAt":1429554785000},{"assignedTo":"","body":"Counting `../../../` is painful, it would be great if TypeScript compiler could convert something like `~/modules/my-module` for us based on project root and file path.","comments":2,"createdAt":1429357334000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":2828,"state":"closed","title":"Import module based on path relative to project root (tsconfig.json).","updatedAt":1429554317000},{"assignedTo":"","body":"I'm very lazy at typing `commonjs` in the terminal. Maybe you should allow people to just type cjs?\r\n```\r\ntsc test.ts -m cjs\r\n```\r\n\r\nIt is very \"common\" that we refer `commonjs` as `cjs`.","comments":3,"createdAt":1429341541000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2826,"state":"closed","title":"Allow acronym cjs as an argument to CLI option `--module`","updatedAt":1429554052000},{"assignedTo":"","body":"Are default let/var supported in TS?\r\n\r\n```typescript\r\nexport default let variable1 = \"string1\";\r\nexport default var variable2 = \"string2\";\r\n```\r\n\r\nRight now they just throw a compile error:\r\n```\r\nerror TS1005: ';' expected.\r\n```\r\n\r\nI'm currently usi","comments":2,"createdAt":1429511430000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2833,"state":"closed","title":"Export default let/var not working","updatedAt":1429553396000},{"assignedTo":"","body":"Hi,\r\n\r\nWill this be possible?\r\n\r\n```typescript\r\nvar foo: (number|string)[] = [1, 'bar'];\r\n\r\nfoo.filter(item => typeof item ==='string').map(item => item/*string type*/);\r\nfoo.filter(item => typeof item !=='string').map(item => item/*number type*/);\r\n","comments":1,"createdAt":1429525604000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":2835,"state":"closed","title":"Narrow types when using `Array.filter`","updatedAt":1429553348000},{"assignedTo":"","body":"```TypeScript\r\n/// <reference path=\"\r\n```\r\n\r\nIf requesting completion here, we should get `.`, `..`, and any `.ts` files at the current directory location.\r\n\r\nIf requesting completion after a `\\` or `/` in the path, if the path up until the last `/` ","comments":3,"createdAt":1429206100000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2799,"state":"closed","title":"Completion in reference comments and imports","updatedAt":1429506967000},{"assignedTo":"","body":"I am trying to facilitate use of TypeScript with ES6-based modular set of github repos.  I am struggling with this pattern:\r\n\r\n![ambient module situation](https://cloud.githubusercontent.com/assets/10272832/6855838/469991a4-d3c1-11e4-8781-46f7342bb50","comments":11,"createdAt":1427400547000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10272832?v=3","loggedByName":"cmichaelgraham","milestone":"","number":2516,"state":"closed","title":"need export relative external module from ambient module decl.","updatedAt":1429490242000},{"assignedTo":"yuit","body":"From [9.2.13 of the ES6 Spec Draft](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-functiondeclarationinstantiation):\r\n\r\n> a. NOTE Arrow functions never have an arguments objects.\r\n\r\nIn fact, we should be capturing `arguments` from the fir","comments":9,"createdAt":1420585810000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":1609,"state":"closed","title":"Emit of 'arguments' in arrow functions is incorrect per ES6 spec.","updatedAt":1429490206000},{"assignedTo":"dbaeumer","body":"Configure the format options so that convertTabsToSpaces = false.\r\n\r\nType <enter> to insert a new line behind an indented }\r\n\r\nObserve: the new line has tabs and spaces. The cursor sits between. ","comments":2,"createdAt":1427369720000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"TypeScript 1.5","number":2507,"state":"closed","title":"Typescript server: bad formatting for formatonkey if convertTabsToSpaces === false","updatedAt":1429474236000},{"assignedTo":"","body":"See issue #2507","comments":4,"createdAt":1428572790000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":2687,"state":"closed","title":"fixes #2507 - bad formatting for formatonkey if convertTabsToSpaces === false","updatedAt":1429472631000},{"assignedTo":"zhengbli","body":"According to the [MediaSource Candidate Recommendation Spec](http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBufferView-data), there are two `SourceBuffer.appendBuffer()` method overloads.  \r\n\r\n[MSDN](http://msdn.microsoft","comments":14,"createdAt":1406737294000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/309607?v=3","loggedByName":"milkisevil","milestone":"TypeScript 1.5","number":314,"state":"closed","title":"SourceBuffer.appendBuffer() is missing overload for ArrayBufferView param in lib.d.ts","updatedAt":1429436231000},{"assignedTo":"","body":"The dom type \"ArrayBufferView\" was emitted as \"any\" because of a script\r\nbug.","comments":1,"createdAt":1429341660000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":2827,"state":"closed","title":"Fix dom type \"ArrayBufferView\"","updatedAt":1429386445000},{"assignedTo":"","body":"Fixes #1545","comments":10,"createdAt":1419124063000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1546,"state":"closed","title":"Don't lose the this reference for compilerHost methods.","updatedAt":1429381784000},{"assignedTo":"zhengbli","body":"The \"IE11 ECMAScript Extensions\" contains ES6 collections, which allows code aimed at ES5 runtimes to mistakenly use them and fail at runtime.\r\n\r\nFor backward compatibility, perhaps make a new lib.es5.d.ts that doesn't have these sections. That will ","comments":5,"createdAt":1428618023000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.5","number":2697,"state":"closed","title":"Please remove non-ES6 types from lib.d.ts","updatedAt":1429333400000},{"assignedTo":"","body":"Since TypeScript is a superset of JavaScript it should be possible to compile ES6 code without errors.\r\n\r\nThis valid ES6 snippets throws the following error:\r\n\r\n    Error:(3, 14) TS2339: Property 'weight' does not exist on type 'Car'.\r\n\r\n```javascrip","comments":13,"createdAt":1428049995000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4374178?v=3","loggedByName":"ChristianKohler","milestone":"","number":2606,"state":"closed","title":"ES6 should be valid TypeScript","updatedAt":1429320279000},{"assignedTo":"CyrusNajmabadi","body":"Hi,\r\n\r\nThis crash possibly followed hitting Control+S twice in quick succession.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1106823/7159745/40d2fbe6-e37c-11e4-9ef8-ead089ad310c.png)\r\n\r\n```\r\nLog Name:      Application\r\nSource:        Appli","comments":9,"createdAt":1429105168000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5","number":2776,"state":"closed","title":"Visual Studio 2015 Crash on possible repeat save","updatedAt":1429316370000},{"assignedTo":"zhengbli","body":"The section \r\nIE11 ECMAScript Extensions\r\n(https://github.com/Microsoft/TypeScript/blob/master/bin/lib.dom.d.ts#L636)\r\ncontains eg.\r\n```\r\ndeclare var Map: {\r\n    new <K, V>(): Map<K, V>;\r\n    prototype: Map<any, any>;\r\n}\r\n```\r\n\r\nBut the spec says tha","comments":1,"createdAt":1428346070000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/47395?v=3","loggedByName":"alexeagle","milestone":"TypeScript 1.5","number":2636,"state":"closed","title":"lib.dom.d.ts includes bad IE11 defn's","updatedAt":1429316258000},{"assignedTo":"zhengbli","body":"The various MS* interfaces and vars don't exist except in IE, and their extra properties are added to the standard properties. Eg: HTMLElement.style is of type MSStyleCSSProperties instead of CSSStyleDeclaration, which allows `element.style.pixelWidt","comments":9,"createdAt":1428618071000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.5","number":2698,"state":"closed","title":"Remove IE-only types from lib.d.ts","updatedAt":1429316237000},{"assignedTo":"DanielRosenwasser","body":"Currently we allow the use of reserved word in object binding pattern:\r\n```ts\r\nvar {while} = {while:1}\r\n```\r\nThis is incorrect since while is a reserved word.","comments":0,"createdAt":1428781750000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.5","number":2722,"state":"closed","title":"Disallow reserved word in object binding pattern","updatedAt":1429316135000},{"assignedTo":"","body":"Fixes #2722.","comments":2,"createdAt":1429227764000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2809,"state":"closed","title":"Disallow reserved words for object binding pattern names","updatedAt":1429315610000},{"assignedTo":"","body":"This is mainly a rough idea for #296, #2673\r\n\r\nThe TypeScript service api could expose XML parsing utilities and checking needed by an external service (TAGS: tagged template service) to compile() and check().\r\n\r\nUse case:\r\n```javascript\r\nlet button ","comments":1,"createdAt":1429017193000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":2759,"state":"closed","title":"Allow tagged templates to refer to a 'service api' for XML templates","updatedAt":1429314846000},{"assignedTo":"zhengbli","body":"MouseEvent constructor is defined incorrectly in lib.d.ts. The constructor should take two parameters: a string for event type and a parameters object.","comments":4,"createdAt":1410674894000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/641427?v=3","loggedByName":"mryanmurphy","milestone":"TypeScript 1.5","number":674,"state":"closed","title":"MouseEvent constructor is missing parameters","updatedAt":1429313231000},{"assignedTo":"zhengbli","body":"`IDBKeyRange` is defined as follows.\r\n\r\nhttps://github.com/Microsoft/TypeScript/blob/master/bin/lib.d.ts#L11630\r\n\r\n```typescript\r\ninterface IDBKeyRange {\r\n    upper: any;\r\n    upperOpen: boolean;\r\n    lower: any;\r\n    lowerOpen: boolean;\r\n}\r\ndeclare ","comments":20,"createdAt":1415270056000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3143368?v=3","loggedByName":"falsandtru","milestone":"TypeScript 1.5","number":1075,"state":"closed","title":"IDBKeyRange definition is degraded","updatedAt":1429313220000},{"assignedTo":"zhengbli","body":"Issue from the old tracker:\r\nhttps://typescript.codeplex.com/workitem/45\r\n\r\nEventTarget.addEventListener accepts a function or an object implementing EventListener:\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/EventListener\r\n\r\n","comments":1,"createdAt":1416509589000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"TypeScript 1.5","number":1224,"state":"closed","title":"EventListener interface does not accept objects with a handleEvent method","updatedAt":1429313165000},{"assignedTo":"zhengbli","body":"requires interfaces for TouchEvent, TouchList, and Touch as outlined in the W3C spec: http://www.w3.org/TR/touch-events/","comments":0,"createdAt":1417222580000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1044413?v=3","loggedByName":"kevinb7","milestone":"TypeScript 1.5","number":1302,"state":"closed","title":"add declarations for HTML Touch events to lib.d.ts","updatedAt":1429313148000},{"assignedTo":"zhengbli","body":"For example:\r\n\r\n    var svgs = document.getElementsByTagName('svg');\r\n\r\nThe expected type of ```svgs``` is ```NodeListOf<SVGSVGElement>```, but it is normal ```NodeList``` actually.","comments":0,"createdAt":1420721695000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/95908?v=3","loggedByName":"jsakamoto","milestone":"TypeScript 1.5","number":1618,"state":"closed","title":"\"getElementsByTagName('svg')\" does not returns NodeList of SVGSVGElement, but generic NodeList.","updatedAt":1429313136000},{"assignedTo":"zhengbli","body":"All HTML elements in lib.d.ts are lower case except for SOURCE which is upper case. Is there a reason for this. At a more general level these interfaces appear to be case insensitive -- the language needs a way of saying that.","comments":1,"createdAt":1422550391000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5490484?v=3","loggedByName":"BobFrGit","milestone":"TypeScript 1.5","number":1850,"state":"closed","title":"\"SOURCE\"","updatedAt":1429313122000},{"assignedTo":"zhengbli","body":"The `DOMStringMap` interface is defined as follows:\r\n\r\nhttps://github.com/Microsoft/TypeScript/blob/master/src/lib/dom.generated.d.ts#L10556\r\n```typescript\r\ninterface DOMStringMap {\r\n}\r\ndeclare var DOMStringMap: {\r\n    prototype: DOMStringMap;\r\n    n","comments":2,"createdAt":1422555579000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"TypeScript 1.5","number":1852,"state":"closed","title":"DOMStringMap is defined as an empty interface - this makes it awkward to use","updatedAt":1429313105000},{"assignedTo":"","body":"The following snippet is valid ES6, but does not compile due to the undeclared property `thing`. Since TypeScript is aiming to be a superset of ES6, how will this situation be approached?\r\n\r\n```typescript\r\nclass Thing {\r\n\tconstructor() {\r\n\t\tthis.thin","comments":10,"createdAt":1426603471000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"","number":2393,"state":"closed","title":"What (if any) is the plan for assigning to undeclared properties in ES6 classes","updatedAt":1429312887000},{"assignedTo":"zhengbli","body":"The WheelEvent constructor should be able to take in an initialized dictionary as described here\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent\r\n\r\nHowever, the lib.d.ts file does not have this constructor defined","comments":1,"createdAt":1426719174000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1448299?v=3","loggedByName":"bluong","milestone":"TypeScript 1.5","number":2416,"state":"closed","title":"WheelEvent constructor in lib.d.ts","updatedAt":1429312773000},{"assignedTo":"zhengbli","body":"Hello.\r\n\r\nI stumbled across some problems with missing properties when implementing webGL camera movement.\r\n\r\nThose listed below are not declared in lib.d.ts file:\r\n- document.pointerLockElement\r\n- MouseEvent.movementX\r\n- MouseEvent.movementY\r\n\r\nCan ","comments":2,"createdAt":1426840586000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6197420?v=3","loggedByName":"JJura","milestone":"TypeScript 1.5","number":2437,"state":"closed","title":"Missing properties: document.pointerLockElement and MouseEvent.movement","updatedAt":1429312713000},{"assignedTo":"","body":"I am not sure if I am supposed to run `jake LKG`, but I did it anyway, so I can immediately use this `tsc` in my project.\r\n\r\nThere are 4 new test cases to cover this scenario; some other test cases are just updated to have `target: ES5`, as I believe","comments":10,"createdAt":1429029948000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-required","name":"cla-required","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/358585?v=3","loggedByName":"truongsinh","milestone":"","number":2760,"state":"closed","title":"`exports.default` in ES5 vs `exports[\"default\"]` in ES3","updatedAt":1429311832000},{"assignedTo":"JsonFreeman","body":"    var x: StringTree;\r\n\r\n    type StringTree = string | StringTreeArray;\r\n    interface StringTreeArray extends Array<StringTree> {}\r\n\r\nThis code gets a \"Type alias 'StringTree' circularly references itself.\" error. I believe it should be allowed pe","comments":3,"createdAt":1423109285000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1071296?v=3","loggedByName":"jeffreymorlan","milestone":"TypeScript 1.5","number":1936,"state":"closed","title":"Recursive data structure type alias \"circularly references itself\" only if used before declaration","updatedAt":1429306393000},{"assignedTo":"","body":"The spec section 3.9 does not say that interface / class types depend on their base types. And they shouldn't. However, the compiler eagerly resolves the base types of classes and interfaces, so if a class / interface is referenced by a type alias, i","comments":2,"createdAt":1429234031000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2813,"state":"closed","title":"Lazy base types","updatedAt":1429306277000},{"assignedTo":"JsonFreeman","body":"I apologise in advance if this has been brought up somewhere else, I did do a quick search but couldn't really find it anywhere.  I have the following code:\r\n\r\n    public get message() { return this._message; }\r\n    public set message(value: CString ","comments":5,"createdAt":1429090471000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2872785?v=3","loggedByName":"Anupheaus","milestone":"","number":2775,"state":"closed","title":"Issue with unions and instanceof requiring left hand side to be type of any","updatedAt":1429305000000},{"assignedTo":"","body":"Sometimes a class/function has a few supporting small types, like the example below.\r\nIn foo.ts:\r\n```typescript\r\ninterface IOptions {...}\r\ninterface IResult {...}\r\nfunction foo(options: IOptions): IResult {...}\r\nexport = foo;\r\n```\r\nThen in another fi","comments":3,"createdAt":1429298199000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8441956?v=3","loggedByName":"cnshenj","milestone":"","number":2819,"state":"open","title":"Add \"import *\" like Python","updatedAt":1429304920000},{"assignedTo":"","body":"I've tried 1.5-alpha on webstorm10. \r\nThe error TS2420 (Error:(12, 14) TS2420: Class 'Guest' incorrectly implements interface 'IPerson'.\r\n  Property 'gender' is missing in type 'Guest'.) I just got the error message '[object Object]' in the console. ","comments":2,"createdAt":1429287260000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3241476?v=3","loggedByName":"zanettin","milestone":"","number":2817,"state":"closed","title":"Typescript 1.5-alpha - TS2420 on Webstrom 10","updatedAt":1429304882000},{"assignedTo":"","body":"This helps when wanting to scan/parse out only a portion of a string (without needing to allocate a substring).  This is useful for JSDoc parsing, where there may be many comments to parse, and we don't want to cause unnecessary allocations if we can","comments":1,"createdAt":1429298882000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2820,"state":"closed","title":"Support passing a start/length when creating a scanner.","updatedAt":1429304181000},{"assignedTo":"","body":"Make StringLiterals and HeritageClauses into TypeNodes. It makes the checker much simpler and nicer.","comments":2,"createdAt":1429250141000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2815,"state":"closed","title":"Make StringLiterals and HeritageClauses into TypeNodes. ","updatedAt":1429298670000},{"assignedTo":"","body":"In Array, map is defined as:\r\n\r\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[]\r\n\r\nIn JSON, parse is defined as:\r\n\r\n    parse(text: string, reviver?: (key: any, value: any) => any): any\r\n\r\nThe following results ","comments":1,"createdAt":1428960496000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/820092?v=3","loggedByName":"JacobDanton","milestone":"","number":2751,"state":"closed","title":"Better handling of optional parameters mismatch","updatedAt":1429292763000},{"assignedTo":"mhegazy","body":"Given this code:\r\n\r\n```ts\r\n// foo.ts\r\nimport './bar';\r\nimport baz from './baz';\r\nbaz;\r\n\r\n// bar.ts\r\nexport default function bar() {}\r\n\r\n// baz.ts\r\nexport default function baz() {}\r\n```\r\n\r\nRepro: `tsc -m amd foo.ts`\r\n\r\nExpected output:\r\n\r\n```js\r\ndefin","comments":0,"createdAt":1429212789000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"TypeScript 1.5","number":2801,"state":"closed","title":"`import <ModuleSpecifier>` generates invalid AMD factory function","updatedAt":1429291951000},{"assignedTo":"mhegazy","body":"This compiles and the output is correct.\r\n\r\n```typescript\r\nclass One {\r\n    foo(): One {\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default One;\r\n```\r\n\r\n```javascript\r\nvar One = (function () {\r\n    function One() {\r\n    }\r\n    One.prototype.foo = func","comments":2,"createdAt":1427568190000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.5","number":2538,"state":"closed","title":"`export default class` throws reference error when the class name is referenced inside the declaration","updatedAt":1429291935000},{"assignedTo":"","body":"#2538: Missed check for ambient module declaration in resolving default class name\r\n#2801: Clean up the module preamble writing code to ensure modules with no aliases still result in valid JS","comments":1,"createdAt":1429222028000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2805,"state":"closed","title":"Fix #2538 and #2801","updatedAt":1429291898000},{"assignedTo":"","body":"Given\r\n\r\n```TypeScript\r\nclass C { \r\n    x: string\r\n}\r\n\r\nvar v: C[] = [\r\n        { x: \"str\" },\r\n        { x: \"str\" },\r\n        { x: \"str\" },\r\n        { x: 6 }\r\n    ];\r\n```\r\nCompiling it produces:\r\n\r\n```\r\ntest.ts(6,5): error TS2322: Type '({ x: string;","comments":1,"createdAt":1428955877000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6385855?v=3","loggedByName":"danmosemsft","milestone":"","number":2746,"state":"open","title":"Line number for error in array entry not helpful","updatedAt":1429291837000},{"assignedTo":"","body":"The error is reported in case when the indexer is a union type of string|number:\r\n\r\nvar a:number|string\r\nvar b:any\r\nvar c = b[a]; <- TS2342\r\n","comments":1,"createdAt":1429268970000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6221849?v=3","loggedByName":"mrgleba","milestone":"","number":2816,"state":"closed","title":"False positive TS2342 Expression indexer must be of type 'string' 'number' or 'any'","updatedAt":1429290625000},{"assignedTo":"","body":"This is my sub-case of https://typescript.codeplex.com/workitem/1312.\r\n\r\nConsider trivial export of function:\r\n\r\n```ts\r\nmodule foo {\r\n    function bar() {}\r\n    export var pub = bar;\r\n}\r\n```\r\n\r\nCompiler will complain about exporting private type `bar","comments":12,"createdAt":1406972171000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/96032?v=3","loggedByName":"mwisnicki","milestone":"","number":341,"state":"closed","title":"Export function with public signature not allowed","updatedAt":1429273038000},{"assignedTo":"","body":"The following code:\r\n~~~~~~~~~~~~~~\r\nclass GameObjectGroup extends GameObject {\r\n    objects: GameObject[];\r\n\r\n    constructor(...objects: GameObject[]) {\r\n        super();\r\n        this.objects = objects;\r\n    }\r\n}\r\nclass Scene extends GameObjectGro","comments":3,"createdAt":1429181762000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1472963?v=3","loggedByName":"J-F-Liu","milestone":"","number":2793,"state":"closed","title":"Pass array as rest parameters by destructuring ","updatedAt":1429249575000},{"assignedTo":"","body":"","comments":14,"createdAt":1427439588000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2522,"state":"closed","title":"Use a function declaration vs a function expression to help deal with a reported Atom+IO.js issue.","updatedAt":1429247072000},{"assignedTo":"","body":"Conformance test for update in section 4.19- Contextually Typed Expression (PR #1878)","comments":0,"createdAt":1429140735000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2782,"state":"closed","title":"Conformance for spec update section 4.19 contextually typed exp","updatedAt":1429239708000},{"assignedTo":"","body":"Hi,\r\nI'm working on node.js with npm. I've written a TS library and I want to use it in another project by doing npm install.\r\nI'm not sure what will should be the contents in my npm package:\r\nshould it be only .js, only .ts, or .js with additional d","comments":12,"createdAt":1425818876000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1544215?v=3","loggedByName":"omer727","milestone":"","number":2262,"state":"closed","title":"Importing Typescript class from another npm library","updatedAt":1429232285000},{"assignedTo":"","body":"`tsconfig.json` is a great new feature, but older versions of `tsc` do not support it. The documentation at https://github.com/Microsoft/TypeScript/wiki/tsconfig.json should indicate which versions of `tsc` supports `tsconfig.json`.","comments":1,"createdAt":1429230705000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7035?v=3","loggedByName":"dlee","milestone":"","number":2810,"state":"closed","title":"tsconfig.json wiki should indicate which version of tsc supports tsconfig.json","updatedAt":1429231225000},{"assignedTo":"","body":"Example: (TypeScript)\r\n```typescript\r\nvar a = `hello\\world`;\r\nvar b = `hello\\\\world`;\r\nvar c = `hello\\\\\\world`;\r\nvar d = `hello\\\\\\\\world`;\r\n```\r\nIs compiled to: (JavaScript)\r\n```javascript\r\nvar a = \"helloworld\";\r\nvar b = \"hello\\world\";\r\nvar c = \"hell","comments":3,"createdAt":1429218482000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/160419?v=3","loggedByName":"jthg","milestone":"TypeScript 1.5","number":2803,"state":"closed","title":"Backslash escaping in template strings are handled incorrectly?","updatedAt":1429226027000},{"assignedTo":"","body":"Adds appropriate tests for #2803.","comments":1,"createdAt":1429225007000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2807,"state":"closed","title":"Backslash escape tests for template strings","updatedAt":1429225957000},{"assignedTo":"","body":"Because of the subtle nuances of capturing/renaming arguments, we're not sure if we want to continue on #2764.\r\n\r\nInstead, we will just error in ES3 and ES5 modes.\r\n\r\nResolves #2430.","comments":1,"createdAt":1429215453000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2802,"state":"closed","title":"Only error in ES3 and ES5 when using 'arguments' in an arrow function","updatedAt":1429217657000},{"assignedTo":"","body":"","comments":3,"createdAt":1428701700000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2717,"state":"closed","title":"Filter out any 'getOccurrences' results that don't match the file provided.","updatedAt":1429216642000},{"assignedTo":"rbuckton","body":"Closely related to #2457 and also in reference to https://github.com/Microsoft/TypeScript/commit/bd4d7fc9eedfb905313b173e284eddf95350e7dc#commitcomment-10328068\r\n\r\nA class merging with a module will not work in ES6, because you will end up redeclarin","comments":9,"createdAt":1427010860000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2458,"state":"closed","title":"ES6 clodules need to be renamed","updatedAt":1429210738000},{"assignedTo":"","body":"Fixes #2458.\r\n\r\nIn ES6 it is illegal to redeclare a lexically bound name (such as the name of a `let`, `const`, or `class` declaration). When we merge internal modules with classes, we emit the following for `--target ES6`:\r\n\r\n```ts\r\n// a.ts\r\nclass C","comments":1,"createdAt":1428959118000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2750,"state":"closed","title":"Elide var when emitting a module merged with an ES6 class","updatedAt":1429210404000},{"assignedTo":"","body":"I'm trying to do method overloads and it's working great except for the call to `var result = this.createLog2(source, message, level);` is causing a compile time error:\r\n\r\n```\r\n2346 Supplied parameters do not match any signature of call target.\r\n```\r","comments":7,"createdAt":1429199276000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1020579?v=3","loggedByName":"niemyjski","milestone":"","number":2796,"state":"closed","title":"compiler issue with calling method overloads","updatedAt":1429208156000},{"assignedTo":"","body":"Consider `a.d.ts` (which compiles fine in isolation) without any error:\r\n\r\n```ts\r\ndeclare module \"foo\" {\r\n    interface Foo {\r\n        a: number;\r\n    }\r\n    var _:Foo;\r\n    export = _;\r\n}\r\n```\r\n\r\nAnd `b.d.ts` that plans to add stuff to module `foo`'","comments":3,"createdAt":1429142215000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2784,"state":"closed","title":"Reopening external modules broken in TS 1.5-alpha","updatedAt":1429208033000},{"assignedTo":"paulvanbrenk","body":"With CTP6 we're not getting completion results committed via period, parens, etc. Not sure when/how this regressed.","comments":3,"createdAt":1427228293000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.5","number":2482,"state":"closed","title":"Commit completions on punctuation not working","updatedAt":1429207315000},{"assignedTo":"","body":"Reading compressed source code is not my thing. I like to see white space! Please consider adding this to FormatCodeOptions. ","comments":2,"createdAt":1429197059000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/918658?v=3","loggedByName":"ToddThomson","milestone":"","number":2795,"state":"open","title":"Add FormatCodeOptions: InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets","updatedAt":1429206956000},{"assignedTo":"ahejlsberg","body":"In the first sentence, we say \r\n\r\n>Type checking of an expression is improved in several contexts by factoring in the type of the destination of the value computed by the expression. \r\n\r\nHowever, up until this point, we don't define what we mean by \"","comments":1,"createdAt":1429138208000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2780,"state":"open","title":"Spec Wording Suggestion in 4.19 Contextual Typed Expression ","updatedAt":1429204141000},{"assignedTo":"","body":"[Enumerator](https://msdn.microsoft.com/en-us/library/ie/6ch9zb09(v=vs.94).aspx) allows iterating over ActiveX collections, enabling functionality for these collections like VB.NET/VBScript `For Each .. In ..`, C#'s [`foreach`](https://msdn.microsoft","comments":1,"createdAt":1428925730000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/312166?v=3","loggedByName":"zspitz","milestone":"TypeScript 1.5","number":2740,"state":"closed","title":"Add Enumerator and VBArray declarations+jsDoc to lib.d.ts","updatedAt":1429204101000},{"assignedTo":"","body":"Addresses #2740 ","comments":7,"createdAt":1428931663000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-already-signed","name":"cla-already-signed","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/312166?v=3","loggedByName":"zspitz","milestone":"","number":2741,"state":"closed","title":"Declarations+jsDoc for Enumerator, VBArray","updatedAt":1429204070000},{"assignedTo":"","body":"In VS2013 Update 2 I had a class that was exported directly as \r\n```javascript\r\nexport class ComponentRegistration\r\n{\r\n public myMethod()\r\n {\r\n  ...\r\n }\r\n}\r\n```\r\n\r\nThis was compiled as an AMD module via the project setting.\r\n\r\nHowever, I downloaded t","comments":8,"createdAt":1409897550000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/578882?v=3","loggedByName":"sumitkm","milestone":"","number":608,"state":"closed","title":"Typescript compiler throws 'Cannot compile external modules unless the '--module' flag is provided.'","updatedAt":1429180706000},{"assignedTo":"","body":"I have a class: \r\n```\r\nclass OtherTest{\r\n}\r\n```\r\nI want to find the location inside the braces `{ /*here*/ }`. I have access to the `ClassDeclaration` node, how can I get the between the brace point. \r\n\r\n\r\nSample ASTs: \r\n\r\nFor the given example:\r\n![i","comments":8,"createdAt":1429151813000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2788,"state":"closed","title":"Question: ClassDeclaration how to locate after brace from the AST","updatedAt":1429174134000},{"assignedTo":"","body":"https://github.com/Microsoft/TypeScript/blob/05480e38bd78e4bd87dc573bb4b8fa4ef28d0c43/bin/typescript.d.ts#L39 vs. https://github.com/Microsoft/TypeScript/blob/05480e38bd78e4bd87dc573bb4b8fa4ef28d0c43/bin/typescript.d.ts#L265\r\n\r\nIs there any differenc","comments":2,"createdAt":1429165521000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2791,"state":"closed","title":"Question: OpenBraceToken vs. FirstPunctuation","updatedAt":1429173718000},{"assignedTo":"","body":"I wrote a typescript file like this:\r\n```typescript\r\n// source to typescript\r\nvar Test = {};\r\nexport = Test;\r\n\r\n/**\r\nsome infomation about this module\r\n*/\r\n```\r\n\r\nwhen i run commond `tsc --module commonjs test.ts`, the javascript file was\r\n\r\n```javas","comments":1,"createdAt":1429161221000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1575657?v=3","loggedByName":"wxqqh","milestone":"","number":2789,"state":"closed","title":"There was something wrong about compile a typescript file with code comments at the end","updatedAt":1429163985000},{"assignedTo":"JsonFreeman","body":"The following code gives an error, but according to section 12.14.5.3 of the ES6 spec, it should be allowed:\r\n```ts\r\nvar a, b;\r\n[...[a, b]] = [0, 1];\r\n[...{ 0: a, 1: b }] = [0, 1];\r\n```","comments":1,"createdAt":1424990555000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2156,"state":"closed","title":"Rest element in array destructuring assignment should allow an array/object pattern","updatedAt":1429158457000},{"assignedTo":"JsonFreeman","body":"\r\n```ts\r\nvar a = [1, 2, 3], first, last;\r\n[first, ...[a[2], last]] = a;\r\n\r\n\r\nfirst === 1 && last === 3 && (a + \"\") === \"1,2,2\"\r\n```\r\n\r\nemits:\r\n```js\r\nvar a = [1, 2, 3], first, last;\r\nfirst = a[0], [a[2], last] = a.slice(1);\r\n\r\nfirst === 1 && last ===","comments":0,"createdAt":1427928234000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":2587,"state":"closed","title":"Nested spread in destructuring is not handled correctly","updatedAt":1429158421000},{"assignedTo":"JsonFreeman","body":"The following is not allowed by the ES6 grammar:\r\n```ts\r\nfunction foo(...[a]) { }\r\nvar [...[b, c]] = [0, 1, 2];\r\n```\r\n\r\nThe relevant grammar production is:\r\n```\r\nBindingRestElement[Yield, GeneratorParameter] :\r\n    [+GeneratorParameter] ... BindingId","comments":1,"createdAt":1427407080000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2519,"state":"closed","title":"Missing error for a destructuring pattern inside a rest binding element / rest parameter","updatedAt":1429158397000},{"assignedTo":"","body":"","comments":1,"createdAt":1429144905000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2787,"state":"closed","title":"Don't run typewriter tests on the APISamples.  It's too noisy.","updatedAt":1429147092000},{"assignedTo":"","body":"This change contains fixes for several destructuring related issues, including:\r\n#2587, #2156, #2519, and the crash mentioned in https://github.com/Microsoft/TypeScript/issues/2519#issuecomment-92144400","comments":1,"createdAt":1428971757000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2754,"state":"closed","title":"Destructuring fixes","updatedAt":1429147059000},{"assignedTo":"","body":"","comments":1,"createdAt":1429141514000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2783,"state":"closed","title":"Split symbol baselines from type baselines.","updatedAt":1429144441000},{"assignedTo":"","body":"Our current \"nested function\" style of coding comes with a cost.  Specifically, calling the outer functions causes a large amount of engine cost to intialize all the inner functions contained within.  This is problematic for certain functions (like p","comments":7,"createdAt":1428872887000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2734,"state":"closed","title":"Use a single scanner for all parsing tasks.","updatedAt":1429141609000},{"assignedTo":"JsonFreeman","body":"Trying to convert function overloads to union type, I'm getting errors.\r\nHere is a very simple code that shows the error:\r\n```ts\r\nclass Animal { run() {} }\r\nclass Cat extends Animal {}\r\nclass Dog extends Animal {}\r\n\r\nfunction run(a: Animal) {\r\n\ta.run","comments":2,"createdAt":1427911661000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8625526?v=3","loggedByName":"stephanedr","milestone":"TypeScript 1.5","number":2576,"state":"closed","title":"Issue using union type with generic","updatedAt":1429138813000},{"assignedTo":"","body":"Fixes #2576.\r\n\r\nRight now, there are only three ways that a type parameter S can be assignable to a type T:\r\n* T is a type parameter and S is directly or indirectly constrained to T\r\n* T is an object type, and the base constraint of S is an object ty","comments":1,"createdAt":1429130158000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2778,"state":"closed","title":"Change assignability to account for type parameters extending unions","updatedAt":1429138377000},{"assignedTo":"","body":"Example:\r\n``` typescript\r\nclass Class1 {\r\n\tprivate privateMember;\r\n}\r\n\r\nclass Class2 implements Class1 {\r\n}\r\n```\r\nThe compiler says:\r\n`Property 'privateMember' is missing in type 'Class2'`\r\n\r\nBut obviusly a private member never will be part of an int","comments":8,"createdAt":1428510787000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4521712?v=3","loggedByName":"SergioMorchon","milestone":"","number":2672,"state":"closed","title":"Class implementing class should ignore non-public members","updatedAt":1429122636000},{"assignedTo":"","body":"A cast appears to work with the expression, ev.target.\r\n```ts\r\n         if(ev.target instanceof Node) {\r\n             var n : Node = <Node>ev.target;\r\n             n.appendChild(document.getElementById(data));\r\n         }\r\n```\r\nA typeguard appears to","comments":2,"createdAt":1425328823000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11279006?v=3","loggedByName":"TimKelly2","milestone":"","number":2184,"state":"open","title":"Does typeguard work with expressions, i.e. ev.target?","updatedAt":1429104879000},{"assignedTo":"paulvanbrenk","body":"Hi, \r\n\r\nWe use Visual Studio 2013 Premium Update 4 and develop applications in TypeScript 1.4. We have a very serious issue, when we start debugging the code, entering into another method in another class would freeze the whole Visual Studio. It is t","comments":21,"createdAt":1423563795000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10939266?v=3","loggedByName":"Santoshnilla","milestone":"TypeScript 1.5","number":1999,"state":"closed","title":"Visual studio 2013 freezes when debugging TypeScript","updatedAt":1429095428000},{"assignedTo":"","body":"As a typescript developer, I am building libraries for my client enterprise at work. The libraries has a lot of interfaces, types, clases, enums, variables... that are not intended to be public on the final comiled file, but I'm forced to export them","comments":2,"createdAt":1429085503000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4521712?v=3","loggedByName":"SergioMorchon","milestone":"","number":2774,"state":"closed","title":"`internal` modifier suggestion","updatedAt":1429089170000},{"assignedTo":"mhegazy","body":"To give users of my LS API client/server the same commandline interface they are used to from tsc, I have been using `parseCommandLine`, but quite recently, and sadly affecting `v1.5.0-alpha`, this has been marked `@internal` and is no longer availab","comments":15,"createdAt":1428184538000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/837040?v=3","loggedByName":"clausreinke","milestone":"TypeScript 1.5","number":2620,"state":"closed","title":"v1.5.0-alpha hides parseCommandLine","updatedAt":1429078842000},{"assignedTo":"","body":"This is the other part to fix #2620. expose getDefaultFileName and textSpan helpers.\r\n\r\nCheck bin\\typescript.d.ts to see the changes to the public API","comments":1,"createdAt":1428867348000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2730,"state":"closed","title":"Expose helpers","updatedAt":1429078825000},{"assignedTo":"","body":"If my class consists of\r\n\r\n    class X {\r\n      foo() {\r\n      }\r\n      bar() {\r\n         setTimeout(function() {\r\n            this.foo();\r\n         }, 10)\r\n      }\r\n    }\r\n\r\nI really should get some sort of warning that \"this\" doesn't mean what I th","comments":2,"createdAt":1429067572000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5364225?v=3","loggedByName":"wizofaus","milestone":"","number":2770,"state":"closed","title":"No warning when you use 'this' inside a function","updatedAt":1429075833000},{"assignedTo":"","body":"With this option the developer will have the option to select one of three options:\r\n\r\n- spaces4: Four spaces (default)\r\n- spaces2: Two spaces\r\n- tabs: Tabs.\r\n\r\nThis will work with the format in the tsserver, and in the compiler. This also solves iss","comments":7,"createdAt":1429062483000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3979433?v=3","loggedByName":"lucasmciruzzi","milestone":"","number":2768,"state":"closed","title":"Add --indentStyle in the compile options","updatedAt":1429074552000},{"assignedTo":"","body":"Java just started to support lambdas in its language, with this new feature, they brought into play some syntax sugar coating to make code more concise. I thought it look pretty neat and wanted to know if that could be an enhancement of the language.","comments":4,"createdAt":1429064404000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6740474?v=3","loggedByName":"Kavignon","milestone":"","number":2769,"state":"open","title":"Method reference : Enhancement or new feature","updatedAt":1429071806000},{"assignedTo":"","body":"The formatter described in the link below currently doesn't seem to offer a way to indent by using tabs. \r\nhttps://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#pretty-printer-using-the-ls-formatter\r\n\r\nCould that be added?\r\nThanks!","comments":10,"createdAt":1426111504000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/885304?v=3","loggedByName":"hachre","milestone":"","number":2306,"state":"open","title":"Support for tabs in language service formatter.","updatedAt":1429071551000},{"assignedTo":"","body":"","comments":1,"createdAt":1429056131000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2766,"state":"closed","title":"Add test to make sure that we don't use \"as\" as keyword","updatedAt":1429064788000},{"assignedTo":"ahejlsberg","body":"Spec 3.4 says:\r\n> â¢\tA | B is equivalent to A if B is a subtype of A.\r\n>...\r\n> Union types are reduced to the smallest possible set of constituent types using these rules.\r\n\r\nThis doesn't work in TS 1.4 for union type literals. For example:\r\n```TypeSc","comments":0,"createdAt":1428097065000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/936705?v=3","loggedByName":"osdm","milestone":"TypeScript 1.5","number":2610,"state":"closed","title":"Union types are NOT reduced to the smallest possible set","updatedAt":1429058734000},{"assignedTo":"","body":"","comments":1,"createdAt":1429052735000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2765,"state":"closed","title":"Move asKeyword into correct section","updatedAt":1429053616000},{"assignedTo":"","body":"Union types are now consistently reduced to the smallest possible set before members (properties or signatures) are accessed.\r\n\r\nFixes #2610.","comments":9,"createdAt":1428862514000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":2729,"state":"closed","title":"Consistently reduce union types","updatedAt":1429050289000},{"assignedTo":"","body":"","comments":2,"createdAt":1428354650000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2641,"state":"closed","title":"Give signature help for arbitrary functions called in .js files (even off of <dot>).","updatedAt":1429048835000},{"assignedTo":"","body":"Personally, I like the look (and simplicity) of ECMA6 / TypeScript without semi-colons. The only problem is that there are some known danger-zones with automatic semi-colon insertion. Could we have compiler warnings to prevent these from slipping thr","comments":20,"createdAt":1427901527000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/755988?v=3","loggedByName":"jeffmay","milestone":"","number":2575,"state":"open","title":"Compiler warnings / errors for common automatic semi-colon insertion (ASI) issues","updatedAt":1429033696000},{"assignedTo":"","body":"Fixes #2217","comments":3,"createdAt":1426723099000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2418,"state":"closed","title":"Expose emitFiles","updatedAt":1429032855000},{"assignedTo":"mhegazy","body":"If you want to make modifications to a tree and emit that, you are required to write your own emitter as emitFiles is not exposed in the public .d.ts file. tools like: https://github.com/sitepen/dts-generator would not be able to leverage the compile","comments":2,"createdAt":1425603852000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":2217,"state":"closed","title":"Expose emitFiles in the public .d.ts","updatedAt":1429032850000},{"assignedTo":"","body":"","comments":0,"createdAt":1428956587000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2747,"state":"closed","title":"Fix getOccurances filter check","updatedAt":1429032783000},{"assignedTo":"","body":"It would be useful when a module can implement an interface using the `implements` keyword. Syntax: `module MyModule implements MyInterface { ... }`.\r\n\r\nExample:\r\n```typescript\r\ninterface Showable {\r\n    show(): void;\r\n}\r\nfunction addShowable(showabl","comments":7,"createdAt":1407667611000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"Community","number":420,"state":"open","title":"Allow a module to implement an interface","updatedAt":1429031916000},{"assignedTo":"mhegazy","body":"```ts\r\nvar array = [1,2,4]\r\nfunction a4(x,y,z) {}\r\na4(...<crash>\r\n```\r\n![get_signature_help_after_dotdotdotdot](https://cloud.githubusercontent.com/assets/489742/7103765/70a0c0be-e06c-11e4-9f8a-f9f0f0a48732.PNG)\r\n\r\nIf the function a4 is not defined. ","comments":0,"createdAt":1428796934000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.5","number":2724,"state":"closed","title":"Crash when type \"...\"spread operator in function call","updatedAt":1429031903000},{"assignedTo":"mhegazy","body":"Type ... causes visual studio throws  an error.\r\n![get_completion_at_position_after_dotdotdotdot](https://cloud.githubusercontent.com/assets/489742/7103786/53d135bc-e06d-11e4-9723-7871daccc8ec.PNG)\r\n","comments":1,"createdAt":1428797296000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.5","number":2725,"state":"closed","title":"Crash when type \"...\" in empty file","updatedAt":1429031897000},{"assignedTo":"","body":"Fixes #2725 and #2724","comments":2,"createdAt":1428979398000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2756,"state":"closed","title":"Completion fixes","updatedAt":1429031885000},{"assignedTo":"","body":"### Motivation\r\n\r\nIt's sometimes very useful to be able to define callbacks that guarantee an error. For example; transforming errors in [when.js][] promises to hide implementation details:\r\n\r\n```ts\r\nfunction stuff(): when.Promise<Item> {\r\n    return","comments":6,"createdAt":1420594799000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/81079?v=3","loggedByName":"Nemo157","milestone":"","number":1613,"state":"open","title":"Restrictive type on callbacks that are guaranteed to error","updatedAt":1429009466000},{"assignedTo":"","body":"Moving this over from CodePlex (14 votes, assigned to jonturner, http://typescript.codeplex.com/workitem/2459):\r\n\r\nI recently converted my Windows Store app to a Universal App with a Windows Phone and a Shared project. I moved all of my TS files to t","comments":9,"createdAt":1406735538000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6309423?v=3","loggedByName":"craigktreasure","milestone":"","number":313,"state":"open","title":"TypeScript support for Universal App Shared project","updatedAt":1428996480000},{"assignedTo":"","body":"Any plugin for Light weight editor. Like **Sublime text** ,**Atom** or something for linux user. ","comments":5,"createdAt":1426048410000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1610828?v=3","loggedByName":"vinaymavi","milestone":"","number":2293,"state":"closed","title":"Any plugin for Light weight editor.","updatedAt":1428978734000},{"assignedTo":"mhegazy","body":"Type following code in a typescript file:\r\n```ts\r\nvar [a,b,c]:\r\n```\r\nVS throw a script error.\r\n![get_semantic_destructuring](https://cloud.githubusercontent.com/assets/489742/7126378/906887ba-e1ed-11e4-8e49-0671262484c4.PNG)\r\n","comments":1,"createdAt":1428962384000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.5","number":2752,"state":"closed","title":"Crash from getSemanticDiagnostics in type annotation in array assignment destructuring","updatedAt":1428978710000},{"assignedTo":"","body":"The typewriter code had a lot of specialized checks added to it.  This was to keep the baselines non-noisy as we made changes to the typechecker.  However, this also meant that its code was getting more and more complex for no appreciable long term g","comments":1,"createdAt":1428953893000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2745,"state":"closed","title":"Simplify typewriter code.","updatedAt":1428967238000},{"assignedTo":"","body":"A test for #1888.\r\nI hope I'm doing right. Please give some feedback if not :)","comments":5,"createdAt":1428674663000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":2711,"state":"closed","title":"Formatting test for callback function chaining","updatedAt":1428965077000},{"assignedTo":"mhegazy","body":"I decided to collect sources from https://github.com/Microsoft/ngconfdemo into a solution:\r\nhttps://www.dropbox.com/s/zvuplcnttmn9dgd/TypeScriptHTMLApp1.zip?dl=0\r\n\r\nFetched the last TS sources from github, compiled, turned VS to DevMode using provide","comments":6,"createdAt":1426174313000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.5","number":2317,"state":"closed","title":"TS analysis throws exception on ngconf-2015demo solution","updatedAt":1428963867000},{"assignedTo":"","body":"Seems like there's a lot of juggling of canonicalizing filenames that [tends to cause bugs](https://github.com/Microsoft/TypeScript/pull/2747). We should just stick to one thing and examine whether editors can handle canonicalized filenames properly.","comments":0,"createdAt":1428956904000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2748,"state":"open","title":"Use consistent file name format in services API","updatedAt":1428957475000},{"assignedTo":"ahejlsberg","body":"Currently, our spec uses following grammar to describe rest parameter:\r\n\r\nâRestParameter:\r\nâââ...âIdentifierâTypeAnnotation <sub>opt<sub>\r\n\r\nHowever, the grammar should be \r\nâRestParameter:\r\nâââ...âIdentifier ```:``` TypeAnnotation <sub>opt<sub>\r\n","comments":2,"createdAt":1428870964000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.5","number":2732,"state":"closed","title":"Spec: Update grammar for rest parameter","updatedAt":1428954680000},{"assignedTo":"","body":"We falsely report a label having type `any`.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/972891/7058438/b348c478-de16-11e4-95d3-dfa08fdd97e9.png)\r\n","comments":5,"createdAt":1428540197000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":2677,"state":"closed","title":"Labels should not get type 'any' for their quick info ","updatedAt":1428953019000},{"assignedTo":"","body":"Hello, \r\n\r\nI did not know how to start to discover the arcane of the typescript compiler so I tried to fix this small issue as a \"challenge\".\r\nDon't hesitate to tell me if it could be fixed in a better way.","comments":3,"createdAt":1428870306000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7273466?v=3","loggedByName":"GuillaumeSalles","milestone":"","number":2731,"state":"closed","title":"Fix issue #2677 : Labels should not get quick info","updatedAt":1428952958000},{"assignedTo":"","body":"I'm using TypeScript quite heavily now, and loving the static/compile-time checking that I've always felt was sorely missing with JS-based development, but I'd love even more, especially for JQuery selectors.  E.g. if my .ts file is used by an .aspx ","comments":2,"createdAt":1428887509000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5364225?v=3","loggedByName":"wizofaus","milestone":"","number":2738,"state":"open","title":"Allow custom static analysis, esp. for Jquery selectors","updatedAt":1428951157000},{"assignedTo":"","body":"With the proliferation of IDEs for writing TypeScript it is becoming increasingly incongruous to raise VS issues on the TypeScript GitHub project.\r\n\r\nThe failure to release a VS update for the 1.5 alpha leaves VS users in a rather sorry state.\r\n\r\nI p","comments":21,"createdAt":1428419944000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":2656,"state":"open","title":"Please consider splitting Visual Studio into a separate GitHub project","updatedAt":1428945798000},{"assignedTo":"","body":"The IE team started to issue new specs in the format of XML files instead of webidl files for upcoming API changes. The new dom.generated.d.ts and webworker.d.ts are generated from the new XML specs to be consistent with IE Dom API changes.","comments":8,"createdAt":1428360126000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1171301?v=3","loggedByName":"zhengbli","milestone":"","number":2645,"state":"closed","title":"Updated dom related reference files according to new IE spec","updatedAt":1428887103000},{"assignedTo":"","body":"Please make it possible to inline the identity function because it enables a lot of useful things in TS.\r\n\r\n\r\n\r\nSo if a function is expression-based (has only a return statement) it should be trivial to inline, so please consider allowing such inlini","comments":12,"createdAt":1428776862000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":2721,"state":"closed","title":"Suggestion: Allow basic inlining.","updatedAt":1428864569000},{"assignedTo":"","body":"On the wiki page:\r\nhttps://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API\r\n\r\nThe documentation is for 1.5:\r\n`First you'll need to install TypeScript >=1.5 from npm.`\r\n\r\n### Definitions Raw File ###\r\nThe definitions file is pointing to th","comments":2,"createdAt":1428837451000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5929807?v=3","loggedByName":"markwylde","milestone":"","number":2728,"state":"closed","title":"Wiki Page 1.5: Definitions linking to 1.4","updatedAt":1428838033000},{"assignedTo":"","body":"With TS 1.5.0-alpha, this TypeScript compiles:\r\n\r\n```ts\r\nlet foo = 2;\r\n\r\nlet obj = {\r\n\tfoo,\r\n\t['bar']: 3\r\n};\r\n```\r\n\r\nBut emits this JS with an invalid assignment '_a.foo = ,' assignment:\r\n\r\n```js\r\nvar foo = 2;\r\nvar obj = (_a = {\r\n    foo: foo\r\n},\r\n  ","comments":2,"createdAt":1428751120000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2458?v=3","loggedByName":"robertknight","milestone":"TypeScript 1.5","number":2720,"state":"closed","title":"Invalid output for object literal with shorthand assignments and computed properties","updatedAt":1428782516000},{"assignedTo":"CyrusNajmabadi","body":"Even though we don't yet support generator functions and methods, we do parse them. However, we do not emit the asterisk token or yield expression on output, which means that if I'm using --target ES6 my input does not align with my output for someth","comments":0,"createdAt":1428628176000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"TypeScript 1.5","number":2703,"state":"closed","title":"Always emit asteriskToken and yield if parsed","updatedAt":1428778732000},{"assignedTo":"","body":"This is not the downlevel emit.  This simply emits the AST as-is for ES6 and above.  Fixes https://github.com/Microsoft/TypeScript/issues/2703","comments":3,"createdAt":1428645498000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2706,"state":"closed","title":"Emit generator functions and yield expressions in ES6.","updatedAt":1428745242000},{"assignedTo":"rbuckton","body":"tsc 1.5.0-alpha emits an unnecessary `__decorate` helper when importing files which use decorators.\r\n\r\n`decorated.ts`\r\n\r\n```js\r\nfunction decorate () { }\r\n\r\n@decorate\r\nexport default class Decorated { }\r\n```\r\n\r\n`un-decorated.ts`\r\n\r\n```js\r\nimport Decor","comments":0,"createdAt":1428594969000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1696784?v=3","loggedByName":"richardTowers","milestone":"TypeScript 1.5","number":2690,"state":"closed","title":"Importing files containing decorator invocations emits unnecessary __decorate helper","updatedAt":1428717421000},{"assignedTo":"","body":"Fixes #2690 ","comments":1,"createdAt":1428705527000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2718,"state":"closed","title":"Fix for __decorate emit on undecorated file following a decorated file","updatedAt":1428715432000},{"assignedTo":"","body":"Generated declaration files should at least be compilable with no errors (see issue #2268 for example).\r\n\r\nThe simplest pragmatic way is to run compiler on a dummy TS file and a corresponding file.d.ts. If it doesn't crash, it's a pass.","comments":3,"createdAt":1425898177000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"Community","number":2269,"state":"closed","title":"Tests for validity of all generated *.d.ts in bin","updatedAt":1428714653000},{"assignedTo":"","body":"Based on the API discussion yesterday, this removes the typescript_internal.d.ts and only uses the @internal comment to remove no public APIs.\r\n\r\nI have marked everything we did not talk about as internal for now. the only changes  I have made is exp","comments":1,"createdAt":1428614918000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2692,"state":"closed","title":"Api review cleanup","updatedAt":1428714593000},{"assignedTo":"","body":"This removes my previous change to add an optional type annotation on export default statements in ambient context (e.g. `export default : number;`) to represent a declaration of export default <expression> statements (e.g. `export default (1 + 2);`.","comments":1,"createdAt":1428623377000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2700,"state":"closed","title":"Remove optional type on export default","updatedAt":1428705092000},{"assignedTo":"","body":"Flow offer some nice type helpers in his recent versions, while some of them are already addressed by typescript, some could perhaps be helpful.\r\nHere are extracted comments from flow source just for inspiration.\r\n\r\n* $Either<...T> is the union of ty","comments":1,"createdAt":1428672829000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":2710,"state":"open","title":"Flow type helpers","updatedAt":1428699665000},{"assignedTo":"jonathandturner","body":"Looks like http://typescriptlang.org/handbook is falling behind the additions to the language. I've been reviewing the additions on https://github.com/Microsoft/TypeScript/wiki/Roadmap and nothing that's been added in 1.3 or later is included.\r\n\r\nThe","comments":3,"createdAt":1425946932000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/607223?v=3","loggedByName":"marcind","milestone":"TypeScript 1.5","number":2279,"state":"closed","title":"Handbook section on typescriptlang.org is out of date","updatedAt":1428697954000},{"assignedTo":"rbuckton","body":"Current, we do not parse binding patterns in an arrow function:\r\n\r\n```\r\nlet a = ([{ nested }]) => { }; // error TS1005: ';' expected.\r\n```","comments":1,"createdAt":1428540305000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"TypeScript 1.5","number":2678,"state":"closed","title":"Array and Object Binding Patterns are not supported in parenthesized arrow functions.","updatedAt":1428691546000},{"assignedTo":"","body":"Fixes #2678, adds some additional tests to the `isParenthesizedArrowFunctionExpressionWorker` lookahead to allow for array and object patterns in the first parameter of a parenthesized arrow function.","comments":2,"createdAt":1428541431000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2680,"state":"closed","title":"Add support for parsing binding patterns in arrow function parameters","updatedAt":1428691098000},{"assignedTo":"rbuckton","body":"Multiple computed properties with decorators fail using 1.5.0-alpha:\r\n```typescript\r\ndeclare function decorate();\r\nclass Foo {\r\n\t@decorate\r\n\t[\"name-1\"]() {}\r\n\t@decorate\r\n\t[\"name-2\"]() {}\r\n}\r\n```\r\nCompiles to\r\n```javascript\r\nvar Foo = (function () {\r\n","comments":1,"createdAt":1428173275000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"TypeScript 1.5","number":2619,"state":"closed","title":"Decorated computed properties in class fail","updatedAt":1428691028000},{"assignedTo":"mhegazy","body":"Additional constructor that takes in HTMLFormElement as parameter as here: \r\n\r\nhttps://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/FormData \r\n\r\ndeclare var FormData: {\r\nprototype: FormData;\r\nnew (): FormData;\r\nnew (form: HTMLFormElement): For","comments":1,"createdAt":1428654914000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11884085?v=3","loggedByName":"epirion","milestone":"TypeScript 1.6","number":2707,"state":"closed","title":"FormData needs additional constructor","updatedAt":1428687350000},{"assignedTo":"","body":"Could you transpile TypeScript such that the resulting JavaScript line numbers would match? Just like React's JSX is doing.","comments":1,"createdAt":1428658370000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9773803?v=3","loggedByName":"streamich","milestone":"","number":2708,"state":"closed","title":"Matching line numbers","updatedAt":1428687160000},{"assignedTo":"","body":"Extension to https://github.com/Microsoft/TypeScript/pull/1692.\r\n\r\nMotivation:\r\nA common file layout for some projects is to organize code by feature, rather by the kind of the file. This means that the implementation of a feature, along with its uni","comments":1,"createdAt":1423075310000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/320332?v=3","loggedByName":"JeroMiya","milestone":"","number":1928,"state":"open","title":"support sub-projects within a single tsconfig.json","updatedAt":1428676342000},{"assignedTo":"","body":"There have been a lot of users who find it strange that this would compile:\r\n```typescript\r\ndeclare function forEach<U>(array: U[], callback: (item: U) => void);\r\nvar strings: string[];\r\nvar callback: (item: {}) => void;\r\nforEach(strings, callback); ","comments":3,"createdAt":1428568961000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"","number":2686,"state":"open","title":"Suggestion: Improve generics inference with decorators","updatedAt":1428671406000},{"assignedTo":"","body":"Currently the file is only used to detect the virtual project. Now that we have tsconfig.json support we can use the language service bound to a tsconfig.json file to find navto items. I would propose the following handling in case of the absense of ","comments":6,"createdAt":1427472697000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":2530,"state":"open","title":"TSServer: navto command should be supported without a file","updatedAt":1428659471000},{"assignedTo":"DanielRosenwasser","body":"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-well-known-symbols\r\n\r\n1) `isRegExp` doesn't exist anymore\r\n2) no mention for `match`, `replace`, `search`, `species`, `split` now","comments":4,"createdAt":1427455836000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.5","number":2524,"state":"closed","title":"Obsolete 'isRegExp' and several non-mentioned well-known symbols in lib.es6.d.ts","updatedAt":1428655937000},{"assignedTo":"","body":"Fixes #2524.","comments":1,"createdAt":1428612850000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2691,"state":"closed","title":"Remove 'Symbol.isRegExp' and introduce 'RegExp.prototype.flags'","updatedAt":1428655919000},{"assignedTo":"","body":"This was missed in my last merge.","comments":0,"createdAt":1428643676000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2705,"state":"closed","title":"Rename type.","updatedAt":1428644576000},{"assignedTo":"","body":"Started here: https://typescript.codeplex.com/workitem/1367\r\n\r\nPlease consider adding support for object literal property value shorthand, as per the ES6 proposal: http://wiki.ecmascript.org/doku.php?id=harmony:object_literals#object_literal_property","comments":6,"createdAt":1407662976000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/900769?v=3","loggedByName":"maryo","milestone":"","number":418,"state":"closed","title":"Support for object literal property value shorthand","updatedAt":1428634971000},{"assignedTo":"rbuckton","body":"Formatting the following document in Visual Studio results in incorrect indentation:\r\n\r\n```TypeScript\r\nclass C {\r\n    @dec\r\n    [\"method\"]() { }\r\n}\r\n```\r\n\r\nActual:\r\n```TypeScript\r\nclass C {\r\n    @dec\r\n        [\"method\"]() { }\r\n}\r\n```\r\n\r\nExpected:\r\n``","comments":0,"createdAt":1428437645000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"TypeScript 1.5","number":2661,"state":"closed","title":"Incorrect indentation for computed property named method with decorators","updatedAt":1428626642000},{"assignedTo":"rbuckton","body":"Formatting the following document in Visual Studio results in incorrect indentation:\r\n\r\n```TypeScript\r\nclass C {\r\n    @dec\r\n    @dec\r\n    @dec\r\n    method() { }\r\n}\r\n```\r\n\r\nActual:\r\n```TypeScript\r\nclass C {\r\n    @dec\r\n        @dec\r\n        @dec\r\n    m","comments":0,"createdAt":1428437561000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"TypeScript 1.5","number":2660,"state":"closed","title":"Incorrect indentation for multiple decorators","updatedAt":1428626607000},{"assignedTo":"","body":"Fixes #2660 and #2661\r\n* Added rules for spacing around decorators\r\n* Computing the undecorated start line of a node for use as the effectiveParentStartLine\r\n\r\nThere's still an issue with indentation in formatOnEnter.","comments":1,"createdAt":1428448646000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2664,"state":"closed","title":"Fixes some formatting for decorators","updatedAt":1428626576000},{"assignedTo":"","body":"#698 Collapsable Comments in VS\r\nWhile we're walking the file looking for collapsible nodes, check to see if a node has leading comments.\r\n-- If block comments (/*) are available, create a new collapsible item through its span and add it to the eleme","comments":3,"createdAt":1428101220000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11448839?v=3","loggedByName":"ahmad-farid","milestone":"","number":2612,"state":"closed","title":"Adding outlining for comments to allow collapsing in VS","updatedAt":1428626125000},{"assignedTo":"DanielRosenwasser","body":"Repro:\r\n```TypeScript\r\nclass Parent {\r\n    foo() {\r\n    }\r\n}\r\n\r\nclass Foo extends Parent {\r\n    foo() {\r\n        var x = () => super.foo();\r\n    }\r\n}\r\n```\r\n\r\nExpected:\r\n```JavaScript\r\nclass Parent {\r\n    foo() {\r\n    }\r\n}\r\n\r\nclass Foo extends Parent ","comments":0,"createdAt":1428620472000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":2699,"state":"closed","title":"'this' is needlessly captured in ES6 emit when using 'super'","updatedAt":1428625550000},{"assignedTo":"","body":"Fixes #2699.","comments":1,"createdAt":1428624146000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2701,"state":"closed","title":"Don't emit '_this' when encountering 'super' in ES6 emit","updatedAt":1428625480000},{"assignedTo":"","body":"Also, deprecate getOccurrences and replace it with an appropriate getDocumentHighlights API that matches the Roslyn API and properly handles highlights across multiple files.","comments":0,"createdAt":1428557443000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2682,"state":"closed","title":"Ensure that getOccurrences not return items not in the file asked for.","updatedAt":1428621578000},{"assignedTo":"","body":"```typescript\r\nvar paragraphs = document.querySelectorAll(\"p\");\r\nfor (let p of paragraphs) {\r\n\tconsole.log(p);\r\n}\r\n```\r\n\r\n```\r\nfoo.ts(2,15): error TS2495: Type 'NodeList' is not an array type or a string type.\r\n```\r\n\r\nIs it because the standard emit ","comments":2,"createdAt":1428618005000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":2696,"state":"closed","title":"for-of does not work with DOM collections when target is ES3 or ES5","updatedAt":1428620128000},{"assignedTo":"","body":"Any plan for ES3/ES5 support [similar to this](https://6to5.org/repl/#?experimental=true&playground=true&evaluate=true&code=let%20x%20%3D%20123%3B%0Alet%20_x%20%3D%20123%3B%0Alet%20_x2%20%3D%20123%3B%0A%7B%0A%20%20let%20x%20%3D%2056%0A%20%20console.l","comments":26,"createdAt":1421362596000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1690,"state":"closed","title":"let support for ES3/ES5","updatedAt":1428617817000},{"assignedTo":"","body":"","comments":2,"createdAt":1428435562000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2659,"state":"closed","title":"Fix find all refs and goto def for decorators","updatedAt":1428617089000},{"assignedTo":"","body":"I am trying to create a dependency diagram https://github.com/TypeStrong/atom-typescript/issues/234 However `sourceFile.referencedFiles` doesn't seem to point to `imported` files. \r\n\r\nIs there some other property I should be looking at or will I need","comments":13,"createdAt":1428201075000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2621,"state":"closed","title":"Question : Dependency Diagram from `SourceFile`s","updatedAt":1428616976000},{"assignedTo":"","body":"When URIs are used as file names TypeScript fails. This is because ```getRootLength``` doesn't handle ``://`` bits. ","comments":1,"createdAt":1428584557000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"TypeScript 1.5","number":2688,"state":"closed","title":"ts.getRootLength doesn't handle URIs","updatedAt":1428608883000},{"assignedTo":"","body":"At the moment, parameter decorators cannot use generics of their parent function. Example:\r\n```typescript\r\ndeclare function decorate<T>(): any;\r\nclass Foo {\r\n    bar<U>(@decorate<U>() param: U) { }\r\n}\r\n```\r\nThrows: `TS2304: Cannot find name 'U'.`\r\nSu","comments":2,"createdAt":1428567935000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"","number":2685,"state":"closed","title":"Allow param decorators to use function generics","updatedAt":1428607840000},{"assignedTo":"","body":"fixes #2688 ","comments":1,"createdAt":1428585683000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"","number":2689,"state":"closed","title":"Fix2688","updatedAt":1428606383000},{"assignedTo":"","body":"on Mac : TS6029: Version 1.4.1.0\r\n\r\nI have a .ts file. If I leave the last line of file  with comments using /* */ style (e.g. /* END OF FILE */), the whole output is written twice in .js resulting in wrong production. If I leave comments using // (e","comments":1,"createdAt":1428561621000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5566402?v=3","loggedByName":"sandeepkalra","milestone":"","number":2683,"state":"closed","title":"end of file error","updatedAt":1428603893000},{"assignedTo":"DanielRosenwasser","body":"If this is something you would take I am willing to provide a pull request","comments":3,"createdAt":1427471840000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":2527,"state":"closed","title":"TSServer should expose getOccurrencesAtPosition","updatedAt":1428598356000},{"assignedTo":"","body":"I was trying the new features of 1.5 and i think I found an error:\r\n\r\n```\r\nvar test = () => { \r\n    return {\r\n        event: 'click',\r\n        x: 15,\r\n        y: 36,\r\n        canceled: false\r\n    };\r\n};\r\n\r\nvar {event} = test();\r\n```\r\n\r\n`error TS2403:","comments":3,"createdAt":1428550960000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5928832?v=3","loggedByName":"cabralRodrigo","milestone":"","number":2681,"state":"closed","title":"Possible error on 'Destructuring' feature","updatedAt":1428552444000},{"assignedTo":"DanielRosenwasser","body":"For each property, we emit something like\r\n\r\n```JavaScript\r\n_a[c] = Object.defineProperty({ enumerable: /* ...... */ })\r\n```\r\n\r\nrather than actually passing `_a` and `c` into `Object.defineProperty`.\r\n","comments":2,"createdAt":1427927601000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":2586,"state":"closed","title":"Incorrect emit for computed accessors in object literals in ES3/ES5","updatedAt":1428551874000},{"assignedTo":"","body":"Move strict mode checking into type checker. This allows more explicit error message.","comments":0,"createdAt":1428540901000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2679,"state":"closed","title":"Migrate strict mode check","updatedAt":1428541960000},{"assignedTo":"","body":"","comments":4,"createdAt":1428476129000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2666,"state":"closed","title":"Support getOccurrences on the TS Server","updatedAt":1428541910000},{"assignedTo":"JsonFreeman","body":"Creating an issue to track work on iterators. This includes:\r\n\r\n- [x] Finalize Iterable<T> and Iterator<T> types.\r\n- [x] Support iterators with spread operator (...) in function calls and array literals.\r\n- [x] Support destructuring of iterator value","comments":14,"createdAt":1422922929000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"TypeScript 1.5","number":1900,"state":"closed","title":"Iterators (ES6)","updatedAt":1428537607000},{"assignedTo":"","body":"This adds support for a few things:\r\n* Spreading an iterator into an array\r\n```ts\r\nvar array = [0, 1, ...new NumberIterator];\r\n```\r\n* Spreading an iterator into a call\r\n```ts\r\nfunction foo(...nums: number[]) { }\r\nfoo(...new NumberIterator);\r\n```\r\n* D","comments":2,"createdAt":1427332565000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2498,"state":"closed","title":"Support spreading and destructuring of iterators in ES6","updatedAt":1428537536000},{"assignedTo":"","body":"I'm fairly sure I have the syntax right:\r\n\r\n```javascript\r\n@ClassDecoratorTest(\"Test\")\r\nclass Test\r\n{\r\n}\r\n\r\nfunction ClassDecorationTest(target, name)\r\n{\r\n}\r\n```\r\n\r\nBut this won't compile. I get the following error on the @ClassDecorator line:\r\n\r\nerr","comments":2,"createdAt":1428091048000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4442179?v=3","loggedByName":"jamiewinder","milestone":"","number":2609,"state":"closed","title":"Class decorator parameters","updatedAt":1428535066000},{"assignedTo":"","body":"i had added a new prototype to date function \r\n\r\n\r\n    interface Date {\r\n         addDays(days:any):any;\r\n     }\r\n\r\n\r\n     Date.prototype.addDays = (days)=>{\r\n         this.setDate(this.getDate() + days);\r\n        return this;\r\n     }\r\n\r\n\r\noutput gen","comments":1,"createdAt":1428483360000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3788500?v=3","loggedByName":"pranaydutta89","milestone":"","number":2669,"state":"closed","title":"_this is causing error","updatedAt":1428533940000},{"assignedTo":"","body":"Class members with computed property names that are decorated must cache the expression result for the computed property name for later use when applying decorators. The cache was based on the node's ID, but if the node's ID was not generated, it wou","comments":1,"createdAt":1428440724000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2662,"state":"closed","title":"Fixes computed name caching for decorators","updatedAt":1428533196000},{"assignedTo":"","body":"Fixes #2586","comments":5,"createdAt":1424742931000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2124,"state":"closed","title":"Revert ES3/ES5 downlevel computed property emit logic to not use tree rewriting","updatedAt":1428518737000},{"assignedTo":"","body":"Want to write something like this:\r\n```typescript\r\nvar [, a, b]: [, string, number] = [0, \"a\", 5];\r\n```\r\n\r\ninstead of inserting 'any' manually to all the omitted positions.","comments":2,"createdAt":1428495876000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"","number":2671,"state":"open","title":"Ability to skip elements in tuple type annotation","updatedAt":1428514942000},{"assignedTo":"","body":"I'm sorry to bother you again but this one seems pretty much strange: \r\n```typescript\r\ninterface Something {\r\n\tprop?: string ;\r\n}\r\n\r\n\r\ninterface SomethingElse extends Something {\r\n\tprop1: string;\r\n}\r\n\r\nclass Test<T> {\r\n\tconstructor(props: T) {\r\n\t\t\r\n\t","comments":3,"createdAt":1423163740000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":1947,"state":"open","title":"Another strange behavior with type inference ","updatedAt":1428492390000},{"assignedTo":"","body":"I found the behavior of the compiler here quite strange : \r\n```typescript\r\nclass A<P> {\r\n\tpublic p: P;\r\n}\r\n\r\ndeclare function test<P>(c: A<P> , p: P): P ;\r\n\r\ninterface Props { items: string }\r\ntest(new A<Props>(), {}); //no error no completion inside","comments":7,"createdAt":1423070627000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":1926,"state":"closed","title":"Strange behavior in function type inference","updatedAt":1428492252000},{"assignedTo":"","body":"Then can get confused, by \":\" denotes the type, and then after \":\" denotes an internal variable.  That definition is written with a \"=\", and then definition write by \":\".\r\nWhy not make all definition through \"=\"?  A type done through \":\"!\r\nAnd everyw","comments":8,"createdAt":1428154562000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6898474?v=3","loggedByName":"korenevskiy","milestone":"","number":2615,"state":"closed","title":"Mixed \":\" and \"=\"","updatedAt":1428491447000},{"assignedTo":"mhegazy","body":"CRLF is hardcoded:\r\nhttps://github.com/Microsoft/TypeScript/blob/5e7343f573c3e987caaa3f2326386b8c796e6fa3/src/services/services.ts#L1683","comments":7,"createdAt":1428153861000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/26476?v=3","loggedByName":"teppeis","milestone":"TypeScript 1.5","number":2614,"state":"closed","title":"ts.transpile() outputs CRLF as EOL in any OS","updatedAt":1428487877000},{"assignedTo":"","body":"```javascript\r\n// https://msdn.microsoft.com/en-us/library/windows/apps/hh700334.aspx\r\n\r\ntempFolder.createFileAsync(\"tempfile.txt\", Windows.Storage.CreationCollisionOption.replaceExisting)\r\n   .then(function (tempFile) {\r\n       // The createFileAsyn","comments":1,"createdAt":1428481752000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":2668,"state":"closed","title":"Indent with Promise chaining","updatedAt":1428485285000},{"assignedTo":"","body":"```typescript\r\n(function () { () => { arguments; } })\r\n// Error: The 'arguments' object cannot be referenced in an arrow function. Consider using a standard function expression.\r\n```\r\n\r\nThis currently gives error in master branch, but I think the `ar","comments":2,"createdAt":1428475054000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":2665,"state":"closed","title":"`arguments` variable in arrow function in standard function","updatedAt":1428477263000},{"assignedTo":"rbuckton","body":"the decorator does not execute in the context of the method or the constructor. at design time this and super refers to the class scope, but at run time they do not.\r\n\r\n```ts\r\nclass Test{\r\n    private serialize(target: Function, key: string| symbol, ","comments":0,"createdAt":1428019225000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":2601,"state":"closed","title":"This and super should not be allowed in method/property decorators","updatedAt":1428473303000},{"assignedTo":"","body":"Updates to getThisContainer and getSuperContainer for proper container resolution of `this` and `super` in a decorator. Fixed a bug in `checkSuperExpression` when `container` is **undefined**.","comments":3,"createdAt":1428432209000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2658,"state":"closed","title":"Fixes #2601, incorrect resolution of this/super","updatedAt":1428459004000},{"assignedTo":"","body":"Add an exit message.  The server process will exit after receiving this message.","comments":3,"createdAt":1427958907000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4419011?v=3","loggedByName":"steveluc","milestone":"","number":2591,"state":"closed","title":"Add an exit message for the server.","updatedAt":1428447649000},{"assignedTo":"","body":"Fixes #2620","comments":0,"createdAt":1428354127000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2639,"state":"closed","title":"Exponse parseCommandLine","updatedAt":1428446568000},{"assignedTo":"","body":"See screenshot, only happens after the `${num}` stuff\r\nRunning VS 2013\r\n\r\nBecause I didn't have an ending `*/` the whole file is now shown as a comment\r\n\r\n![capture](https://cloud.githubusercontent.com/assets/765657/5792975/b93ef542-9f31-11e4-9c87-d4","comments":6,"createdAt":1421595851000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":1716,"state":"closed","title":"Template strings and keyword colorization","updatedAt":1428435530000},{"assignedTo":"","body":"Consider a situation when each class and function in the module depends on the same type/value parameters:\r\n```typescript\r\n// current\r\nmodule foo {\r\n   export class C<a> {\r\n      value: a;\r\n      constructor(private areEqual: (one: a, another:a) => b","comments":8,"createdAt":1428287056000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":2625,"state":"open","title":"Suggestion: Allow type and value parameters for modules","updatedAt":1428433929000},{"assignedTo":"","body":"I think it would be nice to try to guess the type of generic after calling the constructor\r\n\r\n```javascript\r\nvar arr = [];\r\narr.push(123);\r\narr.push(\"string\"); // should be an error\r\n```\r\n\r\n```javascript\r\nclass Bar<T>{\r\n  foo: T;\r\n}\r\nvar bar = new Ba","comments":2,"createdAt":1428392373000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3171573?v=3","loggedByName":"cevek","milestone":"","number":2648,"state":"closed","title":"infer array type afterwards when implicitAny","updatedAt":1428429546000},{"assignedTo":"","body":"Addresses gh-911.","comments":4,"createdAt":1413645154000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3840695?v=3","loggedByName":"am11","milestone":"","number":916,"state":"closed","title":"CLI: support for wildcards","updatedAt":1428429364000},{"assignedTo":"","body":"http://typescript.codeplex.com/workitem/1125\r\n\r\nFollowing should be allowed:\r\n\r\n```typescript\r\ninterface IFoo {\r\n    foo();\r\n}\r\n\r\ndeclare class Foo implements IFoo {}\r\n```\r\n\r\nIf abstract classes are added in the future, they would inherit all interfa","comments":5,"createdAt":1406971343000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Canonical","name":"Canonical","color":"000000"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/96032?v=3","loggedByName":"mwisnicki","milestone":"","number":340,"state":"closed","title":"Class declarations should implicitly implement interfaces","updatedAt":1428428408000},{"assignedTo":"","body":"Currently type guards are limited only to bodies of conditionals.\r\n\r\nA simple example with 'if':\r\n```typescript\r\nfunction f(s: string | number) {\r\n      if (typeof s === \"string\") {\r\n          // s is 'string'\r\n      }\r\n      else {         \r\n       ","comments":1,"createdAt":1428415742000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"","number":2654,"state":"closed","title":"Feature request: better process function exits for type guards and 'if'-s","updatedAt":1428427680000},{"assignedTo":"","body":"I think some times we need to write things like this, but obviously the auto formatting doesn't support this style well enough (actually it destroys manually formatted code):\r\n\r\n```typescript\r\npromise\r\n    .then(() => returnAnotherPromise())\r\n    .th","comments":2,"createdAt":1428399456000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":2651,"state":"closed","title":"Auto formatting is buggy for chained callbacks (promises).","updatedAt":1428427641000},{"assignedTo":"","body":"Ambient class declarations implementing an interface require the user to repeat the type members declared in the interface.\r\n\r\nFor example with the interface\r\n\r\n```ts\r\ninterface IFoo {\r\n\tbar: string;\r\n\tqux(): number;\r\n}\r\n```\r\n\r\nan ambient declaration","comments":3,"createdAt":1428409813000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/47458?v=3","loggedByName":"knuton","milestone":"","number":2653,"state":"closed","title":"Code duplication when declaring an ambient class implementing an interface","updatedAt":1428427468000},{"assignedTo":"","body":"This could be a duplicate but I didn't see anything quite matching\r\n\r\ncompiler errors on union types in d.ts files (line below is fine in 1.4)\r\n\r\n    type ReactType = ComponentClass<any> | string;\r\n\r\noutput\r\n\r\n    [11:11:17] Compiling TypeScript file","comments":1,"createdAt":1428422036000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3354672?v=3","loggedByName":"marcelto","milestone":"","number":2657,"state":"closed","title":"compiler errors on union types in d.ts files","updatedAt":1428426872000},{"assignedTo":"","body":"Maybe internal modules should be renamed to something else? For example, the following code declares an ES6 module:\r\n\r\n\tdeclare module \"MyLib\" {\r\n\t}\r\n\r\nBut this one declares an internal module:\r\n\r\n\tdeclare module MyLib {\r\n\t}\r\n\r\nThe syntax is confusin","comments":2,"createdAt":1428393391000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5991775?v=3","loggedByName":"tarh","milestone":"","number":2649,"state":"closed","title":"Syntax : internal modules and ES6 modules","updatedAt":1428423784000},{"assignedTo":"","body":"function f()\r\n{\r\n   var today: Date = new Date(),\r\n        yesterday: Date = new Date(),\r\n        tomorrow: Date = new Date(),\r\n        tomorrow_in_ms: number = 0;\r\n\r\n    today.setHours(0, 0, 0, 0);\r\n    tomorrow.setHours(0, 0, 0, 0);\r\n    yesterday.","comments":3,"createdAt":1428383534000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5566402?v=3","loggedByName":"sandeepkalra","milestone":"","number":2647,"state":"closed","title":"Calculation w.r.t dates result in error.","updatedAt":1428417920000},{"assignedTo":"mhegazy","body":"Code:\r\n```typescript\r\nvar q;\r\n    let [, a,, b,,,, s,,,] = q;\r\n    a = s[1];\r\n    b = s[2];    \r\n```\r\n\r\ncompile with target=es6 => exception\r\n\r\nStacktrace:\r\n```\r\nC:\\Users\\Anton.Lobov\\Desktop\\ts-latest-github\\TypeScript\\built\\local\\tsc.js:2162\r\n4\r\n   ","comments":1,"createdAt":1428328238000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.5","number":2631,"state":"closed","title":"NullRef on processing destructuring with target ES6","updatedAt":1428363781000},{"assignedTo":"","body":"Fixes #2631","comments":1,"createdAt":1428359591000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2643,"state":"closed","title":"Check for omitted expressions when checking const and let declaration names","updatedAt":1428363771000},{"assignedTo":"mhegazy","body":"Code:\r\n\r\n```typescript\r\nclass Bbb {\r\n}\r\n\r\nclass Aaa extends Bbb { }\r\n\r\nmodule Aaa {\r\n    export class SomeType {}\r\n}\r\n\r\nmodule Bbb {\r\n    export class SomeType { }\r\n\r\n    export * from Aaa;      // this line causes the nullref\r\n}\r\n\r\nvar a: Bbb.SomeTy","comments":1,"createdAt":1428309437000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.5","number":2629,"state":"closed","title":"NullRef on processing 'export *' in several cases","updatedAt":1428362186000},{"assignedTo":"","body":"Fixes #2629","comments":1,"createdAt":1428357325000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2642,"state":"closed","title":"Add null check when querying for exported from a module","updatedAt":1428362168000},{"assignedTo":"","body":"Fixes #2614","comments":1,"createdAt":1428354437000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2640,"state":"closed","title":"Use sys.newLine in transpile when possible","updatedAt":1428360074000},{"assignedTo":"","body":"I would like to have some feature that infers any possible types from the given object in the generic function.\r\nFor instance I have a function that receives Object, and I want to have a more specific callback than 'any'.\r\nCurrent code:\r\n```typescrip","comments":2,"createdAt":1426108747000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":2304,"state":"open","title":"Allow type parameter constraints to reference other type parameters","updatedAt":1428357878000},{"assignedTo":"","body":"I am not sure that my questions are relevant, sorry if what I say is useless.\r\nI see two problems with ES6 modules in TS.\r\n\r\n# How to use definition files\r\n\r\nIs there a way to use definition files `.d.ts` with ES6 modules?\r\n\r\nFor example, if I want t","comments":1,"createdAt":1428172852000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5991775?v=3","loggedByName":"tarh","milestone":"","number":2618,"state":"closed","title":"ES6 modules and TS definitions","updatedAt":1428355517000},{"assignedTo":"","body":"I'm currently writing a webserver application using hapijs (nodejs). I have a bunch of plugins which I want to write in Typescript. A Hapijs plugin needs a function called `register()` and an attributes function property with a name and version:\r\n\r\n`","comments":11,"createdAt":1428153387000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5221667?v=3","loggedByName":"timoweiss","milestone":"","number":2613,"state":"closed","title":"Configure compiler less strict [Question]","updatedAt":1428355485000},{"assignedTo":"","body":"There's a problem with the ES6 generated code when using inner classes. The code:\r\n```javascript\r\n// Bug.ts\r\nmodule Stuff {\r\n\texport class Foo {\r\n\t\tconstructor (message: string) {\r\n\t\t\tthis.Message = \"Hello, \" + message\r\n\t\t}\r\n\t\tMessage = \"\"\r\n\t}\r\n\texpo","comments":1,"createdAt":1428351336000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3415381?v=3","loggedByName":"boris-kolar","milestone":"","number":2638,"state":"closed","title":"Bug: Babel fails to compile the generated ES6 code","updatedAt":1428355209000},{"assignedTo":"","body":"With TypeScript 1.4 I've run into an issue using react.d.ts using the new ES6 class coding style for components. Below I've narrowed the issue down to an issue resolving overloaded functions when one of the parameters is a type for which all properti","comments":2,"createdAt":1428342402000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11821636?v=3","loggedByName":"rprocops","milestone":"","number":2634,"state":"closed","title":"Incorrect overloaded function resolution when a parameter's type has all optional properties","updatedAt":1428354805000},{"assignedTo":"","body":"Update the Samples to use new TS1.5 features like destructuring, let and const, and new es6 module syntax. also remove the content of typescript.d.ts from all baselines. should make test runs less noisy.","comments":3,"createdAt":1428018180000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2599,"state":"closed","title":"Update API samples and fix test issues","updatedAt":1428353467000},{"assignedTo":"","body":"Fixes function type signature for ParameterDecorator.","comments":3,"createdAt":1428342800000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2635,"state":"closed","title":"Fix for #2249","updatedAt":1428351717000},{"assignedTo":"","body":"**Problem Statement:** In TypeScript 1.1, there are two basic ways to initialize complex properties with strong typing via a parameterized class constructor.  Both have disadvantages.  I will illustrate this with a simple example that uses Knockout, ","comments":12,"createdAt":1411928089000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3755379?v=3","loggedByName":"nycdotnet","milestone":"","number":766,"state":"closed","title":"Suggestion: Allow declaring class members within a constructor","updatedAt":1428351484000},{"assignedTo":"rbuckton","body":"![too_wide_hl](https://cloud.githubusercontent.com/assets/4499495/6919589/18f6f9b8-d7c1-11e4-8917-98115df8c7eb.png)\r\n\r\nLooks ugly. Seems that highlighting only the decorator itself will look quite better.","comments":1,"createdAt":1427807798000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.5","number":2561,"state":"closed","title":"Too wide highlighting for a decorator issue","updatedAt":1428349963000},{"assignedTo":"rbuckton","body":"As mentioned in this comment:\r\n\r\nhttps://github.com/Microsoft/TypeScript/issues/2249#issuecomment-89842445","comments":1,"createdAt":1428341998000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2633,"state":"closed","title":"Incorrect type for `target` parameter of ParameterDecorator type in core.d.ts","updatedAt":1428349935000},{"assignedTo":"","body":"It only contains old external modules `import` syntax imports\r\n\r\nrefs : https://github.com/TypeStrong/atom-typescript/issues/234","comments":1,"createdAt":1428209641000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2622,"state":"closed","title":"Bug: `preProcessFile` does not support es6 imports in `importedFiles` ","updatedAt":1428341928000},{"assignedTo":"","body":"I would expect it to work: \r\n\r\n```ts\r\nvar foo:any[][] = [];\r\nfor(var item of foo){\r\n\tconsole.log(foo);\r\n}\r\n```\r\nBut it fails with `is not an array or string type`. ","comments":2,"createdAt":1428292986000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2626,"state":"closed","title":"for of does not work for multi dimentional arrays","updatedAt":1428341772000},{"assignedTo":"","body":"I have the following code:\r\n\r\n```JavaScript\r\nvar blockLen = ecb.determineBlockSize();\r\n\r\nvar len = ecb.encrypt(Buffer.concat([mysteryBytes, mysteryBuffer])).length;\r\n\r\nconsole.log(len, len/blockLen);\r\n```\r\n\r\nThe signature of `ecb.determineBlockSize` ","comments":4,"createdAt":1428265346000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1616464?v=3","loggedByName":"SomeKittens","milestone":"","number":2624,"state":"closed","title":"error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.","updatedAt":1428300891000},{"assignedTo":"","body":"createCompilerHost in program.ts needs clearer comments for its setParentNodes argument.\r\n\r\nPlease see [former PR 2427](https://github.com/Microsoft/TypeScript/pull/2427) for previous comments. This pull request has been created because of an unneces","comments":2,"createdAt":1427462578000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"","number":2525,"state":"closed","title":"Comments for setParentNodes","updatedAt":1428234230000},{"assignedTo":"CyrusNajmabadi","body":"input:\r\n```ts\r\nvar x = class Foo {\r\n    static sprop = 1;\r\n}, y = 0;\r\n```\r\n\r\nemits:\r\n```js\r\nvar x = class Foo {\r\n}\r\nFoo.sprop = 1;, y = 0;\r\n```\r\n\r\nwhich is not correct, as \"Foo\" does not exist; it should be something along these lines:\r\n\r\n```js\r\nvar ","comments":1,"createdAt":1427862693000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":2574,"state":"closed","title":"Class expression emit in ES6 is not correct","updatedAt":1428163723000},{"assignedTo":"","body":"Address #2465 ","comments":3,"createdAt":1428013345000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2596,"state":"closed","title":"Parse class in strict mode","updatedAt":1428130300000},{"assignedTo":"","body":"Having `SyntaxKind` as a const enum means there isn't a lookup I can use.\r\n\r\nI need this for https://github.com/TypeStrong/atom-typescript/issues/233 \r\n\r\nIs there something like this already there or do I need to do this manually. Cheers :rose: ","comments":4,"createdAt":1428042372000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2604,"state":"closed","title":"Question: `SyntaxKind` number to a string","updatedAt":1428107444000},{"assignedTo":"","body":"there is still some work that needs to be done on the editor side, but this should cover the service side.","comments":5,"createdAt":1425135533000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2173,"state":"closed","title":"Support getCompletions in external module name references in imports and exports","updatedAt":1428106532000},{"assignedTo":"","body":"Currently when users use words that can't be use as an identifier (this case will be more common as module  and class becomes strict mode code), we should then have better binding diagnostics to report this error instead of ```Duplicate identifier '(","comments":0,"createdAt":1428086922000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2608,"state":"open","title":"Improve binding of missing identifier.","updatedAt":1428103861000},{"assignedTo":"","body":"Given:\r\n\r\n```ts\r\ninterface Foo {\r\n  [key: string | number]: boolean;\r\n}\r\n```\r\n\r\nI get\r\n\r\n```\r\nbleh.ts(2,4): error TS1023: An index signature parameter type must be 'string' or 'number'.\r\n```\r\n\r\nA workaround is:\r\n\r\n```ts\r\ninterface Foo {\r\n  [key: numb","comments":1,"createdAt":1428097559000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8481?v=3","loggedByName":"saml","milestone":"","number":2611,"state":"closed","title":"Support union type as index signature parameter type.","updatedAt":1428101549000},{"assignedTo":"","body":"It is impossible to write generic type that represents key-value dictionary:\r\n\r\n```typescript\r\ninterface KeyValue<Key, Value> {\r\n\t[key: Key]: Value;\r\n}\r\n```\r\n\r\nKey must be string or number, but generic constraints doesn't allow this.\r\n\r\n```typescript","comments":2,"createdAt":1424113429000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":2049,"state":"open","title":"General indexer type","updatedAt":1428101498000},{"assignedTo":"","body":"Fixes https://github.com/Microsoft/TypeScript/issues/2574","comments":1,"createdAt":1428021893000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2603,"state":"closed","title":"Add support for emitting static properties in class expressions in ES6.","updatedAt":1428095034000},{"assignedTo":"","body":"A decorator can receive arguments, by being defined as a function that accepts parameters and then returns a normal decorator function:\r\n\r\n    function computed(evaluator: (obj: any) => any) {\r\n        return (obj: any, key: string) => {\r\n           ","comments":0,"createdAt":1428064727000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/365934?v=3","loggedByName":"danielearwicker","milestone":"","number":2607,"state":"open","title":"Generic decorators - could they receive some default type arguments?","updatedAt":1428083918000},{"assignedTo":"","body":"Key points from discussion from this morning:\r\n\r\n 1. Assume *all* non-ambient members of non-`const` enums are computed (even those initialized with literals), both for inlining purposes and for .d.ts generation purposes\r\n 2. Continue to aggressively","comments":3,"createdAt":1425325207000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.5","number":2183,"state":"closed","title":"const/non-const enum cleanup","updatedAt":1428079756000},{"assignedTo":"","body":"Hi,\r\n\r\nThe request is for something like the following on the properties page for a file.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1106823/6438751/0b2ed88c-c0c4-11e4-8857-50873c23a234.png)\r\n\r\nAt present this ordering needs to be specifi","comments":5,"createdAt":1425291225000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":2181,"state":"open","title":"Provide a \"Build Order\" property for TypeScript files in Visual Studio","updatedAt":1428057781000},{"assignedTo":"","body":"I already provide a decent experience for relative paths https://github.com/TypeStrong/atom-typescript#relative-paths \r\n\r\nWant to expand it to also list the available external module declarations. But struggling to find the different between these tw","comments":3,"createdAt":1427980163000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2593,"state":"closed","title":"Question: Lookup external module names","updatedAt":1428028768000},{"assignedTo":"","body":"e.g I should see `bas` here : \r\n\r\n![image](https://cloud.githubusercontent.com/assets/874898/6959426/863be958-d964-11e4-934e-506afda5031f.png)\r\n\r\nTIP: bas is valid as members autocomplete fine : \r\n![image](https://cloud.githubusercontent.com/assets/8","comments":2,"createdAt":1427959091000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2592,"state":"closed","title":"ES6 import * alias missing in autocomplete","updatedAt":1428024759000},{"assignedTo":"CyrusNajmabadi","body":"This option:\r\n![image](https://cloud.githubusercontent.com/assets/7121557/3770715/e7e80e30-18ed-11e4-9756-e0a44f1595e4.png)\r\neither returns no results or nonsense results. We haven't actually attempted to implement it. It should not appear on the con","comments":1,"createdAt":1406837100000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.5","number":322,"state":"closed","title":"Remove/Fix 'Go To Declaration' from right click context menu in VS","updatedAt":1428019520000},{"assignedTo":"CyrusNajmabadi","body":"Hi,\r\n\r\nI've set the noEmitOnError flag in my project file, and indeed TypeScript is not generating a js file if the .ts file contains errors, but I can't figure out how to get the project compilation to fail.\r\nI tried adding a reference to the previo","comments":3,"createdAt":1425596373000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5364225?v=3","loggedByName":"wizofaus","milestone":"TypeScript 1.5","number":2216,"state":"closed","title":"Project still compiles even with noEmitOnError","updatedAt":1428019505000},{"assignedTo":"CyrusNajmabadi","body":"Roslyn supports a hierarchical view of references. So whereas today a set of references is displayed as a flat list, it would be nice if they were grouped by which particular declarations they referencing. So in the following example, there would be ","comments":1,"createdAt":1426811528000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2434,"state":"closed","title":"Display references using richer hierarchy","updatedAt":1428019483000},{"assignedTo":"","body":"Fixes up some spelling errors.","comments":1,"createdAt":1428014390000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":2597,"state":"closed","title":"Spelling","updatedAt":1428017469000},{"assignedTo":"","body":"This includes:\r\n1) warnings when you use TypeScript specific language constructs in a .js file.\r\n2) Completion lists on <dot> that include all identifiers we know about when you're in a .js file.","comments":0,"createdAt":1427849613000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2571,"state":"closed","title":"Add preliminary support for editing JavaScript files using the TS Language Service.","updatedAt":1428013985000},{"assignedTo":"CyrusNajmabadi","body":"Code:\r\n```TypeScript\r\nfunction f() {\r\n    return typeof class {} === \"function\";\r\n}\r\n```\r\n\r\nCurrently emits:\r\n```JavaScript\r\nfunction f() {\r\n    return typeof (function () {\r\n        function F() {\r\n        }\r\n        return ;\r\n    })() === \"function","comments":0,"createdAt":1427918566000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":2579,"state":"closed","title":"Anonymous class expressions not returning the constructor function in emit","updatedAt":1428010258000},{"assignedTo":"CyrusNajmabadi","body":"","comments":0,"createdAt":1427918262000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":2578,"state":"closed","title":"Class declarations should be block scoped, not function scoped","updatedAt":1428010237000},{"assignedTo":"","body":"Fixes https://github.com/Microsoft/TypeScript/issues/2578\r\nFixes https://github.com/Microsoft/TypeScript/issues/2579\r\n","comments":1,"createdAt":1427930964000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2588,"state":"closed","title":"Class declarations should be block scoped.","updatedAt":1428009205000},{"assignedTo":"CyrusNajmabadi","body":"While working on https://github.com/TypeStrong/atom-typescript/issues/76 I've noticed this error: \r\n\r\n![image](https://cloud.githubusercontent.com/assets/874898/6841968/1d3b26cc-d3e6-11e4-9b5e-ab057780ab13.png)\r\n\r\nWhich makes no sense considering the","comments":0,"createdAt":1427355177000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"TypeScript 1.5","number":2503,"state":"closed","title":"Error : visit is not defined","updatedAt":1428006769000},{"assignedTo":"DanielRosenwasser","body":"Two things we need to fix:\r\n* File names should have the correct slashes\r\n* Error code and error category needs to be printed when we are working with MS Build\r\n\r\nActual:\r\n```\r\n1>  C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.0\\tsc.exe  --sourc","comments":1,"createdAt":1408662135000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.6","number":506,"state":"closed","title":"Build errors are not displayed correctly in VS ","updatedAt":1428006465000},{"assignedTo":"mhegazy","body":"Here are instances of indexOf on an array I came across:\r\n- src\\compiler\\checker.ts - (331, 32) : return sourceFiles.indexOf(file1) <= sourceFiles.indexOf(file2);\r\n- src\\compiler\\checker.ts - (331, 62) : return sourceFiles.indexOf(file1) <= sourceFil","comments":2,"createdAt":1415658478000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 2.0","number":1114,"state":"closed","title":"TypeScriptServices.js and tsc.js use non-ES3 APIs","updatedAt":1428005897000},{"assignedTo":"","body":"The path specified in the require keyword is case-sensitive. There are good reasons for that, but it can be confusing, especially given that a project folder in Visual Studio Solution Explorer can have a different casing from the corresponding filesy","comments":1,"createdAt":1418740479000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9450467?v=3","loggedByName":"FilippoPolo","milestone":"Community","number":1502,"state":"open","title":"Path casing in require","updatedAt":1428005877000},{"assignedTo":"","body":"```ts\r\nfunction f() {\r\n    return a &&\r\n        b && /*cursor here*/\r\n}\r\n```\r\nTriggering smart indent will align the cursor with the return keyword, although I would expect it to be aligned with `b`. This is specifically the case when the previous li","comments":1,"createdAt":1422475257000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":1836,"state":"open","title":"Smart indent result is incorrect after a binary operator","updatedAt":1428005771000},{"assignedTo":"","body":"Given the following code:\r\n```ts\r\nvar doodle;\r\nif (true) {\r\n\r\n$\r\n}\r\n```\r\nIf you type `doo`, and then press enter to commit the completion item, it also formats. However, if you then undo the action, it not only undoes the formatting, it undoes the co","comments":4,"createdAt":1423090800000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 2.0","number":1930,"state":"closed","title":"Pressing enter to simultaneously commit a completion item and format the line has only one undo stack entry","updatedAt":1428005666000},{"assignedTo":"","body":"Described here: https://github.com/Microsoft/TypeScript/pull/1589#issuecomment-74371441\r\n\r\n> `jake runtests` executes mocha. Since the tests don't pass, mocha aborts. Because of that, the jake process aborts too, and the command to remove the tempora","comments":1,"createdAt":1424116152000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 2.0","number":2050,"state":"closed","title":"projectOutput directory is not deleted in certain circumstances","updatedAt":1428005563000},{"assignedTo":"","body":"The following is valid ES6[1], however the second case results in an error during compilation:\r\n```js\r\n({ a } = o);\r\n({ a }) = o; // error TS2364: Invalid left-hand side of assignment expression.\r\n```\r\n\r\n[1] Tested in Firefox Nightly","comments":1,"createdAt":1421356830000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"Community","number":1688,"state":"closed","title":"Object Literal destructuring assignment fails when LHS is parenthesized","updatedAt":1428005034000},{"assignedTo":"","body":"We have a project with a number of \"start\" files for beginning building (the project contains a number of applications that have shared source code, each application has a file that is launched in the command line, or included in html files that is t","comments":11,"createdAt":1426637626000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3665998?v=3","loggedByName":"Griffork","milestone":"","number":2404,"state":"open","title":"Choose build's starting file(s) VSProject","updatedAt":1428001935000},{"assignedTo":"","body":"***Note: this is still a work in progress - I'm aware it isn't perfect or final by any means and should be seen mostly as a starting point to encourage discussion and re-consideration of the existing approach and solutions.***\r\n\r\n(based on ideas I ex","comments":5,"createdAt":1427375092000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8589488?v=3","loggedByName":"rotemdan","milestone":"","number":2508,"state":"open","title":"Proposal: extend legacy module import syntax to a fully dynamic module loader","updatedAt":1428001915000},{"assignedTo":"","body":"I am trying to create something in TypeScript that uses the D3 library.  I have the latest d3.d.ts (1.7.0) and I have a small file like this:\r\n\r\n    /// <reference path=\"typings/d3/d3.d.ts\" />\r\n    class TimeMultipleSeriesLineChart {\r\n         xScale","comments":4,"createdAt":1427951947000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5375521?v=3","loggedByName":"cleverguy25","milestone":"","number":2590,"state":"closed","title":"Languages service issue with definition files?","updatedAt":1428001875000},{"assignedTo":"","body":"Port unit tests for versioncach.","comments":2,"createdAt":1427848823000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2570,"state":"closed","title":"Version cache unit test","updatedAt":1427992064000},{"assignedTo":"ahejlsberg","body":"```ts\r\nvar x;\r\nexport { x as default };\r\n```\r\nThis code should be legal, but I get \"Identifier expected\" on the `default` keyword. The grammar says that this can be an IdentifierName.\r\n\r\nAlso, this crashes the compiler:\r\n```\r\n                        ","comments":1,"createdAt":1426926077000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2451,"state":"closed","title":"Incorrect error and crash for export as default","updatedAt":1427924084000},{"assignedTo":"DanielRosenwasser","body":"Consider the following:\r\n\r\n```TypeScript\r\nfunction foo([x,y,z]? : string[]) {\r\n    return; // we don't even need to use `x`, `y`, or `z`.\r\n}\r\n```\r\n\r\nBut this will ***always*** crash when the argument is omitted because we'll effectively be running th","comments":2,"createdAt":1419036856000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":1542,"state":"closed","title":"Parameters with binding patterns should not be allowed to be optional ","updatedAt":1427921530000},{"assignedTo":"DanielRosenwasser","body":"`\"\\u{1f4a9}\"` should be converted to `\"\\uD83D\\uDCA9\"`","comments":0,"createdAt":1424097781000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/347244?v=3","loggedByName":"yukulele","milestone":"TypeScript 1.5","number":2047,"state":"closed","title":"ES6 extended Unicode syntax for strings and template strings","updatedAt":1427921469000},{"assignedTo":"DanielRosenwasser","body":"Consider a file `augmentations.ts`:\r\n\r\n```TypeScript\r\n/// <reference path=\"typings/typescript/typescript.d.ts\" />\r\n\r\ndeclare module \"typescript-augmented\" {\r\n    import { ArrowFunction as ts_ArrowFunction } from \"typescript\"\r\n\r\n    export interface A","comments":2,"createdAt":1426881500000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":2445,"state":"closed","title":"No completion for transitively exported types when using ES6 modules","updatedAt":1427921448000},{"assignedTo":"","body":"Fixes #2445.","comments":1,"createdAt":1427248034000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2485,"state":"closed","title":"Fix completion lists for transitive exports","updatedAt":1427921429000},{"assignedTo":"","body":"```TypeScript\r\nclass B { }\r\nclass C extends B { }\r\nconsole.log(B.isPrototypeOf(C))\r\n```\r\n\r\nExpected: `true`\r\nActual: `false`","comments":1,"createdAt":1427919990000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2580,"state":"closed","title":"'isPrototypeOf' doesn't return true for classes that extend each other","updatedAt":1427920087000},{"assignedTo":"","body":"Create nuget module to invokeTypescript compiler in C# to compile Typscript code specified in C# strings.","comments":8,"createdAt":1427829837000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/567927?v=3","loggedByName":"mike-ward","milestone":"","number":2565,"state":"closed","title":"Call Typescript Compiler from C#","updatedAt":1427915401000},{"assignedTo":"","body":"Fixes #2538\r\n\r\nThe binder creates two symbols for each exported declaration, one that is local and one that is exported. The local ones have a different symbol flags, to ensure we catch any redefinition, while the exported ones are the ones used afte","comments":0,"createdAt":1427760233000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2553,"state":"closed","title":"Ensure we find export default declaration targets if we search for them by name","updatedAt":1427902304000},{"assignedTo":"","body":"I'm not sure if this is valid ES6 code but I'm trying to get this work:\r\napp.ts\r\n```typescript\r\nimport function1, { function2 } from './module1'\r\n\r\nfunction1()\r\nfunction2()\r\n```\r\nmodule1.ts\r\n```typescript\r\nexport default function function1() {\r\n  con","comments":2,"createdAt":1426845383000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2440,"state":"closed","title":"A ES6 module with with multiple exports including a default export","updatedAt":1427885404000},{"assignedTo":"mhegazy","body":"This would make life a bit easier to build TS projects.","comments":1,"createdAt":1427815366000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/918658?v=3","loggedByName":"ToddThomson","milestone":"TypeScript 1.5","number":2562,"state":"closed","title":"Expose parseConfigFile in Typescript 1.5 API","updatedAt":1427859597000},{"assignedTo":"","body":"Fixes #2562.","comments":1,"createdAt":1427824380000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2563,"state":"closed","title":"Expose readConfigFile and parseConfigFile","updatedAt":1427859587000},{"assignedTo":"mhegazy","body":"```ts\r\n// A.ts\r\nclass A {}\r\nexport = A;\r\n```\r\n```ts\r\n// B.ts\r\nimport A from './A';\r\nexport function getA(): A { return null; }\r\n```\r\n\r\nCommand: `tsd -m amd -t es5 -d B.ts`\r\n\r\nExpected: No error\r\nActual: Crash\r\n\r\n```\r\nError: Debug Failure. False expre","comments":11,"createdAt":1425612973000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"TypeScript 1.5","number":2221,"state":"closed","title":"Debug Failure. False expression: isDeclarationVisible unknown: SyntaxKind: 209","updatedAt":1427859567000},{"assignedTo":"","body":"Fixes #2221","comments":1,"createdAt":1427779209000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2557,"state":"closed","title":"Ensure export= is emitted correctelly in declaration files","updatedAt":1427859555000},{"assignedTo":"vladima","body":"Broken in the last six days. The following was and is okay: \r\n\r\n```ts\r\nvar foo = function(){}\r\nfoo = function(){}\r\n```\r\n\r\nHowever as soon as you split the two into external modules \r\ni.e. `mod1.ts` \r\n```ts\r\nexport var foo = function(){}\r\n```\r\n`mod2.t","comments":2,"createdAt":1427495215000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"TypeScript 1.5","number":2534,"state":"closed","title":"Invalid left hand side of assignment","updatedAt":1427859529000},{"assignedTo":"","body":"","comments":0,"createdAt":1427850729000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2573,"state":"closed","title":"Adding a couple of class tests.","updatedAt":1427853462000},{"assignedTo":"","body":"","comments":2,"createdAt":1427850136000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2572,"state":"closed","title":"Keep comments in debug builds.","updatedAt":1427852072000},{"assignedTo":"","body":"Fixes #2534","comments":2,"createdAt":1427848608000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2569,"state":"closed","title":"revert fix for #2456 'Import namespace exports should be immutable'","updatedAt":1427849703000},{"assignedTo":"","body":"Currently class expressions are not typechecked.  We'll have to figure out how we want to appropriately design things there.\r\n\r\nParsing and emitting of class expressions themselves was not too hard.  The most difficult part was changing things to sup","comments":0,"createdAt":1427835429000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2567,"state":"closed","title":"Add support for parsing and emitting class expressions.","updatedAt":1427849675000},{"assignedTo":"","body":"Currently a type aliased class [cannot be instantiated](https://github.com/Microsoft/TypeScript/issues/2552). Also there is no way to alias a [type with type parameters](https://github.com/Microsoft/TypeScript/issues/1616). Please consider making typ","comments":5,"createdAt":1427797811000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":2559,"state":"open","title":"Suggestion: allow instantiation of type aliases","updatedAt":1427828552000},{"assignedTo":"","body":"The current declaration for the WScript object is missing some members:\r\n\r\n```typescript\r\ninterface ITextReader {\r\n    //incomplete\r\n    Read(characters: number): string;\r\n    ReadAll(): string;\r\n    Close(): void;\r\n}\r\n\r\ndeclare var WScript: {\r\n    E","comments":5,"createdAt":1427612098000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/312166?v=3","loggedByName":"zspitz","milestone":"TypeScript 1.5","number":2540,"state":"closed","title":"WScript variable declaration in lib.d.ts is missing some members","updatedAt":1427824854000},{"assignedTo":"","body":"","comments":4,"createdAt":1427800307000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/312166?v=3","loggedByName":"zspitz","milestone":"","number":2560,"state":"closed","title":"JSDoc for WScript members","updatedAt":1427824774000},{"assignedTo":"","body":"```'\r\nclass A {}\r\ntype B = A;\r\nvar b = new B(); // <--- Cannot find name 'B'.\r\n```","comments":7,"createdAt":1427755886000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":2552,"state":"closed","title":"Type aliases don't work with classes","updatedAt":1427817111000},{"assignedTo":"","body":"Take this example:\r\n\r\n    myFunction(\"something\", (x, y) => { ... });\r\n\r\nWhen the line is edited and then auto-formatted, the space before the lambda is removed, and this is the result:\r\n\r\n    myFunction(\"something\",(x, y) => { ... });\r\n             ","comments":2,"createdAt":1427768695000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4859660?v=3","loggedByName":"JoshMcCullough","milestone":"","number":2555,"state":"closed","title":"Inline lambda spacing incorrect.","updatedAt":1427808256000},{"assignedTo":"","body":"Especially under *nix OSes we saw orphan child processes. Our out of process stuff protects itselfs using the following mechanism:\r\n- we send the parent process id to the server using a configure command\r\n- the server checks from time to time if the ","comments":1,"createdAt":1427472426000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":2529,"state":"open","title":"TSServer should protect itself from crashed parent","updatedAt":1427789863000},{"assignedTo":"","body":"","comments":1,"createdAt":1427783558000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2558,"state":"closed","title":"Remove unsed options","updatedAt":1427785373000},{"assignedTo":"","body":"Pre 1.3, with `--noImplicitAny` flag on, having the following:\r\n```ts\r\ninterface Object {\r\n  [key: string]: any;\r\n}\r\n```\r\nwould enable this type of scenario:\r\n```ts\r\nvar element = document.querySelector(\"#something\");\r\nelement[\"foo\"] = { ... };\r\n```\r","comments":18,"createdAt":1416530673000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6741017?v=3","loggedByName":"jseanxu","milestone":"","number":1232,"state":"closed","title":"noImplicitAny regression in 1.3","updatedAt":1427781249000},{"assignedTo":"yuit","body":"Currently following code \r\n```\r\nfunction foo([a, b, c] : [ string, string, string]) { }\r\n```\r\nget emitted as \r\n```\r\ndeclare function foo(_0: [string, string, string]): void;\r\n```\r\nin .d.ts\r\n\r\nThis emit isn't helpful when consuming the .d.ts in signat","comments":1,"createdAt":1426726017000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.5","number":2421,"state":"closed","title":"Allow Destructing in .d.ts","updatedAt":1427773786000},{"assignedTo":"","body":"If I've defined an interface corresponding to an Automation object:\r\n\r\n```typescript    \r\nmodule Scripting {\r\n    interface FileSystemObject {\r\n        BuildPath(Path: string,Name: string): string\r\n        FileExists(FileSpec: string): boolean\r\n     ","comments":2,"createdAt":1427615881000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/312166?v=3","loggedByName":"zspitz","milestone":"TypeScript 1.5","number":2541,"state":"closed","title":"Enable possibility of strong typing on ActiveXObject via specialized overloads","updatedAt":1427773483000},{"assignedTo":"","body":"... strong types, per #2541.","comments":3,"createdAt":1427765645000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/312166?v=3","loggedByName":"zspitz","milestone":"","number":2554,"state":"closed","title":"Allows extending ActiveXObject with with specialized overloads returning...","updatedAt":1427773449000},{"assignedTo":"","body":"Address #2421","comments":4,"createdAt":1426801861000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2429,"state":"closed","title":"Allow destructuring in ambient","updatedAt":1427759890000},{"assignedTo":"","body":"Add assert to make sure getOccurences at position only returns results for the file we request the occurences for.\r\n\r\nThis should help figure out why #1153 is happening.","comments":0,"createdAt":1426549742000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":2379,"state":"closed","title":"Add assert to make sure getOccurences at position only returns results f...","updatedAt":1427749656000},{"assignedTo":"mhegazy","body":"http://semver.org/\r\n\r\n1. Currently version in source file is `1.4.1.0` the version in package.json is `1.4.1` Can we reconcile these?\r\n1. Also better if we move the `servicesVersion` (`0.4`) to the form `X.Y.Z`, so `0.4.0`.\r\n1. If we need the additio","comments":7,"createdAt":1424922763000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"TypeScript 1.5","number":2144,"state":"closed","title":"Can we move to three digit version numbers `X.Y.Z`","updatedAt":1427747617000},{"assignedTo":"","body":"Fixes #2144","comments":1,"createdAt":1427390083000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2512,"state":"closed","title":"update version number in package.json","updatedAt":1427747598000},{"assignedTo":"","body":"With compiler at HEAD, I often see missing messages in diagnostics. I can provide a minimal repro if you need.\r\n```\r\nangular2/src/facade/collection.es6(18,73): 2345 [object Object]\r\n...\r\nangular2/src/facade/lang.es6(204,12): 2322 [object Object]\r\n```","comments":2,"createdAt":1427733737000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/47395?v=3","loggedByName":"alexeagle","milestone":"","number":2549,"state":"closed","title":"Compile error reporter fails to give message","updatedAt":1427746989000},{"assignedTo":"","body":"If I have this TypeScript:\r\n\r\n````typescript\r\nclass A {\r\n  private read_: boolean = false;\r\n\r\n  public get read (): boolean {\r\n    return this.read_;\r\n  }\r\n};\r\n\r\nvar a = new A();\r\na.read = true;\r\nconsole.log(a.read);\r\n````\r\n\r\nIt generates this JavaSc","comments":2,"createdAt":1427680810000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/178582?v=3","loggedByName":"waywardmonkeys","milestone":"","number":2545,"state":"closed","title":"Read-only properties not handled correctly","updatedAt":1427746747000},{"assignedTo":"jonathandturner","body":"From the Handbook:\r\n_\"For node.js, use --target commonjs; for require.js, use --target amd.\r\nFor example:\r\ntsc --module commonjs Test.ts\"_\r\n\r\nI think it should say --module, not --target.\r\n","comments":1,"createdAt":1427658708000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Docs","name":"Docs","color":"5319e7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6939381?v=3","loggedByName":"robpalme","milestone":"TypeScript 1.5","number":2543,"state":"closed","title":"Documentation:  --module vs --target","updatedAt":1427746594000},{"assignedTo":"ahejlsberg","body":"This compiles and the output is correct.\r\n\r\n```typescript\r\nclass One {\r\n    foo() {\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default One;\r\n```\r\n\r\n```javascript\r\nvar One = (function () {\r\n    function One() {\r\n    }\r\n    One.prototype.foo = function ","comments":0,"createdAt":1427568185000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.5","number":2537,"state":"closed","title":"`export default class` emits non-default export","updatedAt":1427744441000},{"assignedTo":"","body":"Fixes #2537.\r\n\r\nAlso fixes an issue where a generated name wasn't emitted for export default of an unnamed function.","comments":2,"createdAt":1427707944000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":2547,"state":"closed","title":"Export default fixes","updatedAt":1427744441000},{"assignedTo":"","body":"I cannot find any comments on this anywhere on the internet.\r\n\r\nI prefer to name my es6 files something other than *.ts\r\n\r\nThanks,  Maybe some version in the future.","comments":4,"createdAt":1427677094000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8572796?v=3","loggedByName":"kevinpas","milestone":"","number":2544,"state":"closed","title":"Cannot find doc on tsc --in myfile.es6 --out myfile.js","updatedAt":1427743439000},{"assignedTo":"","body":"I got this error:\r\n>Initializer of instance member variable 'objectWithFunc' cannot reference identifier 'param' declared in the constructor.\r\n\r\nfor this piece of code:\r\n```\r\ninterface ITest {\r\n    foo: string;\r\n    bar: string;\r\n}\r\n\r\nvar param: ITes","comments":2,"createdAt":1427724204000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2056282?v=3","loggedByName":"mpawelski","milestone":"","number":2548,"state":"closed","title":"Error: Initializer of instance member variable 'x' cannot reference identifier 'y' declared in the constructor.","updatedAt":1427740358000},{"assignedTo":"","body":"At the moment compiler insists on having valid identifier on right side of `typeof` so following code is not valid:\r\n\r\n```ts\r\nvar x : typeof (1+ 2);\r\nvar y : typeof this;\r\n```\r\n\r\neven though it's possible to assign the expression to variable and then","comments":2,"createdAt":1427639347000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/96032?v=3","loggedByName":"mwisnicki","milestone":"","number":2542,"state":"open","title":"Allow typeof on arbitrary expression","updatedAt":1427739840000},{"assignedTo":"","body":"During error, the message is set on `stdout` but not (also) on `stderr`. This is a change in behavior causes failure to show error message correctly in tools like `grunt-ts`. Is this intended.\r\n\r\nMore details on this bug\r\nhttps://github.com/grunt-ts/","comments":11,"createdAt":1409956253000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1966521?v=3","loggedByName":"bsr203","milestone":"","number":615,"state":"closed","title":"Compilation error is not reported on stderr but stdout only","updatedAt":1427739502000},{"assignedTo":"","body":"Fix a typo in TypeScript Language Specification word docs. Regenerate the spec.md file.","comments":6,"createdAt":1427340705000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1198615?v=3","loggedByName":"zhongsp","milestone":"","number":2502,"state":"closed","title":"doc: fix typo 'BankAccount'","updatedAt":1427738634000},{"assignedTo":"","body":"comment.ts\r\n```\r\nif (false) {\r\n    //I will be removed\r\n}\r\n//I will be removed\r\nelse {\r\n    //I will not be removed\r\n    var tmp;\r\n    //I will be removed\r\n}\r\n\r\ntry{\r\n    //I will not be removed\r\n    var tmp;\r\n    //I will be removed\r\n}\r\n//I will be ","comments":4,"createdAt":1427703275000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10631708?v=3","loggedByName":"WalkMe","milestone":"TypeScript 2.0","number":2546,"state":"open","title":"TypeScript removing comments where it shouldn't","updatedAt":1427734884000},{"assignedTo":"","body":"","comments":6,"createdAt":1427611873000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2539,"state":"closed","title":"Remove experimental flag to cache for-of length checks.","updatedAt":1427696977000},{"assignedTo":"CyrusNajmabadi","body":"We used to keep single line array and object literals on a single line in the emitted output. This appears to have broken recently. Looks like it is related to the new `preserveNewLines` experimental flag. Without this experimental flag, array and ob","comments":4,"createdAt":1427393075000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"TypeScript 1.5","number":2513,"state":"closed","title":"Single line preservation doesn't work for array and object literals","updatedAt":1427612410000},{"assignedTo":"","body":"Fixes: https://github.com/Microsoft/TypeScript/issues/2513\r\n\r\nThis is an alternative approach to https://github.com/Microsoft/TypeScript/pull/2517 .  Instead of only trying to preserve things for array and object literals, we also handle things like ","comments":1,"createdAt":1427402824000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2518,"state":"closed","title":"Always preserve new lines for array and object literals and additional constructs like blocks.","updatedAt":1427612168000},{"assignedTo":"","body":"Regardless of the value of 'preserveNewLines'. \r\n\r\nFixes: https://github.com/Microsoft/TypeScript/issues/2513\r\n\r\nAn alternative approach would be do just remove the preserveNewLines flag, and attempt to preserve in all the other places we handle this","comments":1,"createdAt":1427401517000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2517,"state":"closed","title":"Always preserve new lines for array and object literals.","updatedAt":1427611238000},{"assignedTo":"","body":"This PR fixes the command-line driver to properly dispose file watchers for modified files in -watch mode. We currently don't, which causes node.js to output a diagnostic after 10 watchers have been attached to the same file:\r\n\r\n```\r\nC:\\temp>tsc -w t","comments":1,"createdAt":1427497516000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":2535,"state":"closed","title":"Fix: File watchers not being disposed in -watch mode","updatedAt":1427552343000},{"assignedTo":"","body":"","comments":2,"createdAt":1427487705000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2532,"state":"closed","title":"Allow RWC runner to use default library in built/local/lib.d.ts","updatedAt":1427503646000},{"assignedTo":"","body":"Due to jake-runtests aborts before finishing deletion of projectOutput directory (this is the case when you don't have mocha patch), when comparing baselines, projectOutput directory will be considered in the comparison.","comments":1,"createdAt":1427488207000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2533,"state":"closed","title":"Ignore projectoutput folder since this will be deleted by jake command","updatedAt":1427500414000},{"assignedTo":"","body":"closes https://github.com/Microsoft/TypeScript/issues/2503","comments":11,"createdAt":1427355530000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2505,"state":"closed","title":"chore(services) rename visit to visitNode as visit was given an error","updatedAt":1427494319000},{"assignedTo":"","body":"This probably applies to other third-party, automated build environments as well - but see the issue here:\r\n\r\nhttps://github.com/projectkudu/kudu/issues/721\r\n\r\nBasically, in order to use TypeScript in projects targeting Azure Websites using Kudu as t","comments":10,"createdAt":1421456626000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2381026?v=3","loggedByName":"smithkl42","milestone":"","number":1702,"state":"closed","title":"Better support for Azure/Kudu","updatedAt":1427485379000},{"assignedTo":"","body":"Global operations are currently only done on the first project for a file, namely:\r\n- rename\r\n- find all references\r\n- navigate to\r\n\r\nFor instance if you have three files (a.ts, b.ts, and c.ts) open in the editor, listed below, we create three projec","comments":0,"createdAt":1427480087000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2531,"state":"open","title":"TSServer: global operations should be performed on all projects","updatedAt":1427480096000},{"assignedTo":"","body":"With this PR we *always* ensure that temporary names are unique in the source file. This is cheaper than using `resolveName` to ensure uniqueness, plus it is easier to reason about and safer in cases where we didn't reason right.\r\n\r\nI also combined t","comments":2,"createdAt":1427393634000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":2514,"state":"closed","title":"Simplify temporary name generation logic","updatedAt":1427477065000},{"assignedTo":"","body":"Hi,\r\n\r\nWe've recently developed an enhancement for the grunt-ts plugin that allows targeting a Visual Studio project file for input TS file paths and TS config info rather than having to use `src:` and the other options.  https://github.com/TypeStron","comments":27,"createdAt":1426052956000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3755379?v=3","loggedByName":"nycdotnet","milestone":"","number":2294,"state":"closed","title":"Visual Studio \"No Compile\" option","updatedAt":1427476915000},{"assignedTo":"danquirk","body":"It would be very nice have real extensible row polymorphism in Typescript, that also works with generics.\r\n\r\nSo having type constructions that allow adding and removing 'keys' aka labels.\r\n\r\nI tried adding labels using interfaces, but that does not w","comments":4,"createdAt":1427377030000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2389359?v=3","loggedByName":"Ziriax","milestone":"","number":2509,"state":"closed","title":"Feature request: first-class labels for extensible rows / koka","updatedAt":1427475661000},{"assignedTo":"","body":"To have a better life cycle on the tsserver it should expose an exit/shutdown command. Currently the node process gets either killed or killed by the OS since the parent process goes down.","comments":0,"createdAt":1427471960000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":2528,"state":"open","title":"TSServer should expose exit/shutdown command","updatedAt":1427475322000},{"assignedTo":"","body":"Hopefully my understanding for the purpose of the parameter is correct?\r\n\r\nSee [Expose setParentNodes on createCompilerHost](https://github.com/Microsoft/TypeScript/commit/7462915baf4f4dee29be8c89cff5e01b7b338c30) for the context.","comments":3,"createdAt":1426789634000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"","number":2427,"state":"closed","title":"Comments for setParentNodes","updatedAt":1427462415000},{"assignedTo":"","body":"Hi, I have this code\r\n\r\n```\r\nvar test: number | string;\r\ntest = corrente.censimentoId;\r\nif (typeof test === \"number\") {\r\n    this.editedRecord = test;\r\n}\r\n\r\nif (typeof corrente.censimentoId === \"number\") {\r\n    this.editedRecord = test;\r\n}\r\n```\r\n**co","comments":2,"createdAt":1427454354000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/127777?v=3","loggedByName":"lucamorelli","milestone":"","number":2523,"state":"closed","title":"problem with type guards","updatedAt":1427456713000},{"assignedTo":"","body":"Refers to the code in src/server\r\n\r\nCurrent format options can either globally configured are defined via an open call. Since formatting options can change dynamically (auto detected) or changed without open/closing a file the protocol should support","comments":5,"createdAt":1426863794000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":2443,"state":"closed","title":"Typescript server should support passing format options on format request","updatedAt":1427448205000},{"assignedTo":"","body":"This merges the original changes to the completion list from master to release 1.4.","comments":1,"createdAt":1427398758000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":2515,"state":"closed","title":"Merge changes for the builder property to release-1.4 from master.","updatedAt":1427412255000},{"assignedTo":"","body":"Server its own version of this because tsc always starts from the current\r\ndirectory but the server must start from whatever directory contains the\r\nnewly opened file.","comments":1,"createdAt":1427355488000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4419011?v=3","loggedByName":"steveluc","milestone":"","number":2504,"state":"closed","title":"Fix bug stemming from use of tsc findConfigFile by server.","updatedAt":1427408686000},{"assignedTo":"","body":"Example:\r\n\r\n```\r\nclass Biff {}\r\nclass Bang {}\r\n\r\ninterface Callback {\r\n\t(...biffs: Biff[]);\r\n}\r\n\r\nfunction foo(callback: Callback) {\r\n\tcallback(new Biff(), new Biff());\r\n}\r\n\r\nfoo((x: Biff, y: Bang) => console.log('whoa'));\r\n\r\nfoo((z: string, n: numbe","comments":2,"createdAt":1427356645000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/103348?v=3","loggedByName":"mindplay-dk","milestone":"","number":2506,"state":"closed","title":"Bug? Closure arguments not checked for variable number of arguments","updatedAt":1427403064000},{"assignedTo":"ahmad-farid","body":"It would be great if outlining spans covered multiline comments\r\n\r\n```TypeScript\r\n/**\r\n * Hi\r\n */\r\n```\r\n\r\nas well as something like 3+ consecutive single-line comments, or groups of triple-slashed single-line comments.\r\n\r\n```TypeScript\r\n/// A\r\n/// S\r","comments":2,"createdAt":1411066730000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":698,"state":"open","title":"Collapsable Comments in VS","updatedAt":1427387746000},{"assignedTo":"","body":"This is a follow up pull request from #2468. I followed @steveluc suggestion:\r\n\r\nSo my vote is just provide formatting options on configure, even removing them from open, because the editor may know that the serverâs defaults are correct and because ","comments":6,"createdAt":1427297850000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":2489,"state":"closed","title":"Add full format options to configure request and remove ability from open request","updatedAt":1427369020000},{"assignedTo":"","body":"I see that this works in compiler built from recent sources:\r\n```\r\nexport default A;\r\ninterface A {}\r\n```\r\n\r\nAccording to the ES6 specification, after \"export default\" we only have three options:\r\n1) class declaration\r\n2) hoistable declaration (i.e.,","comments":2,"createdAt":1427299070000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"","number":2490,"state":"closed","title":"Question: top-level interface and ES6 \"export default AssignmentExpression\"","updatedAt":1427361663000},{"assignedTo":"","body":"Based on https://github.com/Microsoft/TypeScript/issues/2486#issuecomment-86114260 I expected it to give me *all* the navigable items in the languageService. \r\n\r\nTest : \r\n```ts\r\nvar items = languageService.getNavigateToItems('');\r\nconsole.log(items);","comments":5,"createdAt":1427336720000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2500,"state":"closed","title":"languageService.getNavigateToItems('') gives 0 items","updatedAt":1427357599000},{"assignedTo":"","body":"We have a concept of elaborating errors when we do relation checking. This means that if you have done a type comparison in a context where you don't want to report errors, and then later you redo the comparison with errors, then you may need to redo","comments":1,"createdAt":1427336820000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2501,"state":"closed","title":"Make elaborateErrors persist throughout type relation checks","updatedAt":1427354440000},{"assignedTo":"","body":"i.e for the entire program, not just a single file. Is there such a function already?","comments":6,"createdAt":1427275821000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2486,"state":"closed","title":"getNavigationBarItems for entire project","updatedAt":1427353683000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\nxyz => x/***/\r\n```\r\n\r\nExpected: `xyz` in completion list.\r\nActual: `xyz` not in completion list.","comments":0,"createdAt":1427229521000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":2483,"state":"closed","title":"Completion at edge of identifier in arrow function does not list items appropriately","updatedAt":1427327981000},{"assignedTo":"","body":"Fixes #2483.\r\n\r\n## Context\r\n\r\nWhen requesting completion off of something that's not a dotted name, we need to traverse the scopes. First we need to grab a node for which we will traverse upwards to aggregate scopes. We call this the `scopeNode`.\r\n\r\n","comments":0,"createdAt":1427319883000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2495,"state":"closed","title":"Use adjusted completion position when at end of identifier","updatedAt":1427327952000},{"assignedTo":"billti","body":"At work we have an embedded old IE8 engine that Works with ES3, and we have made an implementation of the ES6 Map and Set. Those clases have a ```delete``` method, which name is the same as the ```delete``` keyword.\r\nSo the following typescript:\r\n```","comments":3,"createdAt":1426062558000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4521712?v=3","loggedByName":"SergioMorchon","milestone":"TypeScript 1.6","number":2296,"state":"open","title":"delete property of Map, Set... on ES3 target","updatedAt":1427327736000},{"assignedTo":"","body":"```ts\r\nexport *;\r\n```\r\n\r\nTypeError: Cannot read property 'exports' of undefined\r\n    at visit (c:\\ts\\built\\local\\tsc.js:8889:59)\r\n    at c:\\ts\\built\\local\\tsc.js:8894:29\r\n    at Object.forEach (c:\\ts\\built\\local\\tsc.js:602:30)\r\n    at visit (c:\\ts\\bu","comments":1,"createdAt":1426567064000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2383,"state":"closed","title":"Crash when using \"export *\"","updatedAt":1427327632000},{"assignedTo":"","body":"When targeting ES3, we should still emit decorators even though we give an error that they are not supported in ES3.","comments":0,"createdAt":1427325197000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2497,"state":"closed","title":"Emit decorators when --target ES3","updatedAt":1427325229000},{"assignedTo":"","body":"Enclosed a pull request to add signature help support to the TypeScript server. I tried to follow the style I found in the existing code (e.g. expose the language service API, no extra abstraction).\r\n\r\nThere is one thing I left open: I don't know the","comments":7,"createdAt":1427208668000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":2480,"state":"closed","title":"Add signature help to Typescript server","updatedAt":1427321244000},{"assignedTo":"","body":"Currently TypeScripts emits in every file something like this:\r\n\r\n```js\r\nvar __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = ","comments":5,"createdAt":1427279635000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9773803?v=3","loggedByName":"streamich","milestone":"","number":2487,"state":"closed","title":"How to overwrite __extends emitter?","updatedAt":1427317338000},{"assignedTo":"","body":"Can you please reconsider #2487 issue again. Otherwise, TypeScript is currently unusable for web projects.","comments":2,"createdAt":1427315605000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9773803?v=3","loggedByName":"streamich","milestone":"","number":2493,"state":"closed","title":"#2487 __extends","updatedAt":1427316500000},{"assignedTo":"","body":"- const and regular enums use similar rules when evaluating constant expressions. If initializer is not a valid constant expression - this is ok for regular enums but will be an error for const enums.\r\n- is it ok to reference members of other const e","comments":2,"createdAt":1422669899000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1875,"state":"closed","title":"Converge const and regular enums ","updatedAt":1427311799000},{"assignedTo":"","body":"This PR is a proposal to consolidate different ways to generate temp names that we have in the compiler.\r\nIt moves name generation for modules from the checker into the emitter (so pre-pass is not needed) and names can be generated on-demand using tw","comments":9,"createdAt":1426985778000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2455,"state":"closed","title":"Revised name generation","updatedAt":1427311749000},{"assignedTo":"","body":"Question: tsconfig.json appears to be a reasonable way to specify a compilation context. Why isn't it available from the command line? ( tsc -c tsconfig.json ). I would like to be able to use tsconfig.json within a build system ( gulp based ) rather ","comments":2,"createdAt":1427310057000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/918658?v=3","loggedByName":"ToddThomson","milestone":"","number":2492,"state":"closed","title":"tsconfig.json purpose?","updatedAt":1427311726000},{"assignedTo":"","body":"This PR addresses feedback on our design for ES6 module support (see #2242). The primary change is that `export default` and `export =` become separate constructs with different semantics:\r\n\r\n* An `export default` declaration always declares an expor","comments":2,"createdAt":1427060383000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":2460,"state":"closed","title":"Revised ES6 modules","updatedAt":1427306460000},{"assignedTo":"","body":"Please consider the following code:\r\n```\r\ninterface MenuItem{\r\n\tcaption:string;\r\n\thandler: string;\r\n\thandlerFunction?: Function;\r\n}\r\nclass BaseStuff{\r\n\tpublic menu:Array<MenuItem>=[];\r\n\tconstructor (menu:Array<MenuItem>){\r\n\t\tthis.menu=menu;\r\n\t\tthis.p","comments":1,"createdAt":1427295708000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2613874?v=3","loggedByName":"sqlly","milestone":"","number":2488,"state":"closed","title":"Class inheritence: put call to parent constructor after \"fat arrow\" method declarations.","updatedAt":1427303025000},{"assignedTo":"","body":"this brings ES6 module import and export emit into exportEquals branch in preparation of merging it into master.","comments":0,"createdAt":1427140260000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2467,"state":"closed","title":"Merge master into exportEquals","updatedAt":1427302065000},{"assignedTo":"DanielRosenwasser","body":"Version: 1.1.0.1\r\nOS: MacOS\r\n\r\nWhen I call tsc compiler with --watch switch and --outDir with an absolute entrypoint path, and change a file referenced in another folder, instead of outputing to the --outDir folder, it outputs .js files to where the ","comments":12,"createdAt":1415554938000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/570848?v=3","loggedByName":"soywiz","milestone":"TypeScript 1.5","number":1106,"state":"closed","title":"--outDir + --watch + absolute path bug after file changes","updatedAt":1427301327000},{"assignedTo":"","body":"Enclose the pull request. I forgot to put the issue number into the title to get automatic linking :-)","comments":7,"createdAt":1427140553000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":2468,"state":"closed","title":"Pull Request for issue #2443: Typescript server should support passing format options on format requests","updatedAt":1427297870000},{"assignedTo":"","body":"This is going to be a tough one. Consider a poor-man partial application hack:\r\n```\r\ninterface Partial { f: Function; args: any[]; }\r\ninterface Partial0<r> extends Partial { 'know r': r; }\r\ninterface Partial1<a, r> extends Partial0<r> { 'know a': a; ","comments":13,"createdAt":1408500321000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":486,"state":"closed","title":"Suggestion: allow partial applications","updatedAt":1427273126000},{"assignedTo":"","body":"Minimal implementation of Decorators","comments":2,"createdAt":1426627439000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2399,"state":"closed","title":"Minimal implementation of Decorators","updatedAt":1427254346000},{"assignedTo":"CyrusNajmabadi","body":"Started typing out a variable name, incorrectly got `any` as the type:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/972891/6567013/4882fd16-c67e-11e4-871e-937402a5f909.png)\r\n\r\nAccepted the completion, got the correct type:\r\n\r\n![image](https","comments":1,"createdAt":1425945925000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":2278,"state":"closed","title":"Completion item info often reports types as 'any' when quickinfo on the completed item reports otherwise","updatedAt":1427253238000},{"assignedTo":"","body":"A nice feature would be if the TypeScript language understood 'use strict' and made it easy to apply. Although TypeScript can't help regarding the semantics of strict mode, it can help make the code cleaner and prevent a mistyping of the magic string","comments":4,"createdAt":1406599683000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1299073?v=3","loggedByName":"breyed","milestone":"","number":288,"state":"closed","title":"Syntactic 'use strict' support","updatedAt":1427251307000},{"assignedTo":"","body":"Right now this is just a demonstration for how this work could be done.  There is no intent to merge this any time soon.  This PR serves to allows others to see the work and provide constructive comments on the approach taken.","comments":0,"createdAt":1426636656000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2403,"state":"closed","title":"Branch for supporting javascript support in the Language Service.","updatedAt":1427245415000},{"assignedTo":"","body":"Previously, the completion item code in teh LS did something fairly unsafe.  it would cache information about symbols from a previous version of the 'program' (and typechecker), and then attempt to ask questions about those symbols after files had go","comments":1,"createdAt":1427173108000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2475,"state":"closed","title":"Share code between getCompletionsAtPosition and getCompletionEntryDetails.","updatedAt":1427241939000},{"assignedTo":"vladima","body":"Right now, we have two ways of generating a name in the compiler:\r\n\r\n1. `createTempVariable` in the emitter\r\n2. `generateUniqueName` in utilities.\r\n\r\nThe second one can further be split into two callers:\r\n\r\n1. `getGeneratedNamesForSourceFile` in the ","comments":2,"createdAt":1426891969000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2447,"state":"closed","title":"Three ways to generate a name in the compiler","updatedAt":1427236051000},{"assignedTo":"vladima","body":"```ts\r\nvar x;\r\nfunction foo() {\r\n    let x = 0;\r\n    (function () {\r\n        var _x = 1;\r\n        console.log(x); // Prints 1, should print 0\r\n    })();\r\n}\r\n```\r\n\r\nThe rename of the 'let' does not account for the _x declared in the nested function. C","comments":11,"createdAt":1426901863000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2449,"state":"closed","title":"Downlevel for 'let' doesn't account for nested declarations","updatedAt":1427235669000},{"assignedTo":"","body":"Fixes #2456 ","comments":2,"createdAt":1427177061000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2476,"state":"closed","title":"Disallow assignments to imported exports","updatedAt":1427235655000},{"assignedTo":"","body":"This PR uses `isUnknownIdentifier` from the checker to determine if let\\const should be renamed. When new name is generated it will be unique within the set { globals U identifiers-in-file U generated-names  }. Names for temp variables and globally u","comments":3,"createdAt":1427153140000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2471,"state":"closed","title":"Revised name generation #2","updatedAt":1427235618000},{"assignedTo":"","body":"When a file F is opened by the host, the server will now check whether F is configured by a tsconfig.json file and, if so, use the specified project as the context for F.  \r\n\r\nStill TODO, monitor tsconfig.json files for changes and update configurati","comments":2,"createdAt":1426915082000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4419011?v=3","loggedByName":"steveluc","milestone":"","number":2450,"state":"closed","title":"Add support to TypeScript server for tsconfig.json files.","updatedAt":1427233106000},{"assignedTo":"","body":"...ey matched against.","comments":0,"createdAt":1426887138000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2446,"state":"closed","title":"Add a new findReferences API that buckets results with the definition th...","updatedAt":1427232766000},{"assignedTo":"DanielRosenwasser","body":"I just updated to the latest master (1.5) language services code and I noticed that calling getSemanticDiagnostics() for a definition (.d.ts) file is returning an undefined \"diagnostic\". Seems like a possible regression unless I shouldn't be calling ","comments":20,"createdAt":1426978291000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1081904?v=3","loggedByName":"derekcicerone","milestone":"TypeScript 1.5","number":2454,"state":"closed","title":"getSemanticDiagnostics() returns an undefined \"diagnostic\" for definition files","updatedAt":1427230902000},{"assignedTo":"","body":"This reverts commit 19517ac0ddf8e7ed67ee1328f379071d8e8feb51.\r\n\r\nThe impact of this change is that we will now no longer emit in the presence of declaration errors, if the user has noEmitOnError set to true.  \r\n\r\nPerformance-wise, this seems to add a","comments":1,"createdAt":1427152444000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2470,"state":"closed","title":"Revert \"Emit, even in the presence of declaration errors and noEmitOnError","updatedAt":1427225100000},{"assignedTo":"","body":"Fixes https://github.com/Microsoft/TypeScript/issues/2454","comments":2,"createdAt":1427162596000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2473,"state":"closed","title":"Fix issue where getSemanticDiagnostics was returning undefined on a .d.ts file.","updatedAt":1427220874000},{"assignedTo":"","body":"According to Dr. Axel Rauschmayer the modules keywords and functionality proposal are considered final \r\n\r\nhttp://www.2ality.com/2014/09/es6-modules-final.html\r\n\r\nso, since Typescript uses it's own type of import / require, will it be able to do `imp","comments":5,"createdAt":1410562495000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/461084?v=3","loggedByName":"pocesar","milestone":"","number":670,"state":"closed","title":"ES6 Module were finalized","updatedAt":1427220708000},{"assignedTo":"","body":"Based on this [issue](https://github.com/angular/angular.js/issues/11401#issuecomment-84920575):\r\n\r\nCan the transpiler warn you if something like this happens?","comments":2,"createdAt":1427105276000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3855704?v=3","loggedByName":"reppners","milestone":"","number":2462,"state":"closed","title":"Transpiler should error if a static property is declared that the language already defines.","updatedAt":1427220368000},{"assignedTo":"","body":"I don't know if \"derived\" is the correct term, but, currently, I can do something like this:\r\n\r\n```\r\ntype UserID = number;\r\n\r\ntype Timestamp = number;\r\n\r\nvar id = <UserID> 123;\r\n\r\nvar time = <Timestamp> 12345678;\r\n\r\nvar nonsense = id + time;\r\n```\r\n\r\n","comments":3,"createdAt":1427189207000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/103348?v=3","loggedByName":"mindplay-dk","milestone":"","number":2477,"state":"open","title":"Derived types","updatedAt":1427220133000},{"assignedTo":"","body":"See title.","comments":3,"createdAt":1405446047000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.4","number":20,"state":"closed","title":"Suggestion: colorize type names in Visual Studio","updatedAt":1427219527000},{"assignedTo":"yuit","body":"In the process of moving grammar checking to type-checking phase and to preserve existed behavior which is to NOT emit javascript file if there is any problem, all grammar diagnostics have to have \"isEarly\" flag. After the move, we will need to audit","comments":0,"createdAt":1418170929000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.5","number":1421,"state":"closed","title":"Allow emit in the face of early errors","updatedAt":1427219047000},{"assignedTo":"sheetalkamat","body":"![propertynameofdestructuringpattern](https://cloud.githubusercontent.com/assets/8052792/6176624/4061711c-b2b5-11e4-9d48-111744a6d568.gif)\r\n","comments":0,"createdAt":1423774045000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.5","number":2024,"state":"closed","title":"Quickinfo on propertyName of destructuring pattern shows any","updatedAt":1427218678000},{"assignedTo":"","body":"```ts\r\nclass C { }\r\nenum A { X }\r\nC = 0; // Invalid left-hand side of assignment expression.\r\nA.X = 0; // Invalid left-hand side of assignment expression.\r\nA.X++; // The operand of an increment or decrement operator must be a variable, property or in","comments":3,"createdAt":1427162881000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":2474,"state":"open","title":"Invalid left hand side messages are unhelpful","updatedAt":1427218584000},{"assignedTo":"mhegazy","body":"Colorize the usages of interfaces as well as classes are:\r\n![typescript-interfaces](https://cloud.githubusercontent.com/assets/9047283/5096443/74ec2188-6f72-11e4-836d-e5647a3900f2.PNG)\r\n\r\nGreeter is colorized, because it is a class; but HTMLElement a","comments":4,"createdAt":1416346414000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9047283?v=3","loggedByName":"Peter-Juhasz","milestone":"TypeScript 2.0","number":1197,"state":"open","title":"Colorize the usages of interfaces everywhere","updatedAt":1427218258000},{"assignedTo":"","body":"The following code type checks:\r\n\r\n```typescript\r\nclass C\r\n{\r\n\tfoo: number;\r\n}\r\nfunction foo (x : C | Array<C>) : C\r\n{\r\n\tif (x instanceof C)\r\n\t  return x;\r\n\treturn x[0];\r\n}\r\n```\r\nHowever, if we add a type parameter to `C`, the following fails:\r\n```ty","comments":1,"createdAt":1423149812000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/75477?v=3","loggedByName":"hesselink","milestone":"","number":1943,"state":"closed","title":"Type guard fails to narrow type with generic parameters","updatedAt":1427218010000},{"assignedTo":"","body":"**Motivation**\r\n\r\nAssume a generic HTML input element modelled by the following interface:\r\n\r\n```typescript\r\ninterface Input<TValue> {\r\n\r\n    getValue() : TValue;\r\n\r\n    setValue(value: TValue): void;\r\n\r\n    clear(): void;\r\n\r\n    onClick: Event;\r\n   ","comments":5,"createdAt":1426772559000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":2426,"state":"closed","title":"Selectively hiding interface methods","updatedAt":1427217901000},{"assignedTo":"","body":"I recently learned that TypeScript classes inherit static methods *and* fields, which really surprised me! Unlike object instances, static properties aren't set in a constructor, so their static initialization can't be re-run for subclasses. As a res","comments":2,"createdAt":1424386608000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1141042?v=3","loggedByName":"jvilk","milestone":"","number":2082,"state":"closed","title":"Static inheritance behavior is surprising","updatedAt":1427217579000},{"assignedTo":"","body":"ECMAScript defines the basics of the script language, but It doesn't competes with the DOM Level API.\r\n\r\nDOM API goes separately, as for example the level 2 (see http://www.w3.org/TR/DOM-Level-2-Core/).\r\n Some scenarios, mainly Enterprise ones, Works","comments":0,"createdAt":1427213536000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4521712?v=3","loggedByName":"SergioMorchon","milestone":"","number":2481,"state":"open","title":"Create DOM-Level specific dom-version.d.ts","updatedAt":1427217530000},{"assignedTo":"","body":"With internal modules, one can do this:\r\n\r\n```typescript\r\nimport MyType = mymodule.MyType\r\n```\r\n\r\nWith external modules, this is a syntax error:\r\n\r\n```typescript\r\nimport MyType = require('mymodule').MyType;\r\n```\r\n\r\nThe solution is a second import sta","comments":2,"createdAt":1426177774000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"","number":2318,"state":"closed","title":"Cannot import property of external module","updatedAt":1427217490000},{"assignedTo":"","body":"I have 2 .ts files:\r\n\r\n\r\nA.ts\r\n<code>\r\nmodule nx {\r\nclass A { }\r\n}\r\n</code>\r\n\r\nB.ts\r\n<code>\r\nmodule nx {\r\nexport class B { temp = new A(); }\r\n}\r\n</code>\r\n\r\n\r\nIn class B, I get error that class A is not known. I would assume that A should be known as ","comments":1,"createdAt":1424301924000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3153438?v=3","loggedByName":"pankleks","milestone":"","number":2069,"state":"closed","title":"not \"export\" classes not visible inside single module + JS generation issue","updatedAt":1427217359000},{"assignedTo":"","body":"There is a type that is quite interesting in typescript `void | {}`, this type has some unique behavior, everything can be assigned to this type, but the compiler does not infer any property for this type unlike for `{}` that inherits the basic objec","comments":7,"createdAt":1422272225000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":1806,"state":"open","title":"add type-guard for `void`","updatedAt":1427217285000},{"assignedTo":"","body":"I'm working on updating the WinRT.d.ts on DefinitelyTyped, for Windows Store app development, and ran into an issue trying to create this enum which comes from the Windows APIs:\r\n\r\n```ts\r\n            enum ManualFocusDistance {\r\n                Infini","comments":5,"createdAt":1423243617000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1333029?v=3","loggedByName":"jmatthiesen","milestone":"","number":1961,"state":"closed","title":"Can't create an enum with a member named Infinity","updatedAt":1427217257000},{"assignedTo":"","body":"```typescript\r\nfunction bar() {\r\n    return /* this is comment */ 5;\r\n}\r\n\r\nfunction foo() {\r\n    return\r\n        // this is comment\r\n        5;\r\n}\r\n```\r\nResults in:\r\n```javascript\r\nfunction bar() {\r\n    return 5;\r\n}\r\nfunction foo() {\r\n    return;\r\n  ","comments":1,"createdAt":1427208666000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/417406?v=3","loggedByName":"donnut","milestone":"","number":2479,"state":"closed","title":"comment on new line after `return` adds unwanted semicolon","updatedAt":1427215975000},{"assignedTo":"","body":"By adding optional property into the object literal, compilers can potentially give very long error messages. I think it will be more desirable if we could shorten them when there are too many properties","comments":2,"createdAt":1422066369000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1794,"state":"closed","title":"Object Literal Subtyping Error Message","updatedAt":1427215670000},{"assignedTo":"","body":"> This is a suggestion for spec change.\r\n\r\n### Problem\r\n\r\nSometimes type's members could only be applicable with some restrictions of enclosing type parameter (generic type constraints).\r\n\r\nFor instance, this is use case of RxJS:\r\n\r\n```ts\r\nvar xs: Ob","comments":3,"createdAt":1417128011000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1929486?v=3","loggedByName":"Igorbek","milestone":"","number":1290,"state":"open","title":"Type's generic type constraint on member level","updatedAt":1427215572000},{"assignedTo":"","body":"Didn't find this issue.\r\nWill TypeScript allow recursive generic constraints known as CRTP: \r\n\r\n```typescript\r\ninterface B<T extends B> {}\r\n```\r\n\r\nThere is a workaround but it is not nice.\r\n\r\n```typescript\r\ninterface A {\r\n\tf() : void;\r\n}\r\n\r\ninterface","comments":1,"createdAt":1419540805000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1561,"state":"closed","title":"Recursive generic constraint","updatedAt":1427215547000},{"assignedTo":"","body":"# Proposal\r\nYou simply do `require('typescript').register()` and then all `require` calls e.g. `var foo = require('./foo')` would load `foo.ts` if `foo.js/json/etc` are not found.\r\n\r\nThis would mean we would compile in-memory and completely skip all ","comments":0,"createdAt":1422400139000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1823,"state":"open","title":"Support `register` to allow users to just require `.ts` files","updatedAt":1427215511000},{"assignedTo":"","body":"Feature proposal:\r\n-----------------------\r\n\r\nA new flag in &lt;reference>:\r\n\r\n/// &lt;reference path=\"...\" ambient=\"true\" />\r\n\r\nThe effect of this flag would be to treat the referenced code as an ambient declaration, even if contains implementation ","comments":14,"createdAt":1421818979000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8186628?v=3","loggedByName":"stanvass","milestone":"","number":1753,"state":"open","title":"Ability to reference code as a declaration (ambient)","updatedAt":1427215476000},{"assignedTo":"","body":"This is very odd but I have 17 projects in my solution and one of them contains a number of typescript files that define a number of common classes and interfaces.  These are all referenced using a _references.d.ts file.  About 3 of my other projects","comments":2,"createdAt":1410343942000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2872785?v=3","loggedByName":"Anupheaus","milestone":"","number":642,"state":"closed","title":"Unable to get property 'isError' of undefined or null reference","updatedAt":1427215334000},{"assignedTo":"","body":"Hi Team,\r\nI've created project from template Type Script/Html Application with TypeScript.  Just complied the app and try to debug  it first time  F5. Before page is open visual studio shows following modal window.  \r\n\r\nMicrosoft Visual Studio\r\n Scri","comments":5,"createdAt":1411638171000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6492337?v=3","loggedByName":"ZeoxZeos","milestone":"","number":747,"state":"closed","title":" breakpoint will not currently be hit. No symbols have been loaded for this document","updatedAt":1427215325000},{"assignedTo":"","body":"All of a sudden when trying to compile (version 1.0.1.0) I am now getting:\r\n\r\ntsc.js(50021, 33) JavaScript runtime error : Unable to get property 'type' of undefined or null reference","comments":5,"createdAt":1415731709000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4699528?v=3","loggedByName":"DavidThi808","milestone":"","number":1126,"state":"closed","title":"tsc.js(50021, 33) JavaScript runtime error : Unable to get property 'type' of undefined or null reference","updatedAt":1427215301000},{"assignedTo":"","body":"The project has multiple .ts files which are listed along with other compiler flags in a .txt file. There are two files - one to compile the .js file and one to compile the .d.ts file. They look like this:\r\n\r\n//.js compiler flags\r\n--out {path}\\{filen","comments":3,"createdAt":1417690071000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10137?v=3","loggedByName":"ghost","milestone":"","number":1365,"state":"closed","title":"tsc compiles d.ts files to as JavaScript","updatedAt":1427215068000},{"assignedTo":"","body":"I have the following setup:\r\nsources\\\r\n-- main.ts\r\n---- library\\\r\n-------- config\\base.ts\r\n-------- test\\spec.ts\r\n-------- typings\\\r\n-------------- tsd.d.ts\r\n-------------- lodash\\lodash.ts\r\nmain.ts:\r\n```\r\nimport config = require(\"./library/config/ba","comments":1,"createdAt":1420400885000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9290851?v=3","loggedByName":"alpeshgaglani","milestone":"","number":1591,"state":"closed","title":"duplicate identifier error when importing a file that references typings from an inner directory","updatedAt":1427215059000},{"assignedTo":"","body":"Basically, we won't get the correct sig help until we hit the comma.\r\n________________\r\n\r\n### Example 1\r\n\r\n```TypeScript\r\ndeclare function f(strs: string[], n: number, n1: number);\r\ndeclare function f(strs: string[], s: string, s2: string);\r\n```\r\n\r\nW","comments":3,"createdAt":1415837968000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1137,"state":"closed","title":"Signature help doesn't update appropriately when first parameter is an array","updatedAt":1427214881000},{"assignedTo":"","body":"0x80070005 - JavaScript runtime error: Access is denied.this.addExtension(\"Microsoft.VisualStudio.Web.BrowserLink.SourceMappingExtensionFactory\",\r\n\r\nreceiving this error since installing TypeScript 1.4\r\n","comments":4,"createdAt":1421750010000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10248943?v=3","loggedByName":"v-vairam","milestone":"","number":1738,"state":"closed","title":"typescript 1.4 0x80070005 - JavaScript runtime error: Access is denied.","updatedAt":1427214871000},{"assignedTo":"","body":"There are numerous places where the code just fallsthrough a different case like here:\r\nhttps://github.com/Microsoft/TypeScript/blob/02d0b024c695f059fb8209e301b30f80fddc3d08/src/compiler/checker.ts#L646 or here https://github.com/Microsoft/TypeScript","comments":13,"createdAt":1407437107000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"Community","number":393,"state":"open","title":"Switch case fallthrough","updatedAt":1427214595000},{"assignedTo":"","body":"This issue tracks the set of breaking changes that result from the change to union types #824 to implement the suggestion #805. The issues here will be formalized further once an official spec update is done, until then it will mostly serve as an eas","comments":4,"createdAt":1412902893000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.4","number":868,"state":"closed","title":"Breaking changes associated with Union Types","updatedAt":1427214559000},{"assignedTo":"","body":"Hi there,\r\n\r\nI installed 1.3 yesterday and my application no longer compiles correctly. Here's an example:\r\n\r\n**TS Input**\r\nimport a = require(\"../dir1/file1\");\r\nimport MongoClient = require('mongodb');\r\nimport b = require('../dir1/file2');\r\nimport c","comments":4,"createdAt":1415983134000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1275610?v=3","loggedByName":"midknight41","milestone":"","number":1164,"state":"closed","title":"JS output does not contain all of the require statements","updatedAt":1427214547000},{"assignedTo":"","body":"```ts\r\nvar obj = { foo() { } };\r\n```\r\nemits as\r\n```js\r\nvar obj = { foo: function () {\r\n} };\r\n```\r\n\r\nNote the extra newline","comments":7,"createdAt":1420582606000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1608,"state":"closed","title":"Emit format for methods and accessors in object literals","updatedAt":1427214540000},{"assignedTo":"","body":"```javascript\r\nmodule foo {\r\n\texport function on(event: string|Event) {\r\n\t\tif (typeof event === \"string\") {\r\n\t\t\tevent = new Event(event) // (a)\r\n\t\t\tevent = new Event(String(event)) // (b)\r\n\t\t}\r\n\r\n\t\tconsole.log(event.target) \r\n\t}\r\n\r\n\tclass Event {\r\n\t\t","comments":9,"createdAt":1422905929000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":1892,"state":"closed","title":"Type guard question","updatedAt":1427214526000},{"assignedTo":"","body":"External module declaration allows specifying `export = <something>`\r\n\r\nAt the moment TypeScript allows `<something>` to be an interface. However, it can only be an interface in the top-level scope, not interface nested in an internal module.\r\n\r\nHere","comments":1,"createdAt":1425400778000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"","number":2190,"state":"closed","title":"\"export = <interface>\" works for simple interfaces, but fails for nested interfaces","updatedAt":1427214509000},{"assignedTo":"","body":"As seen in the test code below the function `newTest` only accepts a `number` value, even though the `interface` says it should accept `number` or `number[]`\r\n\r\n```ts\r\nvar _ = {\r\n\tcurry: (fn: Function) => {return fn} \r\n}\r\n\r\ninterface Test {\r\n\t(val: s","comments":9,"createdAt":1424208850000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3173098?v=3","loggedByName":"jon49","milestone":"","number":2059,"state":"closed","title":"Curried interface functions only return single interface type","updatedAt":1427214495000},{"assignedTo":"","body":"By targeting to ES3, the following code (within a class definition):\r\n``` typescript\r\n\t\tsetOptionDisable(option: HTMLOptionElement, operation: EnumOperations) {\r\n            ko.applyBindingsToNode(option,\r\n\t\t\t\t{\r\n\t\t\t\t\tdisable: BI_OP.has(operation)? t","comments":5,"createdAt":1426689376000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4521712?v=3","loggedByName":"SergioMorchon","milestone":"","number":2410,"state":"open","title":"Create ES3 specific lib.d.ts","updatedAt":1427213098000},{"assignedTo":"","body":"refs : https://github.com/TypeStrong/atom-typescript/issues/206 \r\n\r\nFor the people that use `--out` they will need some way to easily specify the ordering of files (in some place other than `files`) like they do in visual studio using `_reference.ts`","comments":3,"createdAt":1427157640000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2472,"state":"closed","title":"Plan for `_reference.ts` in tsconfig.json","updatedAt":1427170003000},{"assignedTo":"","body":"```ts\r\ninterface I {\r\n    foo; // This is the only current result\r\n}\r\n\r\nfunction fun(): I {\r\n    var foo; // This should also be a result\r\n    return { foo };\r\n}\r\n\r\nfun().foo; // go to def on foo\r\n```\r\n\r\nThe var should be shown as a definition.","comments":2,"createdAt":1426811826000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2436,"state":"closed","title":"Go to definition does not go through shorthand properties","updatedAt":1427163213000},{"assignedTo":"","body":"PR https://github.com/Microsoft/TypeScript/pull/962 was reverted in commit https://github.com/Microsoft/TypeScript/commit/e179e0565cfb90c30dc219e49599547948bb2e10. This PR aims to fix the reported issues.\r\n\r\nRefer to GitHub's [dealing with line endin","comments":7,"createdAt":1414533136000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1058243?v=3","loggedByName":"jedmao","milestone":"","number":981,"state":"closed","title":"Introduce .gitattributes file","updatedAt":1427160336000},{"assignedTo":"","body":"We're reverting to the previous behavior we had until there is more consensus\r\non the best way to deal with this issue.","comments":2,"createdAt":1427085839000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2461,"state":"closed","title":"Emit, even in the presence of declaration errors and noEmitOnError.","updatedAt":1427152260000},{"assignedTo":"billti","body":"Short version: Generated JS files should be added to _references.js so that IntelliSense and related IDE features work as expected from JS files in projects that mix TS and JS code.\r\n\r\nLonger version:\r\nI've started converting some core files of my pr","comments":0,"createdAt":1427134268000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273646?v=3","loggedByName":"BrandonLive","milestone":"","number":2464,"state":"open","title":"VS 2013: Generated JS files should be added to _references.js so Intellisense works from JS files","updatedAt":1427151136000},{"assignedTo":"","body":"This is in reference to https://github.com/Microsoft/TypeScript/commit/bd4d7fc9eedfb905313b173e284eddf95350e7dc#commitcomment-10328068\r\n\r\nWhen targeting ES6, we emit the static properties of a class after the class itself. However, given the double b","comments":2,"createdAt":1427010603000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2457,"state":"closed","title":"ES6 classes with statics need to be renamed","updatedAt":1427150219000},{"assignedTo":"vladima","body":"Right now we can write code like this in C#:\r\n```\r\nenum EnumA\r\n    {\r\n        Foo = 1\r\n    }\r\n\r\n    enum EnumB\r\n    {\r\n        Foo = EnumA.Foo,\r\n        Bar = 1\r\n    }\r\n```\r\nand in Typescript we can simulate that with this code:\r\n```\r\nenum EnumA {\r\n ","comments":4,"createdAt":1422153890000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2056282?v=3","loggedByName":"mpawelski","milestone":"TypeScript 1.5","number":1797,"state":"closed","title":"Use const enum values in enum declarations member initializer.","updatedAt":1427148437000},{"assignedTo":"","body":"Just a suggestion, but it would be very cool if one could create a TypeScript Library project to contain nothing but TypeScript files, which would compile to a single JavaScript file that could then be linked from other projects. Maybe have a Definit","comments":1,"createdAt":1427137929000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6677347?v=3","loggedByName":"vivmaha","milestone":"","number":2466,"state":"closed","title":"TypeScript Library project type in Visual Studio","updatedAt":1427140838000},{"assignedTo":"","body":"It would be great, if you could also control the indentation etc. of the output javascript files.","comments":5,"createdAt":1426841559000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/916076?v=3","loggedByName":"sclausen","milestone":"","number":2438,"state":"closed","title":"specify output formatting options","updatedAt":1427131343000},{"assignedTo":"","body":"EDIT: My bad. Some modules had the same name.\r\n\r\n---\r\n\r\n`error TS2300: Duplicate identifier 'A'.`\r\n\r\n```\r\nexport module Foo {\r\n  export class A {\r\n    ..\r\n  }\r\n}\r\n\r\nexport module Bar {\r\n  export class A {\r\n    ..\r\n  }\r\n}\r\n```","comments":0,"createdAt":1426954202000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/281413?v=3","loggedByName":"vjpr","milestone":"","number":2453,"state":"closed","title":"Duplicate identifier when classes with same name are defined in different modules","updatedAt":1427130808000},{"assignedTo":"","body":"Type Assertions are compile time only.\r\n\r\nIt would be helpful to have a concise way to have a compile time type assertion be checked at run time.\r\n\r\nThe language spec gives the example:\r\n```typescript\r\nvar shape = createShape(shapeKind);\r\nif (shape i","comments":6,"createdAt":1426877182000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11356467?v=3","loggedByName":"neilgalarneau","milestone":"","number":2444,"state":"closed","title":"Suggestion: a Type Assertion that asserts at run time","updatedAt":1427130274000},{"assignedTo":"","body":"If they are supposed to be emitted, they are un-typed.\r\n\r\nSeen in 1.4.1 and master.\r\n\r\nExample:\r\n\r\nTest.ts:\r\n```\r\nclass Test {\r\n    private static BAR: string = 'BAR';\r\n    private _foo: string = 'foo';\r\n}\r\nexport = Test;\r\n```\r\n\r\n`tsc -d --target ES5","comments":3,"createdAt":1427119497000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5741321?v=3","loggedByName":"mtraynham","milestone":"","number":2463,"state":"closed","title":"Private members being emitted to definition file","updatedAt":1427120802000},{"assignedTo":"DanielRosenwasser","body":"Support ES6-style template strings\r\n\r\nhttp://tc39wiki.calculist.org/es6/template-strings/\r\n\r\nTo be determined: Can we generate code for pre-ES6 targets? What does that look like?","comments":14,"createdAt":1405444006000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Blog","name":"Blog","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":13,"state":"closed","title":"Suggestion: string interpolation","updatedAt":1427103196000},{"assignedTo":"","body":"In C# I can get the string name of an enum just by doing, e.g. Color.Red.toString(). But in TypeScript this compiles to, e.g. 0.toString() which is almost certainly not what's intended.\r\n\r\n","comments":3,"createdAt":1426734710000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5364225?v=3","loggedByName":"wizofaus","milestone":"","number":2425,"state":"closed","title":"enum.toString() shouldn't compile to {int}.toString()","updatedAt":1427092320000},{"assignedTo":"","body":"I have two projects and each of them has https://github.com/borisyankov/DefinitelyTyped/blob/master/requirejs/require.d.ts file included. While compiling them with TS 1.4 I got 55 errors of \"Duplicate identifier '[member_name]'\".\r\nHow I can eliminate","comments":3,"createdAt":1427058331000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5366785?v=3","loggedByName":"ruslanmogilevskiy","milestone":"","number":2459,"state":"closed","title":"Duplicate identifier with d.ts","updatedAt":1427081892000},{"assignedTo":"","body":"","comments":0,"createdAt":1426895381000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2448,"state":"closed","title":"Treat 0x0085 as whitespace, not as a line terminator.  This matches ES5 and ES6.","updatedAt":1427002631000},{"assignedTo":"","body":"Creating and sharing pure typescript code has quite a few barriers that seem like the kind of complexity that TypeScript should be helping to alleviate.\r\n\r\nI'm going through a situation right now where I want to share a pure typescript library and - ","comments":27,"createdAt":1426185674000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/115199?v=3","loggedByName":"atrauzzi","milestone":"","number":2327,"state":"closed","title":"Greatly improve code sharing and reuse options","updatedAt":1426970187000},{"assignedTo":"","body":"I was just working with Big.js and tried to pass a union type into its constructor function.  It seems that union types don't play nice with old-style overloaded constructors.  Please consider the code below that errors with TypeScript 1.4.  I would ","comments":13,"createdAt":1422250371000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3755379?v=3","loggedByName":"nycdotnet","milestone":"","number":1805,"state":"open","title":"Union types not working with old-style overloads","updatedAt":1426869870000},{"assignedTo":"","body":"Example\r\n=======\r\n\r\n```typescript\r\nfunction test(element: HTMLElement);\r\nfunction test(selector: string);\r\nfunction test(elementOrSelector: HTMLElement|string) {\r\n\tvar element: HTMLElement, initialText = '';\r\n\t\r\n\tif (typeof elementOrSelector === 'str","comments":1,"createdAt":1426852545000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8356617?v=3","loggedByName":"toothbrush7777777","milestone":"","number":2442,"state":"closed","title":"TypeScript doesn't check multiple method definitions correctly","updatedAt":1426869327000},{"assignedTo":"","body":"","comments":0,"createdAt":1426809437000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2431,"state":"closed","title":"No emit should happen if there are declaration errors and noEmitOnErrors is specified.","updatedAt":1426825438000},{"assignedTo":"","body":"Hi,\r\n\r\nThe set-up we currently have for managing a large number of projects in Visual Studio is the following:\r\n\r\n* Ensure each project generates a `.d.ts` file in an output directory.\r\n* If project **A** depends on the types in project **B** then [c","comments":1,"createdAt":1425290395000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":2180,"state":"open","title":"Provide an Add Reference feature for Visual Studio projects","updatedAt":1426825304000},{"assignedTo":"","body":"This one has potential for issues, but for certain type implementations, overriding the default implicit boolean conversion for Object types might be useful. There are a few cases. Let's use a type ```Maybe<T>``` as our canonical example, we want the","comments":8,"createdAt":1417190647000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/554424?v=3","loggedByName":"Eyas","milestone":"","number":1296,"state":"closed","title":"Support some level of implicit boolean conversion","updatedAt":1426812652000},{"assignedTo":"vladima","body":"* have two external modules (a.ts which defines and exports an enum, b.ts which uses the enum)\r\n* emit the JS code for b.ts\r\n* emit the JS code for a.ts and notice that the enum reference is inlined (```console.log(0 /*A*/);```)\r\n* change a.ts and em","comments":4,"createdAt":1420476147000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"TypeScript 1.5","number":1599,"state":"closed","title":"LS#getEmitOutput misses constant enum values on second emit","updatedAt":1426805347000},{"assignedTo":"","body":"```ts\r\nmodule M1 {\r\n    export function foo(x: IFoo) { }\r\n    export interface IFoo {\r\n        x;\r\n    }\r\n}\r\n\r\nmodule M2 {\r\n    interface IFoo {\r\n        y;\r\n    }\r\n    import alias = M1;\r\n    var ifoo2: IFoo;\r\n    alias.foo(ifoo2);\r\n}\r\n```\r\n\r\nThe ca","comments":2,"createdAt":1426731396000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2423,"state":"closed","title":"Error list and quick info are not consistent with alias display behavior","updatedAt":1426794491000},{"assignedTo":"","body":"Generates the referenced import declarations into the .d.ts file. \r\n","comments":2,"createdAt":1423626100000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":2008,"state":"closed","title":"Declaration emit for es6 import syntax","updatedAt":1426794360000},{"assignedTo":"","body":"Per #2183:\r\n- apply constant folding to initializers of all enum kinds\r\n- inline property\\index access only for const enums\r\n\r\nPer #1797\r\n- allow constant members of other enum types to be used in enum member initializers","comments":1,"createdAt":1425486212000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2199,"state":"closed","title":"Enum cleanup","updatedAt":1426789631000},{"assignedTo":"","body":"tsc 1.4.1.0 fires error for the following code:\r\n\r\n```js\r\nvar c: string[]|string = 'a';\r\nif (typeof c === 'string') {\r\n    c = 'b'; // this assignment makes type of c become string[]|string again.\r\n    var s: string = c; // error: Type 'string | stri","comments":2,"createdAt":1425655606000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1684137?v=3","loggedByName":"duanyao","milestone":"","number":2228,"state":"closed","title":"Assignment to a narrowed union type variable makes it un-narrowed","updatedAt":1426788678000},{"assignedTo":"","body":"When creating and using an enum (TypeScript 1.4, Visual Studio 2013). When I build the project the enum value is compiled to a number, but if I save the file the compiled output is the full name of the enum. For example:\r\n\r\n```typescript\r\n// enum.ts\r","comments":1,"createdAt":1426728011000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9488858?v=3","loggedByName":"amg-argh","milestone":"","number":2422,"state":"closed","title":"Using Enum in a separate file, inconsistently compiles on save vs project build","updatedAt":1426782503000},{"assignedTo":"","body":"This PR adds a basic control flow analysis to typescript compiler. Now it can detect unreachable code, implicit returns of undefined in functions, unused labels, fall- through between cases in switch statements. Some of these checks can be used in #3","comments":4,"createdAt":1417046650000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1287,"state":"open","title":"Simple control flow analysis ","updatedAt":1426778843000},{"assignedTo":"","body":"I'm aware of the following syntax, where member declaration gets rolled into the constructor signature:\r\n\r\n```Typescript\r\nclass Foo {\r\n    constructor(public bar: string) {}\r\n}\r\n```\r\n\r\nI would strongly prefer the C# style `this.` syntax, e.g.:\r\n\r\n```","comments":4,"createdAt":1426431104000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/103348?v=3","loggedByName":"mindplay-dk","milestone":"","number":2364,"state":"closed","title":"Feature: C# style `this.` property initialization in constructor()","updatedAt":1426777386000},{"assignedTo":"danquirk","body":"Please enable \"line numbers\" as a default for the code editor.\r\n\r\nThis is a duplicate of https://github.com/Microsoft/visualfsharp/issues/304 and https://github.com/dotnet/roslyn/issues/1222, but we think it should be done for all languages (see http","comments":15,"createdAt":1426185193000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/57396?v=3","loggedByName":"forki","milestone":"","number":2325,"state":"open","title":"Line numbers are not enabled as default","updatedAt":1426753960000},{"assignedTo":"DanielRosenwasser","body":"```typescript\r\nlet x = {\r\n    foo\r\n}\r\n```\r\n\r\nenable dev mode, put the cursor on `foo` and hit F12.\r\n**Expected**: message box with text 'Cannot navigate to symbol under the caret'\r\n**Actual**: Assert message box with the text\r\n\r\n>--------------------","comments":1,"createdAt":1426569398000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.5","number":2384,"state":"closed","title":"Assert in dev mode with doing GotoDef on shorthand property","updatedAt":1426733866000},{"assignedTo":"","body":"Fixes #2384.","comments":3,"createdAt":1426715110000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2415,"state":"closed","title":"Fixed crash on goToDef when a shorthand property refers to an undefined entity","updatedAt":1426728715000},{"assignedTo":"","body":"Hi, i have a typescript file which provide string translations for Italian in my solution, when i compile the solution, i got follow compile errors:\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\r\nError\t\tBuild: Cannot read file 'D:/workdir/devunits/s","comments":2,"createdAt":1426726000000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1563537?v=3","loggedByName":"franksoong","milestone":"","number":2420,"state":"closed","title":"Unsupported file encoding","updatedAt":1426726426000},{"assignedTo":"JsonFreeman","body":"This change courtesy @JsonFreeman who is trying it out\r\n\r\n(context elided: widening of function expression return types)\r\n\r\nThe problem with this widening is observable in type argument inference and no implicit any. For type argument inference, we a","comments":1,"createdAt":1406234403000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":241,"state":"open","title":"Don't widen return types of function expressions","updatedAt":1426726237000},{"assignedTo":"","body":"Courtesy of @JsonFreeman \r\n\r\n```\r\nfunction f<T>(t: T): T { return null }\r\nf(null);\r\n```\r\n\r\nWhen compiling with -noImplicitAny, we don't get an error here, even though T is implicitly inferred to be any when we call f\r\n","comments":4,"createdAt":1409085878000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":531,"state":"open","title":"Widening after inferring null or undefined for a type parameter should be an implicit any","updatedAt":1426726154000},{"assignedTo":"","body":"When you run `jake tsc-instrumented` in a clean environment, it fails because lib.d.ts is not placed in built\\local. This change places it in built\\local before tsc-instrumented","comments":1,"createdAt":1426724693000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2419,"state":"closed","title":"Add libraryTargets to prereqs of instrumenter","updatedAt":1426725849000},{"assignedTo":"mhegazy","body":"Source:\r\n\r\n```ts\r\n// foo.ts\r\nvar foo = {};\r\nexport = foo;\r\n```\r\n```ts\r\n// bar.ts\r\nimport foo from './foo';\r\nexport = foo;\r\n```\r\n\r\nCommand line: `tsc -m amd -t es5 -d foo.ts bar.ts`\r\n\r\nExpected output of bar.d.ts:\r\n\r\n```ts\r\nimport foo from './foo';\r\ne","comments":5,"createdAt":1425609620000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"TypeScript 1.5","number":2220,"state":"closed","title":"ES6 imports not emitted in declaration files","updatedAt":1426723075000},{"assignedTo":"","body":"","comments":2,"createdAt":1426721932000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2417,"state":"closed","title":"extract declaration emitter to separate file (part 2)","updatedAt":1426723058000},{"assignedTo":"","body":"I've tried to keep the code intact, all changes are basically just moving functions around. Code that is shared between declaration emitter and emitter is placed in 'utilities.ts'","comments":5,"createdAt":1426195790000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2329,"state":"closed","title":"extract declaration emitter to a separate file","updatedAt":1426721984000},{"assignedTo":"DanielRosenwasser","body":"```ts\r\nmodule M {\r\n    export const enum E { }\r\n}\r\n```\r\nTry to find occurrences for the const keyword:\r\n\r\nError: Debug Failure. False expression: \r\n   at assert (:1190:17)\r\n   at fail (:1195:13)\r\n   at getFlagFromModifier (:30067:29)\r\n   at getModifi","comments":1,"createdAt":1426621219000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2397,"state":"closed","title":"Crash in getOccurrences for const enum","updatedAt":1426720174000},{"assignedTo":"","body":"Fixes #2397.","comments":1,"createdAt":1426712980000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2413,"state":"closed","title":"Fix getOccurrences for 'const' modifier with exported & ambient declarations","updatedAt":1426720114000},{"assignedTo":"yuit","body":"Destructuing is not handled correctly (either object literal or array binding pattern) in during declaration emit.\r\n\r\nEg.\r\n```TypeScript```\r\nvar { a, b } = { a: \"10\", b: 10 };\r\n```\r\n\r\nGenerates\r\n```TypeScript```\r\ndeclare var { a, b }: any;\r\n```\r\n\r\nEx","comments":2,"createdAt":1423770140000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.5","number":2023,"state":"closed","title":"Declaration file generated for destructuring elements is incorrect.","updatedAt":1426717050000},{"assignedTo":"DanielRosenwasser","body":"```ts\r\ninterface I<TString, TNumber> {\r\n    [s: string]: TString;\r\n    [s: number]: TNumber;\r\n}\r\n\r\ndeclare function foo<TString, TNumber>(obj: I<TString, TNumber>): { str: TString\r\n```\r\n\r\nTrigger a completion list at the end of the TString reference ","comments":1,"createdAt":1421278838000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":1674,"state":"closed","title":"Type parameter does not appear in completion list for unfinished object type in return position","updatedAt":1426716559000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\nfunction getAllFiles(rootFileNames: string[], filesByName: ts.Map<FileInfo>) {\r\n    var processedFiles = rootFileNames.map(fileName => ts.preProcessFile(\r\n}\r\n```\r\n\r\nRight now, if I request a completion list after the `ts.preProcessFile","comments":1,"createdAt":1418087559000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":1410,"state":"closed","title":"Arrow function parameters do not show in completion list when in an unclosed call site","updatedAt":1426716551000},{"assignedTo":"DanielRosenwasser","body":"The completion list should include T at the end of the line in the following case:\r\n```ts\r\nfunction f<T>(x: T\r\n```\r\n\r\nNote that this works if you add a closing paren to finish the parameter list.","comments":2,"createdAt":1418178936000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":1429,"state":"closed","title":"A type parameter does not appear as a completion item for an unfinished signature","updatedAt":1426716545000},{"assignedTo":"","body":"Fix following issue #2023.\r\n\r\nAdditional suggestion regarding emitting destructing in declaration file is allow destructuring in parameter position in ambient context so that language service can provide better signature help using information from .","comments":2,"createdAt":1426634596000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2401,"state":"closed","title":"Fix emit destructuring in declaration file","updatedAt":1426716481000},{"assignedTo":"DanielRosenwasser","body":"Consider the following code:\r\n\r\n```TypeScript\r\np/**/\r\n\r\nfunction fun(param) {\r\n    let pants = Math.random() < 0.99;\r\n}\r\n```\r\n\r\nIf you request completion at `/**/`, you are inappropriately suggested both `param` and `pants`.\r\n\r\nThis is because we use","comments":0,"createdAt":1426035474000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":2292,"state":"closed","title":"Completion prior to any node gives completions for entities within a node","updatedAt":1426716399000},{"assignedTo":"","body":"Handles #2023","comments":0,"createdAt":1423777109000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":2025,"state":"closed","title":" Declaration emit fixes for binding pattern in variable statements ","updatedAt":1426715106000},{"assignedTo":"","body":"This PR is an aggregation of #2008 and #2025 and subsumes them.","comments":4,"createdAt":1424900024000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2139,"state":"closed","title":"Exports + .d.ts emit","updatedAt":1426715105000},{"assignedTo":"","body":"If you are using createCompilerHost to create a program, there is no way to set the parent nodes. expose the value on the host creation function.","comments":1,"createdAt":1426713197000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2414,"state":"closed","title":"Expose setParentNodes on createCompilerHost","updatedAt":1426714504000},{"assignedTo":"","body":"This PR uses a different mechanism for getting the scope of completion by looking at the *context token* (here called the `previousToken`). We then climb up the AST through parent references from that token and find a node that \"embraces\"/\"encompasse","comments":2,"createdAt":1426620856000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2396,"state":"closed","title":"Better completions in incomplete constructs","updatedAt":1426713065000},{"assignedTo":"yuit","body":"```TypeScript\r\n// [a.ts]\r\nvar a = { y: 1, get x() { return 2; }, z: 3 };\r\n\r\n// [a.js]\r\nvar a = { y: 1, get x() { return 2; }, z: 3 }; // throws in IE11: \"Expected ;\"\r\n```\r\n\r\nConsise get/set accessor methods on object literals are not supported in ES5","comments":0,"createdAt":1426708828000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"TypeScript 1.5","number":2412,"state":"closed","title":"Incorrect emit for accessors on object literals for ES5","updatedAt":1426710768000},{"assignedTo":"","body":"It was accident i encounter this issue. \r\nif i have a typescript file as follows\r\nmodule myMoudle {\r\ninterface iTest {\r\n\t\r\n\tt2:iTest;\r\n\tx3:number;\r\n}\r\n\r\nclass test implements iTest {\r\n\tt2: iTest;\r\n\tx3: number;\r\n\tconstructor(){\r\n\t\tthis.t2 = new test()","comments":1,"createdAt":1426694938000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1494856?v=3","loggedByName":"dsenthilraj","milestone":"","number":2411,"state":"closed","title":"If you have comment at the end of typescript file, Javascript generation contains Typescript code","updatedAt":1426699541000},{"assignedTo":"","body":"```ts\r\nvar { person: { name, id } } = { person: { name: \"hi\", id: 100 } };\r\n```\r\nGet quick info on the word `person` on the right side of the assignment. You get the correct type `{ name: string; id: number }`. You also get the kind 'property' and th","comments":1,"createdAt":1426641672000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2405,"state":"closed","title":"Quick info for property name in a destructuring binding element is wrong","updatedAt":1426696920000},{"assignedTo":"","body":"![image](https://cloud.githubusercontent.com/assets/1106823/6637675/3a422818-c975-11e4-9203-4dd7aa0e66da.png)\r\n\r\n-----------------------------------------------------------------------------------------------------------------------------\r\n>\r\n>\r\n\r\nTh","comments":3,"createdAt":1426246838000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5","number":2344,"state":"closed","title":"TypeScript repository language incorrect on GitHub home page","updatedAt":1426696803000},{"assignedTo":"","body":"It would be useful to be able to disallow an Explicitly Typed function/method from implicitly returning the value undefined.\r\n\r\nOne example function that would be detected and disallowed was given by @rolyp in #2176. In that example, running off the ","comments":3,"createdAt":1426167691000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11356467?v=3","loggedByName":"neilgalarneau","milestone":"","number":2316,"state":"open","title":"Suggestion: disallow implicit return of undefined","updatedAt":1426683750000},{"assignedTo":"","body":"Added configuration message.  Added logic to expand tabs to spaces using host-configured tab size.","comments":6,"createdAt":1426542606000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-required","name":"cla-required","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4419011?v=3","loggedByName":"steveluc","milestone":"","number":2376,"state":"closed","title":"Add configuration message.","updatedAt":1426673089000},{"assignedTo":"","body":"","comments":1,"createdAt":1426658232000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2409,"state":"closed","title":"Fix diagnostic codes.","updatedAt":1426659365000},{"assignedTo":"","body":"The 1.0 compiler maintained /*! */ comments even if --removeComments were present. this is needed for adding copyright notices, and other legal notes. other tools like minifiers do respect these comments as well.","comments":0,"createdAt":1422554463000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 2.0","number":1851,"state":"closed","title":"/*! comments are stripped out when using --removeComments","updatedAt":1426645856000},{"assignedTo":"","body":"Fixes https://github.com/Microsoft/TypeScript/issues/2277\r\nFixes https://github.com/Microsoft/TypeScript/issues/1851","comments":0,"createdAt":1426645561000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2408,"state":"closed","title":"Simplify comment emit.","updatedAt":1426645856000},{"assignedTo":"","body":"This code:\r\n```\r\n'use strict';\r\n/// <reference path=\"typings/node/node.d.ts\" />\r\n\r\nimport * as fs from 'fs'\r\n```\r\nproduces this error:\r\n```\r\ntest.ts(4,21): error TS2307: Cannot find external module 'fs'.`\r\n```\r\n\r\nBut changing the `strict mode` line f","comments":2,"createdAt":1426643125000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2407,"state":"closed","title":"Strict mode can't precede declaration reference","updatedAt":1426643337000},{"assignedTo":"","body":"","comments":2,"createdAt":1426635378000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2402,"state":"closed","title":"drop interned indentation prefixes if format options has changed","updatedAt":1426637873000},{"assignedTo":"","body":"Add toolsversion to shim so we can read it from VS. This makes it easier to warn for breaking changes, when the language service script is updated.","comments":2,"createdAt":1426631440000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":2400,"state":"closed","title":"Add toolsversion to shim so we can read it from VS.","updatedAt":1426636008000},{"assignedTo":"","body":"This: \r\n```ts\r\nvar error;\r\nif(true){\r\n    let foo = 123;\r\n    error = {\r\n        foo:123\r\n    }\r\n}\r\n```\r\nIs generating \r\n```ts\r\nvar error;\r\nif (true) {\r\n    var _foo = 123;\r\n    error = {\r\n        _foo: 123\r\n    };\r\n}\r\n```\r\n\r\nNotice `_foo` here: \r\n``","comments":3,"createdAt":1426587670000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2390,"state":"closed","title":"let renaming for es5 leaking to other objects","updatedAt":1426631698000},{"assignedTo":"","body":"TypeScript 1.4 compiler removes end comment marker at end of file. This causes \"Uncaught SyntaxError: Unexpected token ILLEGAL\" in Chrome.\r\n\r\n__Example ts code:__\r\n\r\n```\r\nvar str = \"Hello, world!\";\r\ndocument.body.innerHTML = str;\r\n\r\n/*\r\n \r\n hello, wo","comments":2,"createdAt":1426126702000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5028128?v=3","loggedByName":"dsparkplug","milestone":"","number":2311,"state":"closed","title":"End comment marker removed when at end of file","updatedAt":1426631509000},{"assignedTo":"","body":"I am missing the ability to disable certain typescript compiler features. E.g i would like to disable all non ES6 style module features (i am not talking about require of course, just the actual typescript inventions before ES6 modules).\r\n\r\nIn genera","comments":19,"createdAt":1425799511000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/231889?v=3","loggedByName":"matthiasg","milestone":"","number":2261,"state":"closed","title":"Opt-In Language Features to prevent Embrace and Extend -- Compiler options on tsc.js","updatedAt":1426630635000},{"assignedTo":"","body":"I'm just interested if you got any plans of implementing concurrency to TypeScript?","comments":5,"createdAt":1426129267000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2312,"state":"closed","title":"Concurrency as first-class citizen","updatedAt":1426630628000},{"assignedTo":"","body":"Hello, \r\n\r\nI recently tried to extends Number to various interfaces (such as int, char, float, double, ...)\r\nit works well until I try to apply operators on them: \r\n```ts\r\ninterface int extends Number {}\r\nvar a: int = 1;\r\nvar b: int = 2;\r\nvar c: int ","comments":4,"createdAt":1426164498000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11440561?v=3","loggedByName":"JeWaVe","milestone":"","number":2315,"state":"closed","title":"make operators available for extensions of Number","updatedAt":1426630532000},{"assignedTo":"","body":"There is already an option to preserve const enums *declarations* in the generated javascript, but (as far as I know) not an option to preserve references to these enums. Currently enum references are replaced by there integer value. This is fine in ","comments":1,"createdAt":1426180705000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"","number":2322,"state":"closed","title":"Preserve enum references","updatedAt":1426629969000},{"assignedTo":"","body":"Adds initial support for decorators.","comments":1,"createdAt":1426573449000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2386,"state":"closed","title":"Value decorators","updatedAt":1426629314000},{"assignedTo":"","body":"This is mostly @sheetalkamat's work in #2065, just bringing it up to date and adding implementation for export default.\r\n\r\nNotes:\r\n- Emitting class in ES6 is in tracked in #2333, and i will merge with that and fix the class baselines\r\n- Emitting decl","comments":1,"createdAt":1426206605000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2335,"state":"closed","title":"ES6 emit for new import / export syntax","updatedAt":1426627037000},{"assignedTo":"","body":"Support for import destructuring\r\n\r\n```typescript\r\nimport { Query, Database, Pool, Transaction } = require('db');\r\n```\r\n\r\nvs\r\n\r\n```typescript\r\nimport db = require('db');\r\nimport Query = db.Query;\r\nimport Database = db.Database;\r\nimport Transaction = ","comments":9,"createdAt":1419599828000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/502412?v=3","loggedByName":"spion","milestone":"","number":1563,"state":"closed","title":"Import destructuring","updatedAt":1426626906000},{"assignedTo":"","body":"As per ES6 grammer\r\n\r\n```\r\nImportDeclaration :\r\nimport ImportClause FromClause ;\r\nimport ModuleSpecifier ;\r\n\r\nImportClause :\r\nImportedDefaultBinding\r\nNameSpaceImport\r\nNamedImports\r\nImportedDefaultBinding , NameSpaceImport\r\nImportedDefaultBinding , Na","comments":4,"createdAt":1416360551000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1203,"state":"closed","title":"Support ES6 syntax for Import statements","updatedAt":1426626790000},{"assignedTo":"","body":"As per ES6 grammar:\r\n\r\n```\r\nExportDeclaration :\r\nexport * FromClause ;\r\nexport ExportClause FromClause ;\r\nexport ExportClause ;\r\nexport VariableStatement\r\nexport Declaration\r\nexport default HoistableDeclaration[Default]\r\nexport default [lookahead â  f","comments":3,"createdAt":1416428320000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1215,"state":"closed","title":"Export syntax for ES6 modules","updatedAt":1426626783000},{"assignedTo":"","body":"When I write an expression which invokes a function that accepts a function as a parameter, and I use lambda syntax for the function parameter, VS eliminates the space after the comma and before the lambda expression when it performs an auto-format.\r","comments":1,"createdAt":1426623997000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6828233?v=3","loggedByName":"ThomasMichon","milestone":"","number":2398,"state":"closed","title":"Auto-formatting a function call with a lambda parameter truncates space before parameter","updatedAt":1426624201000},{"assignedTo":"","body":"Consider the following import statement:\r\n```\r\nimport { int, float } from '../lang';\r\n```\r\nWith auto-suggest I need to start this by typing:\r\n```\r\nimport {} from '../lang';\r\n```\r\nThen I can go back inside the {} and get auto-suggestions.\r\n\r\nIt would ","comments":8,"createdAt":1426511764000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6184618?v=3","loggedByName":"gregdorval","milestone":"","number":2371,"state":"closed","title":"Request for alternative syntax to improve auto-complete experience","updatedAt":1426622179000},{"assignedTo":"","body":"We aren't using this since our repo setup doesn't work with their tools. The jake task will still exist for manual code coverage support.","comments":1,"createdAt":1426619805000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":2395,"state":"closed","title":"Remove CodeClimate stuff","updatedAt":1426620906000},{"assignedTo":"vladima","body":"```ts\r\nmodule Outer {\r\n    export var x = 1;\r\n}\r\n\r\nmodule Outer {\r\n    export const enum A { X }\r\n}\r\n\r\nmodule B {\r\n    import O = Outer;\r\n    var x = O.A.X;\r\n    var y = O.x;\r\n}\r\n```\r\n\r\nOutput:\r\n```javascript\r\nvar Outer;\r\n(function (Outer) {\r\n    Out","comments":0,"createdAt":1426558927000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.5","number":2381,"state":"closed","title":"Imports are incorrectly elided in the presence of const enums","updatedAt":1426619313000},{"assignedTo":"yuit","body":"class A { foo: string; }\r\nclass B extends A { bar: string; }\r\n\r\ncompiling with --target ES6 currently still uses our own __extends and not ES6 classes.","comments":3,"createdAt":1423769513000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.5","number":2022,"state":"closed","title":"Emit native ES6 classes with --target ES6","updatedAt":1426619268000},{"assignedTo":"DanielRosenwasser","body":"Type either of the following and then press enter:\r\n```ts\r\nvar [\r\n```\r\n```ts\r\nvar {\r\n```\r\n\r\nExpected: The cursor is indented.\r\nActual: The cursor is not indented.","comments":3,"createdAt":1426553246000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2380,"state":"closed","title":"Smart indent for binding patterns is wrong","updatedAt":1426619179000},{"assignedTo":"","body":"Per https://github.com/github/linguist#overrides should hopefully get our repo classified as TypeScript instead of JavaScript.","comments":0,"createdAt":1426619094000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":2394,"state":"closed","title":"Add .gitattributes to override GitHub Linguist language classification ","updatedAt":1426619110000},{"assignedTo":"JsonFreeman","body":"Trying to compile\r\n\r\n    interface IBar {\r\n        [barId: string]: any;\r\n    }\r\n\r\n    interface IFoo {\r\n        foo<TBar extends IBar>(bar: TBar, bar1: (bar: TBar)=>any, bar2: (bar: TBar)=>any);\r\n    }\r\n\r\n    var foo: IFoo;\r\n    foo.foo({bar: null},","comments":3,"createdAt":1424775317000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5512839?v=3","loggedByName":"osi-oswald","milestone":"TypeScript 1.5","number":2127,"state":"closed","title":"Bug: Cannot read property 'flags' of undefined","updatedAt":1426617925000},{"assignedTo":"JsonFreeman","body":"4.12.2 spec says:\r\n> Proceeding from left to right, each argument expression e is inferentially typed\r\n> ...\r\n> When a function expression is inferentially typed (section 4.9.3) and a type assigned to a\r\n> parameter in that expression references type","comments":7,"createdAt":1425314078000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/936705?v=3","loggedByName":"osdm","milestone":"TypeScript 1.5","number":2182,"state":"closed","title":"Type inference algorithm in compiler differs from spec?","updatedAt":1426617917000},{"assignedTo":"","body":"This fixes #2182 and fixes #2127.\r\n\r\nThe problem is essentially that after we fix a type parameter during type argument inference, we may unfix it later. This happens because the inference context that we use to store the results gets forgotten on ev","comments":3,"createdAt":1426297699000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2356,"state":"closed","title":"Make sure type parameters stay fixed throughout the inference process","updatedAt":1426617742000},{"assignedTo":"","body":"Seems like the ES7 `.includes()` method is missing in TypeScript.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes","comments":7,"createdAt":1426236915000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2340,"state":"closed","title":"ES7 Array.prototype.includes() missing in TypeScript","updatedAt":1426617419000},{"assignedTo":"","body":"More thoroughly checks whether a node is considered \"completed\".\r\n\r\nAlso fixes #2380.","comments":1,"createdAt":1426573389000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2385,"state":"closed","title":"More thorough node completed-ness checking","updatedAt":1426617326000},{"assignedTo":"","body":"As of change #2356, the following code gives the correct result in the batch compiler:\r\n```ts\r\ndeclare function f<T>(x: T, y: (p: T) => T, z: (p: T) => T): T;\r\nf(0, x => null, x => x.blahblah);\r\n```\r\nNamely, we infer T to be number, and we get an err","comments":3,"createdAt":1426546581000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2377,"state":"closed","title":"Type parameters do not get fixed when the compiler visits the same signature multiple times","updatedAt":1426616900000},{"assignedTo":"paulvanbrenk","body":"Hi,\r\n\r\nI installed Visual Studio 2015 CTP 5, added a brand new TypeScript project and I get this error.\r\n\r\n```\r\n1>------ Rebuild All started: Project: TypeScriptHTMLApp1, Configuration: Debug Any CPU ------\r\n\r\n1>C:\\Program Files (x86)\\MSBuild\\Microso","comments":10,"createdAt":1424030286000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5","number":2039,"state":"closed","title":"No compiler was found at C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\tsc.exe","updatedAt":1426615576000},{"assignedTo":"vladima","body":"Fixes #2381","comments":1,"createdAt":1426560811000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2382,"state":"closed","title":"correctly merge const enum only and instantiated modules irregardless of order","updatedAt":1426614168000},{"assignedTo":"","body":"Following some recent changes the output of the `-diagnostics` compiler option was no longer properly aligned and also somewhat confusing. This PR cleans it up. We now display:\r\n\r\n* I/O read: Time spent reading from or searching for files in parse ph","comments":3,"createdAt":1426284993000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":2354,"state":"closed","title":"Clean up diagnostics display","updatedAt":1426609730000},{"assignedTo":"","body":"This is the current definition in lib.d.ts: \r\n```typescript\r\nfilter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[];\r\n```\r\nnote that there is no optional parameters and in the JavaScript version of this function we a","comments":2,"createdAt":1426598317000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4508783?v=3","loggedByName":"viniciusx","milestone":"","number":2392,"state":"closed","title":"Definition of Array.prototype.filter forces three variables as parameters","updatedAt":1426609218000},{"assignedTo":"","body":"We can kind of already do this for functions by defining several overloads, but there is no corresponding mechanism for overloaded classes or interfaces. A typical use case would be defining a registry for callbacks which accept a number of parameter","comments":4,"createdAt":1421943935000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"","number":1773,"state":"open","title":"Thoughts about variadic generics?","updatedAt":1426606432000},{"assignedTo":"","body":"```ts\r\n// The following function assignment don't product error messages when needed.\r\n\r\ntype t_cb = (p:number, q:number) => void;\r\n\r\nfunction callback_1(): void {\r\n}\r\n\r\nfunction callback_2(p: number): void {\r\n}\r\n\r\nfunction callback_3(p: number, q: n","comments":3,"createdAt":1426276235000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11465750?v=3","loggedByName":"sixtram","milestone":"","number":2349,"state":"closed","title":"Function assignment thru type definition product inconsistent compile messages (Version 1.4)","updatedAt":1426606327000},{"assignedTo":"","body":"I use to skip ending with semicolon for every line I write. I noticed an error:\r\n\r\nThis currently fails:\r\n```typescript\r\ninterface Interface1 {\r\n\tproperty1: number\r\n\tproperty2: string\r\n}\r\n\r\ninterface Interface2 extends Interface1 {\r\n\tproperty2: strin","comments":4,"createdAt":1426584846000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2389,"state":"closed","title":"A non-semicolon line ending before a type cast yields an error","updatedAt":1426604203000},{"assignedTo":"","body":"Since it's very unlikely that the extension methods will ever be implemented [in a call-site-rewrite manner](https://github.com/Microsoft/TypeScript/issues/9#issuecomment-74302592), please consider adding infix operators to enable writing in function","comments":2,"createdAt":1426179150000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":2319,"state":"open","title":"Suggestion: Infix operators/functions","updatedAt":1426595646000},{"assignedTo":"","body":"Emit classDeclaration natively in ES6. This pull request also set parsing-context for class declaration to be strict mode code if target is es6. \r\n\r\nTodo: I will update existed test-cases in ES6 conformance which contains class declaration","comments":1,"createdAt":1426203615000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2333,"state":"closed","title":"Class emit for ES6","updatedAt":1426552803000},{"assignedTo":"paulvanbrenk","body":"Hi,\r\n\r\n**VS**: 2013 Update 4 RC\r\n**TS**: 1.3\r\n\r\nI got an exception message box when hitting F12 on a `require` path. Following on from the exception the F12 continues to work correctly (i.e. navigates to the target path).\r\n\r\nI am currently not able t","comments":4,"createdAt":1415894789000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5","number":1153,"state":"closed","title":"The specified ITextSnapshot doesn't  belong to the correct TextBuffer","updatedAt":1426549903000},{"assignedTo":"","body":"This allows ambient declarations to express ES6 export default:\r\n\r\n```ts\r\nexport default <expression>;\r\n```\r\nCan be expressed as:\r\n```ts\r\nexport default : type;\r\n```\r\n","comments":1,"createdAt":1426226824000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2339,"state":"closed","title":"Support an optional type annotation on export default statement","updatedAt":1426547047000},{"assignedTo":"","body":"Hello Typescipters,\r\n\r\nI'm using the `Q` library with its typings installed via `tsd`.\r\nIn a module I'm using\r\n```typescript\r\n/// <reference path=\"../typings/q/Q.d.ts\"/>\r\n// ...\r\n```\r\n\r\ncompiled with\r\n```bash\r\ntsc -m commonjs --out test.js test.ts\r\nt","comments":6,"createdAt":1426524783000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106945?v=3","loggedByName":"dbarbeau","milestone":"","number":2373,"state":"closed","title":"Passthrough require(\"jsfile\") for commonjs","updatedAt":1426546966000},{"assignedTo":"","body":"Type inference seems to fail when the return-type is a union between a class and a generic type.\r\n\r\nI was hoping to use this pattern to be able to decorate an object (not a class) with traits/behaviors on a per-instance basis, in a type-safe manner, ","comments":13,"createdAt":1425570348000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/103348?v=3","loggedByName":"mindplay-dk","milestone":"","number":2211,"state":"closed","title":"Inference fails for return-type of type-union between class and generic type","updatedAt":1426541938000},{"assignedTo":"ahejlsberg","body":"There is a difference in behavior in spread element between ES6 and ES5/3. Given the following:\r\n```TypeScript\r\nvar a: number[] = undefined;\r\nvar b = [1, ...a, 2];\r\n```\r\n\r\nIn ES6 hosts, you get an error when `a` is spread into the array. FF Nightly t","comments":11,"createdAt":1421317072000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"TypeScript 1.6","number":1679,"state":"open","title":"SpreadElementExpression can introduce unexpected results in ES5/3","updatedAt":1426541415000},{"assignedTo":"paulvanbrenk","body":"Open src/compiler/checker.ts, find a comment, and start typing in the comment. Notice it does not classify the comment until I have reached a pause in my editing.\r\n![slowcommentclassification](https://cloud.githubusercontent.com/assets/8052525/586607","comments":2,"createdAt":1421965768000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":1776,"state":"closed","title":"Classifier is very slow for comments","updatedAt":1426541406000},{"assignedTo":"vladima","body":"```ts\r\nvar x;\r\nif (true) {\r\n    let x;\r\n    var obj1 = { x: x }; // Should be { x: _x }, emits as { _x: _x }\r\n    var obj2 = { x }; // Should be { x: _x }, emits as { _x: x }\r\n}\r\n```\r\n\r\nThe problem is that we are doing this rename in emitIdentifier, ","comments":0,"createdAt":1426277475000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2350,"state":"closed","title":"Incorrect emit for a property assignment referencing a renamed let","updatedAt":1426539146000},{"assignedTo":"","body":"...e renamed, Fixes #2350","comments":1,"createdAt":1426534765000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2374,"state":"closed","title":"use 'allowGeneratedIdentifiers' to explicitly tell when identifier can b...","updatedAt":1426539133000},{"assignedTo":"","body":"Fixes #2350","comments":0,"createdAt":1426291653000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2355,"state":"closed","title":"do not rename property names that match with names of let\\const bindings","updatedAt":1426538233000},{"assignedTo":"","body":"Convert declarative HTML templates to imperative TypeScript commands so you can do things like setup data binding logic/functions/watching from templates at compile time al la WPF/Flex.","comments":6,"createdAt":1426350629000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/356375?v=3","loggedByName":"resistdesign","milestone":"","number":2360,"state":"closed","title":"Transpile HTML to Imperative TypeScript","updatedAt":1426535656000},{"assignedTo":"","body":"One thing I often did in JavaScript was use booleans as numbers, as it was often easier to do that then add a whole bunch of extra ternary operators / if statements. Currently though when I move my JavaScript into TypeScript it gets mad at me for doi","comments":8,"createdAt":1426325299000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5274223?v=3","loggedByName":"tysonzero","milestone":"","number":2358,"state":"closed","title":"Allow booleans to be treated as numbers.","updatedAt":1426535624000},{"assignedTo":"","body":"I came across this explanation from @RyanCavanaugh on StackOverflow, http://stackoverflow.com/questions/26220243/instantiating-new-htmlelement-in-typescript\r\n\r\nIt looks like `SVGLength` and `SVGAngle` also fit in this category. \r\n\r\nIs there something","comments":1,"createdAt":1426445770000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4791?v=3","loggedByName":"duncanmak","milestone":"","number":2367,"state":"open","title":"How to instantiate SVGLength / SVGAngle?","updatedAt":1426535492000},{"assignedTo":"","body":"The compiler emits invalid JS code a .TS file ends with a multi-line comment.\r\n\r\nThe following file will not be generated correctly\r\n```\r\nmodule Module1\r\n{\r\n    class Class1\r\n    {\r\n    \r\n    }\r\n}\r\n/*This is a multiline comment*/\r\n```\r\n\r\nThis can be ","comments":1,"createdAt":1426439081000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1525058?v=3","loggedByName":"alonweiss","milestone":"","number":2366,"state":"closed","title":"Invalid file emmited when a file ends with a multiline comment","updatedAt":1426535375000},{"assignedTo":"","body":"    var m = new Map<number, number>([5, 6])\r\n\r\nshould be ill-typed. Fails at runtime with \r\n\r\n    Uncaught TypeError: Iterator value apply is not an entry object\r\n\r\nNeeds to be something like\r\n\r\n    var m = new Map<number, number>([[5, 6]])\r\n","comments":1,"createdAt":1426377528000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/121074?v=3","loggedByName":"rolyp","milestone":"","number":2363,"state":"closed","title":"Iterator value is not an entry object, creating map","updatedAt":1426533875000},{"assignedTo":"","body":"The intent is to:\r\n\r\n- Test it in both cmd and ps (sequentially) on Win86 and Win64 (parallelly). This way; four jobs would run in parallel with testing on both; cmd and ps.\r\n- Make it easy for the contributors (forked repos folks; who are not using ","comments":6,"createdAt":1414968075000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3840695?v=3","loggedByName":"am11","milestone":"","number":1034,"state":"open","title":"CI: Configure appveyor for testing on Windows","updatedAt":1426532930000},{"assignedTo":"","body":"This doesn't work since you cannot make function by name 'delete'.\r\nBut module is an object, so it can have key named 'delete'.\r\n\r\n```typescript\r\nmodule a {\r\n  export function delete() {}\r\n}\r\n```\r\n\r\nThis could be translated into\r\n\r\n```js\r\nvar a;\r\n(fu","comments":2,"createdAt":1426514081000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":2372,"state":"closed","title":"Export keyword function from module","updatedAt":1426532893000},{"assignedTo":"","body":"I just noticed this today while working on implementing rest parameters in arrow functions in v8. v8 and SpiderMonkey are both getting this wrong right now, but Traceur and Babel both get this right.\r\n\r\nIt's probably a pretty simple fix","comments":4,"createdAt":1425949603000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2294695?v=3","loggedByName":"caitp","milestone":"TypeScript 1.5","number":2282,"state":"closed","title":"Arrow functions require no line terminator before arrow `=>` token","updatedAt":1426523090000},{"assignedTo":"","body":"I'm just trying out some parts of your compiler API.\r\n\r\nAnd I'm traversing every node and trying to figure what there kind(`SyntaxKind`) is. If I do a console log I only get a number.\r\n\r\n```\r\nconsole.log(node.kind);\r\n```\r\n\r\nIs there any way I kind ge","comments":3,"createdAt":1425798161000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2260,"state":"closed","title":"Is there any effective way of debugging enums?","updatedAt":1426513479000},{"assignedTo":"","body":"(my original comment on the ES6 modules thread: https://github.com/Microsoft/TypeScript/issues/2242#issuecomment-80935521)\r\n\r\nHere's a challenge: ask the average programmer what this soon-to-be-valid TypeScript code does:\r\n```ts\r\nimport X from \"M\";\r\n","comments":4,"createdAt":1426498747000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8589488?v=3","loggedByName":"rotemdan","milestone":"","number":2370,"state":"open","title":"Extremely poor ES6 module import syntax for default exports","updatedAt":1426512434000},{"assignedTo":"","body":"Closes #2282","comments":17,"createdAt":1425956719000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2294695?v=3","loggedByName":"caitp","milestone":"","number":2283,"state":"closed","title":"Disallow line terminator after arrow function parameters, before =>","updatedAt":1426471194000},{"assignedTo":"vladima","body":"These should all be errors, but only the ones where x is initialized directly give errors:\r\n```ts\r\nif (true) {\r\n    let x;\r\n    if (true) {\r\n        var x = 0; // Error\r\n        var { x = 0 } = { x: 0 }; // Error\r\n        var { x: x = 0 } = { x: 0 };","comments":0,"createdAt":1426277775000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2351,"state":"closed","title":"Missing error for initializing shadowed var in a binding pattern","updatedAt":1426453576000},{"assignedTo":"mhegazy","body":"The new es6 import/export work is going in.  As part of it, it filters out classes/functions from the navbar  if they have no name.  But we'll want to show these guys (possibly has \"default class\", or some other term) in the navbar.","comments":1,"createdAt":1425511133000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"TypeScript 1.5","number":2202,"state":"closed","title":"Support \"export default class/function\" in the navbar.","updatedAt":1426453538000},{"assignedTo":"","body":"Fixes #2202","comments":0,"createdAt":1426451072000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2368,"state":"closed","title":"Enable navbar for export defaults","updatedAt":1426453523000},{"assignedTo":"","body":"Fixes #2202","comments":1,"createdAt":1425519384000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2204,"state":"closed","title":"Enable navbar for export defaults","updatedAt":1426451086000},{"assignedTo":"","body":"Fixes #2351","comments":1,"createdAt":1426282528000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2353,"state":"closed","title":"consider binding elements as always initialized with doing shadow check","updatedAt":1426445622000},{"assignedTo":"","body":"    class Empty {\r\n       dummy (): void {\r\n       }\r\n    }\r\n\r\n    type Behaviour = Empty | Empty\r\n \r\n    var b: Behaviour = 'hello'\r\n\r\nis apparently fine, although `Empty | Empty` should be the same type as `Empty`.","comments":2,"createdAt":1426373547000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/121074?v=3","loggedByName":"rolyp","milestone":"","number":2362,"state":"closed","title":"Union types borked","updatedAt":1426435506000},{"assignedTo":"","body":"Proposal: support non-structural typing (new user-defined base-types). This allows programmer to have more refined types. \r\n\r\nUses-cases: \r\n\r\n1) Indexes typically come from somewhere. e.g. we have some mappings that are maintained between indexes. Be","comments":42,"createdAt":1406073141000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/415450?v=3","loggedByName":"iislucas","milestone":"","number":202,"state":"open","title":"Support some non-structural (nominal) type matching","updatedAt":1426375252000},{"assignedTo":"","body":"Seems like the interface Node is already defined somewhere before compiling the application code.\r\n\r\n```typescript\r\ninterface Node {\r\n\tname: string\r\n}\r\n\r\ninterface ExtendedNode extends Node {\r\n\thello: string\r\n}\r\n\r\nfunction test(): ExtendedNode {\r\n\tre","comments":3,"createdAt":1426239403000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2342,"state":"closed","title":"interface Node leakage","updatedAt":1426374490000},{"assignedTo":"","body":"I read something from this article: http://blogs.msdn.com/b/typescript/archive/2015/03/05/angular-2-0-built-on-typescript.aspx.\r\n\r\nI found there are two new syntax features in that typescript code:\r\n1. annotations(very cool, i really like it)\r\n2. key","comments":4,"createdAt":1426204668000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/843422?v=3","loggedByName":"zzm2q","milestone":"","number":2334,"state":"closed","title":"Question about AngularJS 2","updatedAt":1426356627000},{"assignedTo":"","body":"in 1bb4a629882305fd223447a45834391c252c5c53 LKG.\r\n`name` is declared in top level scope of lib.es6.d.ts.\r\n\r\noriginal code.\r\n\r\n```\r\n{\r\n    let name = \"vvakame\";\r\n    let like = \"ç«\";\r\n    let personA = { name: name, like: like };\r\n    let personB = { n","comments":4,"createdAt":1426325654000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"","number":2359,"state":"closed","title":"unexpected code generation: shorthand properties & destructuring in es5 target","updatedAt":1426348447000},{"assignedTo":"","body":"I need to get type information for a CommonJS module that's dynamically (and sometimes conditionally) loaded within the scope of an internal module. Some background on why this is important (and the hoops I go through to work around this restriction ","comments":3,"createdAt":1426257759000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8589488?v=3","loggedByName":"rotemdan","milestone":"","number":2346,"state":"closed","title":"Can't use typeof for an ambient external module type.","updatedAt":1426331776000},{"assignedTo":"","body":"```typescript\r\n\r\nclass MyCallableClass {\r\n   property: string;\r\n   constructor() {\r\n     //constructor body\r\n   }\r\n   (): MyCallableClass { // could be 'string' or any other type\r\n     // call signature body\r\n     return new MyCallableClass();\r\n   }\r","comments":9,"createdAt":1406008440000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":183,"state":"open","title":"Suggestion: callable class","updatedAt":1426327653000},{"assignedTo":"","body":"","comments":0,"createdAt":1426281872000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2352,"state":"closed","title":"Use 'let' in the services layer.","updatedAt":1426292640000},{"assignedTo":"","body":"![ts1 4fmt](https://cloud.githubusercontent.com/assets/9845036/6637859/2d5a4cd0-c988-11e4-8905-ef9c05ce9b1d.png)\r\n","comments":2,"createdAt":1426247551000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9845036?v=3","loggedByName":"ArtemDevart","milestone":"TypeScript 1.5","number":2345,"state":"closed","title":"TS 1.4 formatter in VS 2013 - no space before lambda argument","updatedAt":1426289730000},{"assignedTo":"paulvanbrenk","body":"I've been using TypeScript successfully in my project for a while now (love it!), but after making some changes to my code recently I've run into an issue where Visual Studio now hangs whenever I step into a function while debugging.  I won't claim t","comments":6,"createdAt":1423535276000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10933004?v=3","loggedByName":"BernardHymmen","milestone":"TypeScript 1.5","number":1994,"state":"closed","title":"Visual Studio freezes/hangs when stepping into functions while debugging","updatedAt":1426288058000},{"assignedTo":"","body":"","comments":1,"createdAt":1426267209000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2347,"state":"closed","title":"Use for-of in our codebase.","updatedAt":1426280758000},{"assignedTo":"vladima","body":"This code should be parsed without any errors\r\n```ts\r\nlet [x] = [1]\r\nlet {a: y} = {a: 1}\r\n```\r\nErrors went away if `'use strict'` directive is added to the top of the file","comments":0,"createdAt":1426180449000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.5","number":2320,"state":"closed","title":"Destructuring in let does not parse correctly outside of strict mode","updatedAt":1426278942000},{"assignedTo":"","body":"Fixes #2320 ","comments":1,"createdAt":1426183249000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2323,"state":"closed","title":"correctly parse destructuring in let outside of strict mode","updatedAt":1426278846000},{"assignedTo":"","body":"...ther value in favor of block-scoped variables.","comments":1,"createdAt":1426272782000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2348,"state":"closed","title":"use Value meaning as a filter when resolving names to prevent skipping o...","updatedAt":1426278502000},{"assignedTo":"","body":"To make Typescript Class more like default ES classes it could be interesting to make every prototype property non enumerable.\r\n\r\nI've made a little snippet that do simply the work and could be added to the ```__extend```, etc. :\r\n```\r\n__proto = this","comments":9,"createdAt":1412082602000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/340789?v=3","loggedByName":"jpolo","milestone":"","number":782,"state":"open","title":"Prototype properties non enumerable","updatedAt":1426261938000},{"assignedTo":"","body":"Fixes #2188","comments":5,"createdAt":1426119954000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2309,"state":"closed","title":"disallow recursive references for block-scoped bindings","updatedAt":1426246183000},{"assignedTo":"","body":"In `createLanguageService` (https://github.com/Microsoft/TypeScript/blob/master/src/services/services.ts#L2241), `createProgram` is called with a host that uses `getOrCreateSourceFile` for `getSourceFile`. \r\n\r\nThis suggests that new files are to be c","comments":13,"createdAt":1426022977000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/837040?v=3","loggedByName":"clausreinke","milestone":"","number":2287,"state":"closed","title":"LS vs Compiler API: too many `getSourceFile`s?","updatedAt":1426245372000},{"assignedTo":"","body":"How big (in terms of unminified JavaScript output) is a \"large\" typescript application you know of?","comments":11,"createdAt":1421852639000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1735467?v=3","loggedByName":"paulmarshall","milestone":"","number":1757,"state":"open","title":"What is a \"large\" TypeScript implementation?","updatedAt":1426244251000},{"assignedTo":"","body":"Since 'getDefinitions' can return multiple items just like 'getReferences', it would be helpful to use them in the same manner (i.e. showing the textual context in which they appear).\r\n\r\nThoughts @steveluc, @mhegazy, and @yuit?","comments":2,"createdAt":1426226054000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2337,"state":"open","title":"Make 'getDefinitions' in the server layer return 'lineText' just like in 'getReferences'","updatedAt":1426226295000},{"assignedTo":"","body":"new Event need two parameters, one medatory and one optional.\r\nevent = new Event(typeArg, eventInit);\r\n\r\nRef: https://developer.mozilla.org/en-US/docs/Web/API/Event/Event","comments":4,"createdAt":1426157544000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-required","name":"cla-required","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/171239?v=3","loggedByName":"zimbabao","milestone":"","number":2314,"state":"closed","title":"Fixing signature for new Event.","updatedAt":1426226075000},{"assignedTo":"","body":"Emitting modules when targeting es6","comments":1,"createdAt":1424283672000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":2065,"state":"closed","title":"Es6 module emit","updatedAt":1426206631000},{"assignedTo":"","body":"","comments":0,"createdAt":1426201968000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2332,"state":"closed","title":"Update LKG","updatedAt":1426205822000},{"assignedTo":"","body":"A 'for...of' statement in ES5 can take an array, a string, a union of arrays, or a union of arrays and string.\r\n\r\nA 'for...of' statement in ES3 can take an array or a union of arrays.","comments":2,"createdAt":1426117016000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2308,"state":"closed","title":"Type checking 'for...of' in ES3/5","updatedAt":1426201474000},{"assignedTo":"","body":"```TS\r\nfor (var a: number = 1, b: string = \"\" in X) { }\r\n```\r\n\r\nError: Only a single variable declaration is allowed in a 'for...in' statement.\r\n\r\nThe error should be on the second declaration (b), but it's on the first (a).","comments":2,"createdAt":1405727170000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":156,"state":"closed","title":"Misplaced error span for multiple var declarations in for..in","updatedAt":1426200364000},{"assignedTo":"","body":"```TypeScript\r\nclass C {\r\n        where(filter: Iterator<T, boolean>): Query<T> {\r\n            return fromDoWhile(test =>\r\n                var index = 0;\r\n!!! '{' expected.\r\n                return this.doWhile((item, i) => filter(item, i) ? test(item","comments":2,"createdAt":1405627087000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":122,"state":"closed","title":"[Errors] error recovery with lambda missing open curly","updatedAt":1426200269000},{"assignedTo":"","body":"Thank you for the Coding Guidelines at https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines, though they look a bit brief, could you provide a comprehensive document with recommendations how to write code in TS. So we could move to a consis","comments":1,"createdAt":1426196290000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/744637?v=3","loggedByName":"lukianol","milestone":"","number":2330,"state":"closed","title":"Comprehensive Coding Guidelines","updatedAt":1426197417000},{"assignedTo":"","body":"As seen in [this commit](https://github.com/Microsoft/TypeScript/commit/22174a17c64319942f56da8d19ff97f3f14f8f54#diff-26bfe3d8e390ffbda8420d86d6626f8bR15):\r\n\r\n```\r\nThe type argument for type parameter 'T' cannot be inferred from the usage. Consider s","comments":2,"createdAt":1421094253000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":1649,"state":"closed","title":"Uninstantiated type in error message","updatedAt":1426196457000},{"assignedTo":"","body":"```TypeScript\r\nFoo<A,B,\\ C>(4, 5, 6);\r\n```\r\n\r\nExpected: \r\n\r\n!!! Unexpected character \"\\\".!!! Unexpected token; 'type' expected.!!! Cannot find name 'Foo'.\r\n\r\nActual: \r\n\r\n!!! Cannot find name 'Foo'.!!! Cannot find name 'A'.!!! Cannot find name 'B'.!!!","comments":2,"createdAt":1405627090000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":125,"state":"closed","title":"[Errors] error recovery with errant / in generic function invocation","updatedAt":1426196325000},{"assignedTo":"","body":"How would I go about using the latest TypeScript with Visual Studio?\r\n\r\n```javascript\r\nC:\\Program Files\\Microsoft SDKs\\TypeScript\\1.0\\tsc.js\r\n```\r\n\r\nOr making a patch and testing the Visual Studio integration with a locally built TypeScript?\r\n\r\n\r\n","comments":12,"createdAt":1415640483000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":1110,"state":"closed","title":"Visual Studio, use latest tsc release","updatedAt":1426191712000},{"assignedTo":"vladima","body":"The constructs:\r\n```ts\r\nlet v = v;\r\nconst c = c;\r\n```\r\nshould error because they are uses before definition. Indeed IE gives this error.\r\n\r\nThis also applies to:\r\n```ts\r\nfor (let v = v; ; ) { }\r\nfor (let v in v) { }\r\nfor (let v of v) { }\r\n```\r\n\r\nFor ","comments":0,"createdAt":1425336466000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2188,"state":"closed","title":"Recursive let/const references should error","updatedAt":1426191657000},{"assignedTo":"","body":"HTML is a document-oriented markup. Give us a GUI-oriented one. As logical as XAML but less verbose.","comments":1,"createdAt":1426183521000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3845650?v=3","loggedByName":"dsaf","milestone":"","number":2324,"state":"closed","title":"Please fix HTML the way you are fixing JavaScript","updatedAt":1426187031000},{"assignedTo":"","body":"...positions.","comments":1,"createdAt":1426180603000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2321,"state":"closed","title":"Add additional asserts to ensure we don't create diagnostics with bogus ...","updatedAt":1426181267000},{"assignedTo":"","body":"Would it break lots of programs to have the following be an error when compiling with `--noImplicitAny`?\r\n\r\n    function f () {\r\n       return \"hello\"\r\n    }\r\n","comments":5,"createdAt":1426151681000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/121074?v=3","loggedByName":"rolyp","milestone":"","number":2313,"state":"closed","title":"Omitting function return type and --noImplicitAny","updatedAt":1426177835000},{"assignedTo":"","body":"From what I understand, the following should work but it is generating errors:\r\n\r\n```typescript\r\n           export class FilterExpression {\r\n                constructor();\r\n                constructor(FilterOperator: LogicalOperator);\r\n              ","comments":4,"createdAt":1426101186000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11198735?v=3","loggedByName":"SimplerSoftware","milestone":"","number":2300,"state":"closed","title":"Union types with enum and class not working property","updatedAt":1426161276000},{"assignedTo":"","body":"In TypeScript playground, the \"New Features\" option gives this code\r\n\r\n```\r\ntype NameOrNameArray = string | string[];\r\n\r\nfunction createName(name: NameOrNameArray) {\r\n    if (typeof name === \"string\") {\r\n        return name;\r\n    }\r\n    else {\r\n     ","comments":5,"createdAt":1426059541000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1314477?v=3","loggedByName":"IanYates","milestone":"","number":2295,"state":"closed","title":"Union types of sort interface | interface[] and using instanceof Array","updatedAt":1426136951000},{"assignedTo":"","body":"I'm trying to convert a JavaScript functional-style \"class\" from JS to strongly-typed TS making minimal changes to the code other than adding type annotations.  I **do not** want to use the `class` keyword (this is an experiment to ease a refactoring","comments":6,"createdAt":1426100344000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3755379?v=3","loggedByName":"nycdotnet","milestone":"","number":2299,"state":"closed","title":"Strongly typing a JS functional-style \"class\"","updatedAt":1426121889000},{"assignedTo":"","body":"Consider an existing JS constructor function\r\n\r\n```ts\r\nvar Foo = function (x,y) { \r\n    this.x = x;\r\n    this.y = y;\r\n}\r\nvar foo = new Foo(1,2);\r\n```\r\nThis is allowed in TypeScript due to a specific exception which allows ```new``` to be called on no","comments":0,"createdAt":1426120811000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":2310,"state":"open","title":"Allow assignment of void returning functions to appropriate construct signature types","updatedAt":1426120820000},{"assignedTo":"","body":"","comments":1,"createdAt":1426111558000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2307,"state":"closed","title":"Compute consistent argument indices and counts for signature help.","updatedAt":1426114920000},{"assignedTo":"","body":"Currently we don't correctly handle incompleted For* statements when computing indentation at position. This PR fixes this","comments":1,"createdAt":1426108047000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2303,"state":"closed","title":"added for* statements to isCompletedNode","updatedAt":1426114684000},{"assignedTo":"","body":"```TypeScript\r\nvar a1: { [a: string]: string };\r\nvar b1: { [b: string]: number }; \r\n\r\nvar r1a1 = a1 < b1;    \r\n```\r\n\r\nExpected: \r\n\r\n    !!! Operator '<' cannot be applied to types '{ [a: string]: string; }' and '{ [b: string]: number; }'.\r\n\r\nActual: ","comments":2,"createdAt":1405627030000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":89,"state":"closed","title":"[Errors] wrong identifier in errors that reference indexers","updatedAt":1426107316000},{"assignedTo":"","body":"```TypeScript\r\nclass C extends {    }\r\n```\r\n \r\nExpected: !!! 'extends' list cannot be empty.\r\n\r\nActual: !!! Identifier expected.\r\n\r\nSee also:\r\n\r\ntests/cases/conformance/parser/ecmascript5/ErrorRecovery/ExtendsOrImplementsClauses/parserErrorRecovery_E","comments":2,"createdAt":1405627057000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":96,"state":"closed","title":"[Errors] empty/implements extends list","updatedAt":1426107175000},{"assignedTo":"","body":"```TypeScript\r\nexport class Point implements IPoint {\r\n        public con:C \"hello\";\r\n```\r\n\r\nExpected: !!! '=' expected.\r\n\r\nActual: !!! ';' expected.","comments":2,"createdAt":1405627083000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":117,"state":"closed","title":"[Errors] error recovery with missing = in property initializers","updatedAt":1426107161000},{"assignedTo":"","body":"Hi there... this question is in regards to the recent TypeScript/AtScript news... if I understand things correctly, which I certainly may not, a lot of the AtScript features are now going to be implemented by TypeScript, particularly the features aro","comments":1,"createdAt":1426103080000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6955833?v=3","loggedByName":"giancarloa","milestone":"","number":2301,"state":"closed","title":"TypeScript/AtScript union - what's going to happen to type system? structural always?","updatedAt":1426105920000},{"assignedTo":"","body":"```TypeScript\r\nclass C extends A, B {} \r\n```\r\n\r\nExpected: \r\n\r\n!!! Classes can only extend a single class.\r\n\r\nActual: \r\n\r\n!!! '{' expected.!!! ';' expected.","comments":2,"createdAt":1405627071000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":109,"state":"closed","title":"[Errors] multiple class inheritance","updatedAt":1426102058000},{"assignedTo":"","body":"```TypeScript\r\nnew Foo[];!!! 'new T[]' cannot be used to create an array. Use 'new Array<T>()' instead. \r\n```\r\n\r\nExpected: errors above\r\n\r\nActual: \r\n\r\n!!! Expression expected.!!! Cannot find name 'Foo'.!!! Cannot use 'new' with an expression whose ty","comments":5,"createdAt":1405627061000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":99,"state":"closed","title":"[Errors] incorrect array creation syntax","updatedAt":1426101262000},{"assignedTo":"","body":"```TypeScript\r\ninterface I implements A {    }\r\n```\r\n\r\nExpected: \r\n\r\n!!! Interface declaration cannot have 'implements' clause.\r\n\r\nActual: \r\n\r\n!!! '{' expected.!!! ';' expected.!!! ';' expected.!!! Cannot find name 'implements'.!!! Cannot find name '","comments":2,"createdAt":1405627086000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":121,"state":"closed","title":"[Errors] error recovery with interface with implements clause","updatedAt":1426101244000},{"assignedTo":"","body":"```TypeScript\r\nclass D extends C extends C {\r\n    baz() { }\r\n}\r\n```\r\n \r\nExpected: \r\n\r\n!!! 'extends' clause already seen.\r\n\r\nActual: \r\n\r\n!!! '{' expected.\r\n\r\n!!! ';' expected.\r\n\r\n!!! ';' expected.\r\n\r\n!!! Unknown identifier 'baz'.","comments":2,"createdAt":1405627073000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":112,"state":"closed","title":"[Errors] error recovery with duplicate extends clauses","updatedAt":1426101223000},{"assignedTo":"","body":"I have typescript version 1.4.1.0 and have noticed that if I have a return statement that looks something like this in my TS file\r\n\r\nreturn\r\n\"This is a really long so I had to put it in on it's own line to avoid horizontal scrolling.\";\r\n\r\nafter it ha","comments":2,"createdAt":1426095445000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11427712?v=3","loggedByName":"kruegeGH","milestone":"","number":2298,"state":"closed","title":"Return statement where the return is on its own line doesn't transpile correctly.","updatedAt":1426099906000},{"assignedTo":"","body":"TypeScript 1.4 allows variables to be used before they are initialized.\r\nFor example, both:\r\n```typescript\r\nfunction dd(): number {\r\n    var x: number;\r\n    return x;\r\n}\r\n```\r\nand\r\n```typescript\r\nfunction ddd() {\r\n    var x: number;\r\n    x++;\r\n}\r\n```","comments":3,"createdAt":1425678680000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11356467?v=3","loggedByName":"neilgalarneau","milestone":"","number":2234,"state":"open","title":"Suggestion: disallow use before initialization","updatedAt":1426091827000},{"assignedTo":"","body":"Typescript supports type aliases since 1.4. \r\n\r\nIn order to achieve better abstraction patterns and to enhance tooling, it would be nice to have a more extended alias syntax in typescript.\r\n\r\nOne current issue of not having aliases for other typescri","comments":4,"createdAt":1425985676000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10137?v=3","loggedByName":"ghost","milestone":"","number":2285,"state":"closed","title":"Extended alias syntax with \"as\"","updatedAt":1426071471000},{"assignedTo":"","body":"Hi,\r\n\r\n**VS**: 2015 CTP 5\r\n**TS**: 1.4\r\n\r\nIn the snapshot below, we are at the point of assigning an inline function to property `foo`:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1106823/6485181/beccf034-c279-11e4-80df-688211205fe9.png)\r\n","comments":7,"createdAt":1425480403000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":2196,"state":"closed","title":"Misleading intellisense when assigning in-line functions in Visual Studio","updatedAt":1426062806000},{"assignedTo":"vladima","body":"Currently `getEnclosingBlockScopeContainer` has the following code:\r\n\r\n```\r\nswitch (current.kind) {\r\n    case SyntaxKind.SourceFile:\r\n    case SyntaxKind.SwitchKeyword:\r\n    case SyntaxKind.CatchClause:\r\n    case SyntaxKind.ModuleDeclaration:\r\n    ca","comments":2,"createdAt":1425948090000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":2281,"state":"closed","title":"'getEnclosingBlockScopeContainer' does not handle switch statements and default clauses correctly","updatedAt":1426053463000},{"assignedTo":"","body":"Like #2185, but in catch blocks:\r\n```ts\r\ntry { }\r\ncatch (e) {\r\n   let e;\r\n   var e;\r\n}\r\n```\r\n\r\nSection 13.14.1 of the ES6 spec says:\r\n\r\nIt is a Syntax Error if any element of the BoundNames of CatchParameter also occurs in the\r\nLexicallyDeclaredNames","comments":0,"createdAt":1425334750000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2186,"state":"closed","title":"Declaring a var inside a catch block with the same name gives no error","updatedAt":1426051012000},{"assignedTo":"","body":"Generated definitions in [bin/typescriptServices_internal.d.ts](https://github.com/Microsoft/TypeScript/blob/f351916fc203b19e3cef062c6ff3e77a368f89e7/bin/typescriptServices_internal.d.ts#L273) are invalid, causing compilation error if used:\r\n\r\ntypesc","comments":2,"createdAt":1425897700000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"TypeScript 1.5","number":2268,"state":"closed","title":"createDiagnosticCollection should be @internal, or DiagnosticCollection should not be","updatedAt":1426050740000},{"assignedTo":"","body":"The following is allowed by the ES6 grammar:\r\n```ts\r\nfor (var [a, b] in []) { }\r\n```\r\nThis results in a type check error, because it doesn't make sense to destructure a string key. But it should still emit correctly downlevel. Right now we emit:\r\n```","comments":2,"createdAt":1425925537000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":2272,"state":"open","title":"Emit destructuring patterns in 'for...in' statements for ES3/5","updatedAt":1426050714000},{"assignedTo":"","body":"The type checker shouldn't accept this:\r\n\r\n```javascript\r\nvar map = new WeakMap();\r\nmap.set('foo', 'bar');\r\n```\r\nA key must be of type \"Object\".","comments":2,"createdAt":1424192292000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1011289?v=3","loggedByName":"srenault","milestone":"","number":2057,"state":"closed","title":"WeakMap keys require no primitive type constraint","updatedAt":1426050372000},{"assignedTo":"","body":"Previously the following would fail to emit due to parsing errors: \r\n\r\n```ts\r\nvar foo = 123 123;\r\n```\r\nNow it does emit JS: \r\n```js\r\nvar foo = 123;\r\n123;\r\n```\r\n\r\nWhat's more is that something crazy like: \r\n```ts\r\n2nof234@#$@#$&3421834701234!@#$!&@#$\"","comments":5,"createdAt":1426031873000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2290,"state":"closed","title":"Struggling to get an emit failure with 1.5","updatedAt":1426049788000},{"assignedTo":"vladima","body":"```TypeScript\r\nvar x = 10;\r\n\r\nswitch (x) {\r\n    case 10:\r\n        let x = 20;\r\n}\r\n```\r\n\r\nIt is worth ensuring the spec behavior, but I was under the impression that the `x` in `switch (x)` would refer to the outer `x`. Instead, we get\r\n\r\n> Block-scop","comments":0,"createdAt":1425947833000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":2280,"state":"closed","title":"Use-before-def is reported incorrectly for switch statement expressions","updatedAt":1426048809000},{"assignedTo":"","body":"When I save a TypeScript file it generates the javascript and map file as it should be. The problem is that the generated files are NOT automatically added to the project file references. This is a big problem since we're using T4MVC which doesn't cr","comments":4,"createdAt":1406631007000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/462013?v=3","loggedByName":"SeriousM","milestone":"","number":297,"state":"open","title":"Add option for nesting TypeScript output in project","updatedAt":1426048348000},{"assignedTo":"","body":"```ts\r\nvar [x, y] = [1];\r\n```\r\nThe error is on y saying 'Type [number] has no property 1' which is not the most intuitive result. The more human readable explanation would be a span on either the full LHS or full RHS saying 'Tuple type [number] with ","comments":0,"createdAt":1424402870000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.5","number":2090,"state":"closed","title":"Improve tuple errors","updatedAt":1426048292000},{"assignedTo":"","body":"Fixes #2280","comments":1,"createdAt":1426035165000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2291,"state":"closed","title":"introduce CaseBlock as a block-scoped container for switch statements","updatedAt":1426037634000},{"assignedTo":"","body":"Previously we had: \r\n\r\nsuccess : `output.emitOutputStatus === ts.EmitReturnStatus.Succeeded;`\r\nemitOnly: `!success && outputFiles.length`\r\n\r\nNow `getEmitOutput` only returns :\r\n\r\n```ts\r\ninterface EmitOutput {\r\n    outputFiles: OutputFile[];\r\n    emit","comments":3,"createdAt":1426031472000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2289,"state":"closed","title":"How to detect semantic only blockers vs. emit blockers","updatedAt":1426032776000},{"assignedTo":"","body":"- Maybe the non-tuple error isn't needed anymore\n\nCloses #2090","comments":13,"createdAt":1425682386000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2294695?v=3","loggedByName":"caitp","milestone":"","number":2238,"state":"closed","title":"Improve array destructuring error message","updatedAt":1426029199000},{"assignedTo":"","body":"DiagnosticsCollection interface is marked @internal in [src/compiler/types.ts](https://github.com/Microsoft/TypeScript/blob/c6cd57d18c85e59b2fbe9d316725748a0af8ac2b/src/compiler/types.ts#L1761), so this should be @internal too.\r\n\r\nOtherwise it causes","comments":4,"createdAt":1425909966000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4041967?v=3","loggedByName":"mihailik","milestone":"","number":2270,"state":"closed","title":"Fix for #2268 createDiagnosticCollection should be @internal","updatedAt":1426024680000},{"assignedTo":"","body":"Hi. \r\nI use VS2013 U4 and every plugin updated. I installed TS v.1.4 .\r\n\r\nWhen i add x.ts  file to project and ctrl + s it export true x.js file. \r\n\r\nbut x.js file not imported to your project because of when publish your project, there isn't x.js fi","comments":3,"createdAt":1425989889000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3220540?v=3","loggedByName":"sargin48","milestone":"","number":2286,"state":"closed","title":"when site publish with vs2013 typescript plugin problem","updatedAt":1426023700000},{"assignedTo":"","body":"This is not an issue with the Typescript project, however I am personally adding extensions to the typescript library and services and would like to test this out in an editor. However as my extensions are custom the editors I use do not respect this","comments":9,"createdAt":1425693313000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1242946?v=3","loggedByName":"dannymarsland","milestone":"","number":2246,"state":"closed","title":"typescript playground","updatedAt":1426021260000},{"assignedTo":"","body":"Implement TypeScript support for the `for-of` loop as described in the ES6 proposal\r\n\r\nReference: https://github.com/dherman/tc39-codex-wiki/blob/master/data/es6/for-of/index.md\r\n\r\nTo be determined: What cases can we support code generation for when ","comments":2,"createdAt":1405442817000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":7,"state":"closed","title":"Suggestion: 'for..of'","updatedAt":1426017749000},{"assignedTo":"","body":"This amends the return type of `getItem` on the `Storage` interface to be `string` rather than `any`.  This brings the definition in line with the W3C `Storage` definition [here](http://dev.w3.org/html5/webstorage/#storage-0).\r\n\r\nThere appeared to be","comments":6,"createdAt":1425913835000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1010525?v=3","loggedByName":"johnnyreilly","milestone":"","number":2271,"state":"closed","title":"`Storage.getItem` now returns `string` instead of `any`","updatedAt":1426016733000},{"assignedTo":"","body":"I've seen some short notions about pattern matching on code plex, but no serious discussions around it. As I'm a big fan of it, I've written up some small examples on how I think pattern matching could look in TypeScript.\r\n\r\nThis is by far no complet","comments":4,"createdAt":1405971748000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/790842?v=3","loggedByName":"Dignifiedquire","milestone":"","number":165,"state":"open","title":"Pattern Matching Support","updatedAt":1426016356000},{"assignedTo":"","body":"Javascript tooling convention is that ```/*!   */``` are kept when converting code (even if minifying/stripping comments).  We have some small support for this, but it's very incomplete.  Fixing this is a fairly trivial code change.  Specifically, we","comments":1,"createdAt":1425944194000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2277,"state":"closed","title":"Pinned comments aren't always emitted","updatedAt":1426016004000},{"assignedTo":"","body":"To me, seal(), freeze() and preventExtensions() should be declared like:\r\n`    seal<T>(o: T): T;`\r\n\r\nAdding it to ObjectConstructor does not help, the 'any' version is taken first.\r\nThe only solution I've found is to patch lib.d.ts...\r\nIs there a bet","comments":1,"createdAt":1422472998000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8625526?v=3","loggedByName":"stephanedr","milestone":"TypeScript 1.5","number":1835,"state":"closed","title":"Use generic for Object.seal(), freeze() and preventExtensions()","updatedAt":1426015465000},{"assignedTo":"","body":"Fixes #1835","comments":2,"createdAt":1425941471000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":2275,"state":"closed","title":"made seal, freeze and preventExtensions generic","updatedAt":1426015456000},{"assignedTo":"","body":"This is the downlevel emit for 'for...of' loops in ES3/ES5.\r\n\r\nThe following ES6 code:\r\n```ts\r\nfor (var v of expr) { }\r\n```\r\n\r\nwill be emitted as:\r\n```js\r\nfor (var _i = 0, _a = expr; _i < _a.length; _i++) {\r\n    var v = _a[_i];\r\n}\r\n```\r\nIt works in a","comments":4,"createdAt":1425526823000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2207,"state":"closed","title":"Emit 'for...of' statements in ES3/ES5","updatedAt":1426014796000},{"assignedTo":"","body":"Select Redirect Javascript output to directory.\r\nCreate ts with reference to another ts using backslash for path.\r\nBuild.Look for resulting javascript file in windows explorer.\r\n","comments":6,"createdAt":1424969632000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11215378?v=3","loggedByName":"glaborde","milestone":"","number":2152,"state":"open","title":"Backslash in reference path causes Visual studio 2013 to drop js in wrong directory","updatedAt":1426007537000},{"assignedTo":"","body":"As an example: \r\n\r\n```ts\r\n// Function 'F' takes function 'a' \r\n// and returns a new function which has exactly the same set of args as function 'a'\r\ninterface F<A extends Function>{\r\n\t(a:A):A;\r\n}\r\n\r\n// Is there a way to say:\r\nvar Foo:F;\r\n\r\n// Or am I","comments":1,"createdAt":1425976675000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2284,"state":"closed","title":"Request : A way to say that something is of a Generic Interface type","updatedAt":1425993764000},{"assignedTo":"","body":"I have a TS project that's compiled to a single file, where I need to append some additional code to the resulting combined file. I added a VS post-build action to perform the processing every time I build the solution. It works fine when ```Build ->","comments":0,"createdAt":1425733558000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8589488?v=3","loggedByName":"rotemdan","milestone":"","number":2252,"state":"open","title":"Add an option for compile-on-save to trigger VS pre- and post-build events","updatedAt":1425992677000},{"assignedTo":"","body":"I understand that `tsconfig.json` is read only for the typescript compiler. But whenever you guys start reading / modifying => writing `tsconfig.json` files would be great if you preserve additional keys. This would allow potential stuff like `tslint","comments":7,"createdAt":1423202485000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1955,"state":"closed","title":"Allow people to add stuff to `tsconfig.json`","updatedAt":1425962480000},{"assignedTo":"","body":"The basic LanguageService interface puts some requirements on the \"host\", such as an implementation of a ScriptSnapshot system to support incremental parsing, managing contexts, monitoring files on disk, scheduling diagnostic queries, maintaining lin","comments":1,"createdAt":1424060904000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2041,"state":"closed","title":"TS Server","updatedAt":1425951209000},{"assignedTo":"","body":"### Example\r\n```ts\r\nf(1, 2, ...items, 3, ...more)\r\n```\r\n### Codegen\r\n```ts\r\nf(...items); // ... becomes...\r\nf.apply(void 0, items);  // strict mode.Â  Otherwise, 'this'\r\n\r\nobj.foo(...items); // ... becomes...\r\nobj.foo.apply(obj, items); // , but only ","comments":1,"createdAt":1406233471000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":238,"state":"closed","title":"Spread arguments","updatedAt":1425946459000},{"assignedTo":"","body":"Recently a lot of projects working on/with JavaScript language features unified or at least came together to create new standards. AtScript was \"merged\" into TypeScript, there is the https://github.com/estree/estree project from Babel, Acorn and Espr","comments":4,"createdAt":1425758909000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1152805?v=3","loggedByName":"donaldpipowitch","milestone":"","number":2254,"state":"closed","title":"Question: Would it be good to use Babel for Transpiling ES.next features?","updatedAt":1425945133000},{"assignedTo":"","body":"","comments":1,"createdAt":1425941944000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2276,"state":"closed","title":"Provide specialized codepath for emitting when comments aren't necessary.","updatedAt":1425943898000},{"assignedTo":"","body":"","comments":0,"createdAt":1425881271000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2267,"state":"closed","title":"Simplify indentation code in the emitter.","updatedAt":1425941667000},{"assignedTo":"","body":"","comments":0,"createdAt":1425941276000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2274,"state":"closed","title":"Provide specialized codepath for emitting when comments aren't necessary.","updatedAt":1425941319000},{"assignedTo":"","body":"Fix up the runner as a result of fix in normalizing file path","comments":1,"createdAt":1425939304000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2273,"state":"closed","title":"Fix rwc runner","updatedAt":1425940001000},{"assignedTo":"","body":"Added additional cases for format on enter.  These cases fix bugs in the original format on enter (which wasn't distinguishing whether there was existing whitespace to start some types of lines).","comments":0,"createdAt":1425772064000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-required","name":"cla-required","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4419011?v=3","loggedByName":"steveluc","milestone":"","number":2258,"state":"closed","title":"TS Server format line fixes","updatedAt":1425930734000},{"assignedTo":"","body":"","comments":1,"createdAt":1425881255000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2266,"state":"closed","title":"Move variable closer to where it is used.","updatedAt":1425887227000},{"assignedTo":"","body":"This means by default we emit code uniformly, regardless of how your code was originally written.\r\n\r\nBeing 'experimental', it also means we can do things on a 'best effort' basis,  changing formatting and adding support on a case by case basis.\r\n\r\nIt","comments":2,"createdAt":1425867961000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2265,"state":"closed","title":"Move line preservation in emit behind an experimental compiler flag.","updatedAt":1425871536000},{"assignedTo":"","body":"I don't understand what is wrong with the following piece of code. It's a very basic scenario that I wish I could have since now union types are here. Please let me know what I am doing wrong:\r\n\r\n```typescript\r\ninterface Y { 'i am a very certain type","comments":6,"createdAt":1425842753000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":2264,"state":"closed","title":"Inference doesn't work with union types","updatedAt":1425857066000},{"assignedTo":"","body":"Fixes #1849  I guess :)\r\n\r\nedit: Oops, I did some manual testing and it worked fine (and because it was such a minor change)  I didn't run Jake runtests. Sorry. Will take a look","comments":5,"createdAt":1425834725000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":2263,"state":"closed","title":"Added valueOf definitions for String and Number","updatedAt":1425842495000},{"assignedTo":"","body":"\"Index expression arguments in 'const' enums must be of type 'string'\"\r\n\r\nThis error message is quite ambiguous:\r\n![type_string](https://cloud.githubusercontent.com/assets/4499495/5855689/19088796-a24c-11e4-9c29-0f1abfee01b4.png)\r\n\r\nSeems that it sho","comments":2,"createdAt":1421930219000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"Community","number":1771,"state":"closed","title":"Index expression arguments in 'const' enums must be s/of type 'string'/a string literal/","updatedAt":1425841730000},{"assignedTo":"mhegazy","body":"Hi,\r\n\r\n**TS**: 1.4\r\n\r\nThe compiler issues error \"Type 'Object' is not assignable to type 'string'\" for the following:\r\n\r\n```TypeScript\r\nvar f: string = new String('foo').valueOf();\r\n```\r\n\r\nThis is because `valueOf` resolves to the definition on `Obje","comments":1,"createdAt":1422537208000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5","number":1849,"state":"closed","title":"Lib.d.ts should define overrides of `valueOf` for String, Number and Boolean","updatedAt":1425839620000},{"assignedTo":"","body":"In addition to 'commonjs' and 'requirejs'-style module output styles please also support Closure library-style module syntax during transpilation.\r\n\r\nhttp://docs.closure-library.googlecode.com/git/namespace_goog_module.html\r\nhttps://plus.sandbox.goog","comments":1,"createdAt":1425689135000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/717850?v=3","loggedByName":"zzo","milestone":"","number":2244,"state":"open","title":"Request:  Support Closure-style module syntax","updatedAt":1425817967000},{"assignedTo":"","body":"I put this in program.ts rather than core.ts as core.ts doesn't contribute to typescript.d.ts, and this should be a publicly exported property.\r\n\r\nExposing a 'version' property is pretty standard in JavaScript libraries.  This will be accessible as \"","comments":3,"createdAt":1425691014000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/993909?v=3","loggedByName":"billti","milestone":"","number":2245,"state":"closed","title":"Made the 'version' string an exported property","updatedAt":1425793232000},{"assignedTo":"","body":"After compilation, everything get's collapsed to a single line (Arrow Functions, getter/setter chaining, promises). That being said, it is a huge pain point when debugging because you have to step-into/step-out to get to particular calls in the code.","comments":7,"createdAt":1425781694000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5741321?v=3","loggedByName":"mtraynham","milestone":"","number":2259,"state":"closed","title":"Emit new lines for Arrow function bodies or preserve source new line feeds","updatedAt":1425790580000},{"assignedTo":"","body":"","comments":0,"createdAt":1425766144000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2257,"state":"closed","title":"Update LKG.","updatedAt":1425782335000},{"assignedTo":"","body":"Hi,\r\n\r\n**TS Version**: 1.1\r\n\r\nGiven\r\n```TypeScript\r\nfunction foo() {\r\n\r\n    var x = 10;\r\n\r\n    var y = 11;\r\n}\r\n```\r\n We used to get\r\n\r\n```JavaScript\r\nfunction foo() {\r\n    var x = 10;\r\n\r\n    var y = 11;\r\n}\r\n```\r\nIn the new compiler the line break is ","comments":7,"createdAt":1412679086000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"Community","number":843,"state":"open","title":"Emit does not preserve empty lines","updatedAt":1425781727000},{"assignedTo":"","body":"","comments":1,"createdAt":1425760083000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2255,"state":"closed","title":"Address omitted return keyword.","updatedAt":1425766067000},{"assignedTo":"","body":"","comments":0,"createdAt":1425765630000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2256,"state":"closed","title":"Update LKG.","updatedAt":1425765641000},{"assignedTo":"","body":"Tagged templates are fairly easy to implement using ES5 and ES3, you simply turn the following:\r\n\r\n```javascript\r\nfn`Hello ${you}! You're looking ${adjective} today!`\r\n```\r\n\r\ninto the following:\r\n\r\n```javascript\r\nfn([\"Hello \", \"! You're looking \", \" ","comments":5,"createdAt":1425753719000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/112334?v=3","loggedByName":"Alxandr","milestone":"","number":2253,"state":"closed","title":"Support tagged templates in ES5 and ES3","updatedAt":1425757740000},{"assignedTo":"","body":"Orginal TS code:\r\n```typescript\r\nvar a = () => <Error>{ name: \"foo\", message: \"bar\" };\r\n/* OR */\r\nvar a = () => (<Error>{ name: \"foo\", message: \"bar\" });\r\n\r\n// I think parentheses should be required here\r\n// Both give same compilation results anyway\r","comments":1,"createdAt":1425719349000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"TypeScript 1.5","number":2250,"state":"closed","title":"Lambda function with object literal generates invalid ES6 code","updatedAt":1425724068000},{"assignedTo":"","body":"Fixes https://github.com/Microsoft/TypeScript/issues/2250","comments":2,"createdAt":1425720702000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2251,"state":"closed","title":"When emitting an arrow function, parenthesize the body if it could be interpreted as a block instead of an object literal.","updatedAt":1425723688000},{"assignedTo":"","body":"","comments":1,"createdAt":1425696384000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2248,"state":"closed","title":"Add an 'isVariableLike' helper function.","updatedAt":1425698351000},{"assignedTo":"","body":"Works fine on older versions of node, just started breaking with 0.12, multiple people have hit this:\r\n\r\n```\r\njake runtests-browser tests=fourslash\r\nRunning test(s): fourslash\r\nnode tests/webTestServer.js 8888 IE fourslash\r\nStatic file server running","comments":0,"createdAt":1424468352000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.5","number":2096,"state":"closed","title":"Running tests in the browser broken on node 0.12","updatedAt":1425695064000},{"assignedTo":"","body":"This PR completes support for ES6 modules (started in #1983). It adds support for `export default class` and `export default function` declarations and implements a common model for ES6 modules and TypeScript external modules.","comments":0,"createdAt":1425481353000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":2197,"state":"closed","title":"Complete support for ES6 modules","updatedAt":1425692193000},{"assignedTo":"","body":"Tested on 0.12 and 0.10 and fixes #2096\r\nOutput is witten to the terminal without the ERR and STDOUT prefixes.\r\nNot sure when a browser would do that though, but I tested it with a manual script.","comments":2,"createdAt":1425688979000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":2243,"state":"closed","title":"Fixed jake runtests-browser on node 0.12","updatedAt":1425691447000},{"assignedTo":"","body":"See commit: 2b50770 in jsInference\r\nThree errors of the form: 'No best common type exists among return expressions.'\r\n\r\nAre reported in src\\services\\inference.ts\r\n\r\nThe reason for this is the class method 'equals' which we write as:\r\n\r\n```\r\nclass Pri","comments":0,"createdAt":1425685726000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2241,"state":"open","title":"Erroneous BestCommonType error reported.","updatedAt":1425685726000},{"assignedTo":"","body":"Adds some asserts to help diagnose crashes in the future.","comments":2,"createdAt":1425681149000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":2236,"state":"closed","title":"Signature help","updatedAt":1425684681000},{"assignedTo":"","body":"Consider below code:\r\n```\r\nclass C{\r\n    x: string = \"hi\";// dfadsf\r\n    /* COMMENT */\r\n    constructor(t: string);\r\n    constructor(x: string|number) {\r\n    }\r\n}\r\n```\r\n\r\nOur emit JS is \r\n```\r\nvar C = (function () {\r\n    function C(x) {\r\n        this","comments":1,"createdAt":1425516801000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2203,"state":"closed","title":"Preserve comment above constructor overload","updatedAt":1425684151000},{"assignedTo":"","body":"This is my attempt at solving #2186.\r\nIf this isn't the right way of solving this, feel free to close this PR.\r\n\r\nI didn't implement this part:\r\n>It is a Syntax Error if any element of the BoundNames of CatchParameter also occurs in the VarDeclaredNa","comments":2,"createdAt":1425678955000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":2235,"state":"closed","title":"Let const in catchclause","updatedAt":1425684071000},{"assignedTo":"","body":"Parameter point to directory instead of scripts","comments":1,"createdAt":1425683894000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":2240,"state":"closed","title":"Fixed VSDevMode.ps1 parameter info","updatedAt":1425684013000},{"assignedTo":"","body":"An entirely digital CLA is a good CLA. Other products, such as Azure, have [significantly simpler processes](http://azure.microsoft.com/blog/2014/10/06/simple-contribution-to-azure-documentation-and-sdk/).","comments":1,"createdAt":1425682209000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2294695?v=3","loggedByName":"caitp","milestone":"TypeScript 1.5","number":2237,"state":"closed","title":"Simplify CLA process","updatedAt":1425683959000},{"assignedTo":"","body":"Closes #2237","comments":2,"createdAt":1425683260000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2294695?v=3","loggedByName":"caitp","milestone":"","number":2239,"state":"closed","title":"Document procedure for digital CLA signature in CONTRIBUTING.md","updatedAt":1425683943000},{"assignedTo":"","body":"Currently if you have {\"watch\": true} set in your compilerOptions in tsconfig.json it is ignored, as only the command-line watch setting is checked.  Thus when you run just \"tsc\" on the command line it simply runs and exits.  With the change the conf","comments":2,"createdAt":1425627421000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/993909?v=3","loggedByName":"billti","milestone":"","number":2222,"state":"closed","title":"Fix watch to honor tsconfig.json setting","updatedAt":1425681884000},{"assignedTo":"","body":"The power of properties is great and sadly they don't exist in ES3. We do though have a compiler that could convert the property and all it's calls to get and set calls.\r\n\r\nFor naming I think simply appending _get or _set to the property's name would","comments":6,"createdAt":1425608703000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Canonical","name":"Canonical","color":"000000"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1119883?v=3","loggedByName":"SamuelEnglard","milestone":"","number":2219,"state":"closed","title":"Implement Getter and Setters for ES3 via compiler","updatedAt":1425681806000},{"assignedTo":"","body":"I noticed this when trying to compile with the \"-p\" switch for the local folder, using \"./\" (i.e. \"tsc -p ./\").  The code appends \"/tsconfig.json\" to locate the file, which results in a path of \".//tsconfig.json\".  The current normalization code spli","comments":2,"createdAt":1425628798000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/993909?v=3","loggedByName":"billti","milestone":"","number":2223,"state":"closed","title":"Fix path normalization for patterns such as './/tsconfig.json'","updatedAt":1425681803000},{"assignedTo":"","body":"The Babel (formerly e6to5) transpiler comes with a special CLI called \"babel-node\" that lets the user \"run\" EcmaScript 6 code without thinking about the compiler step. The program transforms the code automatically.\r\n\r\nIt essentially mimics the nodejs","comments":3,"createdAt":1425670471000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/919580?v=3","loggedByName":"robertsundstrom","milestone":"","number":2231,"state":"open","title":"Node CLI","updatedAt":1425681008000},{"assignedTo":"","body":"Conservative fix for a crash in the navbar and adding instrumentation for a better fix.\r\n\r\nTypeError: Unable to get property 'localeCompare' of undefined or null reference\r\nat Anonymous function (:20435:25)\r\nat sortNodes (:20433:17)\r\nat getChildNodes","comments":3,"createdAt":1425606091000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":2218,"state":"closed","title":"Add assert for unexpected syntaxkind and a conservative temporary fix.","updatedAt":1425672172000},{"assignedTo":"","body":"I would like to do this:\r\n\r\n```typescript\r\nvar foo:string[]|number[] = [];\r\nfoo.forEach((element) => {\r\n\t\r\n});\r\n```\r\n\r\nIn the playground I am getting an error that I cannot call forEach. \r\n\r\nFurthermore I would expect the \"element\" to be of type \"str","comments":1,"createdAt":1425654429000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/900690?v=3","loggedByName":"bpasero","milestone":"","number":2227,"state":"closed","title":"Or typing does not inherit array methods","updatedAt":1425668858000},{"assignedTo":"","body":"[Sorry.. screwed up rebasing..]\r\nHi. This PR resolves issue #2214 allowing the following code to work\r\n```\r\nfunction logNumber(v: number) { console.log(\"number:\", v); }\r\nfunction logString(v: string) { console.log(\"string:\", v); }\r\n\r\nfunction foo1(v:","comments":1,"createdAt":1425663440000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7459695?v=3","loggedByName":"BSteephenson","milestone":"","number":2229,"state":"closed","title":"Allows type guards with switch statement (need help..)","updatedAt":1425664171000},{"assignedTo":"","body":"Original issue: [[st3] keeps indenting by 4 ws when typing](https://github.com/Microsoft/ngconf2015demo/issues/2)","comments":1,"createdAt":1425654267000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2226,"state":"open","title":"Allow different syntactic elements have different indentation","updatedAt":1425655994000},{"assignedTo":"","body":"","comments":7,"createdAt":1421704470000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1730,"state":"closed","title":"Update version to 1.4.2","updatedAt":1425649267000},{"assignedTo":"","body":"I just noticed that the compiler complains about this:\r\n```typescript\r\n\r\ninterface Car {\r\n\tengine: string;\r\n}\r\n\r\ninterface Car {\r\n\twheels: string;\r\n}\r\n\r\nvar myCar: Car = {\r\n\twheels: 'Hej'\r\n};\r\n\r\nconsole.log(myCar);\r\n\r\n```\r\n\r\n```\r\nProperty 'engine' is","comments":6,"createdAt":1425632753000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2224,"state":"closed","title":"Two interface with same identifier misbehavior","updatedAt":1425640015000},{"assignedTo":"","body":"It seems like teams from MS and Google are keen on keeping alignment and syntax compatibility between AtScript and TypeScript. Right now AtScript is billed as a superset of the TypeScript syntax, adding an optional runtime type system and annotations","comments":13,"createdAt":1414556620000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/320332?v=3","loggedByName":"JeroMiya","milestone":"","number":986,"state":"closed","title":"Formalize AtScript-TypeScript alignment","updatedAt":1425600675000},{"assignedTo":"","body":"It would be good if you included a script that checks for the latest version of `tsc` like twitter bower's and yeoman's https://www.npmjs.com/package/update-notifier.","comments":2,"createdAt":1424949116000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2150,"state":"open","title":"NPM update notifier","updatedAt":1425599690000},{"assignedTo":"","body":"- changes in tests related to computed properties are related to change `createNode` -> `createSynthesizedNode` in emitter. \r\n- capturing block scoped variables in closures inside loops is not supported scenario in this PR though it can be added late","comments":5,"createdAt":1425000122000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2161,"state":"closed","title":"Downlevel emit for let\\const","updatedAt":1425596583000},{"assignedTo":"","body":"","comments":1,"createdAt":1425568481000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":2209,"state":"closed","title":"Run jake in interactive mode so output isn't lost.","updatedAt":1425568532000},{"assignedTo":"","body":"This returns true:\r\nfunction getValue1(): boolean {\r\n    return true || false;\r\n}\r\n\r\nThis returns undefined:\r\nfunction getValue2(): boolean {\r\n    return \r\n    true || false;\r\n}","comments":1,"createdAt":1425543158000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3180401?v=3","loggedByName":"bmiller1","milestone":"","number":2208,"state":"closed","title":"return not on same line as value returns undefined","updatedAt":1425545002000},{"assignedTo":"","body":"","comments":1,"createdAt":1425521814000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2205,"state":"closed","title":"Never use the entire span of a function declaration or function expression when reporting a checker error.","updatedAt":1425523888000},{"assignedTo":"","body":"","comments":0,"createdAt":1425503830000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2201,"state":"closed","title":"Adding test to ensure comment before block is conserved","updatedAt":1425505549000},{"assignedTo":"","body":"In the playground:\r\nhttp://www.typescriptlang.org/Playground#src=/*%20abc%20*/%0Avar%20a%20=%201;%0A/**/\r\n\r\n```typescript\r\n/* abc */\r\nvar a = 1;\r\n/**/\r\n```\r\nIt produces\r\n```javascript\r\n/* abc */\r\nvar a = 1;\r\n/* abc */\r\nvar a = 1;\r\n ```","comments":1,"createdAt":1425499317000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":2200,"state":"closed","title":"Incorrect output with C-style comments","updatedAt":1425504400000},{"assignedTo":"","body":"```ts\r\nvar x;\r\n({ x = 0 } = { x: 0 });\r\n```\r\nThe following does not parse, but it's allowed by section 12.14.5 of the ES6 spec. Specifically, we are failing to parse the production:\r\n```\r\nAssignmentProperty[Yield] :\r\n     IdentifierReference[?Yield] ","comments":1,"createdAt":1424993232000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2158,"state":"closed","title":"Shorthand property name with an initializer in object assignment pattern does not parse","updatedAt":1425500883000},{"assignedTo":"","body":"Motivation:\r\nSome JavaScript APIs take arguments of type Array, where the array is constructed, for example, by taking a number of items of one type followed by one or more arguments of another type, or perhaps the other way around. A real world exam","comments":4,"createdAt":1417544173000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/320332?v=3","loggedByName":"JeroMiya","milestone":"","number":1336,"state":"open","title":"Feature Request: Tuples with variable type arguments","updatedAt":1425497762000},{"assignedTo":"","body":"Fix jake perftsc.","comments":10,"createdAt":1424264495000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":2063,"state":"closed","title":"Run jake in interactive mode so output isn't lost.","updatedAt":1425482843000},{"assignedTo":"","body":"...ue.\r\nEffectively `ScopeFrame` is analogous to locals for generated names so to ensure that name is unique we need to check the entire chain of scope frames.\r\n\r\n*NOTE:*\r\nSet of names in scopes in populated incrementally as we traverse the tree in d","comments":5,"createdAt":1425448949000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2194,"state":"closed","title":"look through the entire chain of name scopes to ensure that name is uniq...","updatedAt":1425456592000},{"assignedTo":"","body":"C# allows adding names of arguments in a function call:\r\n```csharp\r\nCalculateBMI(weight: 123, height: 64);\r\n```\r\nSee http://msdn.microsoft.com/en-us/library/dd264739.aspx\r\n\r\n In TypeScript's source this is also done, but with comments:\r\n```typescript","comments":15,"createdAt":1408177798000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"","number":467,"state":"open","title":"Named arguments in function call","updatedAt":1425455606000},{"assignedTo":"","body":"Reverts Microsoft/TypeScript#2063","comments":0,"createdAt":1425449891000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2195,"state":"closed","title":"Revert \"Run jake in interactive mode so output isn't lost.\"","updatedAt":1425450768000},{"assignedTo":"","body":"Original report : http://stackoverflow.com/questions/28844917/typescript-cant-find-external-module-when-referenced-by-two-different-files\r\n\r\nGiven the structure : \r\n\r\n```\r\n./first/shared.ts\r\n./first/second/class_a.ts\r\n./first/second/class_b.ts\r\n./thi","comments":1,"createdAt":1425432686000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2193,"state":"closed","title":"Bug on resolving relative paths by tsc.js","updatedAt":1425433611000},{"assignedTo":"","body":"This work is in progress.  There is no intention to check this in any time soon.  The pull request exists just for people to look at, watch and comment on the progress of the work.","comments":0,"createdAt":1425414648000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2191,"state":"closed","title":"Add support for inferring types in JavaScript files for language service purposes.","updatedAt":1425428184000},{"assignedTo":"","body":"I just tried to make a contribution to Typescript I just noticed a lot of white space issues in my git diff. Since I run an extension and set it to make windows's new lines in line endings and it also trim any spaces at the ending. I just noticed tha","comments":5,"createdAt":1425020659000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2166,"state":"closed","title":"White-space policy â editorconfig","updatedAt":1425424355000},{"assignedTo":"vladima","body":"Repro:\r\n1. create new TypeScript project (in VS 2015)\r\n2. open .ts file, hit ctrl+s many times (this will invoke compile-on-save), make a few edits (add spaces) then keep saving the file. Eventually VS crashes.","comments":3,"createdAt":1424201089000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.5","number":2058,"state":"closed","title":"Crash in CompileOnSave on Visual Studio 2015","updatedAt":1425415841000},{"assignedTo":"","body":"Fixes #2047.\r\n\r\nES6 extended escapes take the form of `\\u{XXXXX...}` where `XXXXX...` is any number of hex digits. [It is a syntax error if the value of these digits is greater than 0x10FFFF](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-","comments":0,"createdAt":1425080979000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2169,"state":"closed","title":"Add support for extended Unicode escape sequences in strings and templates","updatedAt":1425413802000},{"assignedTo":"","body":"Have I made a silly mistake here? I thought the tuple type `[string, number]` was roughly equivalent to the array-of-union-type `(string | number)[]`, and that the following was therefore legal:\r\n\r\n    function lengths (xs: string[]): [string, number","comments":3,"createdAt":1425370755000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/121074?v=3","loggedByName":"rolyp","milestone":"","number":2189,"state":"closed","title":"Tuple type vs. array-of-union-type","updatedAt":1425374665000},{"assignedTo":"","body":"","comments":2,"createdAt":1425336437000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2187,"state":"closed","title":"Use CRLF in our code, not LF.","updatedAt":1425356994000},{"assignedTo":"","body":"The syntax and emit for `for...of` loops was already done, so this PR handles the type check aspect. It also introduces the concept of iterators in TypeScript.\r\n\r\nIf you have a statement of the form\r\n```ts\r\nfor (var v of X) { }\r\n```\r\nor\r\n```ts\r\nfor (","comments":3,"createdAt":1425003966000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2164,"state":"closed","title":"Support 'for...of' loops in ES6","updatedAt":1425340045000},{"assignedTo":"","body":"","comments":1,"createdAt":1425249079000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2177,"state":"closed","title":"Don't intern all strings and numbers.  Just the ones used as declaration names","updatedAt":1425335778000},{"assignedTo":"","body":"As discussed in #2166 .","comments":2,"createdAt":1425269554000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2178,"state":"closed","title":"Adds editorconfig file","updatedAt":1425334703000},{"assignedTo":"","body":"When I am writing a declaration file, I found it really frustrating repeating the inherited method that returns the instance itself for a correct return type.\r\n\r\nE.g. for animation library GSAP, many classes are inherited from class `Animation`, I ha","comments":2,"createdAt":1425284470000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":2179,"state":"closed","title":"Supporting type `self` or something that can represents the current instance.","updatedAt":1425326896000},{"assignedTo":"","body":"Currently tagged templates aren't supported when targeting ES3 or ES5. Tagged templates can be (partially) emitted like this:\r\n\r\n```javascript\r\nfoo([\"A \", \" B \", \" C\"], 1, 2);\r\n```\r\n\r\nThe only difference with ES6 is (if I'm not mistaken) that the `ra","comments":0,"createdAt":1420380930000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"TypeScript 1.5","number":1590,"state":"closed","title":"Tagged templates emit for ES3 & 5","updatedAt":1425288984000},{"assignedTo":"","body":"I would like to know if there is some sort of special support for null values in Typescript, like the Maybe Types in Flow ?\r\n ","comments":1,"createdAt":1421348538000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/98088?v=3","loggedByName":"rogergl","milestone":"","number":1684,"state":"closed","title":"Is there some special handling or type inference for null values?","updatedAt":1425288926000},{"assignedTo":"","body":"The version on NPM is `v1.4.1` is it any different from `v1.4.0`? https://github.com/Microsoft/TypeScript/releases","comments":4,"createdAt":1421542942000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1711,"state":"closed","title":"TypeScript version v1.4.1","updatedAt":1425288895000},{"assignedTo":"","body":"TSLint relies heavily on walkers and visitors, so I'm figuring out the next steps since these are no longer exposed via the language service. Since I still see visitors in the 1.4 release internally, what is the future of this logic? Will it be remov","comments":11,"createdAt":1421703214000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/362990?v=3","loggedByName":"ashwinr","milestone":"","number":1728,"state":"closed","title":"The future of SyntaxWalker","updatedAt":1425288873000},{"assignedTo":"","body":"I am working on CDN web site and there is many projects and many versions of those projects...\r\nI had to set the build action of all \"ts\" files to Content instead of \"TypeScriptCompile\" otherwise the web site build operation fails.\r\nIt would be nice ","comments":6,"createdAt":1422441617000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8445326?v=3","loggedByName":"tsachyg","milestone":"","number":1828,"state":"closed","title":"Multiple typescript projects in the same web site","updatedAt":1425288790000},{"assignedTo":"","body":"How can I do something like that?\r\n\r\n```javascript\r\nvar ts = 'var a: number = 1;'\r\nvar js = require('typescript-compiler').compile(js);\r\n````","comments":12,"createdAt":1422411373000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/941075?v=3","loggedByName":"luisrudge","milestone":"","number":1826,"state":"closed","title":"Use compiler from within nodejs","updatedAt":1425288767000},{"assignedTo":"","body":"I can do 'import Alias = Module' but I don't find a syntax for simple 'import Module' to import everything.\r\nDo I miss something ?","comments":4,"createdAt":1422444455000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1831,"state":"closed","title":"Is it possible to import everything from the module ?","updatedAt":1425288719000},{"assignedTo":"vladima","body":"Migrated issue from codeplex:\r\nhttps://typescript.codeplex.com/discussions/472439\r\nhttps://typescript.codeplex.com/workitem/2386\r\nhttps://typescript.codeplex.com/workitem/779\r\n\r\nI'm yet experiencing very high cpu usage from *VS2013 update 3 RC* and I","comments":25,"createdAt":1406312753000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1743048?v=3","loggedByName":"KamyarNazeri","milestone":"TypeScript 1.5","number":250,"state":"closed","title":"High CPU usage from Visual studio process","updatedAt":1425238040000},{"assignedTo":"","body":"This change adds type checking support for properties whose names are the built-in ES symbols. It allows you to create objects like:\r\n```ts\r\nvar obj = {\r\n    [Symbol.toStringTag]() {\r\n        return \"\";\r\n    }\r\n}\r\n```\r\nAnd you get the right type when","comments":2,"createdAt":1423288668000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1978,"state":"closed","title":"Support ES6 built-in symbols","updatedAt":1425163083000},{"assignedTo":"","body":"This PR adds support for ES6 import and export declarations. Supported import forms include:\r\n```typescript\r\nimport defaultBinding from \"foo\";  // Import foo's default export\r\nimport * as foo from \"foo\";        // Make a single binding for the entire","comments":11,"createdAt":1423447090000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1983,"state":"closed","title":"Support ES6 import and export declarations","updatedAt":1425162878000},{"assignedTo":"","body":"I got differences between the npm installation on windows and the installation for Mac. On windows when I list my node packages I can see the Typescript 1.4.1, but the version of tsc says 1.0.3.0: \r\n![windows typescript](https://cloud.githubuserconte","comments":5,"createdAt":1425140603000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7613864?v=3","loggedByName":"dantedubon","milestone":"","number":2174,"state":"closed","title":" Issues with npm typescript@1.4.1 on windows","updatedAt":1425151987000},{"assignedTo":"","body":"I've tried to add indent option to `tsc`.\r\n\r\nSo `tsc` have the option `--indentSize [size]` where `size`can be 2 or 4.\r\n\r\nI haven't fixed test cases. It would be good if someone could guide me through it. I was very hard to follow what is going on. I","comments":5,"createdAt":1425012443000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2165,"state":"closed","title":"Adds indent option","updatedAt":1425128945000},{"assignedTo":"","body":"","comments":1,"createdAt":1424902165000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2140,"state":"closed","title":"Support new import / export syntax in preProcessFile","updatedAt":1425128583000},{"assignedTo":"","body":"```tsc --sourceMap --mapRoot maproot/ --out a.js t.ts```\r\n\r\nIt simply places the .js.map files in the same directory as the --out file.","comments":4,"createdAt":1424298070000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5557301?v=3","loggedByName":"dani-h","milestone":"","number":2067,"state":"closed","title":"--mapRoot doesn't seem to work","updatedAt":1425122025000},{"assignedTo":"","body":"","comments":1,"createdAt":1416955300000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1271,"state":"closed","title":"Fixed bug where tagged templates with a literal adjacent to EOF showed sig help past the end.","updatedAt":1425088954000},{"assignedTo":"","body":"I'm just wondering why there can't be a enum value as a default param value? \r\n```typescript\r\nfunction(x: enumValue.X) {\r\n  // do something\r\n}\r\n```\r\n\r\nThe error message I got is also a bit strange. Can't find name `enumValue`.","comments":1,"createdAt":1425088208000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2171,"state":"closed","title":"Default enum value in param","updatedAt":1425088342000},{"assignedTo":"","body":"I'm confused why the spec (section 3.10.4) allows this situation:\r\n\r\n```typescript\r\ninterface IFoo {\r\n\ta: number;\r\n}\r\n\r\ninterface IBar extends IFoo {\r\n\tb: string;\r\n}\r\n\r\nfunction expectsBar(bar: IBar): void {\r\n\tconsole.log(bar.b);\r\n}\r\n\r\nfunction provi","comments":1,"createdAt":1425087386000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"","number":2170,"state":"closed","title":"Bug in type compatibility of call signature parameters?","updatedAt":1425087973000},{"assignedTo":"","body":"This could happen when you had multiple language services, and they were sharing some files.\r\nIf a file got edited in one LS, it could get corrupted in the other.  Now, the DocumentRegistry\r\nserves as the canonical source of 'good' source files.  Lan","comments":2,"createdAt":1425073354000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2167,"state":"closed","title":"Fix issue where source files could get corrupted.","updatedAt":1425083397000},{"assignedTo":"","body":"Documented here: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent\r\n\r\nFixes #674.","comments":3,"createdAt":1425080537000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1740306?v=3","loggedByName":"dperelman","milestone":"","number":2168,"state":"closed","title":"Added missing MouseEvent constructor.","updatedAt":1425083326000},{"assignedTo":"","body":"Reported originally on <https://typescript.codeplex.com/workitem/2540>\r\n\r\n```TypeScript\r\nmodule module.var.var {\r\n    export var a;\r\n}\r\n```\r\nGenerated JS is invalid, but it's not a compiler error now.\r\n","comments":2,"createdAt":1407363737000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":382,"state":"open","title":"No error using keywords in dotted module names","updatedAt":1425066231000},{"assignedTo":"","body":"Currently it is not possible to set a type for a key in the object literal.\r\n\r\n```typescript\r\ninterface A {\r\n\tx: number;\r\n\ty: string;\r\n}\r\n\r\nvar a = {\r\n\t// I would assume the following syntax\r\n\t// <A>q: { ... }\r\n\tq: {\r\n\t\tx: 1,\r\n\t\ty: \"a\"\r\n\t}\r\n}\r\n```\r\n\r","comments":18,"createdAt":1422994163000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1912,"state":"closed","title":"Optional object literal typing","updatedAt":1425063550000},{"assignedTo":"","body":"It is possible to define variable with declared when the function name is not 'new'\r\n\r\n```typescript\r\ninterface X {\r\n}\r\ndeclare var X: {\r\n    f(): X;\r\n}\r\n\r\n// OK, compatible type\r\nvar X = {\r\n\tf() { return <X>null; }\r\n};\r\n\r\n\r\ninterface Y {\r\n}\r\ndeclare","comments":12,"createdAt":1424946245000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":2149,"state":"closed","title":"Define variable to match declared variable with 'new'","updatedAt":1425063496000},{"assignedTo":"","body":"Code examples:\r\n```ts\r\nclass Animal {\r\n    name: string;\r\n}\r\nclass Dog extends Animal {\r\n    name: any;\r\n    woof() { }\r\n}\r\n\r\nvar zoo: Animal[];\r\nzoo[0] = new Dog(); // OK\r\nzoo = [new Dog(), new Animal()];  // Error, cannot convert {}[] to Animal[]\r\n","comments":4,"createdAt":1410361718000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":644,"state":"closed","title":"Use assignability relation in Best Common Type when checking contextual type against candidates","updatedAt":1425057480000},{"assignedTo":"","body":"Sorry if this is a duplicate - I'd imagine someone else has asked the same thing - but the absence of a node-facing require'able API has [other tools like tern](https://github.com/marijnh/tern/blob/master/lib/typescript.js#L9-L12) requiring files wit","comments":9,"createdAt":1420474944000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/32314?v=3","loggedByName":"tmcw","milestone":"","number":1598,"state":"closed","title":"Export a module with `require()`","updatedAt":1425053287000},{"assignedTo":"","body":"","comments":1,"createdAt":1425000470000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2162,"state":"closed","title":"Simplify some places in the compiler where we have esoteric declarations.","updatedAt":1425021695000},{"assignedTo":"","body":"","comments":0,"createdAt":1425000547000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2163,"state":"closed","title":"Produce better wrapping for object literal emit with computed property names.","updatedAt":1425002379000},{"assignedTo":"","body":"This allows us to more accurately compare and constrast times between that\r\ncompiler and the current one.","comments":1,"createdAt":1424991117000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2157,"state":"closed","title":"Print times in a manner more consistent with the 1.3 compiler.","updatedAt":1425000485000},{"assignedTo":"","body":"Something along the lines of: \r\n```JSON\r\n{\r\n  \"files\" : [\r\n    \"folder1\\\\*.ts\",\r\n    \"folder2\\\\**.ts\"\r\n  ]\r\n}\r\n```\r\n\r\nopen questions:\r\n- Should it be in files or a separate property\r\n- What is the expected --watch behavior\r\n- Should we add excludes a","comments":2,"createdAt":1424972790000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2154,"state":"closed","title":"Support globs in tsconfig.json","updatedAt":1424999751000},{"assignedTo":"","body":"I have many scenarios where I would do this:\r\n```typescript\r\nimport myExternalModule = require(\"./myExternalModule\");\r\n// not using myExternalModule here\r\n```\r\nI dont use `myExternalModule` in my code but still I want it to be included using requirej","comments":14,"createdAt":1409839228000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5099081?v=3","loggedByName":"alidorosty1234","milestone":"","number":596,"state":"closed","title":"force import","updatedAt":1424999191000},{"assignedTo":"","body":"In the following case a module defined in TypeScript will not be included in the required modules of the module.\r\n\r\n```\r\nimport something = require('Something');\r\n\r\nangular.module('app')\r\n.controller('somethingController', [\r\n  'definedInSomething', ","comments":4,"createdAt":1424818670000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2181368?v=3","loggedByName":"QueueHammer","milestone":"","number":2132,"state":"closed","title":"Imports left out of module dependencies when not directly assigned or assigned to.","updatedAt":1424993864000},{"assignedTo":"","body":"I am using AngularJs and injecting a service, which is a TypeScript class in an external module, into a controller which is also a TypeScript class.  Though I am specifically making a call to a service method, the TypeScript compiler will not include","comments":10,"createdAt":1423959439000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/136476?v=3","loggedByName":"rcollette","milestone":"","number":2038,"state":"closed","title":"define parameter not generated for a referenced AND used external module class.","updatedAt":1424991784000},{"assignedTo":"","body":"Maybe it's the Haskeller in me, but since we have had type aliases, I've wanted to be able to specify `type Foo<T> = ...` in aliases. I offer a few motivating examples:\r\n\r\nFirst, The d3.js API accepts constant values or functions that compute values ","comments":1,"createdAt":1424988721000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/194893?v=3","loggedByName":"gustavderdrache","milestone":"","number":2155,"state":"closed","title":"Parameterized type aliases","updatedAt":1424990777000},{"assignedTo":"","body":"Example:\r\n```javascript\r\ninterface AnySet<T> {\r\n    [index:T]:boolean\r\n}\r\n```\r\nwill output  *\"error TS1023: An index signature parameter type must be 'string' or 'number'\"*, which is clearly  not an intended behaviour. \r\n","comments":4,"createdAt":1424969920000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2067748?v=3","loggedByName":"VbifRkbvjd","milestone":"","number":2153,"state":"closed","title":"generics in interface definition of iterable data structures. ","updatedAt":1424980848000},{"assignedTo":"","body":"I've implemented basic tagged templates emit when targeting ES3 or ES5.\r\n\r\n```typescript\r\nfoo `A ${1} B ${2} C`;\r\n```\r\nis compiled to\r\n```javascript\r\nfoo([\"A \", \" B \", \" C\"], 1, 2);\r\n```\r\n\r\nSee also #1590. I haven't updated the tests yet.","comments":57,"createdAt":1420380887000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"","number":1589,"state":"closed","title":"Tagged templates ES3 & 5","updatedAt":1424975382000},{"assignedTo":"CyrusNajmabadi","body":"In one our test suit, when users use \"from\" as a name of function parameter, the compiler parses it incorrectly and report \"Parameter declaration expected\" .\r\n\r\n```\r\nclass C {\r\n    public foo(from:any) {}\r\n}\r\n```\r\n\r\nThe compiler will report \"error TS","comments":1,"createdAt":1424808272000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.5","number":2128,"state":"closed","title":"Incorrectly parse \"from\" in a function parameter","updatedAt":1424972455000},{"assignedTo":"","body":"Hi,\r\n\r\nThe most obvious case is for enums:\r\n\r\n```typescript\r\nenum Foo {\r\n\tbar,\r\n\tallBarOne\r\n}\r\n\r\nfunction f(foo: Foo) {\r\n\r\n\tfoo === // list Foo members here\r\n}\r\n```\r\n\r\nShould also work for `boolean` (although such comparisons are not very common).\r\n\r","comments":0,"createdAt":1424959833000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":2151,"state":"open","title":"Contextual intellisense in Visual Studio","updatedAt":1424960158000},{"assignedTo":"","body":"","comments":2,"createdAt":1424929677000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2146,"state":"closed","title":"'from' is a contextual keyword, and should only be recognized as by the parser as such.","updatedAt":1424941250000},{"assignedTo":"","body":"I am writing a test and I have an issue.\r\nThe test runner doesn't have the global object I need since it is running in a different environment.\r\nI want to create this object because strict mode complains otherwise, but TypeScript cannot do it.\r\n\r\nI h","comments":6,"createdAt":1424932880000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":2147,"state":"closed","title":"Question, how to make a variable within declared module name","updatedAt":1424934990000},{"assignedTo":"","body":"Update project structure after change.  After each change a timer is started.  If timer finishes before another change takes place, project structure will be updated to reflect any changes in reference comments or import statements.","comments":2,"createdAt":1424764088000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-required","name":"cla-required","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4419011?v=3","loggedByName":"steveluc","milestone":"","number":2125,"state":"closed","title":"Update project structure on idle after change","updatedAt":1424930326000},{"assignedTo":"","body":"I'm trying to write a tool for `Typescript`. Though I got some problem:\r\n\r\nIn scanner.ts:\r\n```typescript\r\n/// <reference path=\"../../typings/node/node.d.ts\" />\r\n/// <reference path=\"../../typings/typescript/typescript.d.ts\" />\r\n/// <reference path=\"t","comments":5,"createdAt":1424860376000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2135,"state":"closed","title":"Import statement causes problem with external module ","updatedAt":1424929624000},{"assignedTo":"","body":"It would be good if `tsc`could output code snippet on where some error occurs:\r\n\r\n```\r\nfunction test() {\r\n----------------^-- \r\nsrc/preprocessor/scanner.ts(185,1): error TS1128: Declaration or statement expected.\r\n```\r\n\r\nJust looking at the line and ","comments":0,"createdAt":1424929324000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2145,"state":"open","title":"Output code snippet","updatedAt":1424929324000},{"assignedTo":"","body":"Fixes #2141.\r\n\r\nGo through individual commits.","comments":1,"createdAt":1424916272000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2143,"state":"closed","title":"Fix character escaping for downlevel template strings","updatedAt":1424918475000},{"assignedTo":"DanielRosenwasser","body":"```javascript\r\nvar foo = `[\"m\",9536]`;\r\n```\r\nEmits\r\n```javascript\r\nvar foo = \"[\\\"m\\\",\\u0039536]\"; // ?\r\n```\r\nI came across this by pasting JSON into a template string. Whats '\\u003' ?\r\n","comments":3,"createdAt":1424903616000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"TypeScript 1.5","number":2141,"state":"closed","title":"Template string bug \\u003 ?","updatedAt":1424918475000},{"assignedTo":"","body":"Copied from CodePlex#1369\r\n\r\nThe current ES6 and TypeScript syntax for classes makes it difficult to perform any meaningful modifications to a function that is a member of a class without extreme effort. Libraries such as ember.js added additional pr","comments":6,"createdAt":1408551184000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"","number":490,"state":"closed","title":"Add support for Python-like decorators","updatedAt":1424915425000},{"assignedTo":"","body":"","comments":1,"createdAt":1424911584000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2142,"state":"closed","title":"Ensure that the cost for typechecking is not billed to the emit portion of the compiler.","updatedAt":1424912567000},{"assignedTo":"","body":"","comments":1,"createdAt":1424900010000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2138,"state":"closed","title":"Remove optimization of eliding the preamble code for functions without statements.","updatedAt":1424903308000},{"assignedTo":"","body":"Also adding support for goto def on  the alias (e.g:  A and B in `import {A, B} from \"mod\";`)","comments":1,"createdAt":1424738844000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2121,"state":"closed","title":"Support for goto def on new Import/Export syntax","updatedAt":1424896114000},{"assignedTo":"","body":"Are there any plans to incorporate the [friend](http://en.wikipedia.org/wiki/Friend_class) keyword in TypeScript to allow class friendships and improve class encapsulation? I know (real) mixins and abstract classes are on the roadmap for 2.0. But fri","comments":1,"createdAt":1424871360000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7869636?v=3","loggedByName":"markvandenbrink","milestone":"","number":2136,"state":"open","title":"Suggestion: Class friendships","updatedAt":1424892621000},{"assignedTo":"","body":"I would like to see VS navigating by selecting 'Go To Definition' in the comments as well.","comments":5,"createdAt":1422942373000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1905,"state":"closed","title":"VisualStudio navigation in the comments","updatedAt":1424886190000},{"assignedTo":"","body":"Commits 'replace -1 in SmartIndenter with const enum' and 'dded missing declaration kinds to getMeaningForDeclaration' are not related to the primary idea of this PR - it was fixes for asserts that appear because of malformed code","comments":1,"createdAt":1424823399000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2134,"state":"closed","title":"Completion for exports","updatedAt":1424832364000},{"assignedTo":"","body":"It looks as if the LS API is written with a very limited set of use cases in mind (probably modeled after one of its clients;-). While that set of use cases is well supported, many desirable use cases beyond the target set are made unnecessarily diff","comments":3,"createdAt":1424568782000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/837040?v=3","loggedByName":"clausreinke","milestone":"","number":2105,"state":"open","title":"LS API usability issues","updatedAt":1424827188000},{"assignedTo":"","body":"Parsing of syntax for \r\nexport * from \"mod\"\r\nexport {a.. } from \"mod\"\r\nexport { a...}\r\nexport default function/class syntax\r\nexport default Assignment\r\n\r\nTODO: decide on ambient export default syntax and parse it correctly\r\nShould we allow default an","comments":1,"createdAt":1423247203000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1963,"state":"closed","title":"Es6 export parsing","updatedAt":1424820855000},{"assignedTo":"sheetalkamat","body":"Consider the following code:\r\n\r\n\t\tvar robotA = { name: \"Bender\" };\r\n\r\n\t\tvar { name: nameA } = robotA;\r\n\r\nHover over `name` in the bottom line, notice quickinfo show this as `any`, I think we should suppress quickinfo in this case.\r\n\r\n\r\n![untitled](ht","comments":1,"createdAt":1422494983000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"TypeScript 1.5","number":1845,"state":"closed","title":"Quickinfo on destructuring is wrong.","updatedAt":1424820530000},{"assignedTo":"rbuckton","body":"When using \"Collapse to Definitions\" in Visual Studio, it collapses down all collapsible blocks (including statement blocks that are not function bodies).\r\n\r\nI would expect \"Collapse to Definitions\" to collapse only function, method, and accessor bod","comments":2,"createdAt":1416869506000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"TypeScript 1.5","number":1259,"state":"closed","title":"\"Collapse to Definitions\" is too aggressive","updatedAt":1424820390000},{"assignedTo":"CyrusNajmabadi","body":"To help people who are used to TypeScript not trip over the object literal type syntax, we should allow the comma as a separator.  This allows more parallel syntax when working with object literals.  In effect, with this change, both of these will be","comments":1,"createdAt":1423265613000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"TypeScript 1.5","number":1969,"state":"closed","title":"Allow comma as a separator in object literal types","updatedAt":1424820318000},{"assignedTo":"","body":"Computing the merged set of exports for an external module with `export *` statements inadvertently overwrites the original set of exports. This PR fixes the issue.","comments":4,"createdAt":1424740749000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":2123,"state":"closed","title":"Fix export * merging to not overwrite original members","updatedAt":1424819668000},{"assignedTo":"","body":"If I have typescript files in a virutal project:\r\nfile1.ts, file2.ts, file10.ts\r\n\r\nThe solution explorer will order them in the following order\r\nfile1.ts\r\nfile10.ts\r\nfile2.ts\r\n\r\nBut it should use numeric ordering for the numeric part of the file name","comments":2,"createdAt":1424211245000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2060,"state":"closed","title":"File sorting in virtual projects should respect numeric order","updatedAt":1424819343000},{"assignedTo":"","body":"This is not a complete solution, as it does not handle listing references of renamed exports/imports, the reason is it complicates rename. I will need to get a complete solution for these separately.","comments":0,"createdAt":1424769733000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2126,"state":"closed","title":"Find all refs for imports","updatedAt":1424817492000},{"assignedTo":"","body":"This includes Navigation bar and navigate to","comments":1,"createdAt":1424809650000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2129,"state":"closed","title":"New Impor/Export syntax navigation support","updatedAt":1424817453000},{"assignedTo":"","body":"","comments":2,"createdAt":1424813095000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2131,"state":"closed","title":"delete unused files","updatedAt":1424817438000},{"assignedTo":"","body":"","comments":1,"createdAt":1424811850000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":2130,"state":"closed","title":"Support for breakpoints for the new Import/Export syntax ","updatedAt":1424817357000},{"assignedTo":"vladima","body":"```typescript\r\nfunction drawText({ text = \"\", location: [x, y] = [0, 0], bold = false }) {  \r\n    // Draw text  \r\n}\r\n```\r\n\r\nafter formatting document\r\n```typescript\r\nfunction drawText( { text = \"\", location: [x, y]=[0, 0], bold = false }) {  \r\n    //","comments":0,"createdAt":1422901603000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.5","number":1891,"state":"closed","title":"Incorrect formatting when destructuring parameters","updatedAt":1424812105000},{"assignedTo":"","body":"Wrap getDefaultLibFileName API changes in a try/catch until TypeScript 1.5 has shipped as VS's ILanguageServiceHost did not previously include the compiler options parameter. \r\n","comments":3,"createdAt":1424740144000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8161247?v=3","loggedByName":"jramsay","milestone":"","number":2122,"state":"closed","title":"Wrap getDefaultLibFileName API changes in a try/catch until TypeScript 1...","updatedAt":1424802267000},{"assignedTo":"","body":"...n collecting nav bar items. Fixes unhandled exception that is shown in Dev Mode","comments":1,"createdAt":1424646547000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2107,"state":"closed","title":"do not include constructor parameters with binding patterns as names whe...","updatedAt":1424801919000},{"assignedTo":"","body":"adjust current rules to property handle destructuring. Fixes #1891","comments":1,"createdAt":1424652352000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2108,"state":"closed","title":"Formatting in destructuring","updatedAt":1424801909000},{"assignedTo":"","body":"...tabs. Fixes #2115","comments":0,"createdAt":1424730760000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2117,"state":"closed","title":"use character instead of column when formatting multiline comments with ...","updatedAt":1424800634000},{"assignedTo":"vladima","body":"Hello\r\n\r\nI'm not sure if the Typescript team manages the code that runs for formatting TypeScript in the Visual Studio editor (via Edit | Advanced | Format Document) or not, but if so see the link below.  For me, the code formatter is mangling some c","comments":3,"createdAt":1424714676000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11163532?v=3","loggedByName":"John15213","milestone":"TypeScript 1.5","number":2115,"state":"closed","title":"Format Document in VS2013 Update 4 breaks particular Typescript","updatedAt":1424800634000},{"assignedTo":"","body":"Now compiler writes the output to disk only.\r\nHow can I compile .ts in memory?\r\nI searched and found no results.\r\n\r\nThanks.","comments":5,"createdAt":1424734774000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/529293?v=3","loggedByName":"koutsenko","milestone":"","number":2118,"state":"closed","title":"possibility to pipe output without creating temp files","updatedAt":1424755696000},{"assignedTo":"vladima","body":"Type the following:\r\n```ts\r\ninterface I {\r\n    x?(): any;\r\n    y?<T>(): any;\r\n}\r\n```\r\n\r\nUpon formatting, notice the extra space after the ?. It should not be there. Ditto for generic signatures.\r\n\r\n","comments":0,"createdAt":1424383366000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":2080,"state":"closed","title":"Formatter inserts extra space after ? in optional signatures","updatedAt":1424755177000},{"assignedTo":"","body":"Fixes #2080 ","comments":2,"createdAt":1424660632000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2110,"state":"closed","title":"Add space after '?' only for conditional operators","updatedAt":1424755177000},{"assignedTo":"","body":"","comments":1,"createdAt":1424737014000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2120,"state":"closed","title":"Add support for printing colors to the command line when running mocha!","updatedAt":1424738848000},{"assignedTo":"","body":"","comments":1,"createdAt":1424736343000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2119,"state":"closed","title":"Fix failing test.","updatedAt":1424737811000},{"assignedTo":"","body":"","comments":0,"createdAt":1424669187000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2111,"state":"closed","title":"Move NavigateTo over to using the new pattern matcher.","updatedAt":1424736083000},{"assignedTo":"","body":"...or higher.","comments":1,"createdAt":1424567854000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2104,"state":"closed","title":"Emit arrow functions with expression bodies 'as is' when targetting ES6 ...","updatedAt":1424736072000},{"assignedTo":"","body":"Say I'm writing a declaration file for an external library that both exposes a global and supports CommonJS. According to the handbook I would write that like this:\r\n\r\n```\r\nmodule zoo {\r\n  function open(): void;\r\n}\r\n\r\ndeclare module \"zoo\" {\r\n    expo","comments":10,"createdAt":1423752479000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/196944?v=3","loggedByName":"jbrantly","milestone":"","number":2018,"state":"open","title":"Create \"Global / External-agnostic\" declaration files without exposing internal definitions","updatedAt":1424735144000},{"assignedTo":"","body":"i.e. if you have:\r\n\r\n```function foo(a = \"\") { }```\r\n\r\nThen we can emit that as:\r\n\r\n```function foo(a) { }```\r\n\r\nbut if you have:\r\n\r\n```function foo(a = bar()) { }```\r\n\r\nthen we need to emit that as:\r\n\r\n```\r\nfunction foo(a) {\r\n    if (a === void 0) {","comments":1,"createdAt":1424657140000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2109,"state":"closed","title":"Emit downlevel parameter initializers unless we are certain they don't have any side effects.","updatedAt":1424735036000},{"assignedTo":"","body":"","comments":6,"createdAt":1423266953000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1971,"state":"closed","title":"Allow commas as a separator between object/interface type members.","updatedAt":1424735021000},{"assignedTo":"","body":"All the ES6 iterators are themselves iterable, namely they have a [Symbol.iterator]() that returns an iterator. However, a user could define their own iterator and associated iterable, where the iterator does not have this method. To convey this, we ","comments":0,"createdAt":1424388225000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2083,"state":"closed","title":"Split Iterator into Iterator and IterableIterator in es6.d.ts","updatedAt":1424733847000},{"assignedTo":"","body":"Fix for #1259. Updates `autoCollapse` to only automatically collapse Function Blocks (excluding arrow-function bodies) to be more consistent with languages such as C#.","comments":1,"createdAt":1424725806000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3902892?v=3","loggedByName":"rbuckton","milestone":"","number":2116,"state":"closed","title":"Fixes overly-aggressive auto-collapse for \"Collapse to Definitions\"","updatedAt":1424730606000},{"assignedTo":"DanielRosenwasser","body":"We can emit computed properties in ES5, using the following scheme:\r\n\r\n```ts\r\nvar x = {\r\n    a: 0,\r\n    [\"b\"]: 0,\r\n    [\"c\"]() {},\r\n    get [\"d\"]() { return 0 },\r\n    set [\"d\"](x) {},\r\n    e: 0\r\n};\r\n```\r\nemits as:\r\n```js\r\nvar x = {\r\n    a: 0\r\n};\r\nx[\"","comments":2,"createdAt":1422485882000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":1840,"state":"closed","title":"Support computed properties downlevel","updatedAt":1424729741000},{"assignedTo":"","body":"I'd like to outline some of the thoughts the team has had about supporting custom ES6 symbols. This is focused on the proposals we have come up with, as well as the challenges associated with them.\r\n\r\nThe motivation is something like this:\r\n```ts\r\nva","comments":12,"createdAt":1423692252000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2012,"state":"open","title":"Challenges with ES6 symbols","updatedAt":1424722704000},{"assignedTo":"","body":"session.ts to use this field.  Remove sort of nav items from getNavigateToItems in\r\nsesion.ts because LS now does the sort.  Removed no content throw in\r\nquick info as this happens frequently with Sublime (every cursor move\r\ncalls quick info, and qui","comments":1,"createdAt":1424595033000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-required","name":"cla-required","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4419011?v=3","loggedByName":"steveluc","milestone":"","number":2106,"state":"closed","title":"Add maxResultCount optional field to NavtoRequestArgs.  Change","updatedAt":1424721436000},{"assignedTo":"","body":"We are still using the hostCache for syntactic features, but no resolution. that means that the host can not ask about files that it did not reference in the list of rootfiles returned by getScriptFileNames().\r\n\r\nIdeally we would get rid of HostCache","comments":0,"createdAt":1423515138000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1989,"state":"closed","title":"Simplify updating the host cache for syntactic LS features","updatedAt":1424720451000},{"assignedTo":"","body":"I dont find a way to \"Find References\" on a constructor of a class. Is this not supported?","comments":3,"createdAt":1424699113000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/900690?v=3","loggedByName":"bpasero","milestone":"","number":2114,"state":"open","title":"Find References on constructors","updatedAt":1424716852000},{"assignedTo":"","body":"It is a generalization of #2049 .\r\nI would like to see generic specifying concrete types:\r\n\r\n```typescript\r\n// Can specify only A<number> or A<string>\r\ninterface A<T is number|string|Object> { }  \r\n\r\ninterface B<T is number|string> extends A<T> {} //","comments":4,"createdAt":1424543131000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":2099,"state":"closed","title":"Generic constraint with type list","updatedAt":1424696086000},{"assignedTo":"","body":"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-let-and-const-declarations\r\n\r\nThe only major implication here how we would treat `export const x = 4;` in the context of an internal module, as this basically introduces the concept of a `read","comments":21,"createdAt":1405446011000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":19,"state":"closed","title":"Suggestion: Support ES6 'let' and 'const' keyword","updatedAt":1424686467000},{"assignedTo":"","body":"If the parser can parse a file, we will allow emit to happen.","comments":1,"createdAt":1418857347000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1527,"state":"closed","title":"Remove the concept of 'early errors' from the compiler.","updatedAt":1424684059000},{"assignedTo":"","body":"I just wonder how or if I can use Typescript as a programmatic API? I mean taking Typescript code as input and outpouts Javascript,","comments":1,"createdAt":1424679137000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1324476?v=3","loggedByName":"tinganho","milestone":"","number":2113,"state":"closed","title":"Programmatic API?","updatedAt":1424680810000},{"assignedTo":"","body":"","comments":0,"createdAt":1424676467000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2112,"state":"closed","title":"Update LKG.","updatedAt":1424678719000},{"assignedTo":"","body":"I'm trying to implements the JSX support for typescript, I have something that 'more or less' works for the parsing type-checking and emitting phases, but I fail to understand how I can do proper symbol binding for that case (and if my problems reall","comments":4,"createdAt":1422611514000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":1864,"state":"closed","title":"Question: Symbol Binding for 'fake' node","updatedAt":1424620956000},{"assignedTo":"CyrusNajmabadi","body":"For the following code:\r\n\r\n```ts\r\nvar foo = 123;\r\n\r\nclass Awesome {\r\n\r\n}\r\n\r\nvar bar: Awesome;\r\n```\r\nI get the new lines classified as `Identifier`. \r\n```log\r\n Object {length: 3, classification: 1} \"keyword\" \"var\"\r\n Object {length: 1, classification: ","comments":2,"createdAt":1423549667000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"TypeScript 1.5","number":1997,"state":"closed","title":"Classifier returning `Identifier` for whitespace","updatedAt":1424611463000},{"assignedTo":"","body":"Fixes #1997","comments":2,"createdAt":1423551402000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1998,"state":"closed","title":"Classify newlines as whitespace in the classifier.","updatedAt":1424611463000},{"assignedTo":"","body":"Fixes #2087.","comments":2,"createdAt":1424551642000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":2101,"state":"closed","title":"Fix crash on rest element destructuring with null initializer","updatedAt":1424576796000},{"assignedTo":"ahejlsberg","body":"```ts\r\nfunction foo([...r] = null){}\r\n```\r\n\r\nTypeError: Cannot read property 'id' of undefined\r\n    at getTypeListId (D:\\GitHub\\TypeScript\\built\\local\\tsc.js:9833:41)\r\n    at createTypeReference (D:\\GitHub\\TypeScript\\built\\local\\tsc.js:9854:22)\r\n    ","comments":0,"createdAt":1424395239000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.5","number":2087,"state":"closed","title":"Compiler crash on rest destructuring param with null initializer","updatedAt":1424576795000},{"assignedTo":"","body":"","comments":3,"createdAt":1423277252000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1974,"state":"closed","title":"Preserve single line blocks when emitting.","updatedAt":1424575012000},{"assignedTo":"","body":"","comments":1,"createdAt":1423281613000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1975,"state":"closed","title":"Provide specialized functions for emitting the body of a function depending on if that body is an expression or a block.","updatedAt":1424566879000},{"assignedTo":"","body":"This example demonstrates the issue (runnable in the playground):\r\n\r\n```typescript\r\ninterface IDict {\r\n\t[key: string]: any;\r\n}\r\n\r\n\r\nfunction foo(dict: IDict): void { }\r\n\r\n\r\nfunction bar(): void {\r\n\tvar data = { one: 1, two: 2 };\r\n\tvar data2: IDict = ","comments":7,"createdAt":1424546488000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"","number":2100,"state":"closed","title":"Type compatibility of auto-typed object literal is not transitive.","updatedAt":1424560965000},{"assignedTo":"","body":"","comments":2,"createdAt":1424420739000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2094,"state":"closed","title":"Add a PatternMatcher API (similar to the one in Roslyn) for more advanced matching with features like NavigateTo.","updatedAt":1424559371000},{"assignedTo":"","body":"","comments":0,"createdAt":1424499899000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2097,"state":"closed","title":"Preserve newlines and indentation for binary expression emit when possible.","updatedAt":1424558750000},{"assignedTo":"","body":"I don't know if somebody is still working on the new tsserver. Then :) please go on, you are probably already working on this.\r\n\r\nBut if not: It would be cool if tsserver would accept the compiler Options via command line or tsconfig.json.\r\n\r\nThere i","comments":5,"createdAt":1424462782000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1649278?v=3","loggedByName":"Phaiax","milestone":"","number":2095,"state":"closed","title":"New tsserver: compilerOptions / projectOptions","updatedAt":1424550081000},{"assignedTo":"","body":"","comments":2,"createdAt":1424499963000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2098,"state":"closed","title":"Sort navigate to items by name, after sorting by kind.","updatedAt":1424511279000},{"assignedTo":"","body":"Addresses #1840.\r\n\r\nProbably best to go through the commits.","comments":0,"createdAt":1423174730000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1950,"state":"closed","title":"ES3/ES5 emit support for computed properties","updatedAt":1424487648000},{"assignedTo":"","body":"This matches our VS apis, and keeps things consistent internally between all our data structures and types.  \r\n\r\nI recommend reading this CR one change at a time.","comments":1,"createdAt":1424145728000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2055,"state":"closed","title":"Move all our document line/character APIs to be zero-based.","updatedAt":1424487478000},{"assignedTo":"","body":"5.1.2 Destructuring Variable Declarations describes the top level production for destructuring as\r\n\r\nDestructuringVariableDeclaration:\r\nBindingPattern   TypeAnnotationopt   Initialiser\r\n\r\nBut Initialiser is optional in certain cases like parameter bi","comments":1,"createdAt":1424398177000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":2088,"state":"closed","title":"Error in DestructuringVariableDeclaration production","updatedAt":1424484300000},{"assignedTo":"","body":"","comments":0,"createdAt":1424388963000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2084,"state":"closed","title":"Allow clients to limit the amount of data that navigate to returns.","updatedAt":1424479327000},{"assignedTo":"","body":"If you accidentally concatenate a ()=>string with a string, typescript does not give an error or warning, but I believe it should.\r\n\r\nThis is easily reproducible in the \"Try Typescript\" hello world greeter example.\r\n\r\noriginally I had some code that ","comments":4,"createdAt":1424416833000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2461007?v=3","loggedByName":"uglycoyote","milestone":"","number":2093,"state":"closed","title":"No compilation error when concatenating function with string.","updatedAt":1424469487000},{"assignedTo":"","body":"The 'of' keyword was not being classified because I forgot to change LastToken to point to OfKeyword.","comments":5,"createdAt":1424393116000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2086,"state":"closed","title":"Of keyword classification","updatedAt":1424464181000},{"assignedTo":"","body":"It would be great to get checkboxes for the new TypeScript 1.4 compiler flags in Visual Studio 2013.  In particular, `noEmitOnError` (actually to disable it, since this seems to default to on now in VS, but seemingly not on the command line).  `suppr","comments":14,"createdAt":1421560824000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3755379?v=3","loggedByName":"nycdotnet","milestone":"TypeScript 2.0","number":1712,"state":"closed","title":"Support new compiler flags in Visual Studio","updatedAt":1424453092000},{"assignedTo":"","body":"In specification 5.1.2, after line \"If the binding element specifies an initializer expression, T is the type of that initializer expression\" I suggest adding a line:\r\n\"Otherwise, if the binding element is a rest element, T is an array type with an e","comments":5,"createdAt":1424390613000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/936705?v=3","loggedByName":"osdm","milestone":"","number":2085,"state":"closed","title":"Binding element that is a rest element should always be an array","updatedAt":1424431925000},{"assignedTo":"vladima","body":"for [playground link](http://www.typescriptlang.org/Playground/#src=new%20Error(%60Failed%20to%20expand%20glob%3A%20%24%7BprojectSpec.filesGlob%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20at%20projectPath%20%3A%20%24%7BprojectFile%7D%0A%20%2","comments":4,"createdAt":1424406585000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"TypeScript 1.5","number":2091,"state":"closed","title":"Autoformat eats up characters with multiline strings","updatedAt":1424420416000},{"assignedTo":"","body":"captures correct behavior for #2091","comments":1,"createdAt":1424414388000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2092,"state":"closed","title":"regression test for formatting multiline template literals","updatedAt":1424418815000},{"assignedTo":"","body":"```ts\r\nvar [x,[a,b]] = [[]]; // error\r\nvar r = [[]];\r\nvar [x,[a,b]] = r; // ok\r\n```\r\na.ts(5,8): error TS2460: Type '[undefined[]]' has no property '1'.\r\n\r\nSeems to be a widening issue?","comments":1,"createdAt":1424399982000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":2089,"state":"closed","title":"Incorrect error with nested array destructuring pattern","updatedAt":1424402231000},{"assignedTo":"","body":"I'd like to request that either private members be able to fulfill interface contracts or a new type of member that is designed to fulfill contracts but are not exposed publicly.\r\n\r\nAt the moment, any interface implemented on a class has to expose al","comments":5,"createdAt":1424303160000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2872785?v=3","loggedByName":"Anupheaus","milestone":"","number":2071,"state":"closed","title":"Suggestion: Explicit interface implementation","updatedAt":1424386445000},{"assignedTo":"","body":"","comments":0,"createdAt":1424382790000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2079,"state":"closed","title":"Increase RWC timeout","updatedAt":1424385004000},{"assignedTo":"","body":"I get following error:\r\n<code>\r\nTS2351\tCannot use 'new' with an expression whose type lacks a call or construct signature.\r\n</code>\r\n\r\n<code>\r\nclass A {\r\nconstructor() { ... }\r\nrefresh() { return new this.constructor; }\r\n}\r\n</code>\r\n\r\nnew this.constr","comments":1,"createdAt":1424384115000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3153438?v=3","loggedByName":"pankleks","milestone":"","number":2081,"state":"closed","title":"new object by constructor","updatedAt":1424384248000},{"assignedTo":"","body":"In [this discussion](http://typescript.codeplex.com/discussions/403602) it is stated that `typeof aDerivedClass` is a subtype of `typeof aBaseClass`.\r\n\r\nHowever, it does not seem apply to `typeof Object`:\r\n\r\n```\r\nclass A {â¦}\r\nclass B extends A {â¦}\r\n\r","comments":8,"createdAt":1424346960000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2182874?v=3","loggedByName":"mblinsitu","milestone":"","number":2077,"state":"closed","title":"typeof aClass is not a subtype of typeof Object","updatedAt":1424378952000},{"assignedTo":"","body":"```typescript\r\ninterface ObjectHash {\r\n    [key: string]: any;\r\n}\r\n\r\nvar items: ObjectHash | { () : ObjectHash };\r\n\r\nitems = () => {\r\n\treturn {\r\n\t\t\"key\": \"value\"\r\n\t}\r\n}\r\n\r\nif (items instanceof Function)\r\n{\r\n\titems(); // Why ERROR?!\r\n}\r\n```","comments":4,"createdAt":1424312220000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/767147?v=3","loggedByName":"omidkrad","milestone":"","number":2072,"state":"closed","title":"Type Guards not working for Function type","updatedAt":1424375511000},{"assignedTo":"","body":"I can't seem to find a proper declaration of Object.observe.\r\n\r\n[StackOverflow](http://stackoverflow.com/questions/13847851/how-do-i-provide-missing-declarations-in-typescript) suggests this:\r\n\r\n```\r\ninterface Object {\r\n    observe(beingObserved: any","comments":3,"createdAt":1424345615000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2182874?v=3","loggedByName":"mblinsitu","milestone":"","number":2075,"state":"closed","title":"How to declare Object.observe?","updatedAt":1424371383000},{"assignedTo":"","body":"Given a class\r\n\r\n    class Foo {\r\n        private baz: string;\r\n    \r\n        public bar() {\r\n            var x = this;\r\n        \r\n            console.log(x.baz);\r\n        }\r\n    }\r\n\r\nThe compiler infers 'this' to be of type 'Foo' within the 'bar' fu","comments":1,"createdAt":1424352274000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1033671?v=3","loggedByName":"Cakez0r","milestone":"","number":2078,"state":"closed","title":"Incorrect type inferred for 'this' in instance methods","updatedAt":1424371222000},{"assignedTo":"","body":"here is my code\r\n\r\n```ts\r\n    export enum SortDir\r\n    {\r\n        Asc,\r\n        Desc,\r\n        Flip\r\n    }\r\n\r\n    export interface ISortInfo\r\n    {\r\n        getvalue(x: QuerySummary): any; //change to number|string in TypeScript 1.4\r\n        order: S","comments":5,"createdAt":1417729613000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5141725?v=3","loggedByName":"kns98","milestone":"","number":1373,"state":"open","title":"Consider contextually typing class member functions by their base class/interface members","updatedAt":1424370486000},{"assignedTo":"","body":"Hi,\r\n\r\nI think this is a bug. Please see comments for details:\r\n\r\n```typescript\r\ninterface ObjectHash {\r\n    [key: string]: any;\r\n}\r\n\r\n// OK\t\r\nvar defaults: ObjectHash = {\r\n\ttitle: \"untitled\",\r\n};\r\n\r\n// This is error, expected\r\ndefaults = [\"a\"];\r\n\r\nd","comments":4,"createdAt":1405992577000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/767147?v=3","loggedByName":"omidkrad","milestone":"","number":178,"state":"closed","title":"String indexer accepted as var type but not as class member type","updatedAt":1424369957000},{"assignedTo":"","body":"Please see comments:\r\n\r\n```typescript\r\ninterface ObjectHash {\r\n    [key: string]: any;\r\n}\r\n\r\nvar hash: ObjectHash;\r\n\r\nhash = {\r\n\t\"key\": \"value\"\r\n}\r\n\r\ndeclare class Model {\r\n\tdefaults: ObjectHash;\r\n}\r\n\r\nclass MyModel1 extends Model { // Okay\r\n\tdefault","comments":2,"createdAt":1424313870000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/767147?v=3","loggedByName":"omidkrad","milestone":"","number":2073,"state":"closed","title":"Error: Class incorrectly extends base class... cannot assign type","updatedAt":1424369936000},{"assignedTo":"","body":"Please see comments:\r\n\r\n```typescript\r\ninterface ObjectHash {\r\n    [key: string]: any;\r\n}\r\n\r\ndeclare class Model {\r\n\tdefaults: ObjectHash | (() => ObjectHash);\r\n}\r\n\r\nclass MyModel1 extends Model {\r\n\tconstructor() {\r\n\t\tthis.defaults = { // Okay\r\n\t\t\t\"k","comments":1,"createdAt":1424318613000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/767147?v=3","loggedByName":"omidkrad","milestone":"","number":2074,"state":"closed","title":"Union Types and instance member functions","updatedAt":1424323866000},{"assignedTo":"","body":"This is the initial parsing and grammar checking for for...of loops. I recommend looking at this commit-by-commit. Type checking work to follow.","comments":1,"createdAt":1424288573000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2066,"state":"closed","title":"Parsing for for...of statements","updatedAt":1424313701000},{"assignedTo":"JsonFreeman","body":"TypeScript now has a ES6 target mode which includes definitions `Symbol`. However when trying to index an object with a symbol, I get an error (An index expression argument must be of type 'string', 'number', or 'any').\r\n\r\n```javascript\r\nvar theAnswe","comments":7,"createdAt":1422611135000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/34538?v=3","loggedByName":"wereHamster","milestone":"","number":1863,"state":"open","title":"Allow indexing with symbols","updatedAt":1424294651000},{"assignedTo":"JsonFreeman","body":"# Background\r\n\r\nES6 adds supports for symbols, a kind of key that can be used to access object properties with a unique value.  Symbols do not collide with each other or other names, making them useful as a special property name.\r\n\r\nIn this proposal,","comments":31,"createdAt":1414519558000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":980,"state":"closed","title":"Support symbol-based indexing and well-known symbols","updatedAt":1424294496000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\nfunction f() {\r\n    var symbol = Symbol();\r\n\r\n    try {\r\n        symbol + \"\";\r\n        return false;\r\n    }\r\n    catch(e) {}\r\n\r\n    try {\r\n        symbol + 0;\r\n        return false;\r\n    }\r\n    catch(e) {}\r\n\r\n    return true;\r\n}\r\n```\r\n","comments":0,"createdAt":1421803744000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":1750,"state":"closed","title":"Symbols should not be allowed as operands of arithmetic operations.","updatedAt":1424294389000},{"assignedTo":"","body":"","comments":8,"createdAt":1424110969000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":2048,"state":"closed","title":"Run jake in interactive mode so output isn't lost.","updatedAt":1424264544000},{"assignedTo":"paulvanbrenk","body":"Hi,\r\n\r\nThis repro uses `TypeScriptServices.js` from LKG.\r\n\r\nWith reference to the code below\r\n\r\n```TypeScript\r\nimport bar = require('./bar');    // Same project\r\nimport foo = require('../folder/foo');  // Different project\r\n```\r\n\r\nF12 works on the sa","comments":14,"createdAt":1416393481000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.4","number":1210,"state":"closed","title":"Go to definition fails to work in Visual Studio 2015","updatedAt":1424250732000},{"assignedTo":"","body":"We can emit computed properties class properties, using the following scheme:\r\n\r\n```ts\r\nclass C {\r\n    [\"hello\"] = 0;\r\n    static [\"bye\"] = 0;\r\n}\r\n```\r\nemits as:\r\n```js\r\nvar C = (function() {\r\n    var __t1 = \"hello\";\r\n    function C() {\r\n       this[","comments":6,"createdAt":1422486141000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1841,"state":"closed","title":"Support computed properties in class property declarations","updatedAt":1424221823000},{"assignedTo":"","body":"There are a couple of issues with using the current endsWith() function used to determine if we should allow a rename for default lib files:\r\n1. XXXX-lib.d.ts would not allow renames even though it should as the preceding characters are not being ver","comments":4,"createdAt":1423516239000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8161247?v=3","loggedByName":"jramsay","milestone":"","number":1990,"state":"closed","title":"Replace endsWith() check with isDefaultLibFile() in getRenameInfo()","updatedAt":1424215058000},{"assignedTo":"","body":"```js\r\nvar x = function myfunc() {};\r\nconsole.log(x.name);\r\n// => error TS2339: Property 'name' does not exist on type '() => void'.\r\n```","comments":2,"createdAt":1424143551000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/878912?v=3","loggedByName":"gcanti","milestone":"","number":2054,"state":"closed","title":"Function.name is not recognized by lib.d.ts","updatedAt":1424158575000},{"assignedTo":"","body":"Contract Programming is a very nice way to prevent undetected failure, inspiring from [Dlang](http://dlang.org/contracts.html) here is a start of proposal : \r\n\r\nA new compiler flag `-contract` (or `-debug`) , without this flag the compiler would just","comments":22,"createdAt":1406060756000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":198,"state":"open","title":"Suggestion: Contract Programming","updatedAt":1424127447000},{"assignedTo":"vladima","body":"```javascript\r\ninterface obj {\r\n   a : string\r\n}\r\n\r\ninterface Foo {\r\n\t[x: string]: obj\r\n}\r\nvar t: Foo\r\nt['dd'] = 'hey' // no error\r\n```\r\nThe error is 'checked' but not reported because of:\r\nhttps://github.com/Microsoft/TypeScript/blob/master/src/comp","comments":2,"createdAt":1424123978000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"TypeScript 1.5","number":2053,"state":"closed","title":"Bug with checker: errors not reported","updatedAt":1424125703000},{"assignedTo":"","body":"Exmaple:\r\n```\r\n    let items = [ ['foo', 3], ['bar', 9] ];\r\n    items.forEach(([word, count]) => {\r\n        console.log(word+' '+count);\r\n    });\r\n```\r\nOutput:\r\n```\r\nerror TS1005: ',' expected.\r\nerror TS1005: ':' expected.\r\nerror TS1005: ',' expected","comments":1,"createdAt":1424095590000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2162413?v=3","loggedByName":"panuhorsmalahti","milestone":"","number":2046,"state":"closed","title":"Destructuring function parameters doesn't work in ES6 mode.","updatedAt":1424123115000},{"assignedTo":"","body":"4000-coded errors are supposed to be for .d.ts generation, whereas 2000s are for type check. Moving certain type check messages to 2000","comments":1,"createdAt":1424119611000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":2052,"state":"closed","title":"Move type check errors from 4000 to 2000","updatedAt":1424122516000},{"assignedTo":"","body":"The parameter was already made non-optional in `master`, but this just updates its use within our unit tests.\r\n\r\nWe'll need to update the managed side in light of this.","comments":2,"createdAt":1424118164000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2051,"state":"closed","title":"Make 'syntacticClassifierAbsent' non-optional.","updatedAt":1424119568000},{"assignedTo":"","body":"for exemple : \r\n\r\n   module mymodule {\r\n\r\n    export class myclass extends anotherclass {\r\n\r\nshould throw a warning because another class is not referenced as this in the header : \r\n\r\n   `/// <reference path=\"./anotherclass.ts\" />`\r\n\r\nthis cause in e","comments":1,"createdAt":1424085847000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1788867?v=3","loggedByName":"ybootin","milestone":"","number":2045,"state":"closed","title":"Add a warning when compile a class that extends another class which is not include ","updatedAt":1424102482000},{"assignedTo":"","body":"Specifically the following two cases: \r\n\r\n```ts\r\nfunction w(x: { test: string }) { return ''; }\r\n// Press Ctrl + space below\r\nw({ /*before here*/ });\r\n// Press Ctrl + space below\r\nw({test:''})./*before here*/\r\n```\r\n\r\nrefs : https://github.com/TypeStr","comments":1,"createdAt":1424070692000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2043,"state":"closed","title":"LanguageService : getCompletionsAtPosition returning 0 results for a few cases","updatedAt":1424070886000},{"assignedTo":"vladima","body":"Code\r\n```ts\r\n\tclass let {\r\n\t\tf(): let {\r\n\t\t\tlet set = new let();\r\n\t\t\treturn set;\r\n\t\t}\r\n\t}\r\n\r\n\tclass set {\r\n\t}\r\n```\r\nI get the following error on the first let which I don't expect; Cannot redeclare block-scoped variable 'set'.","comments":3,"createdAt":1422398796000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"TypeScript 1.5","number":1821,"state":"closed","title":"Invalid redeclaration error naming a let variable the same as a class.","updatedAt":1424069448000},{"assignedTo":"","body":"services/services.ts `createCompilerHost` function hardcodes `getNewLine` to \"\\r\\n\" instead of providing a way for the LanguageServiceHost to define it (or at least using ts.sys.newLine).\r\n\r\nRefs #372.","comments":2,"createdAt":1421112355000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"Community","number":1653,"state":"closed","title":"Language services hard-codes newline to \\r\\n","updatedAt":1424068716000},{"assignedTo":"","body":"I believe this FileReader interface in lib.d.ts needs updating to allow Blob or File to be passed to readAsDataUrl/readAsText/etc.\r\n\r\nReference: http://www.html5rocks.com/en/tutorials/file/dndfiles/\r\n\r\nMozilla MDN is rather vague about this.","comments":1,"createdAt":1424042887000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1734519?v=3","loggedByName":"cseufert","milestone":"","number":2040,"state":"closed","title":"FileReader API warning about parsing File to readAsDataURL","updatedAt":1424047252000},{"assignedTo":"vladima","body":"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-scripts-static-semantics-early-errors\r\nhttps://people.mozilla.org/~jorendorff/es6-draft.html#sec-block-static-semantics-early-errors\r\n\r\n* It is a Syntax Error if any element of the LexicallyDe","comments":0,"createdAt":1422970417000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.5","number":1910,"state":"closed","title":"Redeclaring 'let' by 'var' or 'var' by 'let' is an error according to ES6 spec, should be a TS compiler error","updatedAt":1423948348000},{"assignedTo":"","body":"tsc version 1.4.1.0 (1.3.0 work correctly)\r\ntsc -w --out ../file.js file.ts\r\n\r\nfile.ts\r\n~~~typescript\r\n/// <reference path=\"./interfaces.ts\"/>\r\nalert('1');\r\n~~~\r\n\r\ninterfaces.ts\r\n~~~typescript\r\ninterface HashTable<T> {\r\n\t[key:string]: T;\r\n}\r\n\r\n/*inte","comments":1,"createdAt":1423894127000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7080390?v=3","loggedByName":"Andreyika","milestone":"","number":2035,"state":"closed","title":"Compilation bug if last block in file is multiline comment","updatedAt":1423904021000},{"assignedTo":"","body":"I'm playing with the new support for template strings in release-1.4 and seeing potential issues with syntax highlighting.\r\n\r\nIn a single-line template string it looks like the string is classified as a keyword.\r\n\r\nIn a multi-line template string lik","comments":13,"createdAt":1418502756000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1081904?v=3","loggedByName":"derekcicerone","milestone":"","number":1477,"state":"closed","title":"Template string syntax highlighting (release-1.4)","updatedAt":1423878853000},{"assignedTo":"","body":"Prevent nested let\\const to shadow hoisted variables Fixes #1910.\r\n","comments":2,"createdAt":1423788191000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2027,"state":"closed","title":"Disallow let\\const declarations in the same scope with var declarations. ","updatedAt":1423869249000},{"assignedTo":"","body":"I am trying to find way how to speed up compilation of lot of independent single file TypeScript programs. I think best result would be to hold lib.d.ts in precompiled form. Is something like this possible with compiler API?\r\n","comments":2,"createdAt":1423858502000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/284414?v=3","loggedByName":"Bobris","milestone":"","number":2030,"state":"closed","title":"How to use compiler API to hold lib.d.ts in precompiled form","updatedAt":1423868178000},{"assignedTo":"","body":"...time.","comments":1,"createdAt":1423790793000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":2028,"state":"closed","title":"Don't check invariants when running RWC tests. It adds too much running ...","updatedAt":1423867424000},{"assignedTo":"","body":"Given index.ts:\r\n```\r\nvar a: Number = new Number(1);\r\nvar b: Number = new Number(2);\r\nvar c: number = 3;\r\nconsole.log(a+b);\r\nconsole.log(b+c);\r\n```\r\n\r\nWhen compiled, the compiler produces these errors:\r\n```\r\nindex.ts(4,13): error TS2365: Operator '+'","comments":3,"createdAt":1423862529000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/18069?v=3","loggedByName":"jimlloyd","milestone":"","number":2031,"state":"closed","title":"error TS2365: Operator '+' cannot be applied to types 'Number' and 'Number'.","updatedAt":1423866416000},{"assignedTo":"","body":"","comments":1,"createdAt":1423863886000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":2033,"state":"closed","title":"Fix time measurement","updatedAt":1423865541000},{"assignedTo":"DanielRosenwasser","body":"String templates should be colorizes like string literals.","comments":7,"createdAt":1421445948000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1698,"state":"closed","title":"String templates not colorized in VS 2013","updatedAt":1423865517000},{"assignedTo":"","body":"https://github.com/Microsoft/TypeScript/blob/ab9ce1e9e6636ec6a2aa4f01458525f249c4edf5/src/services/services.ts#L1172\r\n\r\nI would expect them to get a special treatment. For instance \r\n\r\n```\r\n`Hello ${name}`\r\n``` \r\ncould have tokens like: ```string(`He","comments":2,"createdAt":1422875232000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"","number":1884,"state":"closed","title":"Template string aren't recognized by classifier","updatedAt":1423865512000},{"assignedTo":"","body":"As it stands, the default classification looks *horrible* \r\n\r\n![image](https://cloud.githubusercontent.com/assets/874898/6140095/c0797dc8-b1e7-11e4-9d7b-21ad2430fcc0.png)\r\n\r\nI would be happy if there was just `InMultiLineString` (notice I don't say `","comments":11,"createdAt":1423617520000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":2005,"state":"closed","title":"Would be great if multiline strings were categorized differently","updatedAt":1423865302000},{"assignedTo":"","body":"Follow up to #1744 but for TypeScript 1.5.\r\n\r\n> This PR adds lexical classification support for template strings in the absence of a syntactic classifier.\r\n\r\n> It will break in the presence of\r\n* Nested template strings that span multiple lines.\r\n* N","comments":0,"createdAt":1423787537000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":2026,"state":"closed","title":"Lexical colorization/classification for template strings.","updatedAt":1423865275000},{"assignedTo":"","body":"Like #1837, I think CustomEvent constructor needs parameters.\nThe followings are links I checked.\n\nhttps://dom.spec.whatwg.org/#interface-customevent\nhttps://developer.mozilla.org/en/docs/Web/API/CustomEvent\n\nhttp://html5index.org/DOM%20-%20EventInit","comments":4,"createdAt":1423626063000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3614589?v=3","loggedByName":"takeohman","milestone":"","number":2007,"state":"closed","title":"Fix type definition of `CustomEvent` constructor","updatedAt":1423823368000},{"assignedTo":"","body":"Code like this:\r\n\r\n```typescript\r\nel.addEventListener('click', () => alert(1));\r\n```\r\n\r\nGets formatted to\r\n\r\n```typescript\r\nel.addEventListener('click',() => alert(1));\r\n```\r\n\r\nNotice the missing space after the comma.","comments":3,"createdAt":1423726664000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/22350?v=3","loggedByName":"joaomoreno","milestone":"Community","number":2016,"state":"closed","title":"Wrong formatting in argument list containing lambda","updatedAt":1423792215000},{"assignedTo":"","body":"We're currently passing --noEmitOnError to tsc in VS so we've broken our basic behavior of emitting in the presence of type errors.\r\n\r\n1.4 shipped like this.","comments":10,"createdAt":1423000808000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 2.0","number":1915,"state":"open","title":"No emit in VS with semantic errors","updatedAt":1423791928000},{"assignedTo":"sheetalkamat","body":"In TypeScript 1.4, given the following input\r\n```\r\nexport var stuff = <{\r\n    doStuff(fns: { (val: any): any }[]): void;\r\n}> null;\r\n```\r\nthe generated .d.ts file uses the syntactically incorrect function arrow notation.\r\n```\r\nexport declare var stuff","comments":5,"createdAt":1418308197000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10148370?v=3","loggedByName":"jctitor","milestone":"TypeScript 1.5","number":1451,"state":"closed","title":"Function arrays emitted incorrectly in .d.ts files","updatedAt":1423791561000},{"assignedTo":"","body":"This PR adds lexical classification support for template strings in the absence of a syntactic classifier.\r\n\r\nIt will break in the presence of\r\n* Nested template strings that span multiple lines.\r\n* Nested expressions composed of curly braces, where ","comments":2,"createdAt":1421789950000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1744,"state":"closed","title":"Lexical classification for template strings","updatedAt":1423782597000},{"assignedTo":"","body":"Currently, running the formatter\r\n(eg via the compiler API: https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#pretty-printer-using-the-ls-formatter)\r\nproduces code which is arbitrarily wide, for statements which are nested, complex,","comments":7,"createdAt":1423507383000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/47395?v=3","loggedByName":"alexeagle","milestone":"","number":1988,"state":"open","title":"Support column limit in formatter","updatedAt":1423773558000},{"assignedTo":"","body":"I'd love to have the ability to be able to create generic type aliases.\r\n\r\nAt the moment we are using interfaces to reference our common function signatures.\r\n\r\n    interface IGenericCallback<T> {\r\n        <T>(val: T, index: number, arr: Array<T>): v","comments":2,"createdAt":1423730564000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1621099?v=3","loggedByName":"Mudhoax","milestone":"","number":2017,"state":"closed","title":"Generic Type Alias","updatedAt":1423768827000},{"assignedTo":"","body":"Hey Typescript!\r\n\r\nOur library is trying to fully incorporate the union type feature.  However when using it, when differentiate between the two types, it seems that the most natural way to determine the type through `instanceof`.  However, it seems ","comments":4,"createdAt":1423696506000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1448299?v=3","loggedByName":"bluong","milestone":"","number":2013,"state":"closed","title":"instanceof doesn't work on non-any types","updatedAt":1423768435000},{"assignedTo":"","body":"TODO: Will add test cases around keyword and yield in names for this","comments":0,"createdAt":1422406792000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1825,"state":"closed","title":"Es6 import parsing","updatedAt":1423766051000},{"assignedTo":"","body":"This does not contain changes to services side and making referenced syntax so we can decide to elide module, emit is would be separate pull request and so would services side change","comments":0,"createdAt":1423247053000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1962,"state":"closed","title":"Es6 import type check","updatedAt":1423765983000},{"assignedTo":"","body":"We are using AMD modules in our JavaScript application. Application code base is growing and we have made a decision to move to TS for more type safety recently.\r\n## Problem\r\nConsuming AMD modules written in JavaScript is too cumbersome. \r\n```/// <am","comments":0,"createdAt":1422966263000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1206937?v=3","loggedByName":"v3nom","milestone":"TypeScript 1.5","number":1908,"state":"closed","title":"Simplify JavaScript AMD module import workflow","updatedAt":1423765065000},{"assignedTo":"","body":"Extended amd-dependency comment with name attribute, which is used to generate more human-readable JavaScript AMD output. It also simplifies JavaScript AMD module use in TS code. #1908","comments":8,"createdAt":1422966638000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1206937?v=3","loggedByName":"v3nom","milestone":"","number":1909,"state":"closed","title":"fixes #1908 enhancement request","updatedAt":1423764763000},{"assignedTo":"","body":"Test Case:\r\n\r\ninterface Overload {\r\n\t\r\n\tfoo(id:\"special\", value:number):void;\r\n\tfoo(id:string, value:any):void;\r\n\r\n}\r\n\r\nclass Bug {\r\n\r\n\tprivate overload:Overload;\r\n\r\n\tpublic call():void {\r\n\t\tthis.overload.foo(\"special\", \"\");\r\n\t}\r\n}\r\n\r\nCompile with ts","comments":1,"createdAt":1423757355000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":2021,"state":"closed","title":"Constant overload doesn't complain about incorrect call","updatedAt":1423764049000},{"assignedTo":"","body":"Compile the following test case:\r\n\r\nclass Bug {\r\n\r\n\tpublic foo(id:\"special\", value:number):void;\r\n\tpublic foo(id:string, value:any):void {\r\n\t}\r\n}\r\n\r\nYou get:\r\nbug.ts(3,2): error TS2382: Specialized overload signature is not assignable to any non-spec","comments":1,"createdAt":1423755953000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1931590?v=3","loggedByName":"dbaeumer","milestone":"","number":2020,"state":"closed","title":"Constant overload not working in classes","updatedAt":1423764004000},{"assignedTo":"","body":"In ES6, a function's arity (i.e. 'length' property) is the number of\r\nformal parameters before the first formal parameter with a default\r\nvalue (i.e. an initializer), not including the rest parameter. This\r\nchanges the code emitted for function signa","comments":2,"createdAt":1415901431000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1938?v=3","loggedByName":"eventualbuddha","milestone":"","number":1156,"state":"closed","title":"Fix the function argument arity to be in line with ES6.","updatedAt":1423758439000},{"assignedTo":"","body":"Adds a new compiler flag to emit error codes, and disable it by default. Fixes #693.\r\n","comments":10,"createdAt":1411018602000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":694,"state":"closed","title":"Do not print error codes by default","updatedAt":1423758429000},{"assignedTo":"","body":"This is a sketch to omit code emission for the `...rest` parameter when it's not used in the body.\r\n\r\nWith this patch, the example in #498 will be compiled without generating code for the `...rest` parameter.\r\n\r\nIf this is the right approach, I can c","comments":17,"createdAt":1408856053000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4791?v=3","loggedByName":"duncanmak","milestone":"","number":518,"state":"closed","title":"Conditionally emit rest parameters","updatedAt":1423758414000},{"assignedTo":"","body":"","comments":4,"createdAt":1422478434000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1011289?v=3","loggedByName":"srenault","milestone":"","number":1837,"state":"closed","title":"Fix type definition of `Event` constructor","updatedAt":1423758396000},{"assignedTo":"","body":"For following code:\r\n```\r\nmodule Aaa {\r\n  export class Abc {\r\n  }\r\n}\r\nmodule Bbb {\r\n  type aAbc = Aaa.Abc;\r\n  export class Xyz {\r\n    constructor() {\r\n      var c: aAbc = new aAbc();\r\n      var d: any;\r\n      if (d instanceof aAbc) {\r\n        \r\n     ","comments":10,"createdAt":1423065771000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1898040?v=3","loggedByName":"wgebczyk","milestone":"","number":1924,"state":"closed","title":"Problem with aliases","updatedAt":1423739836000},{"assignedTo":"","body":"I'm working on a library using TypeScript called [monapt](https://github.com/jiaweihli/monapt).  I have a grunt task to compile multiple files and concatenate them together.  However, the output definition has some potential downsides. (I can't remem","comments":3,"createdAt":1423702380000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/351887?v=3","loggedByName":"jiaweihli","milestone":"","number":2015,"state":"closed","title":"Compiler outputting suboptimal declarations","updatedAt":1423705955000},{"assignedTo":"vladima","body":"See the [spec draft](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-let-and-const-declarations-static-semantics-early-errors):\r\n* It is a Syntax Error if the BoundNames of BindingList contains \"let\".\r\n\r\nFor example,\r\n```javascript\r\nlet let ","comments":0,"createdAt":1421675444000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.5","number":1727,"state":"closed","title":"'let let' should be an error","updatedAt":1423611101000},{"assignedTo":"","body":"per ES6 spec. \r\n```\r\nLexicalDeclaration : LetOrConst BindingList ;\r\n\r\nIt is a Syntax Error if the BoundNames of BindingList contains \"let\".\r\n\r\n...\r\n\r\nIt is a Syntax Error if the BoundNames of ForDeclaration contains \"let\".\r\n```\r\nFixes #1727 ","comments":1,"createdAt":1423604912000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":2003,"state":"closed","title":"disallow let to be used as name in let\\const in ES6","updatedAt":1423611096000},{"assignedTo":"","body":"The type guard `instanceof Array` does not seem to recognize the type of the interface IMessage.\r\n```\r\ninterface IMessage {\r\n    name: string;\r\n}\r\n\r\nfunction itemFn(pipIn: IMessage[]) {\r\n    return pipIn;\r\n}\r\n\r\nfunction baseFn(pipIn: IMessage) {\r\n   ","comments":9,"createdAt":1423209889000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/417406?v=3","loggedByName":"donnut","milestone":"","number":1957,"state":"closed","title":"type guard doesn't seem to work on interfaces","updatedAt":1423609297000},{"assignedTo":"","body":"Will this scenario be supported in the future ?\r\n\r\n```typescript\r\nfunction f(x: string) {\r\n\treturn x;\r\n}\r\n\r\nvar q = true ? f : x => \"\"; // x is typed as 'any'\r\n\r\nvar w = true ? f : (x: string) => \"\"; // OK\r\n```","comments":7,"createdAt":1423255152000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1964,"state":"closed","title":"Type inference for lambda in ?: operator","updatedAt":1423597041000},{"assignedTo":"","body":"Our design for processing calls on union types, is that in order for a call signature to appear on the union, it must be present (and identical) for all constituents. The reason is that there is no clearly correct way to merge two arbitrary groups of","comments":2,"createdAt":1418255755000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1442,"state":"open","title":"Methods are missing on the union of two instantiations of the same generic type","updatedAt":1423594598000},{"assignedTo":"","body":"This PR adds support for the spread (`...`) operator in call expressions with down-level code generation for ES3/5. For example:\r\n```typescript\r\nfunction drawText(x: number, y: number, ...strings: string[]) {\r\n    // draw text\r\n}\r\n\r\ndrawText(10, 20, ","comments":0,"createdAt":1423094631000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1931,"state":"closed","title":"Support spread operator in call expressions","updatedAt":1423589093000},{"assignedTo":"","body":"```typescript\r\n\r\nfunc1() :Date{\r\n     return new Date();\r\n}\r\nfunc2() :Date{\r\n     return new Date();\r\n}\r\n\r\ninterface options{\r\n     dateRange: Date|Array<Date>;\r\n}\r\n\r\ninit(opt?:options)\r\n{\r\n     console.log(opt);\r\n}\r\n\r\ninit({ dateRange:[func1(),func2","comments":5,"createdAt":1423576290000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5152077?v=3","loggedByName":"adamrogas","milestone":"","number":2001,"state":"closed","title":"Type guards are not working in this case","updatedAt":1423588566000},{"assignedTo":"","body":"[See here](http://www.typescriptlang.org/Playground#src=var%20m%20%3D%20new%20Map%28%29%3B%0Am.set%281%2C2%29%0Am.forEach%28function%20%28value%2C%20key%29%20{%0A%20%20console.log%281%20%2F%20key%2C%201%20%2F%20value%29%3B%0A}%29%3B).\r\n```\r\nvar m = n","comments":3,"createdAt":1423538308000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/83939?v=3","loggedByName":"webbedspace","milestone":"","number":1996,"state":"closed","title":"ES6 Map callback parameter type-checking is wrong","updatedAt":1423539846000},{"assignedTo":"","body":"","comments":2,"createdAt":1423531497000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1993,"state":"closed","title":"Fix issue with cancellation causing corruption with source files.","updatedAt":1423532139000},{"assignedTo":"","body":"The Google style guide\r\nhttp://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#Code_formatting\r\nrequires indenting by two spaces for nested code, but by 4 spaces when continuing a statement or declaration on the next line.\r\nThis config","comments":1,"createdAt":1423521154000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/47395?v=3","loggedByName":"alexeagle","milestone":"","number":1991,"state":"open","title":"Formatter: allow continuation indent different from nested indent","updatedAt":1423527043000},{"assignedTo":"","body":"","comments":1,"createdAt":1423522541000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1992,"state":"closed","title":"Additional parser checks","updatedAt":1423525402000},{"assignedTo":"paulvanbrenk","body":"After typing the final 't' on the highlighted here, the completion list should not appear (a new identifier is being written, similar to 'var t...')\r\n\r\n![attachfilehandler](https://cloud.githubusercontent.com/assets/8000722/5460547/a6b871e2-8518-11e4","comments":0,"createdAt":1418758977000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":1505,"state":"closed","title":"Shouldn't show completion list after 'private static x...'","updatedAt":1423516254000},{"assignedTo":"","body":"Compile the following with -declaration:\r\n```ts\r\nmodule M {\r\n    interface I { }\r\n    export class C {\r\n        set foo(x: I) { }\r\n    }\r\n}\r\n```\r\nThe error says, \"Parameter 'foo' of public property setter from exported class has or is using private n","comments":0,"createdAt":1423281942000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":1976,"state":"open","title":"Incorrect error in declaration emit for set accessors","updatedAt":1423516056000},{"assignedTo":"","body":"Not sure if this is a bug, but the following incorrect code:\r\n```ts\r\nclass C {\r\n    get foo() { return '' }\r\n    get foo() { return '' }\r\n}\r\n```\r\nproduces the output:\r\n```js\r\nvar C = (function () {\r\n    function C() {\r\n    }\r\n    Object.definePropert","comments":1,"createdAt":1423282337000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":1977,"state":"open","title":"Duplicate accessors are emitted only once","updatedAt":1423516003000},{"assignedTo":"mhegazy","body":"Hi!\r\n\r\nI'm build TypeScript from 4e5a3ae69534ba0fbdc4af1ee0cb2173c6901877 commit and **release-1.4** branch. After this. in VS where use **export** keyword for modules . classes and etc. Visual Studio highlight as error\r\n**Cannot compile external mod","comments":6,"createdAt":1420472832000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7881854?v=3","loggedByName":"flaticols","milestone":"TypeScript 1.5","number":1597,"state":"closed","title":"VS 2015 Preview language service not recognize --module (TypeScriptModuleKing) flag","updatedAt":1423515664000},{"assignedTo":"","body":"I have a project with the following typescript properties:\r\n- Redirect JavaScript output to directory: Scripts\r\n- Specify root directory of TypeScript files: Ts\r\n\r\nThere are several folders in the Ts folder and all ts files in the separate folders co","comments":4,"createdAt":1423468354000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8425436?v=3","loggedByName":"DaClan008","milestone":"","number":1986,"state":"closed","title":"Question: Typescript preview window not working properly","updatedAt":1423515573000},{"assignedTo":"","body":"I'm trying to reference a generated declaration file, but it doesn't seem to be working how I'd expect. It looks a bit like a bug:\r\n\r\n*modulea.ts*\r\n```typescript\r\nclass ClassA\r\n{\r\n    public get id(): string\r\n    {\r\n        return \"ClassA\";\r\n    }\r\n}","comments":1,"createdAt":1423482097000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4442179?v=3","loggedByName":"jamiewinder","milestone":"","number":1987,"state":"closed","title":"Auto-generated declarations file bug?","updatedAt":1423515065000},{"assignedTo":"","body":"It's my understanding that the backslash in template strings has no special meaning:\r\nhttp://www.2ality.com/2012/12/template-strings-xregexp.html\r\n\r\nI'm seeing it still works as an escape character in 1.4.","comments":1,"createdAt":1423448681000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3828013?v=3","loggedByName":"tandyjames","milestone":"","number":1984,"state":"closed","title":"Backslash in Template Strings","updatedAt":1423514817000},{"assignedTo":"","body":"In preparation of the ts-server work, we need to have a way to run the language service tests against LS objects using different marshaling/unmarshaling mechanisms. We have been using the shim layer inconsistently. This change hides the details of th","comments":1,"createdAt":1423110724000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1937,"state":"closed","title":"Fourslash cleanup","updatedAt":1423507034000},{"assignedTo":"","body":"","comments":0,"createdAt":1423440702000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1981,"state":"closed","title":"Add additional aggressive checks during incremental parsing.","updatedAt":1423464019000},{"assignedTo":"","body":"As currently there is no big progress for extension classes, I want to just suppress the error temporarily to subclass some built-in types. It seems that there is only one tag to suppress an error (\"suppressImplicitAnyIndexErrors\"), but is there any ","comments":1,"createdAt":1423311415000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":1979,"state":"closed","title":"Question: Can we just suppress error TS2311?","updatedAt":1423312322000},{"assignedTo":"","body":"","comments":1,"createdAt":1423272747000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1973,"state":"closed","title":"Have better error recovery for whne a user uses semicolons instead of commas to delimit an object literal.","updatedAt":1423277525000},{"assignedTo":"","body":"### Motivation ###\r\nIt's often the case when using dependency injection in JavaScript, to want to close over class constructor arguments in instance methods, rather than assign them to private fields and access them via 'this'. Here is an example of ","comments":3,"createdAt":1423266092000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/320332?v=3","loggedByName":"JeroMiya","milestone":"","number":1970,"state":"closed","title":"Suggestion - Alternate constructor syntax","updatedAt":1423274855000},{"assignedTo":"","body":"The following code fails on TS1.4\r\n`export type TypedArray<A> = A[];`\r\n\r\nNote that it uses generic typing to define the type TypedArray.\r\n\r\nSurrounding the arrow brackets are the following compilation errors\r\nerror TS1005: '=' expected.\r\nerror TS1005","comments":1,"createdAt":1423271699000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1448299?v=3","loggedByName":"bluong","milestone":"","number":1972,"state":"closed","title":"type usage fails on generic typing.","updatedAt":1423273401000},{"assignedTo":"","body":"","comments":1,"createdAt":1423263275000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1968,"state":"closed","title":"Check source file invariants after creating/updating them in our tests.","updatedAt":1423264408000},{"assignedTo":"","body":"Is there a way to generate ambient module declarations? Here's my use case.\r\n\r\n```typescript\r\n// ModelsModule.ts\r\nexport module ModelsModule {\r\n    export class IndexViewModel {\r\n    }\r\n}\r\n```\r\n\r\n```typescript\r\n// GENERATED ModelsModule.d.ts\r\nexport ","comments":1,"createdAt":1423261368000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/988127?v=3","loggedByName":"barbosatek","milestone":"","number":1967,"state":"closed","title":"Generate module definitions as ambient declarations","updatedAt":1423261682000},{"assignedTo":"","body":"","comments":1,"createdAt":1423261281000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1966,"state":"closed","title":"Shim API changes to enable existing installations of VS to use the latest master builds","updatedAt":1423261376000},{"assignedTo":"","body":"I'm working in a codebase with a lot of objects that have non-identifier characters in object properties, forcing me to use JavaScript's array notation to access the properties.\r\n\r\nIf I typo one of these properties, however, TypeScript does not compl","comments":2,"createdAt":1423256807000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1141042?v=3","loggedByName":"jvilk","milestone":"","number":1965,"state":"closed","title":"TypeScript ignores erroneous accesses to nonexistent object properties w/ array notation","updatedAt":1423257253000},{"assignedTo":"","body":"In earlier versions of typescript, object literal properties and class properties were different syntax kinds. Now they are the same syntax kind -- property -- which caused this bug here: https://github.com/palantir/tslint/issues/292 for when we conv","comments":0,"createdAt":1423242055000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2463526?v=3","loggedByName":"gscshoyru","milestone":"","number":1960,"state":"open","title":"Suggestion -- condsider making different syntaxKinds for object literal properties and class properties","updatedAt":1423256211000},{"assignedTo":"","body":"What is the reason for disallowing generic type aliases?\r\n\r\nI know you can use an empty interface definition to achieve the same thing, such as:\r\n\r\n``` ts\r\ninterface KO<T> extends KnockoutObservable<T> {}\r\n```\r\n\r\nBut the limitation with interfaces is","comments":1,"createdAt":1423237566000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5822355?v=3","loggedByName":"RamIdeas","milestone":"","number":1959,"state":"closed","title":"Generic Type Alias","updatedAt":1423256194000},{"assignedTo":"","body":"file m1.ts\r\n\r\n```\r\nexport const enum E = { A, B, C }\r\n```\r\n\r\nfile m2.ts\r\n```\r\nimport m1 = require('m1');\r\nexport import E = m1.E;\r\n```\r\n\r\nfile m3.ts \r\n```\r\nimport m2 = require('m2');\r\nconsole.log(m2.E.A); <--- compiles but at runtime E is undefined\r\n","comments":3,"createdAt":1423170457000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":1949,"state":"closed","title":"Re-exported const enum is treated like a regular enum","updatedAt":1423250375000},{"assignedTo":"","body":"I'm just reading [scanner code](https://github.com/Microsoft/TypeScript/blob/master/src/compiler/scanner.ts) and find some unicode characters are duplicate in ``unicodeES5IdentifierStart`` array:\r\n\r\n    var unicodeES5IdentifierStart = [170, 170, 181,","comments":3,"createdAt":1423203792000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2600379?v=3","loggedByName":"ke-yu","milestone":"","number":1956,"state":"closed","title":"Why some unicode characters are duplicate in unicodeES5IdentifierStart in scanner?","updatedAt":1423207349000},{"assignedTo":"","body":"I recommend looking at this request one commit at a time.  Things will be much clearer that way.","comments":0,"createdAt":1423129821000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1939,"state":"closed","title":"Compiler API cleanup.","updatedAt":1423190610000},{"assignedTo":"","body":"All formatting options to `Intl.DateTimeFormat#format` are optional.","comments":2,"createdAt":1423177806000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"","number":1951,"state":"closed","title":"Fix error in intl.d.ts","updatedAt":1423186357000},{"assignedTo":"","body":"Disallow rename for elements that are defined in the standard TypeScript Library","comments":3,"createdAt":1423177914000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8161247?v=3","loggedByName":"jramsay","milestone":"","number":1952,"state":"closed","title":"Disallow rename for elements that are defined in the standard TypeScript...","updatedAt":1423185682000},{"assignedTo":"","body":"I want a type similar to 'any' but can be initialized only with Object compatible type.\r\nIs it possible to do this ?\r\n\r\n```typescript\r\nvar a : {any};\r\n\r\na.x = 1; // OK\r\na[\"x\"] = 1; // OK\r\na = {}; // OK\r\na = 1; // Error !\r\n```\r\n\r\nThe workaround is to ","comments":2,"createdAt":1423151188000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1944,"state":"closed","title":"Question, 'any' type compatible type to Object type.","updatedAt":1423182084000},{"assignedTo":"paulvanbrenk","body":"VS now commits completion lists on more than tab and enter, including space and a variety of punctuation characters (semicolon, parens, brackets, etc). There are places where we offer completion lists that we shouldn't, or poor completion lists, whic","comments":1,"createdAt":1420846258000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.5","number":1629,"state":"closed","title":"Intellisense issues with commit on space and other punctuation","updatedAt":1423167644000},{"assignedTo":"paulvanbrenk","body":"I am getting a completion list at the end of the following line:\r\n```ts\r\nfunction f<T\r\n```\r\n\r\nUsers who writes lots of generics will hit this a lot.","comments":1,"createdAt":1418178594000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":1428,"state":"closed","title":"Completion should not appear on a type parameter declaration","updatedAt":1423167611000},{"assignedTo":"mhegazy","body":"```TypeScript\r\n/./igm.flags === \"gim\" && /./.flags === \"\";\r\n```\r\n\r\nSimilarly, we have `Symbol.`...\r\n\r\n* `match`\r\n* `replace`\r\n* `split`\r\n* `search`","comments":0,"createdAt":1421873095000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":1762,"state":"open","title":"RegExp prototype needs 'flags' and Symbol-keyed properties","updatedAt":1423167012000},{"assignedTo":"","body":"Since TypeScript 1.4, using the Compile on Save feature, enum members are not being replaced with their literal values in the output js file.\r\n\r\nThe same operation via a full project build inserts the literal value as expected.  This occurs for both ","comments":8,"createdAt":1423003044000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1796256?v=3","loggedByName":"mrcrowl","milestone":"","number":1916,"state":"closed","title":"Enum literals not inserted using Compile on Save, but works with project build.","updatedAt":1423165048000},{"assignedTo":"","body":"```ts\r\nSymbol.for(\"foo\");\r\n```\r\n\r\nGo to definition on `Symbol`.\r\nExpected: Only the var in lib.es6.d.ts is found.\r\nActual: Both the var and the interface are found\r\n\r\nThis is bad because Visual Studio only goes to the definition if there exactly one ","comments":0,"createdAt":1423099086000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":1932,"state":"open","title":"Go to definition includes results from other entity spaces","updatedAt":1423159779000},{"assignedTo":"","body":"I am trying to convert a RequireJS project over to TypeScript, and I'm running into a problem with relative AMD module paths, where generated TypeScript files are not playing nicely with RequireJS.\r\n\r\nTL;DR: RequireJS does not support using relative ","comments":6,"createdAt":1419631761000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1153371?v=3","loggedByName":"eschwartz","milestone":"","number":1567,"state":"closed","title":"Cannot use relative import paths with RequireJS","updatedAt":1423155331000},{"assignedTo":"","body":"I want to use `s === typeof x` pattern.\r\n\r\n```ts\r\nvar data: string|string[] = '';\r\ntypeof data === \"string\" ? data : data.join(\" \") // ok\r\n\"string\" === typeof data ? data : data.join(\" \") // error\r\n```","comments":2,"createdAt":1423144817000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3143368?v=3","loggedByName":"falsandtru","milestone":"","number":1941,"state":"closed","title":"`s === typeof x` type guards pattern is does not support?","updatedAt":1423153538000},{"assignedTo":"","body":"```ts\r\n// ambient.d.ts\r\ndeclare module 'f' {\r\n\texport const enum A {\r\n\t\tA0 = 0,\r\n\t\tA1 = 1\r\n\t}\r\n}\r\n\r\n// g.ts\r\nimport f = require('f');\r\nvar a = f.A.A0;\r\n```\r\n\r\nRun: `tsc -m commonjs -t es5 --preserveConstEnums ambient.d.ts g.ts`\r\n\r\nExpected output of ","comments":9,"createdAt":1423106128000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"","number":1934,"state":"closed","title":"preserveConstEnums does not preserve const enums from ambient declarations","updatedAt":1423114395000},{"assignedTo":"ahejlsberg","body":"Usually narrowing a type causes us to have access to more properties. Not so if the original type was any. In this case, narrowing actually causes us to *lose* properties. So we should not get an error in the following case:\r\n\r\n```ts\r\nvar x: any = { ","comments":2,"createdAt":1418176620000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.4","number":1426,"state":"closed","title":"Instanceof in type guards should not narrow any","updatedAt":1423113391000},{"assignedTo":"","body":"Wonder if this is something that should work. I think it should:\r\n\r\n```ts\r\n    try {\r\n\t     throw new Error('awesome');\r\n    } catch (ex) {\r\n        if (ex instanceof Error) {\r\n     \t\tconsole.log(ex.foo);  // compiles. Should be error\r\n        }\r\n   ","comments":3,"createdAt":1423112479000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1938,"state":"closed","title":"`instanceof Error` typeguard not functioning","updatedAt":1423112929000},{"assignedTo":"","body":"This adds a builder property to the completion list; this allows us to show the completion list in more places and keep support for alternative completion keys, like space and dot.\r\n\r\nNote this required changes on the visual studio side too, so the c","comments":4,"createdAt":1421891556000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":1767,"state":"closed","title":"Less aggresive completion list","updatedAt":1423097232000},{"assignedTo":"","body":"I have TypeScript 1.4 installed and I'm attempting to use Union Types and type aliases. Both work perfectly when I compile them, but I'm getting red squiggles in VS13 itself.\r\n\r\nI'm not the only one:\r\nhttps://visualstudiogallery.msdn.microsoft.com/2d","comments":17,"createdAt":1422901508000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2391878?v=3","loggedByName":"RichiCoder1","milestone":"","number":1890,"state":"closed","title":"Visual Studio showing errors for 1.4 new features","updatedAt":1423088968000},{"assignedTo":"","body":"it would be nice to support that kind of construction : \r\n```typescript\r\nfunction myFunction(arr: string | string[]) {\r\n    if (typeof arr === 'string') {\r\n        arr = [arr]\r\n    }\r\n    //arr is now string[]\r\n}\r\n```\r\nIt's a common pattern used by l","comments":1,"createdAt":1421924376000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":1769,"state":"open","title":"Support assignment in typeguard if block","updatedAt":1423088851000},{"assignedTo":"","body":"","comments":3,"createdAt":1423058453000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":1923,"state":"closed","title":"Add 'jake tsc' to only build the compiler for quick testing.","updatedAt":1423072460000},{"assignedTo":"mhegazy","body":"We trying to find how to force ES3 mode again with TS 1.4 and VS2013 on save without project.\r\n","comments":2,"createdAt":1421668489000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/284414?v=3","loggedByName":"Bobris","milestone":"TypeScript 1.5","number":1722,"state":"closed","title":"Visual Studio with TS 1.4 without project on save creates ES6 and not ES3 like before","updatedAt":1423070739000},{"assignedTo":"","body":"Fixes ##1722. This allows the VS Language Service to default to ES5, instead of ES6 (latest)","comments":3,"createdAt":1422933479000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1904,"state":"closed","title":"Change the default LS target to ES5 from ES6","updatedAt":1423070724000},{"assignedTo":"","body":"Current implementation is very conservative when looking for assignments during application of type narrowing.\r\n```typescript\r\nfunction len(x: number | string) {\r\n\t if (typeof x === 'number') {\r\n\t\t var t = x.toExponential();\r\n\t\t //x = \"aaaa\"; // unco","comments":3,"createdAt":1421875058000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1764,"state":"open","title":"Type narrowing is not allowed if variable is reassigned after the use site inside if block","updatedAt":1423057609000},{"assignedTo":"","body":"","comments":0,"createdAt":1423008578000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1918,"state":"closed","title":"Fix spelling of 'Filename' to be 'FileName'.","updatedAt":1423011958000},{"assignedTo":"","body":"","comments":1,"createdAt":1423010205000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1919,"state":"closed","title":"Make more sourcefile data internal.","updatedAt":1423011927000},{"assignedTo":"vladima","body":"Visual Studio does not immediately recognize d.ts files that are added via NuGet.  It seems that the first time a definition is added in this way, the file needs to be manually referenced or the project needs to be unloaded/reloaded.\r\n \r\nRepro:\r\n  * ","comments":4,"createdAt":1421863669000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3755379?v=3","loggedByName":"nycdotnet","milestone":"TypeScript 1.5","number":1759,"state":"closed","title":"Visual Studio not immediately recognizing d.ts files added via NuGet","updatedAt":1423011865000},{"assignedTo":"","body":"We are moving test262 and rwc into internal repository.This PR is to update the test262 and rwc path used by the runner","comments":1,"createdAt":1422908475000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1894,"state":"closed","title":"Update rwc and test262 runner","updatedAt":1423009398000},{"assignedTo":"","body":"Search for \"globalTemplateStringsArrayType\" in checker.ts. The results are not in the right order (the order of the text spans).","comments":6,"createdAt":1422561782000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":1853,"state":"open","title":"findReferences doesn't give results in the right order","updatedAt":1423006722000},{"assignedTo":"","body":"These should not be accessed directly.  They should be obtained by calling into the appropriate\r\nhelper functions.","comments":1,"createdAt":1423000301000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1914,"state":"closed","title":"Remove certain lazyily initialized fields from the public DTS.","updatedAt":1423003871000},{"assignedTo":"","body":"We use EmitReturnStatus so we can Sys.exit with an error code that more specifically explains what the compiler did.  However, i contend that this return status is no useful and there is no reason for any consumer to need this level of detail.\r\n\r\nWhe","comments":8,"createdAt":1422923660000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1901,"state":"open","title":"EmitReturnStatus is confusing and seems unnecessary.","updatedAt":1423000837000},{"assignedTo":"","body":"","comments":0,"createdAt":1422998269000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1913,"state":"closed","title":"Provide an experimental flag that allows us to emit declarations except for nodes marked with '@internal'.","updatedAt":1422998944000},{"assignedTo":"","body":"Function typed properties on SourceFile are made with closures, for all source files it will keep the parser instance alive. This PR makes SourceFile pure data object -> no closures are required","comments":3,"createdAt":1421454384000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1700,"state":"closed","title":"Move function typed properties from the SourceFile to a dedicated functions","updatedAt":1422998550000},{"assignedTo":"vladima","body":"I don't know if this is by design but outside of the class I am able to see private static members, which I don't believe I should be able to, for example:\r\n\r\nI have a class named \"NotifyChanged\" (in the \"Aspect\" module/namespace) and it inherits fro","comments":12,"createdAt":1416576218000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2872785?v=3","loggedByName":"Anupheaus","milestone":"TypeScript 1.4","number":1235,"state":"closed","title":"Private members appearing in intellisense outside of the class","updatedAt":1422991258000},{"assignedTo":"vladima","body":"```javascript\r\nfunction f(s: string | number |  boolean) {\r\n  s.constructor   \r\n}\r\n```\r\n\r\nCopy-paste this to an empty editor => VS crashes.\r\nVS2015 CTP5.","comments":5,"createdAt":1421939908000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.4.2","number":1772,"state":"closed","title":"Visual Studio crash on particular code in editor","updatedAt":1422991199000},{"assignedTo":"vladima","body":"Repro code:\r\n\r\n```typescript\r\nvar a, {}\r\n```\r\n\r\n","comments":0,"createdAt":1422061884000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.5","number":1791,"state":"closed","title":"error from 'getNavigationBarItems' when using binding patterns in variable declarations","updatedAt":1422991180000},{"assignedTo":"","body":"Hi,\r\n\r\n**TS**: 1.4\r\n\r\nTo reproduce.\r\n\r\n* Create a TypeScript project in Visual Studio with \"Compile on save\" set to on.\r\n* Add file `enums.d.ts` with code:\r\n\r\n  ```TypeScript\r\n declare module enums {\r\n    const enum Bar {\r\n        one = 0,\r\n        t","comments":2,"createdAt":1422794128000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":1880,"state":"closed","title":"Compile-on-save does not honour const enums when declaration is in an external file","updatedAt":1422991153000},{"assignedTo":"vladima","body":"```ts\r\nclass A{\r\nfoo(){} // |\r\n}\r\n```\r\n\r\ntyping ; at the location of | formats the code","comments":1,"createdAt":1422929180000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"TypeScript 1.5","number":1903,"state":"closed","title":"Don't auto-format when typing ';' in a comment","updatedAt":1422991119000},{"assignedTo":"","body":"Fixes #1903","comments":1,"createdAt":1422944611000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1906,"state":"closed","title":"ensure that autoformat is not triggered from inside comments","updatedAt":1422991104000},{"assignedTo":"","body":"Have code like this:\r\n\r\nsetTimeout(null, () => {\r\n\r\n});\r\n\r\nRun \"Format\". The end result is:\r\n\r\nsetTimeout(null,() => {\r\n\r\n});\r\n\r\nThere is a whitespace missing between \"null\" and the lambda.","comments":1,"createdAt":1422959715000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/900690?v=3","loggedByName":"bpasero","milestone":"","number":1907,"state":"closed","title":"Format: missing whitespace in this case","updatedAt":1422980048000},{"assignedTo":"","body":"Hi, a Swift-like short dot syntax for enums could be handy, what do you think?\r\n\r\nenum Color {Red, Green, Blue};\r\nvar c: Color = .Green;    // instead of var c: Color = Color.Green;\r\n\r\n","comments":3,"createdAt":1421588704000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/967101?v=3","loggedByName":"kozlowski-mathias","milestone":"","number":1713,"state":"open","title":"Dot syntax for inferred enums","updatedAt":1422971173000},{"assignedTo":"","body":"This works, AS EXPECTED:\r\n```javascript\r\nclass Cat {}\r\nclass Dog {}\r\n\r\nfunction logType1(animal: Cat|Dog) {\r\n\tif (animal instanceof Cat) {\r\n\t\tconsole.log(\"cat\");\r\n\t}\r\n\telse if (animal instanceof Dog) {\r\n\t\tconsole.log(\"dog\");\r\n\t}\r\n}\r\n```\r\n\r\nThis doesn","comments":6,"createdAt":1422224501000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1009?v=3","loggedByName":"altano","milestone":"","number":1802,"state":"closed","title":"Type guard fails to narrow union type","updatedAt":1422971023000},{"assignedTo":"","body":"Given the following code where an interface `extends` a class I would expect specifying a Model which does not extend from that class `Model` to fail the compile.\r\n\r\n```typescript\r\nclass Model {}\r\ninterface IHasImage extends Model {\r\n  imageUrl: () =","comments":2,"createdAt":1422879083000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/151695?v=3","loggedByName":"davetayls","milestone":"","number":1885,"state":"closed","title":"Generics extending from class and interface","updatedAt":1422961100000},{"assignedTo":"mhegazy","body":"After a while of coding, when I create a new TypeScript file type and start typing e.g. `module Fugt.Energy.`, I get an error that points me to `ActivityLog.xml` - see below. When I then continue typing `module Fugt.Energy.Warm {` and hit enter, I ge","comments":4,"createdAt":1421050633000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/37391?v=3","loggedByName":"czb","milestone":"TypeScript 1.5","number":1643,"state":"closed","title":"Error in editor","updatedAt":1422933100000},{"assignedTo":"mhegazy","body":"currently resolving a context for the language service requires calling `ts.preProcessFile` on all files in the context, and following references. resolving triple-slash references is simple, resolving modules is a bit more complicated, as it involve","comments":1,"createdAt":1422063573000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.5","number":1793,"state":"closed","title":"Add a helper function to resolve module import text to a file","updatedAt":1422932833000},{"assignedTo":"mhegazy","body":"It can be reproduced on VS2015\r\n1. create an empty C# Web Application project\r\n2. Add a new JavaScript file\r\n3. Rename JavaScript file to .Ts file (with a capital T)\r\n\r\n**Expected:** no issues after renaming\r\n**Actual:** VS crashes in a few seconds a","comments":0,"createdAt":1422641995000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.5","number":1871,"state":"closed","title":"Visual Studio crashes after renaming .js file to .Ts file ","updatedAt":1422932719000},{"assignedTo":"","body":"Few cleanup changes to the host API also adding a helper function to get the default library path for node packages.","comments":5,"createdAt":1421727665000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1735,"state":"closed","title":"Language Service host API cleanup","updatedAt":1422932670000},{"assignedTo":"","body":"```ts\r\n    var complicatedObj = {\r\n        arrayProp: [\r\n            \"Zapp\",\r\n            { second: \"Brannigan\" }\r\n        ]\r\n    };\r\n```\r\n    var { arrayProp: [first, { second }] } = complicatedObj;\r\n\r\nI expected this to work, but I get the followin","comments":3,"createdAt":1422572807000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":1856,"state":"closed","title":"Complicated destructuring gives error","updatedAt":1422928650000},{"assignedTo":"DanielRosenwasser","body":"We've seen some issues where expressions which are non-obviously parenthesized lose contextual typing and cause issues:\r\n\r\n```ts\r\nvar x: SomeType = (n) => ((m) => q)); // 'm' does not get a contextual parameter type\r\nvar y: SomeType = t ? (m => m.len","comments":4,"createdAt":1413827605000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.5","number":920,"state":"closed","title":"Consider contextually typing parenthesized expressions","updatedAt":1422927230000},{"assignedTo":"","body":"Just a minor niggle, but it looks like lambda parameters have a slight formatting issue when following a comma:\r\n\r\n```typescript\r\nbutton.on(\"click\",() => {...});\r\n```\r\n\r\n^ Visual Studio seems to be removing the space between the comma and parentheses","comments":2,"createdAt":1422793492000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4442179?v=3","loggedByName":"jamiewinder","milestone":"TypeScript 1.5","number":1879,"state":"closed","title":"Minor formatting issue with lambda parameters","updatedAt":1422927182000},{"assignedTo":"ahejlsberg","body":"As addressed in #1673, parameter properties with binding patterns should not be allowed, and the spec needs to reflect this.","comments":0,"createdAt":1421366588000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":1691,"state":"closed","title":"Disallow destructured parameter properties in spec","updatedAt":1422927086000},{"assignedTo":"ahejlsberg","body":"[Originally on CodePlex at http://typescript.codeplex.com/workitem/2510]\r\n\r\nDear TypeScript Team, \r\n\r\nThe following code used to work - I believe as recently as TS 1.0 - but now fails. I'm using the latest Knockout.js with DefinitelyTyped declaration","comments":7,"createdAt":1416251535000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5834429?v=3","loggedByName":"LarsKemmann","milestone":"TypeScript 1.5","number":1181,"state":"closed","title":"Regression in type resolution post-1.0","updatedAt":1422927060000},{"assignedTo":"","body":"Even with parse errors we always get a perfectly fine AST.  There's no reason we can't emit .js even for these files.  The user still gets errors that they can handle if they want.  If users do not want emit in the presence of errors, there is a comm","comments":2,"createdAt":1422921264000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1899,"state":"closed","title":"Emit even in the presence of parse errors.","updatedAt":1422926646000},{"assignedTo":"","body":"Upon recovering four `.ts` files (3 temporaries, 1 known saved file), I received an error from Visual Studio. From my Roaming `ActivityLog.xml` file, this seemed relevant:\r\n\r\n```\r\n  <entry>\r\n    <record>393</record>\r\n    <time>2015/02/02 20:50:45.200","comments":1,"createdAt":1422911399000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1895,"state":"closed","title":"Error when recovering files, breaks language service functionality","updatedAt":1422924850000},{"assignedTo":"vladima","body":"This repro's on master, but not release-1.4:\r\n\r\n```ts\r\ninterface I {\r\n    [s: string]: (p: string) => number;\r\n    func(p: string): number;\r\n}\r\n\r\nvar x: I = {\r\n    func(\r\n}\r\n```\r\n\r\nTypeError: Unable to get property 'kind' of undefined or null referen","comments":1,"createdAt":1422316139000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":1814,"state":"closed","title":"Crash in getReturnTypeFromBody during getSemanticDiagnostics","updatedAt":1422924099000},{"assignedTo":"vladima","body":"Hi,\r\n\r\nVS 2013 Update 4 RC\r\nTS: 1.3\r\n\r\nThis refers to the subtle highlighting of matching braces and parentheses, which occurs when the cursor is moved over them. This feature does not work when there is an outer set of parentheses.\r\n\r\n![closingbrace","comments":8,"createdAt":1417552096000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5","number":1337,"state":"closed","title":"Matching brace/parenthesis highlight fails when enclosed in parentheses","updatedAt":1422924088000},{"assignedTo":"","body":"Propose that the value comment associated with const enums be supressed when using \"removeComments\" flag.\r\n\r\nTypeScript 1.4:\r\n```javascript\r\nconst enum color {red,  green, blue}\r\nvar c = color.blue;\r\n```\r\n\r\nEmitted javascript (TS 1.4):\r\n```javascript","comments":7,"createdAt":1422451721000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3136054?v=3","loggedByName":"stanthomas","milestone":"TypeScript 1.5","number":1833,"state":"closed","title":"const enum: supress value comment in emitted javascript","updatedAt":1422923861000},{"assignedTo":"","body":"Supress const enum member value comment in emitted javascript in presence of --removeComments option","comments":8,"createdAt":1422571184000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3136054?v=3","loggedByName":"stanthomas","milestone":"","number":1855,"state":"closed","title":"issue #1833 : const enum: supress value comment in emitted javascript","updatedAt":1422923711000},{"assignedTo":"ahejlsberg","body":"### Example\r\n```ts\r\nvar [x,y] = myFun();\r\n```\r\n\r\n### Codegen\r\n```js\r\nvar __a = myFun(); // fresh var __a\r\nvar x = __a[0];\r\nvar y = __a[1];\r\n```\r\n\r\n### Type annotations\r\n```ts\r\n// {x: myX} is a ES6 destructuring with renaming, this looks awkward\r\nvar ","comments":16,"createdAt":1406234001000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":240,"state":"closed","title":"Destructuring (ES6)","updatedAt":1422923025000},{"assignedTo":"","body":"...complete and does not have body. Fixed #1814","comments":3,"createdAt":1422670890000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1876,"state":"closed","title":"fix crash in getReturnTypeFromFunctionBody if function declaration is in...","updatedAt":1422920961000},{"assignedTo":"","body":"I haven't looked into this in full detail yet -- I have only the one example -- but if I have code of the form:\r\n```typescript\r\nvar scanner = ts.createScanner(ts.ScriptTarget.ES5, false, sourceFile.text);\r\nwhile (scanner.scan() !== ts.SyntaxKind.EndO","comments":3,"createdAt":1422912606000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2463526?v=3","loggedByName":"gscshoyru","milestone":"","number":1896,"state":"closed","title":"Scanner does not reach end of file token under some circumstances","updatedAt":1422917954000},{"assignedTo":"","body":"To get the sourceFile to walk for our linter, we're using ts.createProgram().getSourceFile() to get the AST for a given file -- since using ts.createSourceFile doesn't seem to attach the source file to all the child nodes, which causes code to fail i","comments":8,"createdAt":1422906047000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2463526?v=3","loggedByName":"gscshoyru","milestone":"","number":1893,"state":"closed","title":"AST nodes missing properties if code does not compile","updatedAt":1422912313000},{"assignedTo":"","body":"Explanation:\r\n- Class A has constructor that calls empty init method\r\n- Class B extends from Class A, adds public property and overrides init function that changes that public property\r\n- Public property is not changed by init function\r\n\r\nHow to repr","comments":6,"createdAt":1410772848000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Blog","name":"Blog","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/647632?v=3","loggedByName":"michaelowens","milestone":"","number":675,"state":"closed","title":"Super class constructor calling an extended method can result in weird behaviour","updatedAt":1422912295000},{"assignedTo":"","body":"Where there are overloads of a method, the method cannot be directly called with a parameter of a union type that matches the available overloads.\r\n\r\nHere's a cut-down example that highlights the apparent issue (can be pasted into TypeScript playgrou","comments":2,"createdAt":1422874684000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/365934?v=3","loggedByName":"danielearwicker","milestone":"","number":1883,"state":"closed","title":"Union type interaction with overloads","updatedAt":1422909617000},{"assignedTo":"","body":"In the new compiler, we removed an options to allow/disallow automatic semi-colon insertion, so our new compiler emit JavaScript and insert semi-colon. This change affects our users who use Typescript compiler to do formatting work and relying on sou","comments":3,"createdAt":1422663432000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1874,"state":"open","title":"CompilerOptions to preserve original semi-colon usage","updatedAt":1422908302000},{"assignedTo":"","body":"Hi,\r\n\r\n**TS**: 1.4\r\n\r\nNot sure that I agree we should have an error here:\r\n\r\n```typeScript\r\ninterface Indexer {\r\n        [x: string]: number\r\n}\r\n\r\nclass Base {\r\n\r\n foo() : Indexer {\r\n\treturn undefined;\r\n }\r\n}\r\n\r\n/*Error: Class 'Foo' incorrectly exten","comments":5,"createdAt":1422883430000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":1887,"state":"closed","title":"Spurious 'Index signature is missing in type' error when subclassing","updatedAt":1422905476000},{"assignedTo":"","body":"Emit Arrow function natively in ES6 and capture \"this\" ","comments":9,"createdAt":1420828120000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1627,"state":"closed","title":"Emit arrow function es6","updatedAt":1422905468000},{"assignedTo":"ahejlsberg","body":"'const enum' statements are neither described, nor even included into the grammar section.\r\nhttps://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#1.7\r\nhttps://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#a7-enums","comments":0,"createdAt":1421928270000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.5","number":1770,"state":"closed","title":"Nothing about 'const enums' in the spec","updatedAt":1422904318000},{"assignedTo":"ahejlsberg","body":"Since we have changed type guard behavior in PR #1621, #1433, should we update the language spec to reflect these change?","comments":1,"createdAt":1420826566000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.5","number":1626,"state":"closed","title":"Typescript Spec for Typeguard","updatedAt":1422904274000},{"assignedTo":"ahejlsberg","body":"https://github.com/Microsoft/TypeScript/blob/af4a12151c7f1b0cfe6b913d7c092b825cf4f641/doc/spec.md#3.7\r\n\r\nfollowing code is invalid.\r\n```TypeScript\r\n((x: string) => string) | (x: number) => number)\r\n```\r\n\r\nin 3.7\r\n> parentheses are required around fun","comments":0,"createdAt":1416938243000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"TypeScript 1.5","number":1267,"state":"closed","title":"invalid example code on language spec 3.7 Specifying Types","updatedAt":1422904258000},{"assignedTo":"ahejlsberg","body":"The grammar in Appendix A of the spec does not appear to allow the syntax:\r\n\r\n```typescript\r\ndeclare module \"foo\" {\r\n   //...\r\n}\r\n```\r\n\r\nIn particular, the grammar does not appear to allow the keyword `declare` to immediately precede the `module` key","comments":1,"createdAt":1416141886000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1252361?v=3","loggedByName":"yortus","milestone":"TypeScript 1.5","number":1176,"state":"closed","title":"[spec] AmbientExternalModuleDeclaration missing \"declare\"?","updatedAt":1422904245000},{"assignedTo":"ahejlsberg","body":"In the [section about type guards](https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#420-type-guards), the last example seems to be invalid:\r\n```javascript\r\nclass NamedItem {  \r\n    name: string;  \r\n}\r\n\r\nfunction getName(obj: any) {  \r\n","comments":1,"createdAt":1422282696000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.5","number":1808,"state":"closed","title":"Spec contradicts to itself in one of the examples with type guards","updatedAt":1422904199000},{"assignedTo":"","body":"Fixes #1181.\r\n\r\nPreviously, context sensitive arguments (arguments containing function expressions that are subject to contextual typing) would be completely ignored in the first round of type inference. With this change we instead infer from all arg","comments":4,"createdAt":1422595563000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1861,"state":"closed","title":"Deeper type inference in context sensitive arguments","updatedAt":1422903955000},{"assignedTo":"","body":"It would be really nice to have a way to get the compiler options into the code (like precompilation ifdef or something like that).\r\nThe main reason would be to make conditional code (=shim) conditionnally to the target ES version.\r\n\r\nIn term of code","comments":1,"createdAt":1422882832000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/340789?v=3","loggedByName":"jpolo","milestone":"","number":1886,"state":"closed","title":"Compiler options into the TS code","updatedAt":1422903553000},{"assignedTo":"","body":"Fixes #1176.\r\nFixes #1267.\r\nFixes #1626.\r\nFixes #1691.\r\nFixes #1770.\r\nFixes #1808.\r\n\r\nThis PR updates the language specification with the following:\r\n\r\n* Updates to parameter declarations (3.8.2.2).\r\n* Spread elements in array literals (4.6).\r\n* Upda","comments":0,"createdAt":1422751726000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1878,"state":"closed","title":"Updated Language Specification","updatedAt":1422903433000},{"assignedTo":"","body":"When I produced definition files (.d.ts) for my projects, private variables of classes are also present.\r\n\r\nMost of the time, I use internal libraries that require others definition files (jquery.d.ts for example), or definition files that are not pr","comments":2,"createdAt":1422622275000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5285425?v=3","loggedByName":"paztis","milestone":"","number":1867,"state":"closed","title":"Private variables in definition files","updatedAt":1422902701000},{"assignedTo":"","body":"Each ES object is a dictionary of string keys.\r\nTherefore it is allowed to write either a.b or a[\"b\"] in ES.\r\n\r\nTS doesn't allow this unless you specify index signature.\r\nAlso you cannot cast to this type without casting to 'any' .\r\n\r\n```typescript\r\n","comments":7,"createdAt":1422449379000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1832,"state":"closed","title":"Cast to index signature (question)","updatedAt":1422898848000},{"assignedTo":"","body":"Fixes #1587.\r\n\r\nThis PR improves handing of union types in type guards. Specifically, when a type guard of the form `x instanceof C` is true, the type of `x` is narrowed as follows:\r\n\r\n* If `C` is a subtype of the type of `x`, the type of `x` is narr","comments":2,"createdAt":1421158413000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1657,"state":"closed","title":"Improved union type guards","updatedAt":1422872621000},{"assignedTo":"","body":"The following example, inspired by the [async](https://github.com/caolan/async#seriestasks-callback) library, infers `{}` for `T` in the call to `series`.  I don't see why it should not be able to infer `string`.\r\n\r\n```TypeScript\r\ninterface AsyncResu","comments":3,"createdAt":1422833210000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/223467?v=3","loggedByName":"lukehoban","milestone":"","number":1881,"state":"closed","title":"Type inference does not work array of functions accepting callbacks","updatedAt":1422855288000},{"assignedTo":"DanielRosenwasser","body":"What is the suggested path for taking the github version of typescript as npm package dependency?\r\n\r\nFor instance, there are some small issues with the latest npm package 1.4.1, which are fixed in master, but master package.json still has version 1.4","comments":9,"createdAt":1422362697000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/837040?v=3","loggedByName":"clausreinke","milestone":"TypeScript 1.5","number":1818,"state":"closed","title":"please make package.json version on github more useful","updatedAt":1422851697000},{"assignedTo":"","body":"","comments":7,"createdAt":1422649468000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1873,"state":"closed","title":"Bump version to 1.5 (compiler)/0.5 (services)","updatedAt":1422832084000},{"assignedTo":"","body":"I am trying to test class \"a\" (which inherits from class \"b\") with jest. The typescript compiler prepends the file compiled javascript of \"a\" with\r\n\r\n    var __extends = this.__extends || function (d, b) { ... };\r\n\r\nunfortunately `this` is null, when","comments":7,"createdAt":1422441922000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3942764?v=3","loggedByName":"davidreher","milestone":"","number":1829,"state":"closed","title":"Unit testing typescript classes with jest (âCannot read property '__extends' of nullâ)","updatedAt":1422822228000},{"assignedTo":"sheetalkamat","body":"I've been unable to debug any typescript files in my project https://github.com/TheGrandUser/Hexcrawl\r\nThe project was created using VS 2013 Update 3, with I think the then current Web Essentials. I simply added the ts files using the context menu in","comments":9,"createdAt":1415079641000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8041079?v=3","loggedByName":"TheGrandUser","milestone":"TypeScript 1.5","number":1048,"state":"closed","title":"Can not debug Typescript files","updatedAt":1422752191000},{"assignedTo":"","body":"A function can choose to omit parameters defined in a signature, as shown by function ```a``` below. Callers of ```a``` must still supply arguments, but the function does not need to use them.\r\n\r\nDespite this, if the same function is assigned later i","comments":2,"createdAt":1422731164000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1036595?v=3","loggedByName":"Steve-Fenton","milestone":"","number":1877,"state":"closed","title":"Different rules for function parameter compatibility when assignment is on a different line to variable declaration.","updatedAt":1422738589000},{"assignedTo":"","body":"Consider the following:\r\n\r\n```TypeScript\r\nmodule ts {\r\n    export interface Node {\r\n        kind: SyntaxKind;\r\n        pos: number;\r\n        end: number;\r\n    }\r\n}\r\n\r\nfunction f(n: Node) {\r\n    ts.forEachChild(n, () => { /* ... */ });\r\n}\r\n```\r\n\r\nThe ","comments":8,"createdAt":1418167987000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":1419,"state":"closed","title":"Error messages are vague when types have the same name","updatedAt":1422681642000},{"assignedTo":"","body":"Hi,\r\n\r\n**TS**: 1.4\r\n\r\nThe following code:\r\n\r\n```typeScript\r\ndeclare module foo {\r\n\r\n    interface DragEvent {\r\n\r\n        foo(): void;\r\n        dataTransfer: DataTransfer;\r\n    }\r\n\r\n    interface Baz {\r\n\r\n        bar(handler: (event: foo.DragEvent) =>","comments":2,"createdAt":1422203407000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"Community","number":1798,"state":"open","title":"Incomprehensible error message when parameter clashes with type in Lib.d.ts","updatedAt":1422681566000},{"assignedTo":"","body":"Fix for issue #1419. Added a pretty unobtrusive fix but I'm wondering if I need to have more complicated logic (like typeToString() does) to handle certain cases that simply calling getFullyQualifiedName doesn't take care of.  ","comments":9,"createdAt":1419966943000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/880843?v=3","loggedByName":"chrisbubernak","milestone":"","number":1575,"state":"closed","title":"Better errors for types with same name","updatedAt":1422681058000},{"assignedTo":"","body":"`__extends()` currently use the normal property access syntax to copy static properties which means it will copy the result of the getter to the sub-class instead of the getter itself.\r\n\r\nIt should do something like this if ES5 is supported:\r\n\r\n```\r\n","comments":3,"createdAt":1422631474000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1662412?v=3","loggedByName":"billccn","milestone":"","number":1868,"state":"closed","title":"__extend() failed to copy static getters","updatedAt":1422672438000},{"assignedTo":"","body":"Hi,\r\n\r\nI have a lot of code in my .TS that work just fine.  When I hit F5 in VS2013 everything is very good.  Now I have a function declared in a script tag inside the ASPX and I have to call this function from the .TS file but it doesn't find it and","comments":8,"createdAt":1422634412000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8614008?v=3","loggedByName":"GearTheWorld","milestone":"","number":1869,"state":"closed","title":"Can't call script function in ASPX FROM .TS in VS2013","updatedAt":1422650949000},{"assignedTo":"","body":"I'm struggling how to declare const enum and then define it in .ts file. It is even possible in TypeScript 1.4?\r\n\r\n    declare const enum Cases { A,B,C }\r\n\r\nand\r\n \r\n    const enum Cases { A,B,C }\r\n\r\nends with error\r\n\r\n","comments":2,"createdAt":1422648733000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/284414?v=3","loggedByName":"Bobris","milestone":"","number":1872,"state":"closed","title":"Const enum in d.ts allowed?","updatedAt":1422649419000},{"assignedTo":"JsonFreeman","body":"```ts\r\ninterface Opts { url: string; }\r\n\r\ndeclare function doit(url: string): number;\r\ndeclare function doit(opts: Opts): boolean;\r\n\r\ndeclare function call<T, U>(fn: (arg: T) => U, arg: T): U;\r\n\r\nvar n: number = call(doit, 'here');\r\nvar b: boolean = ","comments":2,"createdAt":1421704436000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/81079?v=3","loggedByName":"Nemo157","milestone":"TypeScript 2.0","number":1729,"state":"open","title":"Generic type inference failure with callbacks in 1.4","updatedAt":1422643821000},{"assignedTo":"JsonFreeman","body":"```TS\r\ninterface Promise<T> {\r\n    then<U>(cb: (x: T) => Promise<U>): Promise<U>;\r\n}\r\n\r\n// Consider both orderings of the following overloads\r\ndeclare function testFunction(n: number): Promise<number>;\r\ndeclare function testFunction(s: string): Promi","comments":5,"createdAt":1406309445000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 2.0","number":248,"state":"closed","title":"Strange behavior in type argument inference with Promises","updatedAt":1422643794000},{"assignedTo":"","body":"Fixes #802\r\nerror Messages , could be more straight forward for each Type Nodes.\r\n```\r\n  fn IsTypeNodeIdentical() - could be fit inside IsTypeIdentical by comparing TypeFlags \r\n  , current baselines diff were to much to figure out if this change brea","comments":10,"createdAt":1419852601000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1100608?v=3","loggedByName":"dekajp","milestone":"","number":1572,"state":"open","title":"Fixes #802 , Show error Message for all duplicate method overload","updatedAt":1422642926000},{"assignedTo":"","body":"What is a good/proper/recommended way to access modules in a different window object? \r\nFor example, take the iframe scenario (assuming same domain) below:\r\n\r\n```javascript\r\nmodule Container {\r\n    export function magic() { /*...*/ };    \r\n}\r\nmodule ","comments":3,"createdAt":1422618288000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5202238?v=3","loggedByName":"reezom","milestone":"","number":1865,"state":"closed","title":"Question: Accessing modules living in different window object?","updatedAt":1422623010000},{"assignedTo":"","body":"```TypeScript\r\ninterface A {\r\n    a();     \r\n    a();     \r\n    a();     \r\n}            \r\n```\r\n\r\nExpected:\r\n```\r\nfile.ts(2,5): error TSxxxx: Duplicate overload signature for 'a'.\r\nfile.ts(3,5): error TSxxxx: Duplicate overload signature for 'a'.\r\nfil","comments":7,"createdAt":1412209681000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":802,"state":"open","title":"Duplicate identifier error does not show up for method signatures","updatedAt":1422619424000},{"assignedTo":"","body":"This is more of a suggestion than an actual bug -- for all of the other corresponding interfaces and syntax kinds (so far) the name of the syntax kind and the name of the corresponding interface are the same (for instance IfStatement, ClassDeclaratio","comments":4,"createdAt":1421882792000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2463526?v=3","loggedByName":"gscshoyru","milestone":"Community","number":1766,"state":"open","title":"Interface name and SyntaxKind are different for MethodDeclaration and PropertyDeclaration","updatedAt":1422605573000},{"assignedTo":"","body":"What api endpoint in the language service would I use for this kind of stuff:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/874898/5972643/21d860ba-a8b1-11e4-9899-474113827fae.png)\r\n\r\nand \r\n\r\n![image](https://cloud.githubusercontent.com/asse","comments":3,"createdAt":1422604355000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1862,"state":"closed","title":"API endpoint for get Type at hover","updatedAt":1422605551000},{"assignedTo":"","body":"Playing around with the type definitions for React 0.13 I ran into this problem:\r\n\r\n```typescript\r\ndeclare module Test {\r\n\tinterface Parent {\r\n\t\ty: number;\r\n\t}\r\n\tinterface Child extends Parent {\r\n\t\tz: string;\r\n\t}\r\n\t\r\n\tinterface ParentDeriv {\r\n\t\tyderi","comments":2,"createdAt":1422593635000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137852?v=3","loggedByName":"hraban","milestone":"","number":1860,"state":"closed","title":"Order of method overloading declaration matters when one parameter type extends the other","updatedAt":1422594659000},{"assignedTo":"","body":"Fixes #1791","comments":3,"createdAt":1422061917000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1792,"state":"closed","title":"handle binding patterns correctly when getting script lexical structure","updatedAt":1422589346000},{"assignedTo":"","body":"```TypeScript\r\nfunction f(x = /**/, y) {\r\n}\r\n```\r\n\r\nAt `/**/`, `x` and `y` should not appear in the completion list, but they currently do.","comments":0,"createdAt":1422581108000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":1858,"state":"open","title":"Only prior declared parameters should appear in completion lists for initializers","updatedAt":1422581618000},{"assignedTo":"sheetalkamat","body":"![image](https://cloud.githubusercontent.com/assets/7121557/5150816/e978537c-718a-11e4-8b90-91c9b833b138.png)\r\n\r\nSince there's a length property in each part of the union this is a legal property access but then we merge the doc descriptions without ","comments":0,"createdAt":1416609081000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.5","number":1237,"state":"closed","title":"Duplicate descriptions in Quick Info for unions","updatedAt":1422580623000},{"assignedTo":"sheetalkamat","body":"Attempting to use a type alias in a module declaration displays a 'Duplicate identifier' error:\r\n\r\n```typescript\r\ndeclare module jQuery {\r\n\t// Comment out the line below to make the problem go away\r\n\ttype Selector = string|Element|Element[]|IInstance","comments":1,"createdAt":1421674473000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3512382?v=3","loggedByName":"andraaspar","milestone":"TypeScript 1.5","number":1724,"state":"closed","title":"Type alias in a type declaration displays error","updatedAt":1422580618000},{"assignedTo":"","body":"```ts\r\nvar x: string|number;\r\n// no error, x is number in else branch\r\nvar r4 = typeof x === \"string\" ? x.substr : x.toFixed; \r\n\r\n// error, x is string|number in else branch\r\nvar r5 = typeof x === \"string\" && typeof x === \"string\" ? x.substr : x.toFi","comments":1,"createdAt":1416949272000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"Community","number":1270,"state":"open","title":"Type guard narrowing doesn't occur in else branch of conditionals with multiple conditions","updatedAt":1422580416000},{"assignedTo":"","body":"```TS\r\ninterface Foo {\r\n    x;\r\n}\r\ninterface Bar { }\r\n\r\nvar foo: Foo;\r\nvar bar: Bar;\r\n\r\nfoo = bar;\r\n// Type 'Bar' is not assignable to type 'Foo':\r\n//  Property 'x' is missing in type 'Bar'.\r\n\r\nfoo = bar;\r\n// Type 'Bar' is not assignable to type 'Foo","comments":5,"createdAt":1413930488000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":933,"state":"closed","title":"Errors differ between first assignment of two types, and subsequent assignments","updatedAt":1422575623000},{"assignedTo":"RyanCavanaugh","body":"I'm getting the following compiler error using TypeScript 1.4.1:\r\n\r\n```\r\nerror TS2420: Class 'WorkerFS' incorrectly implements interface 'FileSystem'.\r\n```\r\n\r\nUnfortunately, TypeScript does not tell me what property or method is incorrectly implement","comments":5,"createdAt":1421724378000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1141042?v=3","loggedByName":"jvilk","milestone":"TypeScript 1.5","number":1734,"state":"closed","title":"Error: Class incorrectly implements interface with no reason specified","updatedAt":1422573957000},{"assignedTo":"","body":"Fixes #1734 and #933 by recomputing the type relation when we are about to issue an unelaborated error. This leads to slightly more verbose errors in some cases, but prevents us from issuing completely useless errors as seen in #1734.\r\n\r\nMy first try","comments":2,"createdAt":1421792888000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":1747,"state":"closed","title":"Elaborate relational errors at least once when reporting them","updatedAt":1422573930000},{"assignedTo":"","body":"We are going to add git repository storing test262 and rwc","comments":1,"createdAt":1422564421000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1854,"state":"closed","title":"Update gitignore to ignore internal test folders","updatedAt":1422573780000},{"assignedTo":"","body":"refs #1652 (which lists a lot of files which aren't used, but might not be 100% correct)\r\n\r\nRemoved some unused files, see commit message for clarification. I can add a lot more but I wanted to be a bit careful and double check if they weren't used f","comments":2,"createdAt":1421274603000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":1672,"state":"closed","title":"Investigate unused code","updatedAt":1422559870000},{"assignedTo":"","body":"Just wanted to share a working version of Atom support : https://atom.io/packages/atom-typescript \r\n\r\nThanks for making the API Public!","comments":2,"createdAt":1422520443000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1848,"state":"closed","title":"[Announce] Atom support","updatedAt":1422556256000},{"assignedTo":"","body":"Hi,\r\nWhen targeting ES5 and using `--noImplicitAny`, the following is a type error:\r\n\r\n```typescript\r\nclass foo {\r\n    \"use strict\";\r\n}\r\n```\r\n\r\nVariable '\"use strict\"' implicitly has an 'any' type.\r\n\r\nWhy is this a type error?  TypeScript seems to ha","comments":2,"createdAt":1422507394000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3755379?v=3","loggedByName":"nycdotnet","milestone":"","number":1847,"state":"closed","title":"\"use strict\" in a class","updatedAt":1422555964000},{"assignedTo":"","body":"When you write this you get an error:\r\n\r\n```typescript\r\n\tvar q: { [index: number]: Object; } = {};\r\n\tif (1 in q) { // The right-hand side of 'in' expression must be of type 'any', an object type of a type parameter.\r\n\t}\r\n```\r\n\r\nBut when you define in","comments":9,"createdAt":1422366852000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1819,"state":"closed","title":"Operator 'in' doesn't work with implicit type with index.","updatedAt":1422554281000},{"assignedTo":"","body":"i'm including a link to this codeplex issue since I believe it's a critical bug that's been incorrectly closed.\r\n\r\nhttps://typescript.codeplex.com/workitem/627\r\n\r\nwhen combining output into a single .js file, the compiler should NEVER emit derived cl","comments":1,"createdAt":1422489768000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1088194?v=3","loggedByName":"piersh","milestone":"","number":1842,"state":"closed","title":"Inheritance only works if parent class is declared before child class","updatedAt":1422490166000},{"assignedTo":"ahejlsberg","body":"ES6 allows an arbitrary expression as the name of a property. The syntax is like this:\r\n```ts\r\nvar x = {\r\n   [\"some\" + \"arbitrary\" + \"name\"]: 0\r\n}\r\n```\r\n\r\nHere is my current proposal for supporting this feature:\r\n\r\nComputed expressions would be allow","comments":16,"createdAt":1415317892000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1082,"state":"closed","title":"ES6 Computed Properties","updatedAt":1422486168000},{"assignedTo":"","body":"Knockout models, which are very concise in javascript, are obnoxious to define in typescript (one of the few things that gets *longer* in typescript).  I'm suggesting the following syntax to make it much cleaner.  (Perhaps this is a duplicate?)\r\n\r\nTh","comments":10,"createdAt":1408468064000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8322472?v=3","loggedByName":"Gitgiddy","milestone":"","number":479,"state":"closed","title":"Class Constructors (for abbreviated Knockout model-style typescript adaptations)","updatedAt":1422483760000},{"assignedTo":"","body":"Supposing you have code like this one:\r\n\r\n```\r\n\tinterface Q {\r\n\t\ta: string;\r\n\t}\r\n\r\n\tfunction f(q: Q) { }\r\n\r\n\tvar q = { // <-- Cursor is here\r\n\t};\r\n\tf(q);\r\n```\r\n\r\nI would like to have a suggestion of 'a' property inside the object since it is called b","comments":3,"createdAt":1422442022000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1830,"state":"closed","title":"Better completion in VS","updatedAt":1422474846000},{"assignedTo":"DanielRosenwasser","body":"If you extend a generic class and pass a type argument, the instantiated constructor of the base class fails to contextually type the argument of a super call. This works correctly for base class methods, and it works correctly for constructors if th","comments":5,"createdAt":1418174889000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":1425,"state":"closed","title":"Contextual type does not flow into a super call if it is based on a type argument to the base class","updatedAt":1422429179000},{"assignedTo":"","body":"Should indicate that #1425 is fixed.","comments":0,"createdAt":1422427305000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1827,"state":"closed","title":"Added test for contextually typing parameters in super calls.","updatedAt":1422429165000},{"assignedTo":"DanielRosenwasser","body":"http://www.typescriptlang.org/Playground#src=class%20A%3Cx%2C%20y%3E%20%7B%0D%0A%09constructor(private%20map%3A%20(value%3A%20x)%20%3D%3E%20y)%20%7B%0D%0A%09%09%0D%0A%09%7D%0D%0A%7D%0D%0A%0D%0Aclass%20B%20extends%20A%3Cnumber%2C%20string%3E%20%7B%0D%","comments":5,"createdAt":1418579933000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"TypeScript 1.5","number":1480,"state":"closed","title":"Overload resolution fails to use type arguments from base type in 'super' constructor calls","updatedAt":1422416802000},{"assignedTo":"","body":"","comments":1,"createdAt":1421965415000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1775,"state":"closed","title":"Include comments on blocks during emit.","updatedAt":1422408825000},{"assignedTo":"","body":"Seems like we might not even have been performing overload resolution correctly here.\r\n\r\nFixes #1480.","comments":2,"createdAt":1422326701000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1816,"state":"closed","title":"Contextually type parameters in super calls using type arguments on the base class.","updatedAt":1422408588000},{"assignedTo":"","body":"This is a more generalized approach that doesn't require so many constructs to explicitly have 'emitLeading/TrailingComments'","comments":0,"createdAt":1421971150000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1777,"state":"closed","title":"Cleanup emit code for comments.","updatedAt":1422408007000},{"assignedTo":"","body":"Fix outputing sourcemap for test262","comments":5,"createdAt":1421709374000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1732,"state":"closed","title":"Fix recording sourcemap in human-readable form","updatedAt":1422404450000},{"assignedTo":"","body":"The following code should not be legal, I expected an error on the `let let`\r\n\r\n\tclass set {\r\n\t\tfoo(): set {\r\n\t\t\tlet let = new set();\r\n\t\t\treturn let;\r\n\t\t}\r\n\t}","comments":1,"createdAt":1422398939000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":1822,"state":"closed","title":"Illegal var name 'let' is allowed","updatedAt":1422399557000},{"assignedTo":"","body":"Handles #1237","comments":1,"createdAt":1421441985000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1697,"state":"closed","title":"Fixes the duplicate doc comment display in case of union property","updatedAt":1422397299000},{"assignedTo":"","body":"Parsing for ES6 export and import syntax. \r\nThis change is only for parsing side. Symbol binding, resolution, emit, declaration emit each will be in separate pull request for easy reviews.","comments":1,"createdAt":1422314056000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1813,"state":"closed","title":"Es6 modules parsing","updatedAt":1422397232000},{"assignedTo":"","body":"```typescript\r\ninterface foo { };\r\n```\r\n\r\ncurrently generates the JS code\r\n\r\n```javascript\r\n;\r\n```\r\n\r\nIs that by design?  IMHO that semicolon shouldn't be emitted","comments":1,"createdAt":1422377971000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2328656?v=3","loggedByName":"Niggler","milestone":"","number":1820,"state":"closed","title":"Trailing semicolons in interface definition emitted in generated JS","updatedAt":1422380987000},{"assignedTo":"","body":"```javascript\r\ninterface IArticle {\r\n    id?: number;\r\n    title: string;\r\n    anons?: string;\r\n    text?: string;\r\n    images?: string[];\r\n}\r\nclass Article {\r\n    constructor(params:IArticle) {\r\n        /// some code\r\n    }\r\n}\r\n\r\nnew Article({id: 1,","comments":5,"createdAt":1422347756000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3171573?v=3","loggedByName":"cevek","milestone":"","number":1817,"state":"closed","title":"strong interfaces","updatedAt":1422376688000},{"assignedTo":"ahejlsberg","body":"The below statement does not work as it wants the left side of the instanceof statement to be of type any, which kind of defeats the purpose as once you do that TS will not longer use typegaurds, or am I missing something\r\n\r\n```typescript\r\n\r\nconstruc","comments":4,"createdAt":1422016712000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5152077?v=3","loggedByName":"adamrogas","milestone":"TypeScript 1.5","number":1785,"state":"closed","title":"instanceof on union type incorrectly issues error","updatedAt":1422370361000},{"assignedTo":"ahejlsberg","body":"Hi,\r\n\r\n**TS  Version**: 1.4\r\n\r\nAt present there doesn't appear to be a way to define an enum in a union type and have it narrowed correctly. Here's an example:\r\n\r\n```TypeScript\r\nfunction f1(x: number | string){\r\n  if (typeof x === \"number\") {\r\n    re","comments":1,"createdAt":1421600806000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5","number":1718,"state":"closed","title":"A type guard for number should narrow also the type for enum values","updatedAt":1422370345000},{"assignedTo":"","body":"Fixes #1718.\r\nFixes #1785.\r\n","comments":1,"createdAt":1422232215000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1803,"state":"closed","title":"Fixes to union types in type guards and instanceof","updatedAt":1422370323000},{"assignedTo":"ahejlsberg","body":"```ts\r\ninterface Foo {\r\n    [s: string]: string;\r\n    b: string;\r\n}\r\n<Foo>{ } // Error, neither type is assignable to the other\r\n```\r\n\r\nThis is similar to #1447, but is a breaking change because of how we type indexers in object literals. It used to ","comments":1,"createdAt":1418259610000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":1448,"state":"closed","title":"Contextually typed object literal cannot be assigned if its indexer is undefined and it is also missing some other property","updatedAt":1422370194000},{"assignedTo":"ahejlsberg","body":"We made the change that an object type with a missing property cannot be a subtype of an object with an optional property. This made subtype choose better results in some cases, because it fixed cases of nonantisymmetry in the subtype relation. But n","comments":9,"createdAt":1418258700000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":1446,"state":"closed","title":"No common supertype between {optional, optional} and {required, absent}","updatedAt":1422370155000},{"assignedTo":"","body":"Fixes #1446.\r\nFixes #1448.\r\nFixes #1655.\r\nFixes #1723.\r\n\r\nWith this PR the type of an object literal has increased subtype compatibility until it is widened, similar to how we treat null and undefined in expressions.\r\n\r\nIn #919 we tightened subtyping","comments":3,"createdAt":1422120143000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1795,"state":"closed","title":"Improved subtype compatibility rules for types of object literals","updatedAt":1422370130000},{"assignedTo":"","body":"Currently the base type of all objects in TS seems to be ```{}```, which looks like an empty type but actually has members inherited from the Object object. This leaves no way to express a type with null prototype.\r\n\r\n```javascript\r\nvar foo: ??? = Ob","comments":5,"createdAt":1415573975000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1108,"state":"open","title":"No way to type an object with null prototype","updatedAt":1422341373000},{"assignedTo":"","body":"Compiling the following with --noImplicitAny gives an error for widening:\r\n```ts\r\ninterface I {\r\n    [s: string]: any;\r\n}\r\n\r\nvar x: I = {\r\n    p: null\r\n}\r\n```\r\nThis is because when we compute the indexer for the object literal, we call getTypeOfSymbo","comments":1,"createdAt":1422320018000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1815,"state":"closed","title":"Use transient symbols when computing the indexers for object literals","updatedAt":1422321106000},{"assignedTo":"","body":"Fixes #1772","comments":5,"createdAt":1421976452000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1779,"state":"closed","title":"handle union properties in when doing getOccurences\\findAllReferences","updatedAt":1422314508000},{"assignedTo":"","body":"ES6 allows an arbitrary expression as the name of a property. The syntax is like this:\r\n```ts\r\nvar x = {\r\n   [\"some\" + \"arbitrary\" + \"name\"]: 0\r\n}\r\n```\r\n\r\nHere is my current proposal for supporting this feature:\r\n\r\nComputed expressions would be allow","comments":0,"createdAt":1421807398000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1752,"state":"closed","title":"Computed properties (but not known symbols)","updatedAt":1422305571000},{"assignedTo":"","body":"Since functions can be defined in and returned from function bodies, it seems inconsistent to not support the definition of classes in functions. It would be very useful in applications where explicit typing of ad-hoc return value is preferred over d","comments":2,"createdAt":1422281286000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1662412?v=3","loggedByName":"billccn","milestone":"","number":1807,"state":"closed","title":"Feature request: Java-like local inner classes?","updatedAt":1422305361000},{"assignedTo":"","body":"if you create a \"property\" with a public getter and no setter. if you then try to set that property typescript doesn't tell you this isn't allowed. But it sure will blow up your code.\r\n\r\n        private _date: Date;\r\n        public get Date()\r\n      ","comments":1,"createdAt":1422289541000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3946072?v=3","loggedByName":"RoyM33","milestone":"","number":1810,"state":"closed","title":"Property without a setter, typescript isn't catching error when settting","updatedAt":1422305105000},{"assignedTo":"","body":"### Example\r\n```ts\r\nclass B extends class C { \r\n    constructor() {\r\n        this.y = 4;\r\n    }\r\n} {\r\n    constructor() {\r\n        this.x = 3;\r\n    }\r\n}\r\n```\r\n### Codegen\r\nShould be able to unpack the class expressions and codegen as we do now.Â  We c","comments":2,"createdAt":1406233703000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":239,"state":"closed","title":"Extending class 'extends' to work with expressions","updatedAt":1422305050000},{"assignedTo":"","body":"Why Typescript has not the static classes like in Java, while Javascript has supported this.\r\n\r\nIf I wrote in JS:\r\n```js\r\n\tvar ParentClass = (function () {\r\n\t\tfunction ParentClass() {\r\n\t\r\n\t\t}\r\n\t\tParentClass.prototype.someMethod = function () {\r\n\t\r\n\t\t","comments":4,"createdAt":1419399915000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2150362?v=3","loggedByName":"Serabass","milestone":"","number":1551,"state":"closed","title":"Nested classes","updatedAt":1422301735000},{"assignedTo":"","body":"add a context menu option for generating stub functions of typescript interfaces\r\n","comments":0,"createdAt":1422205541000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/546301?v=3","loggedByName":"unicomp21","milestone":"","number":1799,"state":"open","title":"Suggestion: add 'Generate Stub Functions' for TyepScript Interfaces","updatedAt":1422301710000},{"assignedTo":"","body":"Not sure if this should be reported here, please let me know.\r\n\r\nPasting the following text in a TypeScript file\r\n\r\n```javascript\r\n        /**\r\n\t * Try to get resources to write some of the to-be-done archives to the database\r\n\t */\r\n\tprivate _doSomeW","comments":6,"createdAt":1421845006000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7348032?v=3","loggedByName":"rogierschouten","milestone":"","number":1756,"state":"closed","title":"VS2013 RC4, TypeScript 1.4, NTVS 1.0RC2: pasting a function mutilates its comment","updatedAt":1422301469000},{"assignedTo":"","body":"If a class incorrectly implements an interface which it explicitly claims to implement, the compiler produces \"Argument of type '<implementation>' is not assignable to parameter of type '<interface>'\" at all the locations where an instance of the cla","comments":1,"createdAt":1422135699000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2458?v=3","loggedByName":"robertknight","milestone":"","number":1796,"state":"open","title":"Error messages are difficult to parse when class incorrectly implements an interface","updatedAt":1422301396000},{"assignedTo":"","body":"The in operator provides an opportunity for us to narrow a type. There are two ways that this could work:\r\n\r\n1. We can select particular constituents of a union type based on which members are present:\r\n```ts\r\ninterface I1 {\r\n    p: string;\r\n}\r\ninter","comments":5,"createdAt":1418177225000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1427,"state":"open","title":"'in' expression should be a type guard","updatedAt":1422298324000},{"assignedTo":"","body":"This is a child issue of #185 \"Suggestion: non-nullable types\".\r\n\r\n#185 has over 130+ (sometimes long) comments with many different designs and concerns. Discussions are interwined and it's very difficult to get anything out of the comments.\r\n\r\nThis ","comments":3,"createdAt":1422220484000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3832820?v=3","loggedByName":"jods4","milestone":"","number":1800,"state":"closed","title":"Design for !T non-nullable types","updatedAt":1422271085000},{"assignedTo":"","body":"","comments":0,"createdAt":1422241148000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5490484?v=3","loggedByName":"BobFrGit","milestone":"","number":1804,"state":"closed","title":"contextmenu and other new addEventListener","updatedAt":1422241466000},{"assignedTo":"","body":"```ts\r\ninterface Client {\r\n\twrap<T>(interceptor: Interceptor<T>, config?: T): Client;\r\n\ttypedWrap(interceptor: Interceptor<Config>, config?: Config): Client;\r\n}\r\n\r\ninterface Interceptor<T> {\r\n\tparent(client?: Client, config?: T): Client;\r\n}\r\n\r\ninterf","comments":2,"createdAt":1422221379000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/81079?v=3","loggedByName":"Nemo157","milestone":"","number":1801,"state":"closed","title":"Type inference failure on generic type with multiple optional properties","updatedAt":1422232535000},{"assignedTo":"vladima","body":"```typescript\r\nfunction f(s: string) {\r\n  s.constructor   \r\n}\r\n```\r\n1. Put cursor on `constructor` - it should be highlighted\r\n2. Add new line at the top of the file\r\n3. Move cursor to the `constructor`\r\n*Expected:* identifier is highlighted\r\n*Actual","comments":0,"createdAt":1421976550000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.5","number":1780,"state":"closed","title":"Get occurences at positions\\find all references don't work after code is edited","updatedAt":1422058556000},{"assignedTo":"","body":"fixes #1780","comments":1,"createdAt":1421979694000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1782,"state":"closed","title":"use nameTable - services layer storage of identifiers in the file","updatedAt":1422058544000},{"assignedTo":"","body":"Fixes #1742","comments":1,"createdAt":1422043547000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1788,"state":"closed","title":"make sure that enum values are computed before the emit","updatedAt":1422055197000},{"assignedTo":"","body":"This gets repetitive:\r\n\r\n    import Observable = events.Observable;\r\n\r\nIs there any practical reason the following shouldn't work?\r\n\r\n    import events.Observable;\r\n\r\nThat is, is there any reason the import statement shouldn't assume you want the imp","comments":0,"createdAt":1422005412000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/103348?v=3","loggedByName":"mindplay-dk","milestone":"","number":1783,"state":"open","title":"import statement: use imported identifier by default","updatedAt":1422042109000},{"assignedTo":"","body":"Given the following:\r\n\r\n```TypeScript\r\nclass TestClass {\r\n\r\n    myTestObject = {\r\n        message: 'It worked!',\r\n    }\r\n\r\n    myTestMethod() {\r\n        console.log(this.myTestObject.message);\r\n    }\r\n}\r\n\r\nvar myTestClassInstance = new TestClass();\r\n","comments":1,"createdAt":1422032747000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1638631?v=3","loggedByName":"nfriend","milestone":"","number":1787,"state":"closed","title":"Type safety of \"this\" is potentially misleading in class methods","updatedAt":1422037346000},{"assignedTo":"","body":"First I would like to say that I don't want to overwhelm those who are diligently making TypeScript a reality. I really appreciate this project. I also believe TypeScript is the future. \r\n\r\nThe company that I work for deals with a lot of data. In ord","comments":7,"createdAt":1406323621000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/72258?v=3","loggedByName":"jaredjbarnes","milestone":"","number":258,"state":"closed","title":"Lamda Expressions","updatedAt":1422015334000},{"assignedTo":"","body":"It looks like the wiki cannot be cloned due to the [What's new in TypeScript?](https://github.com/Microsoft/TypeScript/wiki/What%27s-new-in-TypeScript%3F) page.  This is what happens when you try:\r\n\r\n```\r\nC:\\GitHub> git clone https://github.com/Micro","comments":12,"createdAt":1421841267000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1010525?v=3","loggedByName":"johnnyreilly","milestone":"","number":1755,"state":"closed","title":"The wiki cannot be cloned","updatedAt":1422004753000},{"assignedTo":"ahejlsberg","body":"Hi,\r\n\r\n**TS Version**: 1.4\r\n\r\nIn the following the first call to `doFoo` fails to compile because the overload resolution algorithm picks the general case:\r\n\r\n```TypeScript\r\ninterface Bar {\r\n    bar?: number;\r\n    baz?: string;\r\n}\r\n\r\ninterface Foo {\r","comments":4,"createdAt":1421673393000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5","number":1723,"state":"closed","title":"Overload on constants requires cast for resolution","updatedAt":1421969827000},{"assignedTo":"","body":"Fixes #1723.\r\n\r\nIn #919 we tightened the subtyping rules to require optional properties to be present in subtypes. That's still the right thing to do, but it can have unintended consequences for overload resolution (which relies on subtyping) in comb","comments":5,"createdAt":1421955832000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1774,"state":"closed","title":"Include missing optional properties in contextually typed object literals","updatedAt":1421969767000},{"assignedTo":"","body":"```TypeScript\r\nfunction f() {\r\n    var a = () => 5;\r\n    return a.prototype;\r\n}\r\n```\r\n\r\nWe should give an error here.\r\n","comments":2,"createdAt":1421872447000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 2.0","number":1761,"state":"open","title":"Arrow functions should not have a 'prototype' property","updatedAt":1421965920000},{"assignedTo":"sheetalkamat","body":"Hi,\r\n\r\n**TS Version**: 1.4\r\n\r\nThe following code:\r\n\r\n```TypeScript\r\nvar x: any;\r\n/*\r\nvar bar;\r\n*/\r\n```\r\n\r\nEmits the following JavaScript\r\n\r\n```JavaScript\r\nvar x;\r\n/*\r\nvar bar;\r\nvar x: any;\r\n/*\r\nvar bar;\r\n```\r\n\r\nExpected\r\n\r\n```JavaScript\r\nvar x;\r\n/*\r\n","comments":10,"createdAt":1421589241000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.4.2","number":1714,"state":"closed","title":"Block comment corrupts emit","updatedAt":1421965674000},{"assignedTo":"","body":"Automatically identifies a commit based on whether or not it compiles, or whether or not its emit contains a particular string.\r\n\r\nUsage:\r\n```\r\nC:\\github\\TypeScript-dev>type test.ts\r\ndeclare function doFoo(bar?: { baz?: string; bar: number; }): strin","comments":2,"createdAt":1421711075000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":1733,"state":"closed","title":"Automatic bisecting script","updatedAt":1421960520000},{"assignedTo":"ahejlsberg","body":"I have declared `function getter(key: string|number)`.\r\nInside I try to do `var x = someObject[key]`\r\nI get a TS error saying \"An index expression argument must be of type 'string', 'number' or 'any'.\r\nObviously `key` satisfies this constraint as it ","comments":1,"createdAt":1421595844000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3832820?v=3","loggedByName":"jods4","milestone":"TypeScript 1.5","number":1715,"state":"closed","title":"Union types are not allowed in indexers","updatedAt":1421884287000},{"assignedTo":"","body":"Fixes #1715 (and others like it).\r\n\r\nThis PR corrects our handling of union types for certain expression operators. Specifically, where operators support operands of certain kinds of types we now also support unions of those kinds of types. For examp","comments":1,"createdAt":1421878199000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1765,"state":"closed","title":"Correct handling of union types in expressions","updatedAt":1421883834000},{"assignedTo":"","body":"Currently, no JavaScript is generated for const enum declarations (the language spec does not seem to address const enums).\r\n\r\nIs there a way to get the benefit of aggressive compile-time enum evaluation while still generating the JS enum object?\r\n\r\n","comments":2,"createdAt":1421873799000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"","number":1763,"state":"closed","title":"Not generating output for exported const enum makes the enum useless from regular JavaScript","updatedAt":1421878103000},{"assignedTo":"","body":"It would be great if TypeScript had support for wrapping generated AMD/commonjs module declarations inside a toplevel \"external\" module, e.g.\r\n\r\n```\r\ntsc -d -m commonjs -mname test src/test.ts --outDir out\r\n```\r\n\r\nwould result with `out/test.d.ts` co","comments":3,"createdAt":1421407106000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/502412?v=3","loggedByName":"spion","milestone":"","number":1694,"state":"closed","title":"Generate declarations for toplevel external modules","updatedAt":1421875467000},{"assignedTo":"","body":"To develop a codemirror mode for typescript, I'm forced to use the indenter independently of the language service, to do so I do : \r\n```\r\nvar sourceFile = ts.createSourceFile(Math.random()+ '.ts', text, ts.ScriptTarget.Latest, Math.random() + '');\r\nv","comments":8,"createdAt":1421834761000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":1754,"state":"closed","title":"Using the smartIndenter","updatedAt":1421870526000},{"assignedTo":"","body":"Handles #1724","comments":1,"createdAt":1421868578000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1760,"state":"closed","title":"Type alias declaration is type only declaration and doesnt make module instantiated","updatedAt":1421870080000},{"assignedTo":"","body":"The compiler option interface is declared with an optional target property:\r\n```typescript\r\n    interface CompilerOptions {\r\n        allowNonTsExtensions?: boolean;\r\n        charset?: string;\r\n        codepage?: number;\r\n        declaration?: boolean","comments":4,"createdAt":1421862181000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"","number":1758,"state":"closed","title":"Target not optional (compiler api)","updatedAt":1421867199000},{"assignedTo":"","body":"Move grammar checking into Release 1.4. ","comments":0,"createdAt":1419023388000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1539,"state":"closed","title":"Merge grammar check","updatedAt":1421865023000},{"assignedTo":"","body":"If you format the code in Visual Studio, you may see this result:\r\n```\r\n$.ajax({\r\n    type: \"POST\",\r\n}).done(function (data) {\r\n        var i;\r\n    }).fail(function (jqXHR, textStatus) {\r\n        var j;\r\n    }); \r\n```\r\nThe indentation in \"done\" and \"","comments":4,"createdAt":1419979753000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7818153?v=3","loggedByName":"pkkj","milestone":"","number":1580,"state":"closed","title":"Incorrect tab indentation in some JQuery code","updatedAt":1421835960000},{"assignedTo":"","body":"Sometimes VS with open TypeScript project (I'm testing with another languages, machine, and VS 2013. \r\nReproduced only on VS2015 Preview and only in TS projects) can use gigabytes of RAM.\r\n![vsml](https://cloud.githubusercontent.com/assets/7881854/57","comments":6,"createdAt":1421355864000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7881854?v=3","loggedByName":"flaticols","milestone":"TypeScript 1.4","number":1687,"state":"closed","title":"VS 2015 Preview massive use RAM","updatedAt":1421821206000},{"assignedTo":"","body":"This fixes regression from 5a7500ca5e62d7e6c7863cf42d156e8bcdc3017c with addition of eof token\r\nHandles #1714","comments":1,"createdAt":1421785571000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1743,"state":"closed","title":"Fixes the emit of comment when comment ends on last line","updatedAt":1421817247000},{"assignedTo":"vladima","body":"Tab option:\r\n![tab2](https://cloud.githubusercontent.com/assets/3396686/5198229/b8635e2a-7591-11e4-9f1c-6c12f7c3bb0f.png)\r\n\r\nTypeScript behavior:\r\n![tab4](https://cloud.githubusercontent.com/assets/3396686/5198233/c3878cea-7591-11e4-95a5-88ed7aa03722","comments":30,"createdAt":1416990612000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"TypeScript 1.5","number":1276,"state":"closed","title":"VS2015 Preview: TypeScript keeps inserting 4-space tab","updatedAt":1421806739000},{"assignedTo":"DanielRosenwasser","body":"Try to find all references on getThisContainer, which is called in checker.ts.\r\n\r\nExpected: The list includes the calls in checker.ts\r\nActual: It just includes the definition in utilities.ts, and the calls in services.ts, but not the calls in checker","comments":2,"createdAt":1421457759000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":1703,"state":"closed","title":"Find references doesn't return all the results","updatedAt":1421806348000},{"assignedTo":"","body":"```ts\r\n/// <reference path=\"./node_modules/typescript/bin/typescript.d.ts\"/>\r\n/// <reference path=\"./node_modules/typescript/bin/typescriptServices.d.ts\"/>\r\n\r\nimport typescript = require('typescript');\r\n\r\nvar foo: typescript.CompilerOptions;\r\nvar bar","comments":2,"createdAt":1421800969000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1748,"state":"closed","title":"Enum Equality","updatedAt":1421805650000},{"assignedTo":"vladima","body":"```typescript\r\nvar x = `asd$asd`\r\n```\r\npress Enter at $ - rest of template literal will be moved to the next line (OK) and indented (WRONG)","comments":0,"createdAt":1421805233000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.5","number":1751,"state":"closed","title":"Indentation is added when Enter is pressed inside template literal","updatedAt":1421805300000},{"assignedTo":"","body":"Fixes #1751","comments":2,"createdAt":1421791687000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1746,"state":"closed","title":"fixed smart indentation\\formatting in template literals","updatedAt":1421805287000},{"assignedTo":"","body":"","comments":0,"createdAt":1421708948000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1731,"state":"closed","title":"Fix unicode comparision and counting error for test262","updatedAt":1421797136000},{"assignedTo":"","body":"I have VS 2013 Community Edition Update 4 and have installed TS 1.14 from download today.\r\n\r\nWent into VS and created a new TS project.  All worked fine, just like in the playground.\r\n\r\nThen, I went into several of my existing projects in VS 2013 and","comments":5,"createdAt":1421456381000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9830835?v=3","loggedByName":"rrrobson","milestone":"","number":1701,"state":"closed","title":"Cant Use TS in VS 2013 Existing Projects","updatedAt":1421794109000},{"assignedTo":"","body":"Fixes #1734 and #933 by recomputing the type relation when we are about to issue an unelaborated error. This leads to slightly more verbose errors in some cases, but prevents us from issuing completely useless errors as seen in #1734.\r\n\r\nMy first try","comments":2,"createdAt":1421739401000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":1736,"state":"closed","title":"Elaborate all errors","updatedAt":1421792898000},{"assignedTo":"","body":"If the following snippet, `dispatch` does not report an error, while `dispatch2` behaves as expected. From my reading of the spec section 4.20, both constructs should generate an error, but the first version fails to narrow the type of `object` from ","comments":1,"createdAt":1421790668000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"","number":1745,"state":"closed","title":"Type guard fails to narrow parameter of `any` type - v1.4","updatedAt":1421791677000},{"assignedTo":"","body":"This would be a breaking change, so might need to be a separate flag. However I suspect anyone using noImplicitAny would switch on that flag, so maybe it should just be normal behaviour for noImplicitAny.\r\n\r\nIf inside a class method foo I write:\r\n\r\n ","comments":1,"createdAt":1421757968000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/365934?v=3","loggedByName":"danielearwicker","milestone":"","number":1740,"state":"closed","title":"Suggestion: when compiling with noImplicityAny make 'this' have type '{}' where it previously had type 'any'","updatedAt":1421785568000},{"assignedTo":"","body":"Current solution involves a lot of boilerplate code:\r\n\r\n```typescript\r\nclass A {\r\n constructor(a: number) {\r\n  this._a = a;\r\n }\r\n \r\n private _a: number;\r\n get a(): number { return _a; }\r\n```\r\n\r\nIt would be nice to have something simpler.\r\nNow you can","comments":2,"createdAt":1421749317000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1737,"state":"closed","title":"A better way to define readonly properties ?","updatedAt":1421785237000},{"assignedTo":"","body":"The following code compiles fine with 1.1 compiler (and even the 1.3 language service), but produces an error when using the 1.4 language service when the TypeScriptToolsVersion element is set to 1.1. The code below has to do with function overloadin","comments":5,"createdAt":1421769165000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10616296?v=3","loggedByName":"DavidRigglemanININ","milestone":"","number":1741,"state":"closed","title":"Language service 1.4 in Visual Studio is not back compatible with the 1.1 compiler","updatedAt":1421784812000},{"assignedTo":"","body":"","comments":3,"createdAt":1421750028000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10248943?v=3","loggedByName":"v-vairam","milestone":"","number":1739,"state":"closed","title":"how to uninstall 1.4","updatedAt":1421783418000},{"assignedTo":"","body":"I have a problem I've encountered a few times:\r\n\r\n```typescript\r\nclass BaseClass\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tthis.init();\r\n\t}\r\n\t\r\n\tprotected init()\r\n\t{\r\n\t}\r\n}\r\n\r\nclass ChildClass extends BaseClass\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\t\r\n\tprotected i","comments":1,"createdAt":1421599797000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/911440?v=3","loggedByName":"andrewvarga","milestone":"","number":1717,"state":"closed","title":"Arrow function called within super class constructor","updatedAt":1421736938000},{"assignedTo":"","body":"I'm not sure if this is an intention of typescript or not but acts differently to how I would've expected.\r\n\r\nIf i have a base class and extend it, overriding some base class properties, then want to work with the properties in the child class constr","comments":1,"createdAt":1420714506000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Canonical","name":"Canonical","color":"000000"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9443133?v=3","loggedByName":"brenthoneybone","milestone":"","number":1617,"state":"closed","title":"Unable to access extended properties in constructor","updatedAt":1421736819000},{"assignedTo":"","body":"I'm new to Typescript so bear with me\r\n\r\n```javascript\r\ninterface I {\r\n  func: () => void\r\n  func2: () => void\r\n}\r\n\r\nclass A implements I {\r\n\r\n  //Compiles fine, even though the return should be detected by the compiler?\r\n  func = () => {\r\n    return","comments":5,"createdAt":1420906114000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5557301?v=3","loggedByName":"dani-h","milestone":"","number":1633,"state":"closed","title":"Class and Interface return types incompatible","updatedAt":1421715848000},{"assignedTo":"","body":"Since TypeScript 1.4 has now been released, I'm working on a new develop version of the Eclipse TypeScript plug-in which tracks the master branch of TypeScript (I assume it'll be 1.5) and I noticed that TextChangeRange.collapseChangesAcrossMultipleVe","comments":3,"createdAt":1421515827000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1081904?v=3","loggedByName":"derekcicerone","milestone":"","number":1709,"state":"closed","title":"collapseChangesAcrossMultipleVersions() no longer available in language services","updatedAt":1421714880000},{"assignedTo":"","body":"Fixes #1653.\r\n\r\nLet me know where you want tests to go for the language services and I can add some if youâd like.","comments":7,"createdAt":1421114354000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"","number":1654,"state":"closed","title":"Use system line ending in services compiler host","updatedAt":1421711671000},{"assignedTo":"","body":"I created a small program and it checks which files are actually used. If I remove the following files everything still compiles and works (tsc.js and typescriptservices.js output is the same). \r\nAm I totally messing this's up? If not, why are they o","comments":4,"createdAt":1421108367000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":1652,"state":"closed","title":"Unused files","updatedAt":1421709854000},{"assignedTo":"","body":"Per direction from @mhegazy Iâm opening this ticket as a discussion point for loosening the restriction forbidding relative module IDs in `ImportDeclaration`s in `AmbientModuleDeclaration`. Loosening the restriction prevents the need to rewrite impor","comments":0,"createdAt":1421643186000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"","number":1720,"state":"open","title":"Allow relative module IDs in ambient external module declarations?","updatedAt":1421699456000},{"assignedTo":"","body":"Visual Studio 2013 version: 12.0.31101.0 and TS1.4\r\n\r\n>System.ArgumentException: The specified ITextSnapshot doesn't belong to the correct TextBuffer.\r\n       at Microsoft.VisualStudio.Text.SnapshotSpan.TranslateTo(ITextSnapshot targetSnapshot, SpanT","comments":2,"createdAt":1421520881000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":1710,"state":"closed","title":"specified ITextSnapshot doesn't belong to the correct TextBuffer","updatedAt":1421699000000},{"assignedTo":"","body":"Need object browser support in VS 2015.  Modeling would be nice too.\r\n","comments":1,"createdAt":1421502357000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/546301?v=3","loggedByName":"unicomp21","milestone":"","number":1708,"state":"closed","title":"Object Browser, VS 2015","updatedAt":1421698568000},{"assignedTo":"vladima","body":"Starting with 1.1, but not in 1.0.3, when a name from an import/required external module is aliased into the importing file's scope, the external module is always included in the define() dependencies of the JavaScript output.  This is incorrect in t","comments":3,"createdAt":1418067903000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10120345?v=3","loggedByName":"stephenfhunt","milestone":"TypeScript 1.5","number":1401,"state":"closed","title":"Unnecessary external AMD module required when aliased","updatedAt":1421695158000},{"assignedTo":"","body":"Hi!\r\n\r\nType narrowing is not working (not supported?) for fields (VS2013, TypeScript 1.4). \r\n\r\n```typescript\r\nclass O1Cls {\r\n    x: any;\r\n}\r\n\r\nclass O2Cls {\r\n    y: any;\r\n}\r\n\r\ninterface Options {\r\n    opt: O1Cls|O2Cls;\r\n}\r\n\r\nclass MyClass {\r\n    cons","comments":3,"createdAt":1421667090000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6196882?v=3","loggedByName":"laszlojakab","milestone":"","number":1721,"state":"closed","title":"Type narrowing for fields","updatedAt":1421693771000},{"assignedTo":"","body":"Hi,\r\n\r\nType narrowing not working in the following situation (maybe caused by generic type?):\r\n\r\n```typescript\r\ninterface Options<T> {\r\n    opt: T|(() => T);\r\n}\r\n\r\nfunction MyFunc<T>(options: Options<T>) {\r\n    var opt = options.opt;\r\n    if (typeof ","comments":1,"createdAt":1421675422000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6196882?v=3","loggedByName":"laszlojakab","milestone":"","number":1726,"state":"closed","title":"Type narrowing for generic types","updatedAt":1421691902000},{"assignedTo":"","body":"There is a bug (TypeScript 1.4.1) in js code generation when new line is missing after end comment.\r\n\r\nTo reproduce create new ts project add foo.ts:\r\n```typescript\r\n/*\r\nclass Foo {\r\n    foo() {\r\n    }\r\n}\t*/\r\n```\r\nThe generated js is:\r\n```typescript\r","comments":2,"createdAt":1421674894000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3840701?v=3","loggedByName":"edvinv","milestone":"","number":1725,"state":"closed","title":"Problem with /* */","updatedAt":1421691886000},{"assignedTo":"","body":"Recently, you offer us `let` and `const` support. Sadly, the only way to use it is to target es6.\r\nWhy don't implement the logic in the compiler itself like others es6 features (class, arrow functions).\r\nDoes the reason is technical ?","comments":3,"createdAt":1415106076000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1011289?v=3","loggedByName":"srenault","milestone":"","number":1053,"state":"closed","title":"Discussing about let & const support","updatedAt":1421642939000},{"assignedTo":"","body":"Motivation:\r\nTypeScript currently doesn't support all ES6 features and it takes time for supporting them.\r\nMoreover each vendor plays with new ES extensions like ES7 draft and so on.\r\n\r\nProposal:\r\nAllow pure ECMAScript block which is not treated as T","comments":20,"createdAt":1421055374000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1644,"state":"closed","title":"Allow pure ECMAScript block","updatedAt":1421638743000},{"assignedTo":"","body":"hi\r\n\r\nIs there any reason im getting error \r\n\r\n>Property 'test' of type '(callBack: (results: T) => void) => any' is not assignable to string index type 'T'.\t\r\n\r\nFor the following code\r\n```\r\ninterface IProxyArray<T> {\r\n    [index: string]: T;\r\n    te","comments":5,"createdAt":1418916354000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3509096?v=3","loggedByName":"vclteam","milestone":"","number":1531,"state":"closed","title":"Generic interface","updatedAt":1421574750000},{"assignedTo":"","body":"So, TypeScript 1.4.0 was released. \r\n\r\nNPM tells me that there is a version 1.4.1, but no 1.4.0. The installed version 1.4.1 tells me `Version 1.3.0.0` using `tsc --version`.\r\n\r\n~~~\r\nÎ» tsc --version\r\nmessage TS6029: Version 1.3.0.0\r\n~~~\r\n","comments":6,"createdAt":1421501154000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/496255?v=3","loggedByName":"hastebrot","milestone":"","number":1707,"state":"closed","title":"Wrong version strings","updatedAt":1421542865000},{"assignedTo":"","body":"This syntax :\r\nvar map: { [index: string|number ]: number };\r\n\r\nresults in compiler error :\r\nAn index signature parameter type must be 'string' or 'number'.\r\n","comments":1,"createdAt":1421496022000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7805711?v=3","loggedByName":"jice-nospam","milestone":"","number":1705,"state":"closed","title":"Unions not supported in map indexes (version 1.4.1.0)","updatedAt":1421520203000},{"assignedTo":"","body":"I have installed the 1.4 update [TypeScript_1.4_VS2013.exe] and am not able to use any of the example from the blog post.\r\n\r\nTyping tsc from the command line indicated 1.03. After updating the path to remove the old version it is now reporting 1.4 bu","comments":2,"createdAt":1421482036000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5257972?v=3","loggedByName":"grantfeldman","milestone":"","number":1704,"state":"closed","title":"Unable to use any 1.4 language features after update","updatedAt":1421497490000},{"assignedTo":"","body":"I require a module that I can new() up and I dont find a way in d.ts to express this.\r\n\r\nUsage:\r\nvar mod = require(\"foo\");\r\nvar foo = new mod();\r\n\r\nI would come up with something like this in my d.ts file but I dont think its possible:\r\n\r\ndeclare mod","comments":7,"createdAt":1421415694000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/900690?v=3","loggedByName":"bpasero","milestone":"","number":1695,"state":"closed","title":"Unable to come up with d.ts file for this module","updatedAt":1421483710000},{"assignedTo":"","body":"sys got updated to ts.sys in the compiler, so this change has to be reflected in the instrumenter.","comments":1,"createdAt":1421450801000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1699,"state":"closed","title":"Change sys to ts.sys in instrumenter","updatedAt":1421452638000},{"assignedTo":"","body":"Curious what's the state of affairs with `1.4`. I see its on [releases](https://github.com/Microsoft/TypeScript/releases) and also completed on [milestones](https://github.com/Microsoft/TypeScript/milestones) \r\n\r\nBut not on NPM, no blog post, no VS u","comments":7,"createdAt":1421291141000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1677,"state":"closed","title":"State of 1.4","updatedAt":1421444642000},{"assignedTo":"","body":"Will it be possible to have constants in interfaces like this:\r\n\r\n```typescript\r\ninterface Request {\r\n  const ACTION_GET = \"get\";\r\n  const ACTION_SET = \"set\";\r\n \r\n  action: string; // Can be ACTION_GET or ACTION_SET\r\n}\r\n```\r\n\r\nIt would be better to h","comments":3,"createdAt":1421329300000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1681,"state":"closed","title":"Constants in interfaces","updatedAt":1421440054000},{"assignedTo":"","body":"The title above pretty much sum it up.  \r\n\r\nNo hurry on this and hopefully it will lead to healthy discussions.\r\n\r\nThere is conflicting knowledges on wanting to use parallism for javascript.  There isn't good info out there and ES6 / ES7 is starting ","comments":5,"createdAt":1421352667000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5113337?v=3","loggedByName":"fletchsod-developer","milestone":"","number":1686,"state":"closed","title":"Parallelism - Need proposal, documentation, example & guideline for starter","updatedAt":1421416931000},{"assignedTo":"","body":"I'm currently writing a bunch of javascript libraries typings and I'm currently struggling with merging types and constructor for an ambiant module declaration. I checked codeplex writing .d.ts guide and [this stackoverflow question](http://stackover","comments":7,"createdAt":1421344889000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2660262?v=3","loggedByName":"sandorfr","milestone":"","number":1683,"state":"closed","title":"Specific .d.ts scenario  issue","updatedAt":1421403563000},{"assignedTo":"","body":"`tsc` compiles code in module `B` to `(param === A.T.B)` w/o inlining the value of enum.\r\nThe problem is it leads to `ReferenceError` in run-time. But if I change declaration to\r\n`export enum T { A = 1, B = 2, C }` it inlines value properly.\r\n\r\n```\r\n","comments":4,"createdAt":1421360481000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/296571?v=3","loggedByName":"kirilloid","milestone":"","number":1689,"state":"closed","title":"Enums from d.ts with auto-calculated value leads to run-time error","updatedAt":1421376267000},{"assignedTo":"","body":"Fixes #1542.","comments":3,"createdAt":1421285277000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1676,"state":"closed","title":"Disallow optional destructured parameters in implementation signatures.","updatedAt":1421369714000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\nclass C {\r\n    constructor(public [x, y, z]: string[]) {\r\n    }\r\n}\r\n\r\nvar c = new C([]);\r\nc.x === c.y;\r\n```\r\n\r\nwhich gives us\r\n\r\n```\r\nerror TS2339: Property 'x' does not exist on type 'C'\r\nerror TS2339: Property 'y' does not exist on t","comments":6,"createdAt":1419036160000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":1541,"state":"closed","title":"Destructured parameter properties do not introduce properties into their respective class","updatedAt":1421366646000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\nclass C {\r\n    constructor(public [x, y, z]: string[]) {\r\n    }\r\n}\r\n```\r\n\r\nEmitted code:\r\n```JavaScript\r\nvar C = (function () {\r\n    function C(_a) {\r\n        var x = _a[0], y = _a[1], z = _a[2];\r\n        this.[x, y, z] = [x, y, z];\r\n ","comments":1,"createdAt":1419035505000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":1540,"state":"closed","title":"Downlevel destructuring for parameter properties emits incorrectly","updatedAt":1421363698000},{"assignedTo":"CyrusNajmabadi","body":"The new signature help is showing optional arguments with [x?: string] rather than just using the question mark like in the past. The brackets are entirely superfluous, it's just visual noise.","comments":2,"createdAt":1413942369000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 2.0","number":935,"state":"open","title":"Signature help for optional members uses superfluous bracketing","updatedAt":1421363493000},{"assignedTo":"CyrusNajmabadi","body":"Quick info is inconsistently showing different spaces occupied by a symbol. in the value position, the info is incorrectly the value part of the symbol. but for type position, we see both.\r\n\r\n![quickinfo](https://cloud.githubusercontent.com/assets/80","comments":1,"createdAt":1416351178000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 2.0","number":1199,"state":"open","title":"QuickInfo is not consistent for symbols that exist in type and value spaces","updatedAt":1421363461000},{"assignedTo":"sheetalkamat","body":"I am all for showing more in Quick Info with overloads and such but we'll need a size limit. Try hovering over createElement:\r\n \r\n![attachfilehandler](https://cloud.githubusercontent.com/assets/8000722/5460879/5e441f6c-851b-11e4-9029-406b8640bde5.png","comments":2,"createdAt":1418760135000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":1510,"state":"open","title":"Quick Info needs to have its size capped","updatedAt":1421363357000},{"assignedTo":"","body":"Addresses #1540 and #1541.","comments":2,"createdAt":1421278289000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1673,"state":"closed","title":"Disallow destructured parameter properties","updatedAt":1421363140000},{"assignedTo":"","body":"So I try the following example from the wiki-ecmascript website\r\n\r\n```typescript\r\nfor ( let [name, value] in obj ) {\r\n    print(\"Name: \" + name + \", Value: \" + value);\r\n}\r\n```\r\n\r\nWhen compile using typescript on master, the compiler report an \"error ","comments":1,"createdAt":1419040036000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.5","number":1543,"state":"closed","title":"Destructing in For-in statement","updatedAt":1421362918000},{"assignedTo":"","body":"Really for @DanielRosenwasser : https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API\r\n\r\nI suspect its very similar to that of Roslyn compiler, if so the following might be helpful beginning of copy paste:\r\n\r\n-----\r\nSyntax trivia repres","comments":5,"createdAt":1421292804000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1678,"state":"closed","title":"document meaning of trivia","updatedAt":1421362080000},{"assignedTo":"","body":"Ander's work on destructuring assignment has incorporated two features : emitting default parameters and emitting rest parameters. This pull request is to add test cases for these two features. ","comments":3,"createdAt":1420494459000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1604,"state":"closed","title":"Add tests for rest and default","updatedAt":1421361177000},{"assignedTo":"","body":"From #945 \r\n> The first statement in the body of a constructor must be a super call if both of the following are true:\r\nâ¢ The containing class is a derived class.\r\nâ¢ The constructor declares parameter properties or the containing class declares insta","comments":1,"createdAt":1421338829000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1153371?v=3","loggedByName":"eschwartz","milestone":"","number":1682,"state":"closed","title":"Unexpected \"A 'super' call must be the first statement\"","updatedAt":1421354913000},{"assignedTo":"","body":"If I do this:\r\n\r\n```TypeScript\r\nconst enum Color { Blue, Green };\r\nvar c = Color.Blue;\r\n```\r\n\r\nI get this as output:\r\n\r\n```JavaScript\r\n;\r\nvar c = 0 /* Blue */;\r\n```\r\n\r\nNotice the extra semicolon on the first line.  Can we clean this up?  Looks messy ","comments":1,"createdAt":1421349567000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":1685,"state":"closed","title":"Const enum leaves behind semicolons","updatedAt":1421351954000},{"assignedTo":"","body":"for example:\r\n```\r\nclass A {\r\n  /**\r\n   *  some document\r\n   */\r\n  prop:number;\r\n  constructor(prop:number) {\r\n  }\r\n}\r\n```\r\nthe document part would be removed unless prop initialized with a value after compiled, i think it should be remained in compi","comments":7,"createdAt":1421204363000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/843422?v=3","loggedByName":"zzm2q","milestone":"","number":1665,"state":"open","title":"Emit comments even if related code is not emitted","updatedAt":1421351809000},{"assignedTo":"","body":"Is it intended behavior ?\r\n\r\n```typescript\r\nfunction x(f: (g: number) => void): void { f(1); }\r\n\r\nx(function (d) {\r\n   // d is number\r\n});\r\n```\r\n\r\nAdding parentheses around the function makes 'd' to be any type:\r\n\r\n```typescript\r\nfunction x(f: (g: nu","comments":10,"createdAt":1420127257000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1584,"state":"closed","title":"any type in callback parameter","updatedAt":1421351318000},{"assignedTo":"","body":"","comments":2,"createdAt":1421282067000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1675,"state":"closed","title":"Pass information of RWC currentDirectory to the Harness","updatedAt":1421348188000},{"assignedTo":"","body":"Addresses #1541.\r\n\r\nI recommend a changeset-based review.","comments":1,"createdAt":1421274133000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1671,"state":"closed","title":"Destructuring support for parameter properties","updatedAt":1421278417000},{"assignedTo":"","body":"This PR addresses #920.\r\n\r\nIt is also a follow-up PR to #1628 because there were issues with which commits would end up in master.","comments":2,"createdAt":1421091970000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1648,"state":"closed","title":"Contextually type parenthesized expressions","updatedAt":1421275927000},{"assignedTo":"","body":"","comments":2,"createdAt":1421263904000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1670,"state":"closed","title":"Fix narrow type for instanceOf and add testcases","updatedAt":1421265043000},{"assignedTo":"","body":"Fixes #1663. New behavior is the same with old formatter. It is an open question whether comitting completion on Enter should also trigger formatting (this is something that should be addressed on VS side) but I would still pick this change to make s","comments":2,"createdAt":1421205315000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1666,"state":"closed","title":"do not apply format on enter for the first line","updatedAt":1421259700000},{"assignedTo":"vladima","body":"Type the following\r\n```ts\r\ninter\r\n```\r\nA completion list should come up, and the interface keyword will be selected. Completion entry details will show for the completion item.\r\n\r\nPress enter to complete the keyword. This triggers formatting as well,","comments":0,"createdAt":1421201134000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":1663,"state":"closed","title":"Crash in getFormattingEditsAfterKeystroke when selecting a completion item","updatedAt":1421259466000},{"assignedTo":"","body":"This code never compiles, no error, just frozen tsc (even in playground):\r\n\r\n```typescript\r\nclass B {\r\n\tstatic staticMethod<U>():C<U> {\r\n\t\treturn B.method();\r\n\t}\r\n}\r\ninterface A<U> {\r\n\tstrangeThing(): A<Array<U>>;\r\n}\r\ninterface C<U> extends A<U> {\r\n}","comments":1,"createdAt":1421258108000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/93090?v=3","loggedByName":"dzsodzso63","milestone":"","number":1669,"state":"closed","title":"compiler freezes in an \"edge case\"","updatedAt":1421258456000},{"assignedTo":"rbuckton","body":"Implement TypeScript support for the proposed ES7 functionality for async functions\r\n\r\nSee http://wiki.ecmascript.org/doku.php?id=strawman:async_functions","comments":6,"createdAt":1405442410000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Ready%20to%20Implement","name":"Ready to Implement","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":5,"state":"closed","title":"Suggestion: implement async / await","updatedAt":1421258146000},{"assignedTo":"","body":"Add support for async/await, same as is being done for dart2js.\r\n\r\nhttps://code.google.com/p/dart/issues/detail?id=21411\r\n","comments":1,"createdAt":1421241709000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7237636?v=3","loggedByName":"theiceguy","milestone":"","number":1668,"state":"closed","title":"async/await support","updatedAt":1421254087000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\ntype Callback = <T>(x: T) => T;\r\nvar x: T<number>;\r\n```\r\n\r\nGet back the message\r\n```\r\nType '<T>(x: T) => T' is not generic.\r\n```\r\n\r\n~~Clearly this is misleading.~~ This is confusing, until given the explanation Anders has below.\r\n\r\n![i","comments":2,"createdAt":1418684743000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.6","number":1493,"state":"closed","title":"Confusing message for type alias with generic parameters","updatedAt":1421221670000},{"assignedTo":"","body":"This is a radical suggestion but I think it makes sense. \r\nToday, Typescript does two different things: it provides an awesome strongly-typed experience for coding javascript applications and it transpiles your code into equivalent javascript for var","comments":13,"createdAt":1421014476000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3832820?v=3","loggedByName":"jods4","milestone":"","number":1641,"state":"closed","title":"Suggestion: 6to5 instead of built-in transforms","updatedAt":1421217752000},{"assignedTo":"mhegazy","body":"Sorry about the bug title, I donât know exactly the best way to phrase it.\r\n\r\nGiven the following code:\r\n\r\n```ts\r\ninterface A {\r\n  (key:'foo'):string;\r\n  (key:string):void;\r\n}\r\n\r\ninterface A1 extends A {\r\n  (key:'bar'):string;\r\n}\r\n\r\ninterface A2 exte","comments":7,"createdAt":1415826662000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"TypeScript 1.5","number":1133,"state":"closed","title":"Interface combining with multiple interface inheritance is weird","updatedAt":1421213595000},{"assignedTo":"","body":"Added ts module prefix andd depend on types.ts (for ts.Map<string>)\r\n\r\nSo now the Jake task works again, but how can I test this correcty? Seems a json file is required but I don't know which one (hope It isn't a dumb question)","comments":1,"createdAt":1421196123000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":1661,"state":"closed","title":"Fix jake perftsc task","updatedAt":1421213567000},{"assignedTo":"","body":"```ts\r\nconst enum E { }\r\n```\r\nTry to get occurrences on the `const` keyword.\r\n\r\nError: Debug Failure. False expression: \r\n   at assert (:1143:17)\r\n   at fail (:1148:13)\r\n   at getFlagFromModifier (:25796:29)\r\n   at getModifierOccurrences (:25751:17)\r","comments":2,"createdAt":1421199539000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1662,"state":"closed","title":"Crash on getOccurrencesAtPosition for const enums","updatedAt":1421199990000},{"assignedTo":"","body":"This patch ensures specialized signatures are always at the top when performing call candidate resolution. It also includes an update to the compiler/inheritedOverloadedSpecializedSignatures test to add the failing merge condition, and an update to f","comments":3,"createdAt":1419555860000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"","number":1562,"state":"closed","title":"Ensure specialized signatures are always at the top when performing call candidate resolution","updatedAt":1421199237000},{"assignedTo":"","body":"The need to prefix all calls to methods and variables in the class body with the **this** keyword makes the code harder to read and look cluttered. \r\n\r\nInstead the TypeScript compiler could add the **this** keyword automatically during the compilatio","comments":3,"createdAt":1410893611000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4282885?v=3","loggedByName":"riax","milestone":"","number":679,"state":"closed","title":"Significally reduce the need for this keyword in classes","updatedAt":1421193271000},{"assignedTo":"","body":"","comments":2,"createdAt":1421188818000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1660,"state":"closed","title":"save token when scanning binary\\octal literals","updatedAt":1421192569000},{"assignedTo":"","body":"Update version to 1.4.1","comments":1,"createdAt":1421188040000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1659,"state":"closed","title":"Update version to 1.4.1","updatedAt":1421190301000},{"assignedTo":"","body":"...t node","comments":1,"createdAt":1421187825000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1658,"state":"closed","title":"when formatting lists check if end list token still belongs to the paren...","updatedAt":1421188833000},{"assignedTo":"paulvanbrenk","body":"Hi,\r\n\r\n**VS**: 2013 Update 4 RC\r\n**TS**: typeScriptServices.js from LKG as of 12-Dec\r\n\r\nWhen both the options \"Compile-on-save\" and \"Combine-JavaScript-output\" are set, saving a TypeScript code file results in the `.js` output file being generated as","comments":4,"createdAt":1418659745000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.4","number":1489,"state":"closed","title":"VS: Compile-on-save ignores Combine-JavaScript-output option","updatedAt":1421181684000},{"assignedTo":"ahejlsberg","body":"Perhaps a bug, the following does not work although I think its the right syntax: \r\n\r\n```ts\r\nclass Message {\r\n    value: string;\r\n}\r\n\r\nfunction saySize(message: Message | Message[]) {\r\n    if (message instanceof Array) {\r\n        return message.lengt","comments":5,"createdAt":1420345959000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"TypeScript 1.5","number":1587,"state":"closed","title":"Type Guard syntax for array","updatedAt":1421180788000},{"assignedTo":"vladima","body":"Something is busted in the way we check indexed access with const enums. The behavior should be that you get an error if you index with anything but a string literal that denotes an existing member. You do indeed get an error if you index with an exp","comments":1,"createdAt":1420926863000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"TypeScript 1.5","number":1636,"state":"closed","title":"Const enum indexing not checked correctly","updatedAt":1421177950000},{"assignedTo":"","body":"...ums. Fixes #1636.","comments":1,"createdAt":1421089249000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1647,"state":"closed","title":"disallow incorrect literal property names in indexed access for const en...","updatedAt":1421177610000},{"assignedTo":"","body":"Are there any plans for type inference from the usage ?\r\nFor instance:\r\n\r\n```typescript\r\nfunction f() : number;\r\n\r\nvar a;\r\ntry {  \r\n  a = f();\r\n} catch {\r\n  a = 2;\r\n}\r\n```\r\n\r\nI would like to see this code compiling.\r\nNow I must put the type explicitl","comments":1,"createdAt":1421146821000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1656,"state":"closed","title":"Infer type from the usage","updatedAt":1421175019000},{"assignedTo":"paulvanbrenk","body":"Highlight on Visual Studio 2013 Community don't works","comments":9,"createdAt":1418992284000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2060578?v=3","loggedByName":"rafakwolf","milestone":"TypeScript 1.4","number":1536,"state":"closed","title":"Visual Studio 2013 Community language service fails to work. (Install issue).","updatedAt":1421173679000},{"assignedTo":"jrieken","body":"Set the ```allowNonTsExtensions``` to ```true``` and have a file without an extension. Pass it to the compiler and you will see a compiler error like ```cannot find file <name>.ts```. This is a problem when an editor has an unsaved buffer which mime ","comments":0,"createdAt":1420466324000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"TypeScript 1.4","number":1593,"state":"closed","title":"allowNonTsExtensions should also honour files without extensions","updatedAt":1421169636000},{"assignedTo":"","body":"Change makes sure that the ```allowNonTsExtensions``` flag is also honoured for files without a file extension.","comments":2,"createdAt":1420466720000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"","number":1594,"state":"closed","title":"fixes #1593","updatedAt":1421169480000},{"assignedTo":"","body":"Trying to use:\r\n```javascript\r\n\t\tscanner = ts.createScanner(ScriptTarget.ES5, false, text, error);\r\n\r\n\t\twhile (token !== SyntaxKind.EndOfFileToken) {\r\n\t\t\ttoken = nextToken();\r\n\t\t\tconsole.log(\"TOKEN \" + token + \" \"+ SyntaxKind[token])\r\n\t\t}\r\n```\r\nThis ","comments":7,"createdAt":1418829358000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":1525,"state":"closed","title":"Index expression arguments in 'const' enums must be of type 'string'.","updatedAt":1421105403000},{"assignedTo":"","body":"```ts\r\nfunction foo() {\r\n   if (true) {\r\n      return 0;\r\n   }\r\n   else {\r\n      return \"\";\r\n   }\r\n}\r\n```\r\n\r\nThis is an error, but the error is on the entire function. It should be smaller.","comments":0,"createdAt":1420506753000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":1605,"state":"open","title":"Error span for no best common type among return types","updatedAt":1421104969000},{"assignedTo":"","body":"The file `TypeScript / src / services / core / timer.ts` contains an unnecessary `eval` on line 3.\r\n\r\nPlease replace:\r\n``` typescript\r\nvar global: any = <any>Function(\"return this\").call(null);\r\n```\r\nby\r\n``` typescript\r\nvar global: any = <any>(functi","comments":4,"createdAt":1412095244000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2171100?v=3","loggedByName":"daanx","milestone":"Community","number":783,"state":"closed","title":"Unnecessary \"eval\" in type services  (bug for CSP)","updatedAt":1421104706000},{"assignedTo":"","body":"Fixes #783\r\n\r\nany reason why it is still there?\r\nAlso, the following files aren't used, should they still be in git? \r\nservices/compiler/walkContext.ts\r\nServices/core/integerUtilities.ts\r\nServices/core/istringUtilities.ts\r\nServices/syntax/emitter.ts","comments":1,"createdAt":1421102755000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":1650,"state":"closed","title":"Remove unused timer.ts file","updatedAt":1421104693000},{"assignedTo":"","body":"I am trying to use the typescriptServices.js file to build some compilation tools around typescript. However when I include the typescript.d.ts or typescriptServices.d.ts, tsc generates several errors. I'm not sure if I am doing something wrong or if","comments":4,"createdAt":1421085132000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1992395?v=3","loggedByName":"rufio620","milestone":"","number":1645,"state":"closed","title":"typescript.d.ts and typescriptServices.d.ts generate compile errors","updatedAt":1421097799000},{"assignedTo":"steveluc","body":"Add the file src/compiler/commandLineParser.ts to the TypeScript services node module so that developers can re-use the compiler's command line parsing infrastructure.  Place the type information for command line parsing in typescript_internal.d.ts.","comments":0,"createdAt":1421008320000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4419011?v=3","loggedByName":"steveluc","milestone":"TypeScript 1.5","number":1640,"state":"closed","title":"Add the compiler command line parser to the node module for TypeScript services.","updatedAt":1421096550000},{"assignedTo":"","body":"This PR addresses #920.","comments":7,"createdAt":1420845244000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1628,"state":"closed","title":"Contextually type parenthesized expressions","updatedAt":1421091787000},{"assignedTo":"","body":"![image](https://cloud.githubusercontent.com/assets/7121557/5689991/6c25970e-9827-11e4-9eb6-32183661a747.png)\r\n\r\nWe're showing the purple cube that means method but also the text (method). It should be unnecessary to show both. Likewise:\r\n\r\n![image](","comments":2,"createdAt":1420854430000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":1631,"state":"open","title":"QuickInfo shows icon and name of item type","updatedAt":1421091571000},{"assignedTo":"DanielRosenwasser","body":"Is there an api that can be `require` ed from node to compile file. eg\r\n```javascript\r\nvar ts = require('typescript');\r\nts.compile(filePath, {options}, function(err, js) {\r\n //etc\r\n})\r\n```","comments":53,"createdAt":1407322978000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3478693?v=3","loggedByName":"Subash","milestone":"TypeScript 1.4","number":372,"state":"closed","title":"Node JS API","updatedAt":1421086475000},{"assignedTo":"ahejlsberg","body":"I am using the following example that I took directly from the blog post (http://blogs.msdn.com/b/typescript/archive/2014/11/18/what-s-new-in-the-typescript-type-system.aspx)\r\n\r\n```\r\nvar x: any = \"foo\";\r\nif(typeof x === 'string') {\r\n   console.log(x.","comments":10,"createdAt":1420467876000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/900690?v=3","loggedByName":"bpasero","milestone":"TypeScript 1.5","number":1595,"state":"closed","title":"type guards are not working in this case","updatedAt":1421084102000},{"assignedTo":"","body":"Added commandLineParser.ts to the generated node module, and added thetype information for commandLineParser.ts to typescript_internal.d.ts.","comments":3,"createdAt":1421022983000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4419011?v=3","loggedByName":"steveluc","milestone":"","number":1642,"state":"closed","title":"Added commandLineParser.ts to the generated node module","updatedAt":1421079603000},{"assignedTo":"","body":"It would be cool to annotate a method or property with a deprecated attribute\r\n\r\n## Proposal\r\n\r\nIf a warning could be issued when using a deprecated method or property it is easier to upgrade to a newer library version (only when the definitions are ","comments":4,"createdAt":1407414699000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":390,"state":"open","title":"Deprecated attribute","updatedAt":1421077424000},{"assignedTo":"","body":"The help says it's a warning, but it actually fails the build with an error:\r\n\r\n    --noImplicitAny    Warn on expressions and declarations with an implied 'any' type.\r\n\r\nI believe this should say something like:\r\n\r\n    --noImplicitAny    Raise an er","comments":1,"createdAt":1420896408000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/495366?v=3","loggedByName":"lptr","milestone":"Community","number":1632,"state":"closed","title":"--noImplicitAny is an error, not a warning","updatedAt":1421072583000},{"assignedTo":"","body":"Fixes #1632","comments":4,"createdAt":1420971279000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-signed","name":"cla-signed","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/495366?v=3","loggedByName":"lptr","milestone":"","number":1638,"state":"closed","title":"Show --noImplicitAny as an option to throw errors, not warnings","updatedAt":1421072565000},{"assignedTo":"","body":"Getting in the commits from Anders that I missed.\r\n\r\nI based the last recovery off one of my branches from noon. This is based off the `forEachPerf` pull request which has the `narrowingOfAny` merge, meaning that this branch should have\r\n\r\n* The last","comments":0,"createdAt":1420957796000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1637,"state":"closed","title":"Recover from force push (again)","updatedAt":1420960262000},{"assignedTo":"","body":"Fixes #1570","comments":26,"createdAt":1419842651000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1571,"state":"closed","title":"Don't emit an empty template head literal if there's a template span with a non-empty literal.","updatedAt":1420952153000},{"assignedTo":"","body":"The following code results in this error message:\r\n\r\nmu.ts(52,10): error TS2347: Untyped function calls may not accept type arguments.\r\n\r\nWhy ?\r\n\r\n```JavaScript\r\nclass JsonRequest<T> {\r\n\tmakePromise(request: https.RequestOptions): Promise<T> {\r\n52: \t","comments":10,"createdAt":1420914352000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/98088?v=3","loggedByName":"rogergl","milestone":"","number":1634,"state":"closed","title":"Untyped function calls may not accept type arguments","updatedAt":1420929831000},{"assignedTo":"","body":"","comments":0,"createdAt":1420922045000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1635,"state":"closed","title":"Recover from force push","updatedAt":1420923827000},{"assignedTo":"","body":"\r\n![image](https://cloud.githubusercontent.com/assets/7121557/5689964/ea115f82-9826-11e4-9a2a-dc3fd274a9f0.png)\r\n\r\nHovering over f here shows the name which isn't very useful. Showing the full shape of the type would be useful.\r\n","comments":0,"createdAt":1420854189000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":1630,"state":"open","title":"Show shape of types in QuickInfo rather than name","updatedAt":1420854189000},{"assignedTo":"paulvanbrenk","body":"A little annoying since the results are essentially always wrong/useless.\r\n![attachfilehandler](https://cloud.githubusercontent.com/assets/8000722/5460599/f802b97c-8518-11e4-8ef6-c213c0f7a3ce.png)\r\n","comments":1,"createdAt":1418759105000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":1506,"state":"closed","title":"Completion list shown when typing interface member names","updatedAt":1420843603000},{"assignedTo":"","body":"?\r\npublic final haha(){\r\n\r\n}","comments":3,"createdAt":1420773540000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6326007?v=3","loggedByName":"tommyZZM","milestone":"","number":1623,"state":"closed","title":"will there be support of \"final\" key word? ","updatedAt":1420839043000},{"assignedTo":"","body":"This PR optimizes the forEachChild visitor function. The function previously used nested helper functions that caused closure allocations, but those helpers are now regular functions and the additional information is passed as a parameter. The Monaco","comments":2,"createdAt":1420816030000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/cla-not-required","name":"cla-not-required","color":"009800"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1625,"state":"closed","title":"Optimizing AST node visitor","updatedAt":1420827128000},{"assignedTo":"","body":"This compiles on the online playground, and tsc version 1.3.0 as well:\r\n\r\n```ts\r\nfunction foo():()=>Bar<string> {\r\n    return ()=>{ return new Bar<number>(); };\r\n}\r\n```\r\nupdate: a more simple example which should fail at compile time as well:\r\n```ts\r","comments":4,"createdAt":1420800395000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2270661?v=3","loggedByName":"vujevits","milestone":"","number":1624,"state":"closed","title":"inferred parametric types are not checked by the compiler","updatedAt":1420822836000},{"assignedTo":"","body":"Fixes #1618","comments":2,"createdAt":1420722064000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/95908?v=3","loggedByName":"jsakamoto","milestone":"","number":1619,"state":"closed","title":"Fixes #1618: \"getElementsByTagName('svg')\" does not returns NodeList of SVGSVGElement, but generic NodeList.","updatedAt":1420813192000},{"assignedTo":"","body":"Fixes #1595.\r\n\r\nWhen a variable of type any appears in a `typeof` type guard that checks for one of the primtive types, the type of the variable is narrowed to that type. Type guards otherwise do not affect variables of type any.\r\n\r\nRationale: Since ","comments":1,"createdAt":1420756815000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1621,"state":"closed","title":"Type guard narrows type any in a primitive type check","updatedAt":1420761436000},{"assignedTo":"","body":"Hello!\r\nI hard work on project with phantom.js and node.js haves some shared code.\r\nPhantomjs code file uses \"reference\" comments to join modules and compiled in single js file (using -out parameter). \r\nNode.js code uses 'import' keyword (commonJs sy","comments":2,"createdAt":1420755215000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6518361?v=3","loggedByName":"alexeyk777","milestone":"","number":1620,"state":"closed","title":"reference to exported entity","updatedAt":1420757239000},{"assignedTo":"","body":"in v8 presence of `for-in` over objects being used as dictionaries prevents functions from being optimized (https://github.com/petkaantonov/bluebird/wiki/Optimization-killers). `objectTypeRelatedTo` is a hot path so it is highly desirable for this fu","comments":2,"createdAt":1420229931000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1586,"state":"closed","title":"extract map copying logic to a separate function","updatedAt":1420755722000},{"assignedTo":"","body":"Addresses #1350 and probably some other suggestions as well.\r\n\r\nThis changes the \"do we need to emit __extends\" logic to see if a symbol named `__extends` is already in visible scope at the site of the class declaration.","comments":0,"createdAt":1417636425000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":1356,"state":"closed","title":"Don't emit __extends if one is already in scope","updatedAt":1420750281000},{"assignedTo":"","body":"```javascript\r\nfunction foo(a: string[], b: number) { }\r\n\r\nfoo`A${ 1 }B${ 2, 3 }C`;\r\n```\r\n\r\ngives \"error TS2346: Supplied parameters do not match any signature of call target.\"\r\n\r\nChanging foo to take 3 number parameters `function foo(a: string[], b:","comments":1,"createdAt":1420485618000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1600,"state":"closed","title":"Tagged template strings with expressions with commas inside template spans confuse the typechecker","updatedAt":1420749206000},{"assignedTo":"DanielRosenwasser","body":"Hi there! Since TypeScript is getting more and more wonderful features like tuples or union types, I wonder if it makes sense to retarget a project like FunScript (F# to JS compiler) to TypeScript and leverage all its power. @ctaggart suggested we co","comments":15,"createdAt":1418770520000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8275461?v=3","loggedByName":"alfonsogarciacaro","milestone":"","number":1514,"state":"closed","title":"Building a TypeScript Syntax Tree with source from another language (F#)","updatedAt":1420748895000},{"assignedTo":"","body":"First line - TS, second line - current ES5 emit, third line - proposed ES5 emit\r\n\r\n```javascript\r\nconsole.log(`${ foo }b`);\r\nconsole.log(\"\" + foo + \"b\");\r\nconsole.log(foo + \"b\");\r\n```\r\n\r\n```javascript\r\nconsole.log(`${ foo }b${ bar }`);\r\nconsole.log(\"","comments":0,"createdAt":1419840360000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.5","number":1570,"state":"closed","title":"ES5 emit for template strings has some redundant empty strings","updatedAt":1420748260000},{"assignedTo":"","body":"It it possible to update the VS 2015 Preview language service somehow so that it works with `typescript.d.ts` built from `master`? Right now, it is show errors for everything with `const`, but more importantly  `CompilerOptions.option` causes cascadi","comments":4,"createdAt":1420677227000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/80104?v=3","loggedByName":"ctaggart","milestone":"","number":1615,"state":"closed","title":"Is it possible to update VS 2015 language service?","updatedAt":1420746836000},{"assignedTo":"","body":"complete FormData interface definition based on spec below.\r\nhttps://xhr.spec.whatwg.org/#formdata\r\n\r\nFYI, after tsc 1.4, it seems need to be update using USVString or FormDataEntryValue\r\ninstead of string or any.","comments":1,"createdAt":1420440394000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/322289?v=3","loggedByName":"Jxck","milestone":"","number":1592,"state":"closed","title":"update FormData interface on lib.d.ts","updatedAt":1420745931000},{"assignedTo":"","body":"**Input:**\r\n```TypeScript\r\n1 - `${ 3 }4`;\r\n```\r\n\r\n**Expected:**\r\n```JavaScript\r\n1 - (\"\" + 3 + \"4\")\r\n```\r\nor with #1571\r\n```JavaScript\r\n1 - (3 + \"4\")\r\n```\r\n\r\n**Actual:**\r\n```JavaScript\r\n1 - \"\" + 3 + \"4\"\r\n```\r\nor with #1571\r\n```JavaScript\r\n1 - 3 + \"4\"\r","comments":2,"createdAt":1419973756000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":1577,"state":"closed","title":"Template expressions in subtraction expressions/subtraction expressions in template expressions need parentheses","updatedAt":1420744380000},{"assignedTo":"","body":"Tool development could be simplified when the TypeScript compiler could be used as a library. The compiler currently does not check whether it is executed as a library (see [tsc.ts](https://github.com/Microsoft/TypeScript/blob/edd3974b6fb2b9f466985d0","comments":1,"createdAt":1419359196000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/596443?v=3","loggedByName":"bripkens","milestone":"","number":1550,"state":"closed","title":"Usage of TypeScript compiler as a library","updatedAt":1420742695000},{"assignedTo":"sheetalkamat","body":"The following code fails in TypeScript 1.4 with the below errors:\r\n\r\n```\r\nexport class MyClass {\r\n    protected myMethod<T>(val: T): T {\r\n        return val;\r\n    }\r\n}\r\n```\r\n\r\nParameter 'val' of public method from exported class has or is using priva","comments":8,"createdAt":1418257855000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10148370?v=3","loggedByName":"jctitor","milestone":"TypeScript 1.4","number":1445,"state":"closed","title":"Generic type parameters considered private in protected methods when generating .d.ts","updatedAt":1420740155000},{"assignedTo":"","body":"Changes in this PR:\r\n\r\n* New section on [Type Aliases](https://github.com/Microsoft/TypeScript/blob/langSpecTypeAliases/doc/spec.md#3.9).\r\n* [Union Types](https://github.com/Microsoft/TypeScript/blob/langSpecTypeAliases/doc/spec.md#3.4) are now a sep","comments":17,"createdAt":1414678853000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":998,"state":"closed","title":"Type aliases and other changes in language specification","updatedAt":1420711735000},{"assignedTo":"","body":"Type parameters belong to the entity that declares them and don't have their own visibility so they should always considered public. Fixes #1445 ","comments":5,"createdAt":1420595904000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1614,"state":"closed","title":"consider type parameters always visible","updatedAt":1420666581000},{"assignedTo":"","body":"This was the intent with the recent layering PR.","comments":4,"createdAt":1419285730000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1547,"state":"closed","title":"Moved EmitHost to utilities.ts so that it can be edited alone, and to fix resulting declaration file ","updatedAt":1420665229000},{"assignedTo":"DanielRosenwasser","body":"We are having a compile error which popped up recently after trying to upgrade to TypeScript 1.3:\r\n\r\n```typescript\r\nmodule MyClass {\r\n  export interface Someinterface {\r\n    foo(): void;\r\n  }\r\n}\r\n\r\nclass MyClass {\r\n  constructor() {\r\n  }\r\n}\r\n\r\nmodule","comments":2,"createdAt":1418119948000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1724111?v=3","loggedByName":"kersam-bl","milestone":"TypeScript 1.5","number":1414,"state":"closed","title":"Uninstantiated modules cannot be declared prior to merged class and instantiated module","updatedAt":1420663261000},{"assignedTo":"","body":"Fixes #1414.\r\n\r\nProbably should just view the diff.","comments":1,"createdAt":1418866464000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1529,"state":"closed","title":"Allow uninstantiated modules before clodules","updatedAt":1420663250000},{"assignedTo":"paulvanbrenk","body":"Consider the following code\r\n\r\n```TypeScript\r\nfunction checkObjectLiteral(node: ObjectLiteral, contextualMapper?: TypeMapper): Type {\r\n    // ...snip ...\r\n}\r\n```\r\n\r\nIf you open up a multiline comment on the line above, only `checkObjectLiteral`, `nod","comments":1,"createdAt":1413412307000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.5","number":902,"state":"closed","title":"Comment classification initially only colorizes identifiers, causes flashing","updatedAt":1420657281000},{"assignedTo":"JsonFreeman","body":"Two different modules with the same last name. One imports the other with an alias of that same name. The variable M in the emitted code corresponding to A.M needs to be _M.\r\n\r\n```ts\r\nmodule Z.M {\r\n    export function bar() {\r\n        console.log(1);","comments":4,"createdAt":1418757260000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.4","number":1503,"state":"closed","title":"Incorrect emit for module M with import M inside it","updatedAt":1420656875000},{"assignedTo":"","body":"Hi: [tslint](https://github.com/palantir/tslint) uses SyntaxTree and tree walkers extensively for implementing linter rules on top of the compiler (e.g. https://github.com/palantir/tslint/blob/master/src/rules/classNameRule.ts). It looks like the vis","comments":11,"createdAt":1406315841000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/362990?v=3","loggedByName":"ashwinr","milestone":"","number":254,"state":"closed","title":"SyntaxTree and SyntaxWalker in new compiler","updatedAt":1420595167000},{"assignedTo":"","body":"Intellisense currently only has 1 completion list item and no special icon to indicate various merged declaration types. When looking at a clodule in an Intellisense list it appears to only be a module (via icon and description) with no clear indicat","comments":0,"createdAt":1420591917000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":1612,"state":"open","title":"Intellisense should understand clodules/fundules","updatedAt":1420591917000},{"assignedTo":"","body":"Apologies for the combinatorial explosion of tests but it was the easiest way to be sure.\r\n\r\nTests are for binary expressions of each type - same precedence (+, -), greater precedence (*) and lower precedence (&), for both outside and inside the temp","comments":3,"createdAt":1419983617000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1581,"state":"closed","title":"Fixes #1577","updatedAt":1420586803000},{"assignedTo":"","body":"Issues in TS 1.3.0.0 with arrow functions that return objects.\r\n\r\n```javascript\r\nvar f1=(arg)=>{key:arg}; // this compiles but generates garbage\r\nvar f2=(arg)=>{key:arg,key2:'whatever'}; // this won't compile\r\nvar f3=(arg)=>{\"key\":arg}; // this won't","comments":3,"createdAt":1420576435000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7256523?v=3","loggedByName":"abe-winter","milestone":"","number":1607,"state":"closed","title":"can't return object constructor from arrow function","updatedAt":1420577758000},{"assignedTo":"","body":"While TypeScript allows me to write \r\n\r\n```\r\nenum Foo {\r\n\r\n}\r\n\r\nmodule Foo {\r\n\r\n}\r\n```\r\n\r\nit does not allow the same for *const* enums\r\n\r\n```\r\nconst enum Foo {\r\n\r\n}\r\n\r\nmodule Foo {\r\n\r\n}\r\n```\r\n\r\nIt will report an error about a duplicated identifier. U","comments":3,"createdAt":1420469888000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"TypeScript 1.4","number":1596,"state":"closed","title":"issue with enumodules and const","updatedAt":1420575962000},{"assignedTo":"","body":"","comments":2,"createdAt":1418774971000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1519,"state":"closed","title":"Merge release-1.4 into master","updatedAt":1420570107000},{"assignedTo":"","body":"In the \"Starts from JavaScript, Ends with JavaScript\" session, there is an example code. \r\n![typescript](https://cloud.githubusercontent.com/assets/7818153/5429895/5ac56a62-83b3-11e4-82a7-7d3db9b32cca.jpg)\r\n\r\nIt seems that the IDE already detects the","comments":5,"createdAt":1418605667000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7818153?v=3","loggedByName":"pkkj","milestone":"","number":1483,"state":"closed","title":"Small typo in the sample codes in TypeScript main page.","updatedAt":1420524397000},{"assignedTo":"","body":"Hello Typescript!\r\n\r\nIn our typescript file, we have the following function implementation:\r\n```ts\r\nprotected foo<A,B>(): {a: A; b: B;}[] {\r\n  return null;\r\n}\r\n```\r\n\r\nWhen the compiler runs, it throws the following errors\r\nReturn type of public metho","comments":3,"createdAt":1420489196000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1448299?v=3","loggedByName":"bluong","milestone":"","number":1602,"state":"closed","title":"Generic types considered private?","updatedAt":1420513554000},{"assignedTo":"","body":"When the harness recompiles the .d.ts files that it emitted, it gets its list of files by looking up the input files in the program. It uses program.getSourceFiles() and iterates until it finds a source file with the same name as the input file. Howe","comments":1,"createdAt":1420511518000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1606,"state":"closed","title":"Fix harness issues with recompiling emitted .d.ts","updatedAt":1420513059000},{"assignedTo":"","body":"From https://github.com/Microsoft/TypeScript/issues/1524, I see that the default method are all \"virtual\", but sometimes I don't wanna some public method to be overidden. Would you invent a mechasim to force the users that they cannot override a publ","comments":0,"createdAt":1418956550000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6959154?v=3","loggedByName":"MaleDong","milestone":"","number":1534,"state":"open","title":"Add \"sealed\" key word to mark some public/protected methods not be overriden","updatedAt":1420510981000},{"assignedTo":"","body":"I would like to see the `nameof` operator be considered for Typescript.\r\n\r\nThis feature was just added to C# [description](http://blogs.msdn.com/b/csharpfaq/archive/2014/11/20/new-features-in-c-6.aspx), and it is an elegant solution to a common issue","comments":2,"createdAt":1419977857000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1330693?v=3","loggedByName":"Taytay","milestone":"","number":1579,"state":"closed","title":"Suggestion: Add the nameof compile-time operator to convert property and function names into strings","updatedAt":1420502936000},{"assignedTo":"DanielRosenwasser","body":"Hi,\r\n\r\n**TS**: 1.3\r\n\r\nThe following compiles without error (with `noimplicitany` set):\r\n\r\n```TypeScript\r\nvar foo = require('foo');\r\nfoo.bar = 10; // works because foo is implicitly typed as 'any'\r\n```\r\n\r\nThe compiler should issue an error here becaus","comments":7,"createdAt":1419764956000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.5","number":1569,"state":"closed","title":"Require without import should issue an error when --noimplicitany is set","updatedAt":1420502451000},{"assignedTo":"","body":"Hello, is it intended behavior for this to happen:\r\n\r\n```typescript\r\n//FILE 1\r\nmodule Test {\r\n\tvar x : WebGLRenderingContext;\r\n\t\r\n\texport class Test1 {\r\n\t\t//Assume x is initialized\r\n\t}\r\n}\r\n```\r\n\r\n```typescript\r\n//FILE 2\r\nmodule Test {\r\n\texport class ","comments":2,"createdAt":1419451687000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6335521?v=3","loggedByName":"HarryLikesCode","milestone":"","number":1556,"state":"closed","title":"Multi-file non-public module variables","updatedAt":1420501618000},{"assignedTo":"","body":"Updated 10/3 (see comment for changelog)\r\n\r\n## `|` operator for types\r\nThis is a \"spec preview\" for a feature we're referring to as \"union types\". @ahejlsberg thought this up; I am merely providing the summary :smile:\r\n\r\n### Use Cases\r\nMany JavaScrip","comments":64,"createdAt":1412217259000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":805,"state":"closed","title":"Spec Preview: Union types","updatedAt":1420332718000},{"assignedTo":"","body":"error TS2339: Property 'trunc' does not exist on type 'Math'.","comments":5,"createdAt":1420026597000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6326007?v=3","loggedByName":"tommyZZM","milestone":"","number":1582,"state":"closed","title":"how to use lib.es6.d.ts?I try to use some method of es6ï¼but it just go error!","updatedAt":1420259526000},{"assignedTo":"","body":"var args = new Array(arguments.length) is more faster than var args = [];\r\n\r\nhttp://jsperf.com/typescript-rest-operator/3","comments":2,"createdAt":1420141054000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3171573?v=3","loggedByName":"cevek","milestone":"","number":1585,"state":"closed","title":"Initialize downlevel rest arguments with 'new Array(...)' instead of an empty array literal","updatedAt":1420163685000},{"assignedTo":"","body":"Not much to say here :)\r\nDon't think they are necessary for end users","comments":1,"createdAt":1420036456000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":1583,"state":"closed","title":"Add scripts to .npmignore","updatedAt":1420045369000},{"assignedTo":"","body":"Hi, consider this bit of code:\r\n\r\n```typescript\r\nclass Bar {\r\n    public bar: string;\r\n}\r\ninterface IFoo {\r\n    doFoo(type: any, bar: any): void;\r\n    doFoo(type: \"Quux\", bar: Bar): string;\r\n}\r\n```\r\n\r\nWe use it like this:\r\n```typescript\r\nvar foo: IFo","comments":2,"createdAt":1406023683000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":191,"state":"open","title":"Overload on constants: type checking additional parameters","updatedAt":1420031816000},{"assignedTo":"","body":"Primitive Type Implementation\r\n=========\r\n\r\nWe have been working on adding support for primitive types in TypeScript as part of a research project at the San Francisco State University. This issue documents our efforts and we would like to solicit fe","comments":35,"createdAt":1413000102000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Discussion","name":"Discussion","color":"5319e7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5952436?v=3","loggedByName":"wangyanxing","milestone":"","number":875,"state":"open","title":"Primitive type implementation","updatedAt":1420004269000},{"assignedTo":"","body":"Input:\r\n```javascript\r\nvar q = 1 - `${ 3 }4`;\r\n```\r\n\r\nExpected:\r\n```javascript\r\nvar q = 1 - (\"\" + 3 + \"4\"); // -33\r\n```\r\n\r\nActual:\r\n```javascript\r\nvar q = 1 - \"\" + 3 + \"4\"; // \"44\"\r\n```\r\n\r\nNote that this generates \"TS2363: The right-hand side of an a","comments":0,"createdAt":1419973975000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1578,"state":"closed","title":"Subtracting a template string from a number doesn't emit parentheses around the template string","updatedAt":1419974024000},{"assignedTo":"","body":"Input:\r\n```TypeScript\r\nvar r = window[`${ \"doc\" }ument`];\r\n```\r\n\r\nExpected:\r\n```JavaScript\r\nvar r = window[\"doc\" + \"ument\"];\r\n```\r\n\r\nActual:\r\n```JavaScript\r\nvar r = window[(\"doc\" + \"ument\")];\r\n```","comments":0,"createdAt":1419971666000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":1576,"state":"open","title":"Unnecessary parentheses in element access expressions","updatedAt":1419971666000},{"assignedTo":"","body":"Consider this code:\r\n\r\n```ts\r\n// myPlugin.ts\r\n<reference path=\"typings/jquery/jquery.d.ts\" />\r\n\r\n// Add a plugin to the JQuery type\r\ninterface JQuery {\r\n  myPlugin():JQuery;\r\n}\r\n\r\nvar $myEl = $('foo').myPlugin();\r\nvar $bar = $('foo').find('bar');\r\n``","comments":2,"createdAt":1419950395000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1153371?v=3","loggedByName":"eschwartz","milestone":"","number":1574,"state":"closed","title":"Unable to add property to interface after external import","updatedAt":1419959051000},{"assignedTo":"","body":"I request a runtime type checking system that perhaps looks something like this:\r\n\r\n```ts\r\nfunction square(x: number!) {\r\n  return x * x;\r\n}\r\n```\r\n\r\nWhere the `!` tells the compiler to generate a runtime type check for a number, something akin to [tc","comments":3,"createdAt":1419919248000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1058243?v=3","loggedByName":"jedmao","milestone":"","number":1573,"state":"closed","title":"Runtime type checking","updatedAt":1419959043000},{"assignedTo":"","body":"Provide better error recovery when we encounter merge markers in the source.\r\n    \r\n    Previously we would just treat each merge marker as trivia and then continue\r\n    scanning and parsing like normal.  This worked well in some scenarios, but\r\n    ","comments":1,"createdAt":1418972063000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1535,"state":"closed","title":"Provide better error recovery when we encounter merge markers in the source.","updatedAt":1419908278000},{"assignedTo":"","body":"### Example from ES6\r\n```tsÂ \r\n[1, 2, ...items, 3, ...moreItems]\r\n```\r\n\r\n### Type checking\r\nThe type of the array is the best common type of the individual elements and the element types of each of the \"spread\" elements.\r\n\r\n### Codegen\r\n```ts\r\n[1, 2, ","comments":2,"createdAt":1406233139000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":237,"state":"closed","title":"Spread arrays","updatedAt":1419905113000},{"assignedTo":"","body":"When 'this' is used as type it is replaced with the following interface or class.\r\n\r\n```typescript\r\nclass A {\r\n f(a : this) {} // <=> f(a : A)\r\n g(x : any) { \r\n   if (x instanceof this) { } // <=> x instanceof A\r\n}\r\n\r\ninterface B {\r\n  x : this; // <=","comments":2,"createdAt":1419540531000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1560,"state":"closed","title":"Proposal - Allow 'this' to be used as type","updatedAt":1419903581000},{"assignedTo":"","body":"Hi. I'm working on a bit bigger project that is fully driven by TS, and I noticed that compiler doesn't check if variables that have as type object, are filled with instances anywhere. I didn't realize that so now my project is full of variables that","comments":3,"createdAt":1419617180000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6003215?v=3","loggedByName":"matyaspoko","milestone":"","number":1565,"state":"closed","title":"Null calling pre-compile check","updatedAt":1419899384000},{"assignedTo":"","body":"","comments":1,"createdAt":1419661349000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1568,"state":"closed","title":"Enable incremental parsing by default.","updatedAt":1419753381000},{"assignedTo":"","body":"When this code:\r\n```\r\nclass Test {\r\n        private test(a: string);\r\n        private test(a: number);\r\n        private test(a: any) {\r\n                console.log(a);\r\n        }\r\n\r\n        public test2(a: string);\r\n        public test2(a: number);\r\n","comments":2,"createdAt":1418945337000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2201819?v=3","loggedByName":"cschleiden","milestone":"","number":1532,"state":"closed","title":"Type information is missing for private overloaded methods in .d.ts file","updatedAt":1419692309000},{"assignedTo":"","body":"I have noticed that the JS code generated from a TS class does not include property initialization inside the constructor function unless the TS class both declares and initializes the properties...although in some regards that makes sense, in others","comments":1,"createdAt":1419441800000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6955833?v=3","loggedByName":"giancarloa","milestone":"","number":1555,"state":"closed","title":"compiler flag to control property initialization...","updatedAt":1419688409000},{"assignedTo":"","body":"Why TypeScript doesn't allow this (tried in http://www.typescriptlang.org/Playground/ )\r\n\r\n```typescript\r\nclass A {\r\n  a : number;\r\n  b : typeof a; // Cannot find name 'a'\r\n}\r\n```","comments":1,"createdAt":1419540103000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":1559,"state":"closed","title":"typeof members","updatedAt":1419658088000},{"assignedTo":"","body":"Is it possible to add type info to the rest parameters in a way that each individual parameter can have a different type?\r\n\r\nThis works, but with this there can be any number parameters, and all have to have the same type:\r\n```\r\nfunction myFunction<T","comments":11,"createdAt":1414850442000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/911440?v=3","loggedByName":"andrewvarga","milestone":"","number":1024,"state":"closed","title":"Typed ...rest parameters with generics","updatedAt":1419590931000},{"assignedTo":"","body":"Any C++ compilers support literal binary numbers, that writing by 0b##### (like hex 0x####).\r\nWill can Typescript support it?","comments":1,"createdAt":1419414062000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2150362?v=3","loggedByName":"Serabass","milestone":"","number":1553,"state":"closed","title":"Binary Literals in TypeScript","updatedAt":1419438101000},{"assignedTo":"","body":"How are guys developing the current beta compiler now that there is so much syntax (unions,tagged types) that the current language service doesn't understand.\r\n\r\nI'm trying to do some stuff with the NodeJS API https://github.com/Microsoft/TypeScript/","comments":1,"createdAt":1419410958000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1552,"state":"closed","title":"Intellisense with beta compiler","updatedAt":1419411502000},{"assignedTo":"DanielRosenwasser","body":"The tsc.js should not suppress const enums, otherwise enums like ModuleKind and SyntaxKind are not present in the generated JavaScript. As a result, compiler wrappers, etc. not written in TypeScript cannot use those enums and must resort to hard-codi","comments":5,"createdAt":1415499572000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.4","number":1104,"state":"closed","title":"typescriptServices.js in the official npm package should be generated with preserveConstEnums on","updatedAt":1419320487000},{"assignedTo":"","body":"Sample: \r\n\r\n```ts\r\nvar __MYVAR: string;\r\n__\r\n```\r\nyou get the recommendation of the variable name with `___` i.e. three underscores. \r\n\r\n![image](https://cloud.githubusercontent.com/assets/874898/5532375/915d4f26-8a8a-11e4-9e9f-fbdf600417c5.png)\r\n\r\nW","comments":1,"createdAt":1419289288000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"TypeScript 1.4","number":1548,"state":"closed","title":"__ (double underscore) throws off auto-complete ","updatedAt":1419293835000},{"assignedTo":"","body":"Fixes issue pointed out here: https://github.com/Microsoft/TypeScript/commit/e836fe17297a68ab6a3fb8de1980d07386d02935#commitcomment-9034915","comments":1,"createdAt":1418950019000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1533,"state":"closed","title":"Fix compareSignatures","updatedAt":1419281816000},{"assignedTo":"","body":"Currently private functions are put on the prototype of a function so they are not really private. I suggest adding them as normal functions in the scope of the class so that they are in fact only accessible to the class.\r\n\r\nExample\r\n\r\n    module Exa","comments":5,"createdAt":1419005293000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1119883?v=3","loggedByName":"SamuelEnglard","milestone":"","number":1537,"state":"closed","title":"Make private functions private","updatedAt":1419119164000},{"assignedTo":"","body":"Given I have a class like this\r\n\r\n```\r\nclass Address {\r\n   public line1 : string;\r\n   public line2 : string;\r\n   public line3 : string;\r\n   public town: string;\r\n   public Zip: string;\r\n}\r\n```\r\nI was wondering what people thought of this more terse a","comments":2,"createdAt":1419007220000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1564426?v=3","loggedByName":"Davidhanson90","milestone":"","number":1538,"state":"closed","title":"Single type declaration for multiple fields. ","updatedAt":1419037894000},{"assignedTo":"","body":"Separate emit functions for template expression and template literal for down-level and native ES6","comments":0,"createdAt":1417634414000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1355,"state":"closed","title":"Refactor template literal emit for native ES6 and down-level","updatedAt":1419033069000},{"assignedTo":"","body":"This PR changes type guards to not affect values of type any.\r\n\r\nFixes #1426.\r\n","comments":5,"createdAt":1418235614000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1433,"state":"closed","title":"Type guards should not affect values of type any","updatedAt":1419017830000},{"assignedTo":"","body":"Hi,\r\n\r\nThere is [an agreeable set of guidlines](../wiki/Coding-guidelines), apparently for TypeScript internal use. This can be published as an official guideline for general use, with a few modifications (by removing the ones that reference TypeScri","comments":3,"createdAt":1413143971000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":878,"state":"open","title":"Provide an official set of Coding Guidelines","updatedAt":1419004107000},{"assignedTo":"","body":"![ts-services](https://cloud.githubusercontent.com/assets/199519/5478009/741fc258-85fe-11e4-9be2-d17ec280f6be.png)\r\n\r\nThe downside of my patch is ''typescript.js' is a duplicate of 'typescriptServices.js'. The symmetry with typescript.d.ts is useful ","comments":7,"createdAt":1418847181000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":1526,"state":"closed","title":"Make external version of 'typescript.js' match 'typescript.d.ts'.","updatedAt":1418948054000},{"assignedTo":"","body":"    Layer the compiler so that every layer only depends on hte layers below it.\r\n    \r\n    The layering is now:\r\n    \r\n    types\r\n    core\r\n    scanner\r\n    parser\r\n    binder\r\n    checker\r\n    emitter\r\n    program\r\n\r\nand then\r\n\r\n   services\r\n\r\nWith ","comments":0,"createdAt":1418766757000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1512,"state":"closed","title":"Compiler Layering","updatedAt":1418936577000},{"assignedTo":"","body":"I know that my suggestion (as what you see above in the title) is something (not a must)â¦â¦Well, however, it would be nice if we can use this \"syntax suger\" to make TypeScript \"more professional\", the wrapper of js. Those without the \"virtual\" cannot ","comments":3,"createdAt":1418808615000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6959154?v=3","loggedByName":"MaleDong","milestone":"","number":1524,"state":"closed","title":"Add \"virtual\" and \"override\" keywords for methods","updatedAt":1418934814000},{"assignedTo":"DanielRosenwasser","body":"```ts\r\nvar strings: string[];\r\nvar numbers: number[];\r\n\r\n(strings || numbers).pop();\r\n```\r\n\r\nGo to definition on pop causes the following crash:\r\n\r\nTypeError: Unable to get property 'parent' of undefined or null reference\r\n   at resolveLocation (:142","comments":0,"createdAt":1418251384000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.5","number":1439,"state":"closed","title":"Crash on go to definition for a method of a union type","updatedAt":1418933465000},{"assignedTo":"","body":"Fixes #1439.\r\n\r\nYou may want to go commit-by-commit.","comments":0,"createdAt":1418857971000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1528,"state":"closed","title":"Fix crash on go-to-def on union method","updatedAt":1418933465000},{"assignedTo":"","body":"Motivation: sometimes all  I need is just to see if a file has any errors, a compiled *.js as a bypass product is unwanted and has to be cleaned up afterwards which is unnecessary hustle.","comments":9,"createdAt":1416078566000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"Community","number":1172,"state":"closed","title":"Suggestion: enable a dry-run when the compiler doesn't emit code but does static checking.","updatedAt":1418886923000},{"assignedTo":"","body":"A Special way to get the private/protected property/method;Even add a undefine-property/method to instance\r\n\r\n```actionscript\r\nclass Main extends egret.DisplayObjectContainer{\r\n\r\n    public constructor() {\r\n        super();\r\n        this.addEventList","comments":1,"createdAt":1418881521000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6326007?v=3","loggedByName":"tommyZZM","milestone":"","number":1530,"state":"closed","title":"A Special way to get the private/protected property/method;Even add a undefine-property/method to instance","updatedAt":1418886764000},{"assignedTo":"","body":"Fixes #1172\r\n\r\nI'm not sure about the third commit. -out and -outDir are optional to begin with, and a lot of the other options also don't make sense when not emitting - -emitBOM, -mapRoot, -module, -preserveConstEnums, -removeComments, -sourceMap, -","comments":2,"createdAt":1418728531000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1501,"state":"closed","title":"Add -noEmit compiler flag that skips the emit stage in ts.compile()","updatedAt":1418868038000},{"assignedTo":"","body":"I haven't had the time to investigate yet, but was surprised to see the following compile without error with tsc.exe shipped in the VS extension v1.3:\r\n    var testingzetuple: [number, string] = [1, \"world\", \"foreva\"];\r\nor\r\n    var testingzetuple: [n","comments":2,"createdAt":1418653998000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4658087?v=3","loggedByName":"codespare","milestone":"","number":1487,"state":"closed","title":"Tuple type checking","updatedAt":1418867235000},{"assignedTo":"","body":"With this PR parameterless function expressions are not considered context sensitive and are therefore included in the initial round of type argument inference.\r\n\r\nFixes #1185.\r\n","comments":1,"createdAt":1418256304000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1443,"state":"closed","title":"Make initial inferences from parameterless function expressions","updatedAt":1418861989000},{"assignedTo":"ahejlsberg","body":"```ts\r\nfunction foo<T>(o: Take<T>, i: Make<T>) { }\r\ninterface Make<T> {\r\n    (): T;\r\n}\r\ninterface Take<T> {\r\n    (n: T): void;\r\n}\r\n\r\nfoo(n => n.length, () => 'hi'); // Error: length does not exist on type {}\r\n```\r\n\r\nHere we fixed T upon encountering ","comments":0,"createdAt":1416263466000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.5","number":1185,"state":"closed","title":"Incorrect fixing during type argument inference when no type annotation present","updatedAt":1418861989000},{"assignedTo":"","body":"","comments":3,"createdAt":1417719625000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1370,"state":"closed","title":"Emit rest parameters natively in ES6","updatedAt":1418861736000},{"assignedTo":"","body":"","comments":3,"createdAt":1417748527000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1377,"state":"closed","title":"Emit default param natively in ES6","updatedAt":1418861708000},{"assignedTo":"","body":"Due to a JavaScript engine issue, the switch statement in parsePrimaryExpression is not executing correctly. I've switched it to an if-else to get around this issue.","comments":3,"createdAt":1418438524000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1473,"state":"closed","title":"Switch parsePrimaryExpression to if-else style","updatedAt":1418856616000},{"assignedTo":"","body":"Code copied from bug #1503 for convenience. This fixes #1503.\r\n```ts\r\nmodule Z.M {\r\n    export function bar() {\r\n        console.log(1);\r\n    }\r\n}\r\nmodule A.M {\r\n    import M = Z.M;\r\n    export function bar() {\r\n        console.log(2);\r\n    }\r\n    M.","comments":1,"createdAt":1418771734000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1515,"state":"closed","title":"Fix issue #1503 with modules and imports sharing a name","updatedAt":1418856548000},{"assignedTo":"","body":"Regarding issue #1003. Given:\r\n\r\n    interface A { P: \"P\"; }\r\n\r\nAll of the following are valid:\r\n\r\n    var v1: A = { P: undefined };\r\n    var v2: A = { P: null };\r\n    var v3: A = { P: <any>5 };\r\n    var v4: A = { P: \"P\" };\r\n\r\nBut (consistent with TS","comments":2,"createdAt":1418648306000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/365934?v=3","loggedByName":"danielearwicker","milestone":"","number":1486,"state":"open","title":"Auto-initialisation of string literal types in some circumstances","updatedAt":1418854252000},{"assignedTo":"","body":"Right now the entrypoint just causes a full parse to happen.  But the LS code is\r\ncleaned up to take advantage of it appropriately.\r\n\r\nThis will not be checked in until all the incremental parsing work is complete.","comments":2,"createdAt":1418240805000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1434,"state":"closed","title":"Add support for incremental parsing.","updatedAt":1418852656000},{"assignedTo":"","body":"This PR adds support for ECMAScript 6 style spread and rest operators in array literals and destructuring declarations with down-level code generation for ES3 and ES5.","comments":0,"createdAt":1418410797000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1463,"state":"closed","title":"ECMAScript 6 spread and rest support","updatedAt":1418850063000},{"assignedTo":"","body":"I am investigating how to [mock node.js dependencies](http://stackoverflow.com/questions/27461644/is-there-a-trick-to-using-mockery-in-mocha-test-with-typescript) and it has stemmed to a couple issues.\r\n\r\n1. Cannot call ```var http = require('http')`","comments":2,"createdAt":1418504706000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8368448?v=3","loggedByName":"jt000","milestone":"","number":1478,"state":"closed","title":"Request: import module types without calling import x = require('x')","updatedAt":1418844593000},{"assignedTo":"mhegazy","body":"HTML nodeType 8 (Comment) have a .data attribute that hold they content. It's missing from the Node declaration in `lib.d.ts`, currently there's no workaround if you have `--noImplicitAny` turned on, having to rely on `var node:any;` instead of `var ","comments":2,"createdAt":1417902161000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/461084?v=3","loggedByName":"pocesar","milestone":"TypeScript 1.5","number":1393,"state":"closed","title":"Missing .data member on Node in lib.d.ts","updatedAt":1418844054000},{"assignedTo":"","body":"Hello,\r\nI love lambdas in TS, however, when i have more functions near each other, it bothers me a little that the => arrows aren't highlighted blue like -> arrows in F#. I know this very small and maybe a stupid thing, but  would find it nice to kno","comments":2,"createdAt":1418486851000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8367350?v=3","loggedByName":"Yahkem","milestone":"","number":1475,"state":"closed","title":"Suggestion: highlighted arrow in lambdas","updatedAt":1418842843000},{"assignedTo":"","body":"hi\r\n\r\nwhat is the reason for this error, in the documentation u mentioned that index can also be the type of \"any\".\r\nits sure the true about javascript","comments":10,"createdAt":1418128535000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3509096?v=3","loggedByName":"vclteam","milestone":"","number":1415,"state":"closed","title":"An index signature parameter type must be 'string' or 'number","updatedAt":1418841766000},{"assignedTo":"mhegazy","body":"The issue courtesy of @jrieken. the root cause is that calls to hasSemanticErrors causes a full typeCheck. so regardless which entry point we use we will end up checking the whole project. this can significantly slow down getEmitOutput.","comments":1,"createdAt":1417504464000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.4","number":1330,"state":"closed","title":"getEmitOutput causes a full project typecheck","updatedAt":1418819852000},{"assignedTo":"mhegazy","body":"* run jake clean local\r\n* check typescriptServices.d.ts for exported function from services/utilities.ts\r\n* > they are not there...","comments":1,"createdAt":1418724015000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"TypeScript 1.4","number":1499,"state":"closed","title":"typescriptServices.d.ts misses utilities","updatedAt":1418819841000},{"assignedTo":"","body":"    Understand and handle modifiers on function declarations and variable statements within blocks.\r\n    \r\n    This ensures reusability for functions/variables that may have been outside a block, but end up\r\n    inside one afterwards.  It also ensure","comments":1,"createdAt":1418267799000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1450,"state":"closed","title":"Understand and handle modifiers on function declarations and variable statements within blocks.","updatedAt":1418812185000},{"assignedTo":"","body":"","comments":0,"createdAt":1418799901000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1521,"state":"closed","title":"Remove 'grammarDiagnostics' from SourceFile.","updatedAt":1418802608000},{"assignedTo":"","body":"","comments":0,"createdAt":1418801011000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1522,"state":"closed","title":"Update LKG.","updatedAt":1418802266000},{"assignedTo":"","body":"This branch is for merging grammar checking phase with type-checking phase. The easiest way to review this PR is by commit that start with \"Move grammar checking: ...\" as each one will be the complete move of a node type ","comments":0,"createdAt":1418173145000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1423,"state":"closed","title":"Refactor grammar check","updatedAt":1418792395000},{"assignedTo":"","body":"Fixes #1182","comments":0,"createdAt":1418693808000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1495,"state":"closed","title":"Do not use the file name in errors unless it exists","updatedAt":1418777761000},{"assignedTo":"","body":"A side-effect of #1500 is that Travis builds won't fail on test failures, because the \"error\" handler calls complete() instead of fail(). Before the change in #1500 the handler would throw an uncaught TypeError before it could call complete(), so it ","comments":0,"createdAt":1418773945000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1517,"state":"closed","title":"Fail the surrounding Jake task if exec'd tool has non-zero exit code.","updatedAt":1418777655000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\nfunction tempTag<T>(templateStrs: TemplateStringsArray, g: (x: T) => T, x: T): T {\r\n    return g(x);\r\n}\r\n\r\nvar a = tempTag `${ x => x }${ 10 }`;\r\n```\r\n\r\nRight now the `x` parameter in the function expression is typed as `any` but **sho","comments":1,"createdAt":1418434175000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.4","number":1472,"state":"closed","title":"Type Checking and Contextual Type Resolution Broken for Functions in Tagged Template Strings","updatedAt":1418776425000},{"assignedTo":"","body":"This was we don't get noisy baselines just because a different phase of the compiler reported\r\nthe diagnostic.\r\n\r\nThis helps with Yui's refactoring work to move grammar checks into the type checker.","comments":1,"createdAt":1418774287000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1518,"state":"closed","title":"Sort diagnostics in our baseline output.","updatedAt":1418775118000},{"assignedTo":"","body":"The original error was because process.stderr only allows writing Strings or Buffers, but status is a Number.\r\n\r\nAlso, the message parameter of the \"error\" handler is just the amalgam of all output written to stderr. This is already logged by the \"st","comments":2,"createdAt":1418726977000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1500,"state":"closed","title":"Fixed \"TypeError: invalid data\" when executables run by exec exited with non-zero code.","updatedAt":1418770727000},{"assignedTo":"","body":"Also changed some diagnostics messages.","comments":5,"createdAt":1408663356000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":507,"state":"closed","title":"Added codepage support.","updatedAt":1418765463000},{"assignedTo":"","body":"This is related to borisyankov/DefinitelyTyped#2734\r\n\r\nAngular-Protractor exposes the variable $, which is mirror of the JQuery's $ functionality. There doesn't seem to be a way to have the $ variable be of 2 possible types depending on how the JS is","comments":1,"createdAt":1418764108000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8368448?v=3","loggedByName":"jt000","milestone":"","number":1511,"state":"closed","title":"How to have a conditional ambient type?","updatedAt":1418765373000},{"assignedTo":"","body":"","comments":0,"createdAt":1418706643000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1497,"state":"closed","title":"Add internal definitions to a diffrent .d.ts files","updatedAt":1418761328000},{"assignedTo":"","body":"If the source has changed relative to the emit, the debugger should just debug the javascript and not try to use the source maps.","comments":0,"createdAt":1418759773000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1509,"state":"open","title":"Debugger should not try to use source maps if they are out of date with source","updatedAt":1418759773000},{"assignedTo":"","body":"HTMLElement isn't colorized but string is.\r\n![attachfilehandler](https://cloud.githubusercontent.com/assets/8000722/5460710/cf800b02-8519-11e4-950d-bdd095e2c680.png)\r\n","comments":0,"createdAt":1418759477000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":1508,"state":"open","title":"Non-primitive types not colorized in Quick Info","updatedAt":1418759480000},{"assignedTo":"","body":"In C#, you can create a generic method that is aware of the generic types.\r\n```\r\nT As<T>(obj: object)\r\n{\r\n    return obj as T;\r\n}\r\n```\r\n\r\nIn typescript, you must specify the type twice to accomplish the same.\r\n```\r\nfunction as<T>(obj: any, _T: any): ","comments":3,"createdAt":1418656114000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/830878?v=3","loggedByName":"BSick7","milestone":"","number":1488,"state":"closed","title":"Automate reflection-style generic functions","updatedAt":1418756415000},{"assignedTo":"ahejlsberg","body":"Hi all,\r\n\r\nWhen upgrading a project from TypeScript 1.0 to TypeScript 1.3 I noticed the following Knockout code no longer compiled:\r\n\r\n```ts\r\nmodule WorkedPreTypeScript13 {\r\n\r\n    enum ScreenMode { Edit, Details }\r\n\r\n    export class ViewModel {\r\n\r\n ","comments":9,"createdAt":1416394466000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1010525?v=3","loggedByName":"johnnyreilly","milestone":"TypeScript 1.4","number":1211,"state":"closed","title":"Breaking change with TypeScript 1.3?","updatedAt":1418756006000},{"assignedTo":"","body":"...on should be considered referenced, this fixes #1401 ","comments":2,"createdAt":1418413828000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1466,"state":"closed","title":"defer decision whether import used on the right side of import declarati...","updatedAt":1418719586000},{"assignedTo":"","body":"Fixes #1472.","comments":1,"createdAt":1418681660000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1492,"state":"closed","title":"Fixed contextual type resolution and type checking for tagged template expressions.","updatedAt":1418717085000},{"assignedTo":"mhegazy","body":"Hi,\r\n\r\n**VS**: 2013 Update 4 RC\r\n**TS**: typeScriptServices.js from LKG as of 12-Dec\r\n\r\nSetting the combined output file to `foo.js` and the output directory to `bin` results in `foo.js` being generated in the root project directory and not in `bin` ","comments":2,"createdAt":1418660135000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.4","number":1490,"state":"closed","title":"VS: Redirect-JavaScript-Output-to-directory does not work when Combine-JavaScript-output option is set","updatedAt":1418710707000},{"assignedTo":"","body":"This prevents an unnecessary allocation, simplifies parsing code, and prevents\r\nan issue where parsing depends on context flags not stored in the final tree.\r\nThis is an issue for incremental parsing that can lead to nodes being reused\r\ninappropriate","comments":1,"createdAt":1418708721000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1498,"state":"closed","title":"Do not pass context flags downward while parsing binding elements.","updatedAt":1418709626000},{"assignedTo":"","body":"Given the following code:\r\n```\r\nvar nums: number[] = [];\r\n\r\nclass Class\r\n{\r\n\tinvoke(s: string)\r\n\t{\r\n\t\t\r\n\t}\r\n}\r\n\r\ninterface Invokable<T>\r\n{\r\n\tinvoke(arg: T): void;\r\n}\r\n\r\nfunction fn<T>(arrayFn: () => T[], inv: Invokable<T>)\r\n{\r\n\t\r\n}\r\n\r\nfn(() => nums, ","comments":3,"createdAt":1418686363000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2212259?v=3","loggedByName":"Back-io","milestone":"TypeScript 1.4","number":1494,"state":"closed","title":"Generic function signatures not correctly flowing through","updatedAt":1418705438000},{"assignedTo":"","body":"","comments":1,"createdAt":1418696004000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1496,"state":"closed","title":"Simplify how we set container.nextContainer now that we don't double recurse during binding.","updatedAt":1418696779000},{"assignedTo":"","body":"","comments":1,"createdAt":1418678755000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1491,"state":"closed","title":"Simplify the binder so it does not need to double recurse down constructor parameter nodes.","updatedAt":1418680758000},{"assignedTo":"","body":"","comments":0,"createdAt":1418584376000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1482,"state":"closed","title":"Move test helpers into the harness Utils module.","updatedAt":1418632405000},{"assignedTo":"","body":"","comments":1,"createdAt":1418625851000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1485,"state":"closed","title":"Remove calls to \"debugger;\" in our fourslash tests.","updatedAt":1418627125000},{"assignedTo":"","body":"An alternative (and cheaper) solution to the problem in #1474. With this solution we don't rely on `nextContainer` having an initial value of undefined, so it is safe to reuse old nodes.","comments":2,"createdAt":1418499564000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1476,"state":"open","title":"Improved logic for keeping duplicates off container list","updatedAt":1418581943000},{"assignedTo":"","body":"A common error in TypeScript is to lose the `this` context, especially in class situations:\r\n\r\n```TypeScript\r\nclass MyClass {\r\n    x = 4;\r\n    printX() { console.log(this.x); }\r\n}\r\nvar m = new MyClass();\r\nwindow.setInterval(m.printX, 1000); // Prints","comments":1,"createdAt":1405444962000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":15,"state":"open","title":"Suggestion: typechecking of 'this' context","updatedAt":1418497769000},{"assignedTo":"","body":"Fixes #1104.","comments":0,"createdAt":1418431167000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1471,"state":"closed","title":"Preserve const enums in typescriptServices.js","updatedAt":1418435501000},{"assignedTo":"","body":"","comments":0,"createdAt":1418427040000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1470,"state":"closed","title":"Make utility method names clearer.","updatedAt":1418428203000},{"assignedTo":"","body":"","comments":0,"createdAt":1418423220000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1469,"state":"closed","title":"Simplify 262 baselines.","updatedAt":1418424388000},{"assignedTo":"","body":"In the example below, the predicate for a boolean return is separated onto a new line. However, the generated javascript considers the return statement and predicate to be separate lines. Note the semicolon after the return in the generated code.\r\n``","comments":1,"createdAt":1412955699000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Blog","name":"Blog","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/220974?v=3","loggedByName":"stuartthompson","milestone":"","number":870,"state":"closed","title":"Newline after return statement generates incorrect code","updatedAt":1418424043000},{"assignedTo":"","body":"","comments":0,"createdAt":1418422633000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1468,"state":"closed","title":"Update LKG.","updatedAt":1418423664000},{"assignedTo":"","body":"","comments":0,"createdAt":1418414647000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1467,"state":"closed","title":"Resurrect the post edit invariants checking for fourslash.","updatedAt":1418421139000},{"assignedTo":"","body":"If a statement started with an identifier, then we'd normally lookahead to see if the next token\r\nwas a colon.  Lookahead is expensive (as it has to rescan tokens).  Instead, we do the same thing\r\nwe do for arrow-functions.  We just parse out the ide","comments":2,"createdAt":1418413176000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1465,"state":"closed","title":"Avoid lookahead when parsing a statement.","updatedAt":1418420706000},{"assignedTo":"","body":"Often a method will take as a string the name of a property of some object that it's working on. A common example would be http://backbonejs.org/#Model-get\r\n\r\nIt would be ideal if TypeScript could provide compile-time checking on these calls to make ","comments":11,"createdAt":1407437255000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/196944?v=3","loggedByName":"jbrantly","milestone":"","number":394,"state":"open","title":"Compile-time checking of string literal arguments based on type","updatedAt":1418417925000},{"assignedTo":"","body":"","comments":0,"createdAt":1418412519000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1464,"state":"closed","title":"Properly emit 'void 0' when emitting destructuring assignments.","updatedAt":1418413007000},{"assignedTo":"","body":"**Suggestion: Allow typedefs for aliasing types, class names and interface names**\r\n\r\nUse case:\r\n```javascript\r\n// 1. Use case overlaps with interface functions types and is even uglier\r\ntypedef (number) => number MyCallback;\r\n\r\n// 2. With generics\r\n","comments":7,"createdAt":1406717775000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Blog","name":"Blog","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1827709?v=3","loggedByName":"ComFreek","milestone":"","number":308,"state":"closed","title":"Suggestion: typedefs","updatedAt":1418411899000},{"assignedTo":"","body":"Many values or parameters in JavaScript can be of more than one type. For example, a function might take an object where one of the properties can be either a string or a number, but not a function.\r\n\r\nComments from Ron Buckton in https://typescript.","comments":23,"createdAt":1405444276000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Blog","name":"Blog","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":14,"state":"closed","title":"Suggestion: union types","updatedAt":1418411332000},{"assignedTo":"vladima","body":"![typealiases](https://cloud.githubusercontent.com/assets/8052307/5324324/2a65e97c-7c8e-11e4-8777-3c7a611a0f3a.png)\r\n","comments":0,"createdAt":1417819886000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.4","number":1386,"state":"closed","title":"Type aliases are not highlighted as types","updatedAt":1418408930000},{"assignedTo":"","body":"I think we need something like \r\n```\r\nglobal::\r\n```\r\nthat C# has to access the root namespace.\r\n\r\nI am currently having difficulty with a class named View within the global namespace and another class named View in a particular namespace.  Unfortunat","comments":1,"createdAt":1417776593000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2872785?v=3","loggedByName":"Anupheaus","milestone":"","number":1380,"state":"closed","title":"Global namespace reference","updatedAt":1418408902000},{"assignedTo":"","body":"","comments":6,"createdAt":1418338120000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1453,"state":"closed","title":"Fix sys dependency for processDiagnosticMessages.ts","updatedAt":1418408680000},{"assignedTo":"","body":"I have a few questions regarding the return type and validity of the conditional operator.\r\nConsider the following:\r\n\r\n> var aye = () => 0;\r\n> var bee = () => console.log(\"hive\");\r\n> true ? aye() : bee(); // error\r\n\r\nThis will throw an error stating ","comments":4,"createdAt":1418378804000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6986076?v=3","loggedByName":"AbubakerB","milestone":"","number":1462,"state":"closed","title":"Different return types for Ternary/Conditional Operator ","updatedAt":1418406987000},{"assignedTo":"","body":"Will cause builds to actually fail now. See #1459\r\n\r\nfail() already prints to console so a separate print isn't needed.\r\n\r\n```\r\n> jake generate-code-coverage\r\nnode bin/tsc.js --module commonjs -noImplicitAny -removeComments --preserveConstEnums --out","comments":3,"createdAt":1418365478000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1460,"state":"closed","title":"Actually fail the surrounding jake task on errors in compileFile()","updatedAt":1418403729000},{"assignedTo":"mhegazy","body":"The Palantir eclipse-typescript Eclipse plugin fails consistently on a fresh Eclipse/plugin installation with an exception in getTokenPosOfNode(). The Palantir developers believes that this is your table. \r\n\r\nSteps to reproduce: Hit ctrl-space in any","comments":13,"createdAt":1417290959000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1195943?v=3","loggedByName":"jsotrifork","milestone":"TypeScript 1.4","number":1306,"state":"closed","title":"Auto complete fails with an exception in getTokenPosOfNode","updatedAt":1418403651000},{"assignedTo":"","body":"","comments":2,"createdAt":1418345943000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1456,"state":"closed","title":"Make the compiler resilient to encountering merge conflict markers in a source code file.","updatedAt":1418374511000},{"assignedTo":"DanielRosenwasser","body":"https://travis-ci.org/Microsoft/TypeScript/builds/43790075#L130\r\n\r\nProbably because of be1eb34\r\n\r\nThe reason Travis passes is that compileFile doesn't fail the task in the exec'd process's error event handler.\r\n\r\nEdit: I see @DanielRosenwasser has a ","comments":1,"createdAt":1418365299000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1459,"state":"closed","title":"Build is broken!","updatedAt":1418374083000},{"assignedTo":"","body":"","comments":0,"createdAt":1418371884000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1461,"state":"closed","title":"Fix processDiagnosticMessages script issue in master with a 1.4 merge","updatedAt":1418373076000},{"assignedTo":"","body":"This pull request is meant to add support for [ECMAScript 6 templates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings) and address suggestion #13.\r\n\r\n**Right now this branch supports:**\r\n* Both simple and substitut","comments":9,"createdAt":1414197412000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":960,"state":"closed","title":"Support for ES6 Templates","updatedAt":1418370749000},{"assignedTo":"DanielRosenwasser","body":"I'm attempting to update the TypeScript language services from master but I'm hitting errors that look like this:\r\n```\r\nCannot find name 'ts'.\r\n```\r\n\r\nIt looks like this is being caused by this new line in typescriptServices.d.ts:\r\n```\r\nexport = ts;\r","comments":8,"createdAt":1417890076000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1081904?v=3","loggedByName":"derekcicerone","milestone":"TypeScript 1.4","number":1392,"state":"closed","title":"typescriptServices.d.ts no longer works without CommonJS","updatedAt":1418351575000},{"assignedTo":"","body":"Also, fixed inconsistent line endings in parser.ts","comments":0,"createdAt":1418349275000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1458,"state":"closed","title":"For 262 tests, emit a bit in the baseline stating if the node had an error or not.","updatedAt":1418349811000},{"assignedTo":"","body":"","comments":1,"createdAt":1418348962000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1457,"state":"closed","title":"remove trailing comma at the end of optionDeclarations array","updatedAt":1418349293000},{"assignedTo":"","body":"Since the type checking is not complete for computed property names, I will add this support after 1.4. For now, I just give an error that the construct is not supported.","comments":2,"createdAt":1418345527000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1455,"state":"closed","title":"Disable computed properties in TypeScript 1.4","updatedAt":1418347627000},{"assignedTo":"","body":"","comments":3,"createdAt":1418232192000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1431,"state":"closed","title":"Remove compiletionSettings handeling from shims","updatedAt":1418346321000},{"assignedTo":"","body":"I'm using tsc.exe version 1.3. \r\n\r\nGiven the following code:\r\n\r\n```ts\r\n    interface Observable<T> { \r\n    }\r\n    \r\n    interface StaticFuncs {\r\n        unwrap<TValue>(value: Observable<TValue>): TValue;\r\n        unwrap<TValue>(value: TValue): TValue","comments":3,"createdAt":1418313312000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1058997?v=3","loggedByName":"ComradeCow","milestone":"","number":1452,"state":"closed","title":"Cannot implicitly resolve function overload with generic values?","updatedAt":1418344188000},{"assignedTo":"","body":"","comments":0,"createdAt":1418338389000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1454,"state":"closed","title":"Merge for release-1.4 to master","updatedAt":1418343404000},{"assignedTo":"","body":"","comments":5,"createdAt":1418249062000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1437,"state":"closed","title":"conditionals are now introduce indentation scope","updatedAt":1418282934000},{"assignedTo":"","body":"","comments":2,"createdAt":1418253779000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1441,"state":"closed","title":"do not indent leading comments that attached to tokens with errors","updatedAt":1418277735000},{"assignedTo":"vladima","body":"I just installed 1.3 and now relative paths are broken in referenced files that are in directories that are not at the same level as referenced files.  For example:\r\n\r\n```\r\n/// <reference path=\"..\\..\\dir4\\dir5\\dir6\\file.d.ts\" />\r\n```\r\nsays\r\nC:/dir1/d","comments":9,"createdAt":1415916670000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5232017?v=3","loggedByName":"jchapman1","milestone":"TypeScript 1.5","number":1159,"state":"closed","title":"Relative Path broken in 1.3","updatedAt":1418277086000},{"assignedTo":"","body":"- Introduce a new `--suppress` switch\r\n- Enable suppressing index checks with noImplictAny using `--suppress implictAnyIndex` (#1232, and #835)","comments":5,"createdAt":1418164545000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1418,"state":"closed","title":"Suppress no implicit any errors","updatedAt":1418265999000},{"assignedTo":"","body":"","comments":0,"createdAt":1418154823000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1417,"state":"closed","title":"Expose services as a consumable external module","updatedAt":1418264501000},{"assignedTo":"mhegazy","body":"Extending the Function interface should not cause \"instanceof\" to fail.  Adding new items shouldn't change the fact that it's still a Function instance type. (see http://goo.gl/mCb93P)\r\n````\r\ninterface Function {\r\n    [index: string]: any;\r\n}\r\n\r\nclas","comments":3,"createdAt":1416522479000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2531435?v=3","loggedByName":"rjamesnw","milestone":"TypeScript 1.4","number":1228,"state":"closed","title":"instanceof doesn't work if Function interface changes","updatedAt":1418261231000},{"assignedTo":"DanielRosenwasser","body":"One of our devs is working on some TypeScript code changes which have resulted in the following error with the current develop branch code:\r\n```\r\nTypeError: Cannot read property 'declarations' of undefined\r\n\tat hasVisibleDeclarations (/Users/dciceron","comments":6,"createdAt":1417585283000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1081904?v=3","loggedByName":"derekcicerone","milestone":"TypeScript 1.4","number":1348,"state":"closed","title":"TypeError when attempting to call getEmitOutput (develop branch)","updatedAt":1418258316000},{"assignedTo":"","body":"Take the following typescript code:\r\n\r\n```\r\nimport Things = require('Things');\r\nclass Zebra extends Things.Animal {}\r\n```\r\n\r\nThis produces the javascript according to http://www.typescriptlang.org/Playground:\r\n\r\n```\r\ndefine([\"require\", \"exports\"], fu","comments":5,"createdAt":1418250839000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8368448?v=3","loggedByName":"jt000","milestone":"TypeScript 1.4","number":1438,"state":"closed","title":"Cannot inherit from imported module","updatedAt":1418258282000},{"assignedTo":"DanielRosenwasser","body":"Example:\r\n```TypeScript\r\n`\\\\\"`\r\n```\r\n\r\nExpected:\r\n```JavaScript\r\n\"\\\\\\\"\"\r\n```\r\n\r\nActual:\r\n```JavaScript\r\n\"\\\\\"\"\r\n```","comments":2,"createdAt":1416389269000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.4","number":1209,"state":"closed","title":"Template emit for pre-ES6 targets is broken for sequences like `\\\\\"`","updatedAt":1418258176000},{"assignedTo":"","body":"Fixes #1209.","comments":0,"createdAt":1417557739000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1341,"state":"closed","title":"Template string escaping fixes","updatedAt":1418257740000},{"assignedTo":"","body":"","comments":0,"createdAt":1418252066000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1440,"state":"closed","title":"add missing property to harness language service","updatedAt":1418252246000},{"assignedTo":"","body":"This PR adds a a few points that can be consumed by consumes of language service. These points are not hooked up to the VS part yet, current assumption about their behavior is following:\r\n- trace - writes a string to debug output\r\n- error - brings a ","comments":1,"createdAt":1417946321000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1395,"state":"closed","title":"Add 'dev mode' to the language service","updatedAt":1418250863000},{"assignedTo":"","body":"we don't need this for the semantic trees because the compiler will set them all during\r\nthe binding.","comments":5,"createdAt":1418235174000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1432,"state":"closed","title":"Only set parents for parse trees in the LS for the syntactic trees.","updatedAt":1418245367000},{"assignedTo":"","body":"Admittedly I haven't given this as much thought as it may need, but I thought it worth suggesting. \r\n\r\nIn JavaScript, it's common to return 'this' so the function can be chained. In most cases this can be easily defined:\r\n\r\n    class Obj\r\n    {\r\n    ","comments":1,"createdAt":1418242883000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4442179?v=3","loggedByName":"jamiewinder","milestone":"","number":1435,"state":"closed","title":"'this' return type","updatedAt":1418243181000},{"assignedTo":"","body":"... same block.","comments":0,"createdAt":1418216079000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1100608?v=3","loggedByName":"dekajp","milestone":"","number":1430,"state":"closed","title":"Fixes #802 , Show error Message for all duplicate method overload within...","updatedAt":1418223002000},{"assignedTo":"","body":"","comments":0,"createdAt":1418172034000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1422,"state":"closed","title":"Initial test harness for incremental parser tests.","updatedAt":1418195254000},{"assignedTo":"","body":"Also, provide a way for creators of a source file to specify if they\r\nwant parent nodes hooked up.","comments":2,"createdAt":1418170141000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1420,"state":"closed","title":"Remove 'isOpen' and 'version' from teh compiler's SourceFile type.","updatedAt":1418184240000},{"assignedTo":"paulvanbrenk","body":"Per https://visualstudiogallery.msdn.microsoft.com/955e0262-0858-40c9-ab5a-1acc680e9bfd?SRC=Home\r\n\r\nJoel Mueller (SNL)\r\nAs soon as I install this package, VS 2013 Premium will not launch, giving me the message...\r\n\r\n\"A problem occurred when loading t","comments":19,"createdAt":1415839043000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.4","number":1138,"state":"closed","title":"Install issue with TypeScript 1.3 on VS 2013 Premium","updatedAt":1418162295000},{"assignedTo":"paulvanbrenk","body":"Hi,\r\n\r\nSystem: Windows 8.1\r\n\r\nI had the same problem as that outlined in the StackOverflow question [VS2015 preview + TypeScript 1.3 = error](http://stackoverflow.com/questions/26903351).\r\n\r\nUnlike the OP in that question, I already had the `TypeScri","comments":1,"createdAt":1416226010000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.4","number":1177,"state":"closed","title":"The \"TypeScript.Tasks.VsTsc\" task could not be loaded from the assembly \"xxx\"","updatedAt":1418155737000},{"assignedTo":"","body":"This pull request adds support for ECMAScript 6 destructuring declarations and assignments with down-level ES3 and ES5 code generation. For example:\r\n```typescript\r\nvar [x, y] = [10, 20];\r\n[x, y] = [y, x];\r\n```\r\nThe above example generates:\r\n```javas","comments":10,"createdAt":1417569097000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1346,"state":"closed","title":"Destructuring","updatedAt":1418153963000},{"assignedTo":"","body":"","comments":2,"createdAt":1418129831000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1416,"state":"closed","title":"inherit delta from nodes on the same line","updatedAt":1418150801000},{"assignedTo":"","body":"Could you please provide a unit test platform integrated within Visual Studio Test Explorer and of course TFS builds.\r\n\r\nI know about Chutzpah extension, but : \r\n- it doesn't integrate well with VS\r\n- it's very slow (iterating over the entire solutio","comments":11,"createdAt":1418058187000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7702519?v=3","loggedByName":"chriscamicas","milestone":"","number":1398,"state":"open","title":"Visual Studio Unit Test Integration","updatedAt":1418141278000},{"assignedTo":"","body":"as mentioned in #1066, users who want to opt out of VS project systems, need a way to specify some additional configuration options. currently you can control compile on save, module, but not target or --noImplicitAny, --declaration, --sourceMap.","comments":1,"createdAt":1416506072000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1223,"state":"open","title":"Add Tools\\option setting for --target and --noImplicitAny for loose files","updatedAt":1418129233000},{"assignedTo":"paulvanbrenk","body":"VS 2013 update 3 adds a TypeScript Build page to the project properties.  yay!\r\n\r\nHowever, none of the output options on that TypeScript Build page has any effect on the tsc command line shown in the VS Build Output window.  Combining JavaScript outp","comments":5,"createdAt":1408046944000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2288043?v=3","loggedByName":"dthorpe","milestone":"TypeScript 1.5","number":454,"state":"closed","title":"Typescript project build options not emitted to tsc command line in VS 2013 update 3","updatedAt":1418117098000},{"assignedTo":"","body":"","comments":0,"createdAt":1418114421000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1413,"state":"closed","title":"Fix invariant issues.","updatedAt":1418115820000},{"assignedTo":"","body":"d.ts files on DefinitelyTyped frequently depend on other declaration files.\r\n\r\n```typescript\r\ninterface JSZipObject {\r\n  name: string;\r\n  dir: boolean;\r\n  date: Date;\r\n  comment: string;\r\n  options: JSZipObjectOptions;\r\n  \r\n  asText(): string;\r\n  asB","comments":2,"createdAt":1418073920000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":1402,"state":"closed","title":"\"external types\" for d.ts files dependent on others","updatedAt":1418105679000},{"assignedTo":"","body":"This makes it vastly simpler to fix up that logic since you no longer have to go find\r\nthe end of the function first.","comments":1,"createdAt":1418092646000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1412,"state":"closed","title":"Put the actual parsing logic at the top of createSourceFile instead of the bottom.","updatedAt":1418094344000},{"assignedTo":"","body":"Sharing a single kind here would be bad for incremental scenarios as these two node types\r\nare not interchangeable.\r\n\r\nFor now, i have updated nearly all code to look for both kinds.  However, it may not make sense\r\nin all locations, and we could lik","comments":1,"createdAt":1418084364000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1408,"state":"closed","title":"Remove the 'Method' syntaxkind and introduce MethodSignature and MethodDeclaration instead.","updatedAt":1418091222000},{"assignedTo":"","body":"","comments":1,"createdAt":1418087065000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1409,"state":"closed","title":"Fix some parts of for-each invariant checking.","updatedAt":1418089958000},{"assignedTo":"","body":"... starts with open paren","comments":1,"createdAt":1418077801000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1405,"state":"closed","title":"fix formatting to add space after comma between arguments when arguments...","updatedAt":1418089612000},{"assignedTo":"mhegazy","body":"We define Boolean like this:\r\n\r\n```ts\r\ninterface Boolean {\r\n}\r\ndeclare var Boolean: {\r\n    new (value?: any): Boolean;\r\n    (value?: any): boolean;\r\n    prototype: Boolean;\r\n}\r\n```\r\n\r\nWhich as you might expect means we allow you to assign anything to","comments":3,"createdAt":1417825706000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.5","number":1387,"state":"closed","title":"Boolean interface in lib.d.ts has no members","updatedAt":1418087394000},{"assignedTo":"","body":"Fix for #1387","comments":2,"createdAt":1418066658000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1400,"state":"closed","title":"Add new method on interface Boolean to ensure it is not assignable from other types","updatedAt":1418087367000},{"assignedTo":"","body":"@CyrusNajmabadi fixes the speculative parsing when we are in the ambiguous context. \r\n```\r\nif (foo < a || b > ( c+1)) ....\r\n```\r\n\r\nInstead of reporting \",\" expected error from trying to parse the statement as generic call. We want to break from tryin","comments":2,"createdAt":1418079975000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1406,"state":"closed","title":"Fix speculative parsing when trying to parse type argument list","updatedAt":1418085881000},{"assignedTo":"","body":"","comments":2,"createdAt":1418081751000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1407,"state":"closed","title":"Better error recovery when encountering an errant comma in a semicolon delimited list.","updatedAt":1418084308000},{"assignedTo":"","body":"","comments":1,"createdAt":1418076360000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1404,"state":"closed","title":"Add tree invariant checking to the test262 runner.","updatedAt":1418080480000},{"assignedTo":"","body":"","comments":1,"createdAt":1418074559000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1403,"state":"closed","title":"Improve test 262 baselines.","updatedAt":1418074764000},{"assignedTo":"","body":"TypeScript should be able to infer type information using the generic type parameters of an extended/implemented generic class or interface.\r\n\r\nExample:\r\n\r\n```typescript\r\ninterface Apple { }\r\ninterface Banana { }\r\ninterface Orange { }\r\n\r\ninterface Tr","comments":3,"createdAt":1418021885000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/844705?v=3","loggedByName":"jdaley","milestone":"","number":1396,"state":"closed","title":"Infer types from generic type parameters of base types","updatedAt":1418070673000},{"assignedTo":"","body":"Should fix #1348.","comments":1,"createdAt":1418066283000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1399,"state":"closed","title":"Check if the symbol exists before checking its visibility in isEntityNameVisible.","updatedAt":1418066554000},{"assignedTo":"","body":"One of the new features in C# 6 is the new ?. operator which lets you avoid writing lots of boilerplate code when accessing nested properties.  It would be nice if there was something similar in TypeScript.  http://blogs.msdn.com/b/jerrynixon/archive","comments":2,"createdAt":1417232759000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1044413?v=3","loggedByName":"kevinb7","milestone":"","number":1303,"state":"closed","title":"?. operator for safe member access","updatedAt":1418031522000},{"assignedTo":"","body":"```typescript\r\n// equivalent to\r\nobject && object.property\r\n```\r\n\r\nJust saw this new feature in C# 6.0, what about bring it to typescript?","comments":2,"createdAt":1418028570000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":1397,"state":"closed","title":"object?.property support for typescript?","updatedAt":1418030597000},{"assignedTo":"sheetalkamat","body":"```\r\n// This should not parse as a declaration.  It is a legal javascript identifier.\r\nlet\r\n```\r\n\r\n```\r\n// This is two expression statements, not a 'let' declaration.\r\nlet\r\na\r\n```\r\n\r\n'let' is a FutureReservedStrictKeyword.  As such, it is treated as ","comments":0,"createdAt":1417215495000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"TypeScript 1.4","number":1301,"state":"closed","title":"\"let\" should only be considered a keyword in strict mode, or when it starts an actual construct.","updatedAt":1418016783000},{"assignedTo":"","body":"I think this code was added accidentally.","comments":1,"createdAt":1417881533000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":1391,"state":"closed","title":"Removed property access","updatedAt":1417990394000},{"assignedTo":"vladima","body":"See here:\r\nhttps://onedrive.live.com/?cid=295047487FC4F731&id=295047487FC4F731!60316&v=3\r\n\r\nOn a side note, would seem convenient if a was supported as shorthand for b:\r\n```javascript\r\nvar a: { [number]: string }\r\nvar b: { [x:number]: string }\r\n```\r\n","comments":2,"createdAt":1417788856000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"TypeScript 1.4","number":1382,"state":"closed","title":"Array index type - TS Service not reporting index name","updatedAt":1417918843000},{"assignedTo":"","body":"This is more of a suggestion (and please forgive me if this is not where they are supposed to be submitted), which may or may not even be feasible.\r\n\r\nI'd like it to be possible for generic types to be used with the typeof keyword, so you could do th","comments":3,"createdAt":1417775597000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2872785?v=3","loggedByName":"Anupheaus","milestone":"","number":1379,"state":"closed","title":"Use of generics with typeof keyword","updatedAt":1417891741000},{"assignedTo":"","body":"A separate change in the VS side is required so handle this new classification type. This will fix #1386","comments":2,"createdAt":1417829669000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1389,"state":"closed","title":"add classification for type aliases","updatedAt":1417879499000},{"assignedTo":"","body":"","comments":2,"createdAt":1417828366000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1388,"state":"closed","title":"fetch actual parameter name of indexer when printing literal type","updatedAt":1417879474000},{"assignedTo":"","body":"","comments":3,"createdAt":1417781991000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":1381,"state":"closed","title":"Missing reference for getModuleInstanceState()","updatedAt":1417879062000},{"assignedTo":"","body":"","comments":1,"createdAt":1417830313000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1390,"state":"closed","title":"Move code responsible for determining node resuability (in incremental scenarios) to a single location.","updatedAt":1417858654000},{"assignedTo":"","body":"Great idea from @yuit\r\n\r\nThis restriction was in place because the old parser would mutate nodes as it created them. i.e. when\r\ncreating a node it would set the parent of its children right then.  During incremental parsing, this\r\ncouldl be bad becau","comments":1,"createdAt":1417813463000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1385,"state":"closed","title":"Remove restriction that you cannot reuse nodes/tokens during incremental parsing while doing speculatively operations.","updatedAt":1417830125000},{"assignedTo":"","body":"Given the following Typescript files, all in the same directory (though directory structure doesn't matter):\r\n\r\n```ts\r\n/* this is A.ts */\r\nclass A {\r\n    name: string;\r\n}\r\nexport = A;\r\n```\r\n\r\n```ts\r\n/* this is B.ts */\r\nimport A = require(\"./A\");\r\n\r\nc","comments":1,"createdAt":1417803569000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2829379?v=3","loggedByName":"spencerwi","milestone":"","number":1384,"state":"closed","title":"Single-file generation based on import","updatedAt":1417818457000},{"assignedTo":"","body":"Bits of Fidelity cleanup.","comments":0,"createdAt":1417799189000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1383,"state":"closed","title":"Bits of Fidelity cleanup.","updatedAt":1417799704000},{"assignedTo":"","body":"","comments":1,"createdAt":1417752766000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1378,"state":"closed","title":"Use callbacks for speculative parsing.","updatedAt":1417795814000},{"assignedTo":"","body":"forEach and forEachChild previously had the semantics:\r\n\r\nreturn arr.length === 0 ? undefined : firstValueThatsTruthy || lastValueThatsFalsy()\r\n\r\nThat's some pretty odd semantics for the functions to have, and doesn't seem to match any function from ","comments":4,"createdAt":1417727818000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1372,"state":"closed","title":"ForEach cleanup","updatedAt":1417748119000},{"assignedTo":"","body":"","comments":0,"createdAt":1417746861000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1376,"state":"closed","title":"Emit default parameter natively in ES6","updatedAt":1417747408000},{"assignedTo":"","body":"Handles #1301","comments":1,"createdAt":1417740455000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1374,"state":"closed","title":"\"let\" should only be considered a keyword in strict mode, or when it starts an actual construct","updatedAt":1417744475000},{"assignedTo":"DanielRosenwasser","body":"This is on the 1.3 compiler (similar to #975) where the compiler is not finding the reference for `addressInfo` below (the previous version did).\r\n\r\n```\r\nimport addressInfo = require(\"\");\r\nimport AddressInfo = addressInfo.AddressInfo;\r\n```","comments":5,"createdAt":1415898703000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/362990?v=3","loggedByName":"ashwinr","milestone":"TypeScript 1.4","number":1155,"state":"closed","title":"LanguageService.getReferencesAtPosition does not find all references","updatedAt":1417741031000},{"assignedTo":"","body":"(Member names in parens after each error line.)\r\n\r\n```\r\n.../lib.es6.d.ts(1378,5): 'parseFloat', which lacks return-type annotation, implicitly has an 'any' return type. (NumberConstructor.parseFloat)\r\n.../lib.es6.d.ts(1605,5): 'raw', which lacks retu","comments":0,"createdAt":1417632819000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"TypeScript 1.4","number":1352,"state":"closed","title":"--noImplicitAny errors in lib.es6.d.ts","updatedAt":1417733725000},{"assignedTo":"","body":"","comments":0,"createdAt":1417717467000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1369,"state":"closed","title":"Track if the parser encountered any errors as a bit in the next node that is produced.","updatedAt":1417729070000},{"assignedTo":"sheetalkamat","body":"![debugginginf12](https://cloud.githubusercontent.com/assets/972891/5080508/00f6c5be-6e76-11e4-8560-ccb6c76aca10.gif)\r\n","comments":2,"createdAt":1416270218000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.4","number":1187,"state":"closed","title":"Sourcemap mismatch for fourslash.ts","updatedAt":1417728480000},{"assignedTo":"vladima","body":"```\r\nError: Object reference not set to an instance of an object.\r\n   at getScriptFileNames (:25425:13)\r\n   at HostCache (:21810:13)\r\n   at SyntaxTreeCache (:21876:13)\r\n   at createLanguageService (:22202:9)\r\n   at createLanguageServiceShim (:25795:1","comments":3,"createdAt":1417556004000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.4","number":1338,"state":"closed","title":"Error on loading certain files in VS","updatedAt":1417727626000},{"assignedTo":"","body":"All calls to SyntaxTreeCache begin with `initialize` method that re-creates `SyntaxTreeCache` so this initial creation will be dropped on the floor. Also this fixes #1338. If so happens that code will be replaced right before calling `dispose` - then","comments":2,"createdAt":1417723707000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1371,"state":"closed","title":"Remove redundant initialization code from the constructor of SyntaxTreeCache","updatedAt":1417727589000},{"assignedTo":"","body":"","comments":1,"createdAt":1417571992000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1347,"state":"closed","title":"Update test262 runner to serialize flags","updatedAt":1417727253000},{"assignedTo":"sheetalkamat","body":"TypeScript 1.3 running on Visual Studio 2013 Update 3\r\n\r\nHere's a minimum example that might trigger this bug. But it's really weird because sometimes it would work normally.\r\n\r\n```typescript\r\ninterface IMap<T> {\r\n    [key: string]: T;\r\n}\r\n\r\nvar map:","comments":5,"createdAt":1415986811000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"TypeScript 1.4","number":1165,"state":"closed","title":"Type detection fails in this circumstance","updatedAt":1417726984000},{"assignedTo":"","body":"When trying to get type/symbol information of the location, make sure that its context sensitive expression containers are resolved in top down manner to avoid incorrectly making something any because of recursive recursion that can occur during reso","comments":1,"createdAt":1417646981000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1362,"state":"closed","title":"Resolve the context sensitive expression containers before resolving node","updatedAt":1417726976000},{"assignedTo":"","body":"","comments":0,"createdAt":1417668165000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1364,"state":"closed","title":"Add grammar walker test coverage cases.","updatedAt":1417726902000},{"assignedTo":"","body":"> Suggestion moved over from [codeplex](https://typescript.codeplex.com/workitem/2438/).\r\n\r\nThe suggestion is to allow generic parameter overloads like the following:\r\n\r\n```typescript\r\ndeclare module Backbone {\r\n    class Model{}\r\n    class Events{}\r","comments":7,"createdAt":1406079952000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/767147?v=3","loggedByName":"omidkrad","milestone":"","number":209,"state":"open","title":"Suggestion: Generic Parameter Overloads","updatedAt":1417726160000},{"assignedTo":"DanielRosenwasser","body":"Hi,\r\n\r\n**VS**: 2013 & 2015\r\n**TS**: 1.3\r\n\r\n![commarepro2](https://cloud.githubusercontent.com/assets/1106823/5077168/e6369ab0-6e98-11e4-9e5b-b78df1dbca66.gif)\r\n\r\n\r\nThe comment on the class is required to reproduce the problem.\r\n\r\n","comments":0,"createdAt":1416256476000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.4","number":1183,"state":"closed","title":"Unexpected navigation bar expansion in Visual Studio","updatedAt":1417725994000},{"assignedTo":"","body":"Fixes #1183.","comments":1,"createdAt":1417649237000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1363,"state":"closed","title":"Fixed issue where missing identifiers pushed trivia into the navigation bar","updatedAt":1417725898000},{"assignedTo":"","body":"","comments":1,"createdAt":1417704085000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1367,"state":"closed","title":"Simplify scanner by removing need for a 'onComment' callback.","updatedAt":1417725777000},{"assignedTo":"","body":"Also, make speculative parsing much more flexible.  It now no longer always rewinds just because an error was encountered during parsing.  Instead, the speculative method has full control over deciding if rewinding is necessary or not.  (Note: this f","comments":1,"createdAt":1417713116000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1368,"state":"closed","title":"Remove all function expression allocations when speculatively parsing or looking ahead.","updatedAt":1417725340000},{"assignedTo":"","body":"Fixes #1352","comments":2,"createdAt":1417638374000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1358,"state":"closed","title":"Fix missing return types.","updatedAt":1417722417000},{"assignedTo":"","body":"","comments":1,"createdAt":1417703446000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":1366,"state":"closed","title":"Fix so 'jake diff' works with PowerShell.","updatedAt":1417722319000},{"assignedTo":"","body":"... output.\r\n\r\nThis is useful for some of our scenarios where we're consuming the same const enum in two different ways.  One way being the normal const-enum case where we just use the constant values from it.  And, the other, being when we use it mo","comments":6,"createdAt":1415655925000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1113,"state":"closed","title":"Allow references to const enums if they are being preserved in the final...","updatedAt":1417718622000},{"assignedTo":"","body":"**Motivation:**\r\nI'm working on a small event simulation library.  I'd like to overload the ```simulate``` function so I'm doing the following:\r\n```\r\n    function simulate(element: HTMLElement, name: \"mousedown\", options: MouseOptions);\r\n    function","comments":5,"createdAt":1417498348000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1044413?v=3","loggedByName":"kevinb7","milestone":"","number":1328,"state":"closed","title":"allow regex literals and const regexes/strings to be used when overloading string constants","updatedAt":1417717904000},{"assignedTo":"","body":"I recommend going through this review one commit at a time.","comments":1,"createdAt":1417599986000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1349,"state":"closed","title":"Property assignments","updatedAt":1417665428000},{"assignedTo":"","body":"- Using an elevated command prompt or PS, allows to symlink current build of compiler & services used by Visual Studio. for #1110 \r\n\r\n> Create symlinks\r\n jake link-vs\r\n\r\n> Remove symlinks & restore original Visual Studio files \r\njake unlink-vs\r\n\r\n> A","comments":7,"createdAt":1417543669000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":1335,"state":"closed","title":"Add ability to \"jake link-vs\" & \"jake unlink-vs\" which adds/removes symlink","updatedAt":1417656978000},{"assignedTo":"","body":"Unable to get property 'length' of undefined or null reference \r\n\r\nI suddenly started getting this error (from the TS compiler?).  And nothing I do seems to remove it. Not very helpful, I know.  Is there any way I can get more info from these types o","comments":9,"createdAt":1417645441000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10067289?v=3","loggedByName":"ray440","milestone":"","number":1361,"state":"closed","title":"VSTSC error : Unable to get property 'length' of undefined or null reference ","updatedAt":1417656048000},{"assignedTo":"","body":"I am still adding more cases for other syntax","comments":2,"createdAt":1413246601000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":889,"state":"closed","title":"Symbol display part kind test cases","updatedAt":1417641713000},{"assignedTo":"","body":"Fixes #1354","comments":2,"createdAt":1417637405000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1357,"state":"closed","title":"Remove BOM from es6.d.ts","updatedAt":1417640649000},{"assignedTo":"","body":"This causes lib.es6.d.ts etc. to have a BOM in the middle of the file (at the part where es6.d.ts is concatenated using concatenateFiles):\r\n\r\n```\r\ndeclare var Array: ArrayConstructor;\r\nï»¿declare type PropertyKey = string | number | Symbol;\r\n```\r\n\r\nThe","comments":0,"createdAt":1417633238000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1354,"state":"closed","title":"es6.d.ts has a BOM unlike the other .d.ts files","updatedAt":1417640645000},{"assignedTo":"","body":"Are there plans to enable typed `for in` statements?\r\n\r\n```\r\nvar map: { [key: string]: number }\r\n\r\nfor (var key in map) {\r\n  // here \"key\" should be \"string\", but is \"any\"\r\n}\r\n```","comments":1,"createdAt":1417633024000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2752700?v=3","loggedByName":"mihhail-lapushkin","milestone":"","number":1353,"state":"closed","title":"Types in \"for in\" statement","updatedAt":1417635025000},{"assignedTo":"","body":"Hi,\r\n\r\nI'm tryng rewrite method emitClassDeclaration in emitter.ts class/file:\r\n\r\n<code>\r\nfunction emitClassDeclaration(node: ClassDeclaration)\r\n</code>\r\n\r\nnode.baseType is a TypeReferenceNode. In some cases I cannot get full type name information wi","comments":10,"createdAt":1416829950000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1334003?v=3","loggedByName":"fabioparra","milestone":"","number":1255,"state":"closed","title":"emitter extension: how get class baseType full name","updatedAt":1417609663000},{"assignedTo":"mhegazy","body":"Action description:\r\ngetOccurrencesAtPosition('C:\\test\\t2.ts', 0)\r\n\r\nScript callstack:\r\n\r\nError: Debug Failure. False expression: \r\n   at assert (:1125:17)\r\n   at fail (:1130:13)\r\n   at getFlagFromModifier (:23623:29)\r\n   at getModifierOccurrences (:","comments":0,"createdAt":1417505326000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.4","number":1331,"state":"closed","title":"Exception in getOccurrencesAtPosition on const","updatedAt":1417583331000},{"assignedTo":"","body":"Fix for #1331. Const is not handled as a modifier, so add the handling for it.","comments":2,"createdAt":1417506431000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1333,"state":"closed","title":"Handle const modifier in getOccurrences","updatedAt":1417583315000},{"assignedTo":"vladima","body":"Hi,\r\n\r\n**VS**: 2015 Preview\r\n**TS**: 1.3\r\n\r\nVisual studio has crashed twice in the space of an hour, while editing a TypeScript file. In both cases there were no changes to the actual code, but some new comments were added and then edited.\r\n\r\nThe ent","comments":11,"createdAt":1416241646000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 1.4","number":1179,"state":"closed","title":"Crash when editing a TypeScript file in VS 2015","updatedAt":1417580910000},{"assignedTo":"","body":"> more file.ts\r\n```javascript\r\n// test\r\nvar f = ''\r\n// test #2\r\nmodule foo {\r\n        function bar() { }\r\n}\r\n// test #3\r\nmodule empty {\r\n}\r\n// test #4\r\n```\r\n> more file.js\r\n```javascript\r\n// test\r\nvar f = '';\r\n// test #2\r\nvar foo;\r\n(function (foo) {\r","comments":7,"createdAt":1417361451000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"Community","number":1311,"state":"open","title":"Some comments not emitted - upgrade 1.0.1 to  1.3.0","updatedAt":1417567859000},{"assignedTo":"","body":"This is important for incremental parsing, as it is where we can attach parse errors at the end of\r\nthe file to.  Also, it helps with things like emitting comments at the end of the file.","comments":1,"createdAt":1417565447000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1345,"state":"closed","title":"Add a dedicated 'EndOfFile' token to a SourceFile.","updatedAt":1417567587000},{"assignedTo":"","body":"Only actual parse errors are stored in parseDiagnostics.  Reference errors are stored in a separate\r\narray now.","comments":1,"createdAt":1417560643000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1343,"state":"closed","title":"Extract reference comments out into their own diagnostics array.","updatedAt":1417565107000},{"assignedTo":"","body":"Since majority of ES6 feature will have to emit for ES5, ES3, this pull request is to re-factoring emitJavascript such that we will have separate functions for emit a node in native ES6 and down-level ES5/ES3 without having to check the compilerOptio","comments":1,"createdAt":1416947298000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1269,"state":"closed","title":"Re-factoring emitter for emitting ES6 feature natively and down-level","updatedAt":1417564971000},{"assignedTo":"vladima","body":"```TypeScript\r\neval(\r\n```\r\n\r\nRequest signature help after the open paren, then type `\\` or `@`.\r\n\r\n```\r\n---------------------------\r\nAssertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue\r\n---------------------------\r\nError processing work item: ","comments":0,"createdAt":1417556215000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.4","number":1339,"state":"closed","title":"Signature help crashes when encountering an unknown token","updatedAt":1417563458000},{"assignedTo":"","body":"","comments":1,"createdAt":1417477741000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1322,"state":"closed","title":"Emit services as an external module","updatedAt":1417563276000},{"assignedTo":"","body":"this fixes #1339","comments":1,"createdAt":1417561538000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1344,"state":"closed","title":"fix crash in signature help","updatedAt":1417563056000},{"assignedTo":"JsonFreeman","body":"Hi,\r\n\r\n**VS**: 2013 Update 4 RC\r\n**TS**: 1.3\r\n\r\nI believe we used to get help with the generic parameter at the point indicated below:\r\n\r\n```TypeScript\r\nclass Foo<TDescription>{ }\r\n\r\nvar foo = new Foo<\r\n```\r\n\r\nThe parameter info only appears after th","comments":1,"createdAt":1415879428000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"TypeScript 2.0","number":1148,"state":"open","title":"Parameter info missing for generics","updatedAt":1417559205000},{"assignedTo":"","body":"","comments":1,"createdAt":1417558653000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1342,"state":"closed","title":"External module fix","updatedAt":1417559068000},{"assignedTo":"mhegazy","body":"```\r\n$ node built/local/tsc.js --watch src/services/services.ts src/services/shims.ts --out built/local/tsc2.js\r\nmessage TS6042: Compilation complete. Watching for file changes.\r\nmessage TS6032: File change detected. Compiling...\r\nmessage TS6042: Com","comments":0,"createdAt":1411251300000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":717,"state":"open","title":"'--watch' output displays diagnostic category/code","updatedAt":1417556345000},{"assignedTo":"mhegazy","body":"I have noticed that bad things happen when the language service host provides a list of file names that don't end in ```*.ts``` nor ```*.d.ts```. I strongly opt for relaxing this because often buffers are not saved yet (no filename, just some tmp-pat","comments":2,"createdAt":1414773645000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"TypeScript 1.4","number":1015,"state":"closed","title":"Language service wants all files to end in *.ts or *.d.ts","updatedAt":1417555646000},{"assignedTo":"","body":"Fix for #1330:\r\n- Remove checkProgram as it is not needed and mostly subsumed in checker.getDiagnostics\r\n- Ensure that checkSourceFile is only called in checker.getDiagnostics\r\n- Add SourceFile as an argument to hasSemanticErrors to avoid a full type","comments":1,"createdAt":1417505508000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1332,"state":"closed","title":"Ensure getEmitOutput only check the file requested","updatedAt":1417555273000},{"assignedTo":"","body":"Currently if I define:\r\n```typescript\r\ninterface Func<TResult> {\r\n  ():TResult;\r\n}\r\n```\r\nI then cannot have any varying generic definitions.\r\ni.e.\r\n```typescript\r\ninterface Func<TParam,TResult> {\r\n  (value:TParam):TResult;\r\n}\r\n```\r\n***\r\nAnother impor","comments":4,"createdAt":1417211925000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5899455?v=3","loggedByName":"electricessence","milestone":"","number":1299,"state":"closed","title":"Generic Types: Allow for defining variant signatures.","updatedAt":1417544477000},{"assignedTo":"sheetalkamat","body":"Adding this issue to track the work required here. We'll need to add an appropriate set of new folders to the conformance suite based on the new spec sections.\r\n\r\nRelevant issues are #900, #868, #824","comments":0,"createdAt":1413487640000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.4","number":906,"state":"closed","title":"Union types conformance tests","updatedAt":1417536483000},{"assignedTo":"","body":"This has test cases for assignability etc of union type.\r\n\r\nI am filing few more pull requests separately for:\r\nContextualTyping, TypeGuards and TypeInference/overload resolution","comments":1,"createdAt":1415136228000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1056,"state":"closed","title":"Union type conformance","updatedAt":1417536154000},{"assignedTo":"","body":"","comments":0,"createdAt":1417510791000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1334,"state":"closed","title":"Tokens","updatedAt":1417516110000},{"assignedTo":"","body":"To repro on 1.3.0.0:\r\n\r\nMake a file called ```test.ts```:\r\n\r\n```\r\ninterface Foo {}\r\n\r\nexport class Blah {\r\n  public foo: Foo;\r\n}\r\n```\r\n\r\nNow run: ```tsc -m commonjs test.ts``` it will work and compile this file.\r\n\r\nNow try: ```tsc -m commonjs --decla","comments":1,"createdAt":1417502758000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/177816?v=3","loggedByName":"vogievetsky","milestone":"","number":1329,"state":"closed","title":"Adding --declaration command line option affects the error checking logic.","updatedAt":1417506397000},{"assignedTo":"","body":"```\r\n/Users/panferov/Workspace/out/TypeScript/bin/tsc.js:584\r\n                throw new Error(\"Debug Failure. False expression: \" + (message\r\n                      ^\r\nError: Debug Failure. False expression: isDeclarationVisible unknown: SyntaxKind: 1","comments":5,"createdAt":1417082320000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/198327?v=3","loggedByName":"s-panferov","milestone":"TypeScript 1.4","number":1288,"state":"closed","title":"Crash: isDeclarationVisible unknown: SyntaxKind: 134","updatedAt":1417501983000},{"assignedTo":"","body":"```\r\ninterface Options {\r\n   foo?: boolean;\r\n   bar?: boolean;\r\n}\r\n\r\nvar options: Options;\r\noptions = { foobar: true };  // should raise a compiler error but doesn't\r\n```\r\n\r\nAs soon as one of the options is not optional then we get the expected behav","comments":2,"createdAt":1417496478000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1044413?v=3","loggedByName":"kevinb7","milestone":"","number":1327,"state":"closed","title":"objects with all optional properties should not be able to contain other properties","updatedAt":1417501414000},{"assignedTo":"","body":"I'm building an application framework in javascript and just porting it over to typescript to use some of that sweet static typing. In my framework I happen to have a concept of a UI module. A UI module is a class and can be instantiated many times i","comments":6,"createdAt":1416898624000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9924724?v=3","loggedByName":"Elephant-Vessel","milestone":"","number":1263,"state":"closed","title":"Introduce a way to enforce a static contract","updatedAt":1417493664000},{"assignedTo":"","body":"","comments":0,"createdAt":1417488651000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1326,"state":"closed","title":"Provide greater type safety in the ast system.","updatedAt":1417489025000},{"assignedTo":"CyrusNajmabadi","body":"It appears that the overloaded string parameters ins the \"document.createElement\" function are not sorted by alphabet. Although they are in alphabetical order in the 'lib.d.ts' file where they are defined.\r\nMay be that's also a problem with other fun","comments":1,"createdAt":1416609787000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9468599?v=3","loggedByName":"lord-saumagen","milestone":"Community","number":1238,"state":"open","title":"Overloaded string parameters don't appear in alphabetical order.","updatedAt":1417488886000},{"assignedTo":"vladima","body":"```ts\r\ndeclare function f(_: number): void;\r\ndeclare function g(_: string): void;\r\n\r\nvar x: number | string;\r\nvar u = typeof x === \"string\" ? g(x) : f(x)\r\nvar v = typeof x === \"string\" && typeof x === \"string\" ? g(x) : f(x)\r\n\r\nfunction foo(y: string)","comments":1,"createdAt":1417041316000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.4","number":1286,"state":"closed","title":"Crash when triggering completion on narrowed symbol","updatedAt":1417488270000},{"assignedTo":"vladima","body":"Unsure how to repro.\r\n\r\n```\r\n---------------------------\r\nAssertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue\r\n---------------------------\r\nError processing work item: \r\n\r\nAction description:\r\n\r\ngetIndentationAtPosition('C:\\Users\\drosen\\TypeSc","comments":1,"createdAt":1417481437000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.4","number":1323,"state":"closed","title":"'getIndentationAtPosition' crash for undefined node","updatedAt":1417488197000},{"assignedTo":"","body":"`getNarrowedTypeOfSymbol` assumes that `node` should always have a parent. However often in semi-completed code `node` is SourceFile for which `parent` is `undefined`. This fixes #1286\r\nOriginal crash happens as a result of interaction between calls ","comments":0,"createdAt":1417485010000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1325,"state":"closed","title":"fix crash in getCompletionEntryDetails","updatedAt":1417486379000},{"assignedTo":"","body":"We want to get to the point where there are only three places where errors are reported in the parser:\r\n1) Errors caused by the scanner.\r\n2) Errors caused by not having an expected token.\r\n3) Errors caused by having a token we don't know what to do w","comments":1,"createdAt":1417431751000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1316,"state":"closed","title":"Less direct calls to 'error' and 'errorAtPos'.","updatedAt":1417485392000},{"assignedTo":"mhegazy","body":"To effectively test the parser, we should be serializing the entire tree for some subset of the tests. This serialized tree would then act as a baseline for the parser. This is needed because in some cases, we might be expecting no errors, and we pro","comments":2,"createdAt":1415848146000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.4","number":1141,"state":"closed","title":"Add a syntax serializer to the harness","updatedAt":1417483984000},{"assignedTo":"","body":"","comments":1,"createdAt":1417483175000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1324,"state":"closed","title":"handle cases when new expression is used with no arguments","updatedAt":1417483939000},{"assignedTo":"","body":"This is the first stab at ES6 typing's. i think i have all the main ones covered in this review. \r\n\r\nThere are still a main issue here that we are not handling, which is the manageability of the library. currently we have multiple files, for DOM webw","comments":8,"createdAt":1414566060000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":987,"state":"closed","title":"ES6 typings","updatedAt":1417483929000},{"assignedTo":"","body":"fixes #1282\r\nI sent a CLA at Jul 31 and it accepted at Aug 1.","comments":3,"createdAt":1417437518000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"","number":1317,"state":"closed","title":"Add missing prototype properties","updatedAt":1417480735000},{"assignedTo":"","body":"following types don't have `prototype` property.\r\n\r\nI think it required by type guards. isn't it?\r\nhttps://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#420-type-guards\r\n> when true, narrows the type of x to the type of the 'prototype' prop","comments":5,"createdAt":1417009465000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"","number":1282,"state":"closed","title":"prototype property missing in lib.d.ts","updatedAt":1417480717000},{"assignedTo":"vladima","body":"![module-semicolon](https://cloud.githubusercontent.com/assets/972891/5251980/a94f1b84-794e-11e4-83a1-ac0aeb2c2b17.gif)\r\n\r\n\r\nStart off with the following:\r\n\r\n```TypeScript\r\ndeclare var module\r\n```\r\n\r\nTyping a semicolon results in\r\n\r\n```TypeScript\r\nde","comments":0,"createdAt":1417462907000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.4","number":1320,"state":"closed","title":"Formatting error for 'module' variable name followed by semicolon","updatedAt":1417478689000},{"assignedTo":"","body":"...erent. This might happen if parser decide to interpret token differently - i.e. treat keyword as identifier. This fixes #1320 ","comments":1,"createdAt":1417469495000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1321,"state":"closed","title":"take token kind from the tree in case if token kind from scanner is diff...","updatedAt":1417477844000},{"assignedTo":"","body":"Fix for #1288, by adding missing node kinds to the switch statement and test cases.","comments":2,"createdAt":1417374334000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1312,"state":"closed","title":"Handle assert for missing node kind in isDeclarationVisible for functionType and constructorType","updatedAt":1417473025000},{"assignedTo":"","body":"Also gives the scanner the ability to confirm whether the last token is unterminated, which is useful for the classifier.","comments":2,"createdAt":1416966239000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1275,"state":"closed","title":"Keep track of unterminated literal expressions.","updatedAt":1417467453000},{"assignedTo":"","body":"One suggestion we heard from some of the testing inside MS is that it'd be helpful to have a revised lib.d.ts that was geared for Windows development.  Here's the original request:\r\n\r\n\"To support WWA development with TypeScript, we discussed adding a","comments":0,"createdAt":1417451117000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":1319,"state":"open","title":"Provide a lib.win.d.ts file for Windows","updatedAt":1417466991000},{"assignedTo":"","body":"I'm trying to extend an external node module:\r\n```javascript\r\n// a) Use an import?\r\nimport System.Fs.Node = require('fs');\r\n\r\n// b) Hackery? \r\nvar System = System || {}\r\nvar System.Fs = System.Fs || {}\r\nvar System.Fs.Node = require('fs')\r\n\r\nmodule Sy","comments":2,"createdAt":1417181920000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":1293,"state":"closed","title":"Extending an external module","updatedAt":1417464172000},{"assignedTo":"","body":"","comments":2,"createdAt":1416795600000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1254,"state":"closed","title":"ES6: Binary Integer Literal and Octal Integer Literal","updatedAt":1417463857000},{"assignedTo":"","body":"Consider the code snippet:\r\n```ts\r\nfunction test1() {\r\n  return {\r\n    variable: 42,\r\n    refersToSelf: () => {\r\n      return this.variable;\r\n    }\r\n  };\r\n}\r\nconsole.log(test1().refersToSelf());\r\n```\r\nIn javascript this writes 42 to the console, whic","comments":3,"createdAt":1417446400000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5285518?v=3","loggedByName":"rhpijnacker","milestone":"","number":1318,"state":"closed","title":"Reference to 'this' bound to the wrong scope","updatedAt":1417458063000},{"assignedTo":"","body":"Adding typescript definitions files to build output.  \r\n\r\nI use the typescript services in my [atom-typescript-tools](https://github.com/park9140/atom-typescript-tools) and need the typescript definitions in order to write typescript correctly.  \r\n\r\n","comments":13,"createdAt":1407179485000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/276898?v=3","loggedByName":"park9140","milestone":"","number":352,"state":"closed","title":"Adding definitions to build output","updatedAt":1417422312000},{"assignedTo":"","body":"","comments":0,"createdAt":1417417143000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1315,"state":"closed","title":"Fidelity port2","updatedAt":1417418667000},{"assignedTo":"","body":"Explain how TypeLiterals and ObjectLiterals are declarations.\r\nRename variable to be clearer.","comments":0,"createdAt":1417416129000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1314,"state":"closed","title":"Code review feedback.","updatedAt":1417417789000},{"assignedTo":"","body":"Refactor portions of the parser for greater clarity and consistency.","comments":1,"createdAt":1417302465000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1308,"state":"closed","title":"Expression parsing comments.","updatedAt":1417417632000},{"assignedTo":"","body":"","comments":0,"createdAt":1417406560000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1313,"state":"closed","title":"Fidelity port","updatedAt":1417407197000},{"assignedTo":"paulvanbrenk","body":"Working on a large typescript based project that never crashed Visual Studio using TypeScript 1.1 tools.  After upgrading to TypeScript 1.3 tools, noticed that this happens intermittently.","comments":13,"createdAt":1415849606000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1796256?v=3","loggedByName":"mrcrowl","milestone":"TypeScript 1.4","number":1142,"state":"closed","title":"Edit.NavigateTo command (Ctrl+<comma>) crashes VS when inside typescript file (using v1.3 tools)","updatedAt":1417375000000},{"assignedTo":"","body":"The documentation for `Uint32Array.subarray` incorrectly says \"Gets a new *Int8Array* view...\". ([lib.d.ts, line 1492](https://github.com/Microsoft/TypeScript/blob/a9cf216d346072d6ae7a67d362bce92047ff13fb/bin/lib.d.ts#L1492))\r\n\r\nI hope this is the ri","comments":1,"createdAt":1417278573000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/859562?v=3","loggedByName":"SolalPirelli","milestone":"","number":1304,"state":"closed","title":"Wrong doc for Uint32Array.subarray","updatedAt":1417374746000},{"assignedTo":"","body":"Fixes #1304.\r\n\r\nI don't have a scanner near me right now, so merging this will have to wait a bit if signing the CLA is required, I'm afraid.","comments":1,"createdAt":1417338706000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/859562?v=3","loggedByName":"SolalPirelli","milestone":"","number":1310,"state":"closed","title":"Fix documentation for Uint32Array.subarray","updatedAt":1417374746000},{"assignedTo":"","body":"VERSION: tsc 1.3.0.0 \r\n\r\nSTEPS:\r\n1. Save the following PNG file, rename it to `infinite-loop.zip` and unzip it.\r\n![infinite-loop zip](https://cloud.githubusercontent.com/assets/1578115/5236890/c727fcd8-780f-11e4-932b-ad6fdd23fa10.png)\r\n2. run `tsc in","comments":4,"createdAt":1417326737000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1578115?v=3","loggedByName":"bparadie","milestone":"","number":1309,"state":"closed","title":"Infinite loop in tsc 1.3.0.0 ","updatedAt":1417374400000},{"assignedTo":"","body":"It could be nice to have, like in C#, an escape character for using reserved keyword for variable name or function name...\r\n\r\ni.e.: \r\n```ts\r\nenum Mode {\r\n  @import = 1,\r\n  @export = 2\r\n}\r\n```","comments":3,"createdAt":1417184407000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/97023?v=3","loggedByName":"FabienDehopre","milestone":"","number":1294,"state":"closed","title":"proposal: use of @ to escape reserved keywords","updatedAt":1417342720000},{"assignedTo":"","body":"I just updated eclipse-typescript to the latest code on master and got this error when attempting to get diagnostics:\r\n```\r\nError: Debug Failure. False expression: isDeclarationVisible unknown: SyntaxKind: 134\r\n```\r\nPartial stack trace:\r\n```\r\nError: ","comments":8,"createdAt":1417289815000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1081904?v=3","loggedByName":"derekcicerone","milestone":"","number":1305,"state":"closed","title":"Assertion error in latest master","updatedAt":1417338874000},{"assignedTo":"","body":"```javascript\r\nfunction foo<T>(val: [T]) {\r\n\tvar t = val[0]; // T\r\n\tvar u = val[1]; // T\r\n}\r\n```\r\n\r\nIt seems to be treating ```[T]``` (1-tuple of T) as ```T[]```. So u is inferred as ```T``` instead of ```{}```\r\n\r\n---\r\n\r\n```javascript\r\nfunction foo<T","comments":10,"createdAt":1417174975000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":1292,"state":"closed","title":"1-tuples seem to be treated the same as arrays","updatedAt":1417337612000},{"assignedTo":"","body":"Remove empty file from repository","comments":3,"createdAt":1416785251000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":1252,"state":"closed","title":"Remove empty file","updatedAt":1417336930000},{"assignedTo":"","body":"","comments":0,"createdAt":1417302451000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1307,"state":"closed","title":"Simplify parser.","updatedAt":1417307933000},{"assignedTo":"","body":"A definition file for the compiled typescriptServices.js would be useful.","comments":2,"createdAt":1417195609000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/285609?v=3","loggedByName":"pwdonald","milestone":"","number":1297,"state":"closed","title":"TypeScript Services Definition File?","updatedAt":1417231485000},{"assignedTo":"","body":"This demonstrates a possible approach to supporting async/await in the parser (including incremental support).  Note: this is not actually part of the actual compiler.  This is just a proof of concept for things at the syntactic level.","comments":1,"createdAt":1416964537000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1273,"state":"closed","title":"Update fidelity to support all the latest language constructs (const enums, let/const, type aliases, etc).","updatedAt":1417229466000},{"assignedTo":"","body":"","comments":0,"createdAt":1417215089000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1300,"state":"closed","title":"Add parser tests for let/const.","updatedAt":1417229455000},{"assignedTo":"","body":"...f they doesn't trigger recomputation of indentation","comments":1,"createdAt":1417144021000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1291,"state":"closed","title":"new lines that were added\\removed by rules must always be honored even i...","updatedAt":1417220009000},{"assignedTo":"","body":"Hi, I am using Microsoft Visual Studio 2013 Update 4 to debug a web application. First, I ran the web application on Internet Explorer and then I attach the iexplore script process using the Debug option \"Attach to process\" in Visual Studio. Then I i","comments":2,"createdAt":1416995874000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4542064?v=3","loggedByName":"ymengesha","milestone":"","number":1279,"state":"closed","title":"Debugging TypeScript Code with Visual Studio","updatedAt":1417082614000},{"assignedTo":"","body":"I would like to know if there are any plans to refactor lib.d.ts (and subsequent definitions) to declare interfaces for static implementations, thus allowing custom static bindings for existing Objects.\r\n\r\ni.e.\r\n```ts\r\ninterface _Object {\r\n    is(val","comments":3,"createdAt":1416996304000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/lib.d.ts","name":"lib.d.ts","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9935122?v=3","loggedByName":"series0ne","milestone":"","number":1280,"state":"closed","title":"TypeScript static interface binding","updatedAt":1417075518000},{"assignedTo":"","body":"I'm trying to run something like:\r\n```sh\r\nnode bin/tsc -d --out tmp.js src/compiler/parser.ts src/compiler/checker.ts\r\n```\r\nbut I get an error:\r\n> src/compiler/parser.ts(756,21): error TS4060: Return type of exported function has or is using private ","comments":2,"createdAt":1415642782000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/360279?v=3","loggedByName":"chbrown","milestone":"","number":1111,"state":"closed","title":"src/compiler/parser.ts exports function with return type of private interface","updatedAt":1417062726000},{"assignedTo":"","body":"This is based on the plan in issue #1082. The type checker support, .d.ts generation and language service support (other than navigation items). I plan to work on the type system side next.","comments":0,"createdAt":1416960943000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1272,"state":"closed","title":"Parsing and emit for computed properties","updatedAt":1417061796000},{"assignedTo":"sheetalkamat","body":"This is potentially related to #735.\r\n\r\nThe documentation for angular.foreach() in the release-1.3 branch now looks like this:\r\n```\r\nInvokes the iterator function once for each item in obj collection, which can be either an object or an array. The it","comments":2,"createdAt":1413260193000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1081904?v=3","loggedByName":"derekcicerone","milestone":"TypeScript 1.4","number":891,"state":"closed","title":"Overridden method parameters documentation are missing","updatedAt":1417055434000},{"assignedTo":"sheetalkamat","body":"The following used to work in TS 1.0.3, but crashes the compiler in 1.1 (and current master).\r\n\r\ntest.ts:\r\n```ts\r\nexport function bar(a: foo.Foo) { }\r\nimport foo = require(\"foo\");\r\n```\r\n\r\nfoo.ts:\r\n```ts\r\nexport class Foo { }\r\n```\r\n\r\nUsing the latest ","comments":2,"createdAt":1413991690000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1025628?v=3","loggedByName":"poelstra","milestone":"TypeScript 1.3","number":938,"state":"closed","title":"Crash while generating .d.ts when using imported type before importing it","updatedAt":1417055384000},{"assignedTo":"sheetalkamat","body":"I have the below overloaded function declaration for a function in my class\r\n\r\n```typescript\r\nprivate _forEachBindingContext(bindingContext: IContext, fn: (bindingContext: IContext) => void);\r\nprivate _forEachBindingContext(bindingContextArray: Array","comments":1,"createdAt":1414776602000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1153715?v=3","loggedByName":"ADobin","milestone":"TypeScript 1.4","number":1018,"state":"closed","title":"Overloaded private functions generate an invalid definition file","updatedAt":1417055345000},{"assignedTo":"sheetalkamat","body":"\r\n```TypeScript\r\ninterface I11 {\r\n    commonMethodDifferentReturnType(a: string, b: number): string;\r\n    commonPropertyDifferentType: string;\r\n}\r\ninterface I21 {\r\n    commonMethodDifferentReturnType(a: string, b: number): number;\r\n    commonProperty","comments":0,"createdAt":1415133271000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.4","number":1054,"state":"closed","title":"Contextual property signature not working as per spec","updatedAt":1417055239000},{"assignedTo":"","body":"I am using TypeScript included with VS 2013 Update 2. I have a web project that contains TypeScript files. When I edit the csproj and set ToolsVersion=\"4.0\" I can then call this project with the following in an MSBuild file.\r\n\r\n    <MSBuild Projects=","comments":4,"createdAt":1414749973000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9479017?v=3","loggedByName":"nickhod","milestone":"","number":1012,"state":"closed","title":"CompileTypeScript not invoked with MSBuildTools v12.0","updatedAt":1417045238000},{"assignedTo":"","body":"Fix for issue #1142 ","comments":1,"createdAt":1417031636000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":1284,"state":"closed","title":"Navigate to crash","updatedAt":1417038758000},{"assignedTo":"","body":"It is great to know that the next TypeScript will come with [Union Types](http://blogs.msdn.com/b/typescript/archive/2014/11/18/what-s-new-in-the-typescript-type-system.aspx). This will allow to tighten up those previously `any` parameter definitions","comments":2,"createdAt":1417036882000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/767147?v=3","loggedByName":"omidkrad","milestone":"","number":1285,"state":"closed","title":"Suggestion: Union types and string constants","updatedAt":1417038220000},{"assignedTo":"JsonFreeman","body":"```TS\r\ndeclare function f<T extends Number>(x: T): T;\r\ndeclare function f<T extends String>(x: T): T\r\n\r\nvar v = f<string>(\"\");\r\n```\r\n\r\nExpected: The second overload gets picked and there is no error.\r\nActual: An error:\r\nerror TS2343: Type 'string' do","comments":2,"createdAt":1412286860000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.4","number":807,"state":"closed","title":"Overload resolution produces an incorrect error when type arguments don't satisfy the first overload","updatedAt":1417037014000},{"assignedTo":"JsonFreeman","body":"The following crash has been observed:\r\n\r\nTypeError Unable to get property getChildren of undefined or null\r\nreference\r\nat findListItemInfo (:28227:9)\r\nat getImmediatelyContainingArgumentInfo (:28113:17)\r\nat getContainingArgumentlnfo (:28120:21)\r\nat ","comments":3,"createdAt":1412617012000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.3","number":832,"state":"closed","title":"Crash in signature help in findListItemInfo","updatedAt":1417036977000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\nthis./**/\r\n```\r\nComment is colorized as an identifier.","comments":0,"createdAt":1411688782000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":753,"state":"closed","title":"Comment following a dot is not colorized correctly","updatedAt":1417036571000},{"assignedTo":"DanielRosenwasser","body":"Take the following:\r\n\r\n```TypeScript\r\nvar f: any;\r\n\r\n`${ f }`;\r\n```\r\n\r\nRight now, neither findAllRefs nor getOccurrences, will find the `f` in the template.\r\n\r\nNote that the following *does* work as expected for getOccurrences:\r\n\r\n```TypeScript\r\nthis","comments":0,"createdAt":1415068517000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.4","number":1046,"state":"closed","title":"findAllRefs/getOccurrences not working appropriately within template expressions.","updatedAt":1417036535000},{"assignedTo":"","body":"Hi,\r\n\r\n**VS**: 2013 Update 4\r\n**TS**: 1.3\r\n\r\nHere's some code that compiles correctly:\r\n```TypeScript\r\nclass Base {\r\n\r\n    foo() {\r\n        return this;\r\n    }\r\n}\r\n\r\nclass Derived extends Base {\r\n\r\n    foo() {\r\n        return super.foo();\r\n    }\r\n}\r\n","comments":2,"createdAt":1415878192000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":1146,"state":"closed","title":"Return type annotation missing error","updatedAt":1417034552000},{"assignedTo":"","body":"It would be great if Typescript would try to infer best index signature for object literals.\r\n```\r\nvar obj = {\r\n    A: { prop: \"A_value\" },\r\n    B: { prop: \"B_value\" },\r\n    C: { prop: \"C_value\" }\r\n};\r\n```\r\nhere the type of obj is ```{ A : {prop:stri","comments":5,"createdAt":1415668300000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2056282?v=3","loggedByName":"mpawelski","milestone":"","number":1120,"state":"closed","title":"Infer indexer signature from object literals.","updatedAt":1417034427000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\nfunction f(strs, x?, y?, z?) {\r\n}\r\n\r\nf(` a b c ${    'd'    } e f g h ${    1    } j k l m ${ 0 } etc.`);\r\n```\r\n\r\nExpected:\r\n```TypeScript\r\nfunction f(strs, x, y, z) {\r\n}\r\nf(\" a b c \" + 'd' + \" e f g h \" + 1 + \" j k l m \" + 0 + \" etc.\"","comments":0,"createdAt":1416363919000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.4","number":1205,"state":"closed","title":"Excessive parentheses emitted for template in call expression in pre-ES6 targets","updatedAt":1417033332000},{"assignedTo":"mhegazy","body":"Action description:\r\n\r\ngetBraceMatchingAtPosition('D:\\dd\\VSPro_1\\src\\typescript\\public\\src\\services\\services.ts', 216854)\r\n\r\ni think i had two identifiers in a raw, at that position.\r\n\r\nAction description:\r\n\r\ngetBraceMatchingAtPosition('D:\\dd\\VSPro_1","comments":2,"createdAt":1416428975000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.4","number":1216,"state":"closed","title":"Crash in getBraceMatchingAtPosition","updatedAt":1417033324000},{"assignedTo":"","body":"Hello Folks,\r\n\r\nI want to introduce an improvement for the TypeScript compiler. My latest experience with that compiler showed me that there are situations where the typeinference of the compiler will always fail. \r\nBut since I know what type to expe","comments":5,"createdAt":1416711049000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9468599?v=3","loggedByName":"lord-saumagen","milestone":"","number":1247,"state":"closed","title":"Suggesting compiler flags","updatedAt":1417029956000},{"assignedTo":"","body":"It seems that until now we can only write a *.d.ts file for an existing javascript, however would Microsoft be possible to offer us an automatic tool to convert a js file to its \"d.ts\"?","comments":1,"createdAt":1416743429000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6959154?v=3","loggedByName":"MaleDong","milestone":"","number":1249,"state":"closed","title":"Suggestion: Offer us a new tool to convert a common Javascript to *.d.ts","updatedAt":1417029913000},{"assignedTo":"","body":"For example if we have a class\r\n```ts\r\n class Product\r\n{\r\n  private _prodNumber: any;\r\n  private _name: string;\r\n\r\n   constructor() {}\r\n\r\n   get prodNumber() { return this._prodNumber; }\r\n   get name() { return this._name; }\r\n}\r\n\r\nvar prod = new Prod","comments":2,"createdAt":1416997901000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3954243?v=3","loggedByName":"BBGONE","milestone":"","number":1281,"state":"closed","title":"private and protected members are shown when a type instance is used in Visual Studio 2013 editor","updatedAt":1417029878000},{"assignedTo":"","body":"`child` should be passed as an argument to `readTokenInfo` instead of `node`","comments":1,"createdAt":1416990722000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1277,"state":"closed","title":"handle regexes correctly in formatting","updatedAt":1417029786000},{"assignedTo":"DanielRosenwasser","body":"I installed typescript 1.3 and in Visual Studio 2013 i can not find references or refactor any data member of a class starting with two underscores.\r\nFor example:\r\n\r\n```ts\r\n  class BaseObject {\r\n        protected __isDestroyed: boolean;\r\n        prot","comments":1,"createdAt":1416544024000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3954243?v=3","loggedByName":"BBGONE","milestone":"TypeScript 1.4","number":1233,"state":"closed","title":"Find all references and Refactor is not working if the datamember of a class starts with two underscores","updatedAt":1417029467000},{"assignedTo":"","body":"I was recently using typescript and concatenating various values into a string. One of the values was function type. Is there a way for the compiler to check against this. It really does not make sense (in most applications) to concatenate a function","comments":1,"createdAt":1416933652000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5141725?v=3","loggedByName":"kns98","milestone":"","number":1266,"state":"closed","title":"enforcing type checking with operators","updatedAt":1417027447000},{"assignedTo":"","body":"Developers can not declare the type of several variables.\r\n\r\nSeveral lib.d.ts interfaces is defined the type of instance. The type of the variable can not be defined in a different variable. That is, the variable type is not defined.\r\n\r\nTypeScript do","comments":6,"createdAt":1416905595000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3143368?v=3","loggedByName":"falsandtru","milestone":"","number":1264,"state":"closed","title":"Incompleteness of the variable name and type name is the same definition","updatedAt":1417027398000},{"assignedTo":"","body":"","comments":1,"createdAt":1416993257000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1278,"state":"closed","title":"Emit modules that contain only const enums, if the preserveConstEnum flag is provided.","updatedAt":1416996806000},{"assignedTo":"","body":"Seems like it might be helpful if we highlighted all export keywords occurrences if the cursor is on them - especially after I found out about `Ctrl`+`Shift`+`Up` and `Ctrl`+`Shift`+`Down` today.","comments":0,"createdAt":1415400414000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1095,"state":"closed","title":"Highlight 'export' keywords when the cursor is over them","updatedAt":1416973495000},{"assignedTo":"","body":"Just putting this out there, haven't added the tests yet.\r\n\r\nFixes #1095.","comments":3,"createdAt":1415411903000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1098,"state":"closed","title":"Support getOccurrences for modifier keywords.","updatedAt":1416973495000},{"assignedTo":"","body":"Adds/moves around tests for #624","comments":2,"createdAt":1410472447000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":657,"state":"closed","title":"Conformance Tests for Spec Change in PR#624","updatedAt":1416954757000},{"assignedTo":"","body":"","comments":1,"createdAt":1416946629000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1268,"state":"closed","title":"Report errors for using yield/generators right now.","updatedAt":1416952966000},{"assignedTo":"","body":"I was trying to implement the [Result](http://doc.rust-lang.org/core/result/enum.Result.html) type from Rust in TypeScript. [Here](https://gist.github.com/s-panferov/5269524dcf23dad9a1ef) is the result.\r\n\r\nEverything works well but there is one thing","comments":8,"createdAt":1416406849000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/198327?v=3","loggedByName":"s-panferov","milestone":"","number":1212,"state":"open","title":"More smart type inference","updatedAt":1416952875000},{"assignedTo":"","body":"I'd like to ask / discuss this pattern and the error it causes:\r\n\r\n\tmodule Foo { // \"TS2434: A module declaration cannot be located prior to a class or function with which it is merged; class Foo module Foo\"\r\n\t\texport enum Bar {}\r\n\t}\r\n\r\n\tclass Foo {\r","comments":4,"createdAt":1416893736000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8186628?v=3","loggedByName":"stanvass","milestone":"","number":1262,"state":"closed","title":"Getting TS2434 with a merged module/class, but not when the module has only interfaces.","updatedAt":1416952118000},{"assignedTo":"paulvanbrenk","body":"After installing 1.3 VS started crashing on Ctrl+, very often. Had to downgrade to 1.2.","comments":12,"createdAt":1415869994000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6803705?v=3","loggedByName":"serggusak","milestone":"TypeScript 1.4","number":1145,"state":"closed","title":"Crashes on ctrl+,","updatedAt":1416951735000},{"assignedTo":"","body":"","comments":0,"createdAt":1416883804000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1261,"state":"closed","title":"Use a separate field on a node to specify parser context flags.","updatedAt":1416908331000},{"assignedTo":"","body":"IDBKeyRange has defined **variable only member** (except the prototype).\r\nThis **type can not be declare nor cast**.\r\n\r\n```typescript\r\n// Example of other definition.\r\ninterface SVGFEMorphologyElement extends SVGElement, SVGFilterPrimitiveStandardAtt","comments":4,"createdAt":1416624904000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3143368?v=3","loggedByName":"falsandtru","milestone":"","number":1243,"state":"closed","title":"IDBKeyRange member definition is wrong","updatedAt":1416905454000},{"assignedTo":"","body":"## Signature Help for Tagged Templates\r\n\r\nThis PR enables signature help support in the language service for tagged template strings.\r\n\r\nThe idea is that a tagged template is a bit of an implicit function invocation. Whenever a user requests signatur","comments":2,"createdAt":1416363364000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1204,"state":"closed","title":"Tagged Template Signature Help Support in Language Service","updatedAt":1416880092000},{"assignedTo":"","body":"Previously the incremental parser worked in a mode where it would reuse nodes prior to the editedrange, then skip over nodes/tokens in the edited range, then reuse nodes after the edit range.  The reused nodes after the edit range would then have to ","comments":1,"createdAt":1416615480000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1239,"state":"closed","title":"Change how the incremental parser works.","updatedAt":1416880050000},{"assignedTo":"","body":"Doing thigns this way makes incremental parsing (specifically, determining if we can reuse a node) much easier.","comments":0,"createdAt":1416867610000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1258,"state":"closed","title":"Change 'disallowIn' into an ambient parser context flag.","updatedAt":1416880002000},{"assignedTo":"","body":"Hey there,\r\n\r\nI've been playing with Typescript and Backbone / Marionette.  A common pattern with Backbone is to declare a object like this;\r\n\r\n```javascript\r\nvar View = Marionette.ItemView.extend({\r\n  // ...\r\n  tagName: 'tr'\r\n  // ...\r\n});\r\n```\r\ntag","comments":1,"createdAt":1416765658000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125491?v=3","loggedByName":"pudgeball","milestone":"","number":1250,"state":"closed","title":"Ways to add properties to Class prototype?","updatedAt":1416870543000},{"assignedTo":"DanielRosenwasser","body":"This isn't really helping me choose where to navigate. There're 100s of results and they're not showing me any information I can use to distinguish these from one another (the file they're in, their type signature, etc).\r\n\r\n![attachfilehandler](https","comments":3,"createdAt":1409086529000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":534,"state":"closed","title":"Filter overload signatures from the results of getNavigationBarItems/getScriptLexicalStructure","updatedAt":1416870030000},{"assignedTo":"","body":"Would be nice for an officially supported solution that matches WinRT's JavaScript transformation.","comments":1,"createdAt":1416620873000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/228880?v=3","loggedByName":"joelday","milestone":"","number":1242,"state":"closed","title":"IDL/winmd d.ts generation","updatedAt":1416864710000},{"assignedTo":"","body":"IDBKeyRange has defined **variable only member** (except the prototype).\r\nThis **type can not be declared**.\r\n\r\n```typescript\r\n// Example of other definition.\r\ninterface SVGFEMorphologyElement extends SVGElement, SVGFilterPrimitiveStandardAttributes ","comments":1,"createdAt":1415336881000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3143368?v=3","loggedByName":"falsandtru","milestone":"","number":1092,"state":"closed","title":"IDBKeyRange member definition is missing","updatedAt":1416864381000},{"assignedTo":"","body":"I was expecting the following the code snippet below to emit a compiler error because the declared index signature is expecting a `number`.  I wasn't sure if this is WAD or a bug in the TypeScript compiler.\r\n\r\n```typescript\r\nvar obj: {[index: number]","comments":2,"createdAt":1416860766000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1284017?v=3","loggedByName":"ericvw","milestone":"","number":1257,"state":"closed","title":"Index Signatures: Type checking on mismatched index type","updatedAt":1416861985000},{"assignedTo":"","body":"It seems that we now have turple, string, numberâ¦â¦But it would be better if we could have List<T>, Stack<T>, Queue<T>,Dictionary<K,V> and other very useful and frequent class types like those in C#, I hope Microsoft can offer us such class types pack","comments":6,"createdAt":1416116711000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6959154?v=3","loggedByName":"MaleDong","milestone":"","number":1174,"state":"closed","title":"Suggestion: Offer us some frequent JS class types and functions","updatedAt":1416860055000},{"assignedTo":"","body":"When making higher order functions that return functions, type parameters are not preserved in return type. Notice in the following example how `identityM` has the generic type parameter `A` changed into `{}`, resulting in a loss of type safety in th","comments":8,"createdAt":1407649785000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/176815?v=3","loggedByName":"saikobee","milestone":"","number":417,"state":"closed","title":"Higher order functions lose type parameters","updatedAt":1416841108000},{"assignedTo":"","body":"Simplify things in the parser by reducing hte number of places where we explicitly create diagnostics.  There are now only two places where we make diagnostics. Missing tokens and extra tokens.","comments":0,"createdAt":1416778649000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1251,"state":"closed","title":"Reduce diagnostics","updatedAt":1416811188000},{"assignedTo":"","body":"Fixes #1233.","comments":1,"createdAt":1416617769000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1240,"state":"closed","title":"Fix for findAllRefs on identifiers starting with 2+ underscores","updatedAt":1416786475000},{"assignedTo":"","body":"This is for dealing with cases where people try to type something like:\r\n\r\n```function foo(a) => a```\r\n\r\nWe support this at the parser level, and report errors later during the grammar checker.","comments":0,"createdAt":1416724706000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1248,"state":"closed","title":"Make the parser more lenient when it encounters errant => tokens.","updatedAt":1416776901000},{"assignedTo":"","body":"Parser errors mean nodes can't be reused incrementally.  Grammar errors do not have that problem.","comments":0,"createdAt":1416689533000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1246,"state":"closed","title":"Move parser error to grammar check phase.","updatedAt":1416696443000},{"assignedTo":"","body":"","comments":0,"createdAt":1416687251000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1245,"state":"closed","title":"Parser consistency","updatedAt":1416696432000},{"assignedTo":"","body":"","comments":2,"createdAt":1416625401000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1244,"state":"closed","title":"remove unneeded enum from the parser.","updatedAt":1416631524000},{"assignedTo":"","body":"Remove unused variables that left after the recent work related to moving grammar checks outside the parser. Also this PR adds regression test for #1216 - this bug no longer relevant because of recent changes but having regression test is still good.","comments":1,"createdAt":1416619160000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1241,"state":"closed","title":"drop unused variables","updatedAt":1416624129000},{"assignedTo":"","body":"basically what was once here: http://typescript.codeplex.com/discussions/438243\r\n\r\nCan it be done? :)))","comments":3,"createdAt":1416574261000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9522710?v=3","loggedByName":"Vikaton","milestone":"","number":1234,"state":"closed","title":"Support compile to asm.js","updatedAt":1416593445000},{"assignedTo":"sheetalkamat","body":"![letquickinfo](https://cloud.githubusercontent.com/assets/8052792/4946447/4da6dda0-6614-11e4-9337-6edcf4e340bb.gif)\r\n","comments":0,"createdAt":1415319822000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.4","number":1083,"state":"closed","title":"QuickInfo on let declaration shows as (var) instead of (let)","updatedAt":1416547097000},{"assignedTo":"sheetalkamat","body":"![constenumquickinfo](https://cloud.githubusercontent.com/assets/8052792/4946533/6cc89a9c-6615-11e4-824a-455ee99d0887.gif)\r\n","comments":2,"createdAt":1415320300000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.4","number":1084,"state":"closed","title":"Const enum should show const enum enum name in the quickInfo/CompletionEntry details","updatedAt":1416547091000},{"assignedTo":"","body":"Handles #1083 and #1084","comments":5,"createdAt":1415832845000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1134,"state":"closed","title":"Fixes the const and let nav bar, quickInfo, Completion List","updatedAt":1416547080000},{"assignedTo":"sheetalkamat","body":"If a type annotation is present it should be emitted exactly as written when generating a .d.ts file. For example:\r\n```typescript\r\nmodule M {\r\n    export type Value = string | number | boolean;\r\n    export var x: Value;\r\n}\r\n```\r\nThe .d.ts file for th","comments":4,"createdAt":1414539759000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"TypeScript 1.4","number":984,"state":"closed","title":"Emit type annotations as written when generating .d.ts files","updatedAt":1416546127000},{"assignedTo":"sheetalkamat","body":"Hi,\r\n\r\nI just updated the typescript compiler from 1.0.1.0 to 1.1.0.1.\r\n\r\nThen when I using the Webstorm Typescript Transpiling, it keeps reporting TS2300: Duplicate identifier.\r\nI investigate a bit, it seems like the references is the problem.\r\n\r\nIn","comments":6,"createdAt":1415034526000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1086461?v=3","loggedByName":"br1anchen","milestone":"TypeScript 1.4","number":1039,"state":"closed","title":"[error TS2300: Duplicate identifier] Global references ","updatedAt":1416546074000},{"assignedTo":"sheetalkamat","body":"Creating this separate bug to track part  #1096 \r\n\r\nFrom the bug:\r\nAlso while looking at the code getSignatureAtPosition it isnt doing anything special apart from getSignatureHelpItems and translating result into format old compiler needed. So i stro","comments":0,"createdAt":1415661393000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.4","number":1119,"state":"closed","title":"Remove getSignatureAtPosition  api","updatedAt":1416546052000},{"assignedTo":"","body":"Handles #1119 ","comments":3,"createdAt":1415845150000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1140,"state":"closed","title":"Remove the Obsolete api getSignatureAtPosition","updatedAt":1416532403000},{"assignedTo":"","body":"If user specified type annotation exists in the typescript file, use that instead of inferring the name from the symbol","comments":0,"createdAt":1415674405000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1122,"state":"closed","title":"Use type annotation in declarations emitter","updatedAt":1416531518000},{"assignedTo":"","body":"","comments":1,"createdAt":1416529972000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1230,"state":"closed","title":"Remove unnecessary 'do nothing' implementations in SourceFileObject.","updatedAt":1416530847000},{"assignedTo":"","body":"Previously this was difficult because we didn't know where empty tokens\r\nwould go due to the presense of skipped tokens.  Thanks to the recent\r\nwork i did to place skipped tokens on the *next* real token we hit, this\r\nbecame much simpler.","comments":0,"createdAt":1416529350000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1229,"state":"closed","title":"Have the parser give real positions for empty tokens.","updatedAt":1416530718000},{"assignedTo":"","body":"Compiler internally doesn't resolve the file paths to full disk paths unless necessary that results in reference resolution error when reading files that reference each other but aren't in same directory.\r\nEg. \r\nsrc\\ts\\Manager\\FieldManager.ts -- refe","comments":1,"createdAt":1415776678000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1131,"state":"closed","title":" Fix the relative path reference resolution","updatedAt":1416527946000},{"assignedTo":"","body":"I have the following:\r\n\r\n```typescript\r\n// third-party.d.ts\r\ndeclare module foo.bar {\r\n  export interface IBar<T> {\r\n    a: T;\r\n  }\r\n}\r\n```\r\n\r\n```typescript\r\n// bar.ts\r\nmodule bar {\r\n  export interface IBar {\r\n    a: number;\r\n  }\r\n}\r\n```\r\n\r\n```typesc","comments":2,"createdAt":1416515998000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"","number":1225,"state":"closed","title":"Buggy(?) namespace collision with internal modules.","updatedAt":1416526533000},{"assignedTo":"","body":"Being in the parser makes the incremental parser work much harder.  It means any nodes with a syntactic error cannot be reused, and it also means we need a way to appropriately persist and track that information in the tree.\r\n\r\nAround 150 errors were","comments":2,"createdAt":1416464893000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1221,"state":"closed","title":"Move syntactic checks out of the parser","updatedAt":1416524611000},{"assignedTo":"","body":"","comments":3,"createdAt":1416520001000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1227,"state":"closed","title":"save token in scanner after scaning hex literal","updatedAt":1416523906000},{"assignedTo":"","body":"Fixes #1205.","comments":1,"createdAt":1416445688000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1219,"state":"closed","title":"Fixed extra-paren emit for template expressions in call expressions","updatedAt":1416516146000},{"assignedTo":"DanielRosenwasser","body":"![image](https://cloud.githubusercontent.com/assets/6685088/4706639/7ec36fb6-5886-11e4-92a1-c81eba86bb4e.png)\r\n\r\n`number` should be blue here. Seems to flash blue during certain edits, but not others.","comments":1,"createdAt":1413829567000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.4","number":922,"state":"closed","title":"Primitives in union types not always correctly colorized","updatedAt":1416513781000},{"assignedTo":"","body":"In a node environment, requiring a directory works provided that it contains an `index.js` file[1]. Is it possible to do the same with TypeScript? This is what I currently see:\r\n\r\n```\r\nimport mod1 = require('./src');       // error Cannot find extern","comments":2,"createdAt":1416453231000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/137289?v=3","loggedByName":"sccolbert","milestone":"","number":1220,"state":"closed","title":"Require a directory by implicitly loading index.ts?","updatedAt":1416507913000},{"assignedTo":"mhegazy","body":"* load typescriptServices.js in the context of a browser\r\n* inspect the Array prototype\r\n* > it has some new properties (kind, separatorAt, separatorCount) which has potential for disaster as soon as you load another library that (improperly) iterate","comments":5,"createdAt":1414773844000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"TypeScript 1.4","number":1016,"state":"closed","title":"loading TypeScript changes the prototype of Array","updatedAt":1416506974000},{"assignedTo":"sheetalkamat","body":"```TS\r\nvar a: { foo: typeof a; }\r\n```\r\n\r\n`a` has a recursive type. If we try to print this type, it prints `{ foo: any; }`, but it does not behave as such in type comparisons. So we are lying when we print it.\r\n\r\nWhen fixing this, it's important to c","comments":9,"createdAt":1408137363000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":463,"state":"open","title":"How to print anonymous recursive types","updatedAt":1416506838000},{"assignedTo":"vladima","body":"I'm trying out the latest master code for TypeScript language services via eclipse-typescript and getting some weird results for the getIndentationAtPosition() call.\r\n\r\nFor this code (I mangled it a bit to simplify and obscure the original sources):\r","comments":7,"createdAt":1416357472000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1081904?v=3","loggedByName":"derekcicerone","milestone":"","number":1201,"state":"closed","title":"Incorrect indentation provided (v1.4)","updatedAt":1416455857000},{"assignedTo":"","body":"","comments":2,"createdAt":1416432009000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5273975?v=3","loggedByName":"paulvanbrenk","milestone":"","number":1217,"state":"closed","title":"Fix for crash in QuickInfo on module path in import statement.","updatedAt":1416439685000},{"assignedTo":"","body":"Where 'duplicate' simply means that they had the same name. :wink: ","comments":1,"createdAt":1416427472000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1214,"state":"closed","title":"Removed tests from fourslash_old that were duplicates","updatedAt":1416436269000},{"assignedTo":"","body":"Instead of report \"Cannot find name ...\" in short-hand property assignment because we try to parse it as short-hand property assignment, it is more desirable to assume users try to write normal property assignment and report \": expected\"","comments":1,"createdAt":1416358466000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1202,"state":"closed","title":"Improve error messages in parsing for short-hand property assignment","updatedAt":1416435154000},{"assignedTo":"","body":"__extend() function generated by TypeScript is mostly compatible with inheritance mechanisms used by Backbone and Knockback. However, compared to Knockback extend() function, it lacks a couple of steps which leads to faulty behaviour of view models s","comments":2,"createdAt":1416305333000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2668871?v=3","loggedByName":"Sleepyowl","milestone":"","number":1193,"state":"closed","title":"Lack of ability to customize __extend() function","updatedAt":1416383357000},{"assignedTo":"","body":"use `rangeContainsStartEnd` in implementation of `getContainingList` to determine if node range is in list range. this fixes #1201 ","comments":1,"createdAt":1416373140000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1208,"state":"closed","title":"Fix indentation when multiple nested scopes are involved","updatedAt":1416378572000},{"assignedTo":"","body":"","comments":0,"createdAt":1416366500000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1207,"state":"closed","title":"Update LKG for shorthand","updatedAt":1416366892000},{"assignedTo":"","body":"Hey guys,\r\n\r\nI didn't find the actual Typescript SDK on my windows, after the installation of the version 1.3. Apparently, it overwrote the version 1.1. \r\n\r\nIs this the correct behaviour? I thought that a new folder for the 1.3 should be created on t","comments":2,"createdAt":1416074200000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/101121?v=3","loggedByName":"danfma","milestone":"","number":1171,"state":"closed","title":"Typescript tool version on VS2013","updatedAt":1416366017000},{"assignedTo":"","body":"LKG and use short-hand property assignment in compiler","comments":4,"createdAt":1416348923000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1198,"state":"closed","title":"Using shorthand property assignment in compiler","updatedAt":1416364947000},{"assignedTo":"","body":"Hi,\r\n\r\nIs that a vs2015 with roslyn language service feature only or a bad luck on the 1.3 update ?\r\n\r\nOn VS2013 Pro Update 4, I have no color synthaxe for classes and interfaces. Tuple and protected works.\r\n\r\nSÃ©bastien.\r\n","comments":5,"createdAt":1416355250000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5035572?v=3","loggedByName":"sebdoucet","milestone":"","number":1200,"state":"closed","title":"No color synthax on vs2013","updatedAt":1416358921000},{"assignedTo":"","body":"Resolve name resolution conflicts during a rename session just like Roslyn for C#/VB does. Identifiers can have a different meaning before and after a rename refactor. And in some very special cases the errors can not be identified instantaneously, o","comments":2,"createdAt":1416343518000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9047283?v=3","loggedByName":"Peter-Juhasz","milestone":"","number":1196,"state":"open","title":"Resolve conflict during rename","updatedAt":1416347693000},{"assignedTo":"","body":"","comments":1,"createdAt":1416263314000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1184,"state":"closed","title":"Go-to-Definition for shorthand properties","updatedAt":1416338246000},{"assignedTo":"","body":"Why the compiler tries to override `update` method from Editable with different signature instead of adding new `update` in TransactionContext? I think inheritance behavior is broken. \r\n```typescript\r\ndeclare module 'X' {\r\n  export class Editable<T> ","comments":1,"createdAt":1416301758000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/918009?v=3","loggedByName":"mbektimirov","milestone":"","number":1192,"state":"closed","title":"Compiler tries to override method by name","updatedAt":1416336056000},{"assignedTo":"","body":"Hi,\r\nconsider the following TypeScript arrow function (do not try to find a sense in this function):\r\n```typescript\r\nexport class MyClass{        \r\n  public myArrowFunction = ():Promise => {\r\n    return new Promise(function(resolve, reject){\r\n      r","comments":2,"createdAt":1416301739000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/235321?v=3","loggedByName":"gooodguy","milestone":"","number":1191,"state":"closed","title":"\"this\" within arrow functions within object instantiation","updatedAt":1416335948000},{"assignedTo":"ahejlsberg","body":"Try to compile this code with tsc:\r\n\r\n```ts\r\ndeclare module Bacon {\r\n    interface Event<T> {\r\n    }\r\n    interface Error<T> extends Event<T> {\r\n    }\r\n    interface Observable<T> {\r\n        zip<U, V>(other: EventStream<U>, f: (a: T, b: U) => V): Eve","comments":7,"createdAt":1416043743000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/198327?v=3","loggedByName":"s-panferov","milestone":"TypeScript 1.4","number":1170,"state":"closed","title":"Compiler hangs","updatedAt":1416300674000},{"assignedTo":"","body":"A regex can only be parsed out in a location where it is legal, and where / and /= are not legal.  Because of this, if we see a / or /= in a regex location, we scan as much as possible until we see a terminating slash, newline, or EOF.  If we see the","comments":1,"createdAt":1416276292000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1189,"state":"closed","title":"Simplify how regexs are incrementally parsed.","updatedAt":1416278304000},{"assignedTo":"","body":"Also corrected tests that were not actually compiling.","comments":4,"createdAt":1416276870000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1190,"state":"closed","title":"Fail on tests with errors and reinstate noResolve in fourslash tests","updatedAt":1416278095000},{"assignedTo":"","body":"","comments":0,"createdAt":1416272883000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1188,"state":"closed","title":"Remove usage of TypeScript module from the services layer","updatedAt":1416273470000},{"assignedTo":"","body":"This fix for #1170 improves caching of intermediary results (\"maybes\") during type relationship checks.","comments":1,"createdAt":1416249916000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1180,"state":"closed","title":"Improve caching in recursive type comparisons (fixes #1170)","updatedAt":1416258702000},{"assignedTo":"","body":"Implementation of short-hand property assignment in compiler and language service. Initial conformance tests are added and more tests for fourslash will be added.\r\n","comments":2,"createdAt":1415736785000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":1127,"state":"closed","title":"Shorthand property","updatedAt":1416258589000},{"assignedTo":"","body":"Hi, it will be useful to be able to document generic parameters:\r\n\r\n```TypeScript\r\n/** The foo class.\r\n  * @template TFirst ...\r\n  * @template TSecond ... */\r\nclass Foo<TFirst, TSecond> {\r\n\r\n}\r\n\r\nvar foo = new Foo< // Info\r\n```","comments":2,"createdAt":1416231219000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":1178,"state":"open","title":"Add support for @template JSDoc","updatedAt":1416252820000},{"assignedTo":"","body":"Currently parser drops lots of token information on the floor which is fine for batch compilation. However language service still needs this data so to reconstruct it we now re-scan the source text. This PR contains proposal for implementation strate","comments":2,"createdAt":1409637867000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":577,"state":"closed","title":"LS: include tokens in tree during parsing ","updatedAt":1416250852000},{"assignedTo":"","body":"Export ReferencePathMatchResult interface to fix 'error TS4060: Return type of exported function has or is using private name' when generating declarations from `src/compiler/*.ts`.\r\n\r\nSee #1111\r\n\r\nTests run just fine.\r\n>   29974 passing (2m)","comments":4,"createdAt":1415642904000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/360279?v=3","loggedByName":"chbrown","milestone":"","number":1112,"state":"closed","title":"src/compiler/parser.ts exports function with return type of private interface","updatedAt":1416247300000},{"assignedTo":"","body":"I just upgraded our solution to TS 1.3 and every thing locally worked fine.  As part of our build process we have a cmd which executes the ts compiler on a build.ts as compiles the result to a single js.  I tested this locally as well and no problems","comments":2,"createdAt":1415971646000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1564426?v=3","loggedByName":"Davidhanson90","milestone":"","number":1161,"state":"closed","title":"Cannot initialize ActiveScript -  TypeScript 1.3 IE dependency? ","updatedAt":1416245217000},{"assignedTo":"","body":"It seems that the TypeScript compiler still produces JavaScript output when the .ts files contains errors:\r\n```\r\nfunction testFunc(x: string) {\r\n}\r\ntestFunc(1);\r\n```\r\n\r\nCompiling this file gives me an error message:\r\nE:/tmp/typescripttest/Errors.ts(3","comments":4,"createdAt":1412610359000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1724111?v=3","loggedByName":"kersam-bl","milestone":"Community","number":828,"state":"closed","title":"Do not create JavaScript files on errors","updatedAt":1416243293000},{"assignedTo":"","body":"Same name as csc.exe uses: [msdn](http://msdn.microsoft.com/en-us/library/406xhdz3.aspx)\r\nIssue #828\r\n\r\nFeedback appreciated but feel free to close when you don't want this functionality at this point :)","comments":16,"createdAt":1414258093000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":966,"state":"closed","title":"implemented treat warning as errors commandline option.","updatedAt":1416188563000},{"assignedTo":"","body":"Since VS2012 has the feature, so TypeScript should also have such an upgrade package for VS2012. Because it's too useful.","comments":1,"createdAt":1416118641000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6959154?v=3","loggedByName":"MaleDong","milestone":"","number":1175,"state":"closed","title":"TypeScript 1.3 and its later versions should also support VS2012","updatedAt":1416178411000},{"assignedTo":"","body":"For incremental parsing purposes, it's important that different pieces of syntax generate different AST nodes.  If we don't have that invariant, then when the incremental parser reuses a node, it may do so in a context where it would not be ok.  A go","comments":2,"createdAt":1416011254000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1169,"state":"closed","title":"Function and constructor types in the syntax tree.","updatedAt":1416014913000},{"assignedTo":"","body":"It seems to me, it's very inconvenient, that import declaration can't have none qualified symbol as target. By the reason I have to use next way to do this:\r\n```typescript\r\nclass S {}\r\n\r\nexport type SS = S;\r\nexport var SS = S;\r\n```\r\nMaybe, removing t","comments":0,"createdAt":1415991538000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2614981?v=3","loggedByName":"vlomshakov","milestone":"","number":1166,"state":"open","title":"Removing the qualified name restriction on import targets","updatedAt":1416011458000},{"assignedTo":"","body":"Handle '}' in string templates correctly","comments":1,"createdAt":1416004728000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1167,"state":"closed","title":"formatting: handle templates spans","updatedAt":1416011052000},{"assignedTo":"","body":"Two minor fixes to type guards.\r\n\r\nFirst, a fix to #1070. A type guard now has an effect only if the narrowed type is a subtype of the variable type.\r\n```typescript\r\nvar x: string | number;\r\nif (typeof x === \"boolean\") {\r\n    var b = x;  // x still o","comments":2,"createdAt":1415977182000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1163,"state":"closed","title":"Fixes to type guards","updatedAt":1416008167000},{"assignedTo":"sheetalkamat","body":"I just upgraded the eclipse-typescript develop branch to the latest code in TypeScript master and I'm no longer seeing declaration files get generated by getEmitOutput although the declaration option is specified in the CompilerOptions specified in t","comments":4,"createdAt":1415844542000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1081904?v=3","loggedByName":"derekcicerone","milestone":"","number":1139,"state":"closed","title":"Emit declaration files broken in master?","updatedAt":1416006839000},{"assignedTo":"","body":"","comments":1,"createdAt":1415920749000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1160,"state":"closed","title":"Default to 'unknown' for the template strings array type in pre-ES6 targets.","updatedAt":1415999261000},{"assignedTo":"vladima","body":"\r\n![trycatch](https://cloud.githubusercontent.com/assets/54468/4641530/04e2f5e6-5439-11e4-9661-a371d6ff935a.gif)\r\n\r\nThe wrong indent occur only when code editing, \"Format Documnent\" is ok.","comments":5,"createdAt":1413356514000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/54468?v=3","loggedByName":"heroboy","milestone":"TypeScript 1.4","number":895,"state":"closed","title":"try catch block indent is wrong when code editing.","updatedAt":1415995320000},{"assignedTo":"","body":"This PR adds implementation of code formatting that works atop of new tree. I would not suggest to review the code commit-by-commit as intermediate checkins here often contain non-relevant details that are ultimately removed in final implementation.","comments":0,"createdAt":1415603801000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1109,"state":"closed","title":"Formatting implementation using new tree","updatedAt":1415991757000},{"assignedTo":"","body":"See: https://typescript.codeplex.com/workitem/1542 by [danieljsinclair](https://www.codeplex.com/site/users/view/danieljsinclair)\r\n\r\n> I would like to see TypeScript become a fully fledged optimizing compiler producing minified, but optimized JavaScr","comments":6,"createdAt":1415889665000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/546954?v=3","loggedByName":"lbguilherme","milestone":"","number":1151,"state":"closed","title":"Optimizing Compiler","updatedAt":1415933167000},{"assignedTo":"","body":"","comments":3,"createdAt":1415761189000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1129,"state":"closed","title":"Parsing support (including incremental parsing) for 'yield' expressions.","updatedAt":1415925869000},{"assignedTo":"DanielRosenwasser","body":"Was typing, accidentally typed\r\n\r\n```TypeScript\r\nHarness.newLine = \"\\r\"\\n\r\n```\r\n\r\nand got this exception:\r\n\r\n```\r\n---------------------------\r\nAssertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue\r\n---------------------------\r\nError processing w","comments":0,"createdAt":1414536568000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.4","number":982,"state":"closed","title":"getCompletionsAtPosition with backslash-identifier following string","updatedAt":1415915745000},{"assignedTo":"DanielRosenwasser","body":"Hi,\r\n\r\n**VS**: 2013 Update 4 RC\r\n**TS**: 1.3\r\n\r\nI believe we used to get colour for `string` in the code below:\r\n```TypeScript\r\ninterface Foo<T> {\r\n}\r\n\r\ninterface Bar extends Foo<string> {\r\n}\r\n```\r\n\r\nGithub markdown does colour it, but I prefer writi","comments":2,"createdAt":1415878995000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":1147,"state":"closed","title":"Primitive type colourisation missing in specialisation of generic type","updatedAt":1415915550000},{"assignedTo":"DanielRosenwasser","body":"Hi,\r\n\r\n**VS**: 2013 Update 4 RC.\r\n**TS**: 1.3\r\n\r\nIn the code below:\r\n\r\n```TypeScript\r\nclass Foo {\r\n\r\n    constructor(\r\n        private bar: string\r\n        ) { }\r\n\r\n    getBar() {\r\n        return this.bar;\r\n    }\r\n}\r\n```\r\n\r\nright-clicking on the cons","comments":1,"createdAt":1415895983000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":1154,"state":"closed","title":"Refactor > Rename does not work correctly for private constructor properties","updatedAt":1415915524000},{"assignedTo":"","body":"```ts\r\nvar v = { public x() { } };\r\n```\r\n\r\nThe parser gives poor errors here because it does not recognize public as a modifier. This is a candidate for a cleaner error.","comments":1,"createdAt":1415908799000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1157,"state":"open","title":"Modifier error quality in object literals","updatedAt":1415913683000},{"assignedTo":"","body":"Hi,\r\n\r\n**VS**: 2013 Update 4 RC\r\n**TS**: 1.3\r\n\r\nThe completion list should be made available for the first case below:\r\n\r\n```TypeScript\r\ninterface Foo {\r\n    bar:string;\r\n    humbug: number;\r\n}\r\n\r\nvar foo = (): Foo => ({\r\n     b // No completion list","comments":3,"createdAt":1415880266000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":1149,"state":"closed","title":"Missing completion list for single-statement lambda functions","updatedAt":1415908527000},{"assignedTo":"","body":"I think this code is correct. but tsc 1.3.0 and master/HEAD not allowed. [Playground](http://goo.gl/fBwt1a)\r\n\r\n```\r\nenum Sample {\r\n  '\\t', // An enum number cannot have a numeric name.\r\n  ' ', // An enum number cannot have a numeric name.\r\n  '\\n', //","comments":4,"createdAt":1415861461000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"","number":1144,"state":"closed","title":"Unexpected error occured. enum can't contains StrWhiteSpace name.","updatedAt":1415898360000},{"assignedTo":"","body":"> The target \"PreComputeCompileTypeScript\" does not exist in the project.\r\n\r\nComplete error : \r\n\r\n```\r\nC:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v11.0\\TypeScript\\Microsoft.TypeScript.targets(121,34): error MSB4057: The target \"PreComputeC","comments":1,"createdAt":1415854643000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":1143,"state":"closed","title":"Getting error `The target \"PreComputeCompileTypeScript\" does not exist in the project.`","updatedAt":1415854954000},{"assignedTo":"sheetalkamat","body":"I've just come across a problem with `tsc` (version 1.1.0.0) which I've reduced to the following repro code. Suppose we have the following in `main.ts`:\r\n\r\n```typescript\r\nimport a = require('./main'); // doesn't matter what is required as long as tsc","comments":2,"createdAt":1415774706000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1252361?v=3","loggedByName":"yortus","milestone":"TypeScript 1.4","number":1130,"state":"closed","title":"Incorrectly elided import declaration (tsc 1.1)","updatedAt":1415839460000},{"assignedTo":"","body":"","comments":2,"createdAt":1415834052000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1136,"state":"closed","title":"Corrected token start position calculation and the nodeHasTokens predicate.","updatedAt":1415836063000},{"assignedTo":"","body":"","comments":0,"createdAt":1415308953000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1077,"state":"closed","title":"Type guard conformance","updatedAt":1415826549000},{"assignedTo":"","body":"Fixes #1130","comments":2,"createdAt":1415778635000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1132,"state":"closed","title":"Fix the incorrect eliding of import declaration","updatedAt":1415816358000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\n////module M {\r\n////    export interface /*1*/__proto__ {}\r\n////}\r\n////var /*2*/__proto__: M.__proto__;\r\n/////*3*/\r\n////var /*4*/fun: (__proto__: any) => boolean;\r\n```\r\n\r\ngoTo.marker('3');\r\nverify.completionListContains(\"__proto__\", \"(","comments":0,"createdAt":1412719387000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.4","number":850,"state":"closed","title":"__proto__ is not in completion list correctly","updatedAt":1415775878000},{"assignedTo":"sheetalkamat","body":"In tests/cases/compiler/protoAsIndexInIndexExpression_1.ts:\r\n\r\n```TS\r\nvar o = {\r\n    \"__proto__\": 0\r\n};\r\n>o : {}\r\n>{    \"__proto__\": 0} : {}\r\n```\r\n\r\nShould be `{ \"__proto__\": number; }` instead of `{}`.","comments":0,"createdAt":1409097017000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.4","number":548,"state":"closed","title":"[typeBaselines] __proto__ property not respected in object literal","updatedAt":1415775864000},{"assignedTo":"","body":"Fixes #548  and #850 ","comments":1,"createdAt":1415750308000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1128,"state":"closed","title":"Fix services and compiler to handle __proto","updatedAt":1415775844000},{"assignedTo":"","body":"With this PR, we now support\r\n\r\n* Overload resolution when the tag of a tagged template has multiple signatures.\r\n* Type argument inference when performing overload resolution on a signature.","comments":1,"createdAt":1415241412000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1072,"state":"closed","title":"Type checking for tagged template expressions","updatedAt":1415742866000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\ndeclare class m3f { foo(x: number): void }\r\nmodule m3f { export interface I { foo(): void } }\r\nvar x: m3f./*completionListHere*/\r\n```\r\nNotice that it contains foo in the completion list but it shouldn't have it","comments":0,"createdAt":1412632994000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.4","number":837,"state":"closed","title":"Completion list of augmented type contains method of class incorrectly","updatedAt":1415742392000},{"assignedTo":"","body":"...alse, because it is namespace position and not type position\r\n\r\nFixes #837","comments":2,"createdAt":1415675994000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1124,"state":"closed","title":"If we are comparing left hand side for is position of type node, it is f...","updatedAt":1415742373000},{"assignedTo":"","body":"This is the style i would like to use for 'YieldExpressions' as it will save an enormous amount of effort trying to pass along the 'allowYield' flag everywhere. ","comments":1,"createdAt":1415675332000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1123,"state":"closed","title":"Keep track of 'disallowIn' as an ambient parser flag instead of having to pass it along everywhere.","updatedAt":1415694929000},{"assignedTo":"","body":"The grammar for TypeArguments is ambiguous\r\n\r\n```js\r\nf < g > ( h )\r\n```\r\n\r\nCan either be treated as RelationalExpression or a CallExpression.\r\n\r\n","comments":6,"createdAt":1415673822000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/45845?v=3","loggedByName":"arv","milestone":"","number":1121,"state":"closed","title":"Type Argument Lists grammar is ambiguous","updatedAt":1415684826000},{"assignedTo":"","body":"","comments":0,"createdAt":1415048926000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1043,"state":"closed","title":"Lookup typealias in enclosing declaration when writing type","updatedAt":1415674031000},{"assignedTo":"","body":"","comments":1,"createdAt":1415660429000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1116,"state":"closed","title":"Consolidate normalizing slashes from harness to use it from typescript core.ts ","updatedAt":1415665691000},{"assignedTo":"","body":"Fixed by 5acc1a1bd21e7aafb3bd5066969af6a7ddfd547b\r\nTests #982","comments":1,"createdAt":1415661266000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1118,"state":"closed","title":"Test case for completion list at backslash following string","updatedAt":1415663798000},{"assignedTo":"","body":"These changes move the existing fidelity syntax model closer to the new AST model.  Specifically, it moves away from having both leading and trailing trivia on tokens (like Roslyn) and only has leading trivia.  Also, it simplifies how skipped tokens ","comments":1,"createdAt":1415521877000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1105,"state":"closed","title":"Trailing trivia","updatedAt":1415663550000},{"assignedTo":"sheetalkamat","body":"![paramhelpofsignature](https://cloud.githubusercontent.com/assets/8052792/4961659/524fc69c-66d1-11e4-9933-21e2af0e747a.gif)\r\n\r\nSee the last character of parameter info isn't highlighted.\r\n\r\nAlso while looking at the code getSignatureAtPosition it is","comments":1,"createdAt":1415401188000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1096,"state":"closed","title":"Signature help of parameter doesnt highlight parameter correctly in Dev12","updatedAt":1415661496000},{"assignedTo":"","body":"```ts\r\nclass C {\r\n    x;\r\n}\r\nclass D extends C {\r\n    /* start here*/x;\r\n}\r\n\r\nvar c: C;\r\nvar d: D;\r\nc.x; // This one should be excluded\r\nd.x;\r\n```\r\n\r\nFind all references from the definition of D.x includes the reference c.x, but it should not. It is ","comments":7,"createdAt":1415414056000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":1099,"state":"open","title":"Find all references includes base member references for override members","updatedAt":1415661496000},{"assignedTo":"","body":"Handles #1096","comments":0,"createdAt":1415661015000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":1117,"state":"closed","title":"set the correct range for paramters in signature help","updatedAt":1415661113000},{"assignedTo":"","body":"Hi.\r\n\r\nI have updated my typescript (`npm install typescript -g`) recently and now I have an issue with some multiple references to the same file.\r\n\r\nIt worked fine under TS 1.0.\r\n\r\n**shared/app/Sails.ts**:\r\n```ts\r\n///<reference path='./lib/def/defLo","comments":4,"createdAt":1415558895000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3807458?v=3","loggedByName":"Vadorequest","milestone":"","number":1107,"state":"closed","title":"Circular references with TS 1.1.0-1 and 1.3 when loading file from another directory","updatedAt":1415652500000},{"assignedTo":"","body":"Perhap it is possible to manage variables on reference tag, and specify it on compiler options.\r\nFiles like this for exemple:\r\n\r\n```\r\n/// <reference path=\"{pathProjectA}/Foo.ts\" />\r\n/// <reference path=\"{pathProjectB}/Bar.ts\" />\r\n```\r\n\r\nwith compiler","comments":3,"createdAt":1414000457000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/49169?v=3","loggedByName":"TimDumol","milestone":"","number":941,"state":"closed","title":"Absolute root path for reference / import","updatedAt":1415652309000},{"assignedTo":"","body":"VMs start in seconds! (so much better than waiting 30-120 seconds)","comments":6,"createdAt":1415325655000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8701?v=3","loggedByName":"joshk","milestone":"","number":1085,"state":"closed","title":"Use the new beta build env on Travis","updatedAt":1415650811000},{"assignedTo":"sheetalkamat","body":"![image](https://cloud.githubusercontent.com/assets/6685088/4710060/26c95108-58a5-11e4-87d2-2487bd179cce.png)\r\n\r\nExpected: `n` should be in the completion list\r\nActual: it's empty","comments":2,"createdAt":1413842956000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.4","number":929,"state":"closed","title":"Missing completion list entries for unions of typeof","updatedAt":1415646786000},{"assignedTo":"","body":"Example implementation for #684 \r\n\r\nNot for merging, only discussion.\r\n\r\nTODO:\r\n- ~~Implement compiler flag.~~ Done.\r\n- ~~Use compiler flag to selectively turn on new codegen.~~ Done.\r\n- Only generate __symbol declaration when the current sourceFile ","comments":8,"createdAt":1410917451000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":685,"state":"closed","title":"Implement private variables, getter/setters and methods using Symbols","updatedAt":1415617970000},{"assignedTo":"","body":"This time I checked that it was in the `ts` namespace and not the `TypeScript` namespace ;)","comments":1,"createdAt":1415460834000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":1103,"state":"closed","title":"Removed some unused variables","updatedAt":1415598353000},{"assignedTo":"","body":"Just noticed that `getCompletionEntriesFromSymbols` and `isCompletionListBlocker` where using the semanticStart time instead of the real start time.","comments":1,"createdAt":1415460077000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":1102,"state":"closed","title":"Fixed some methods using the wrong start time","updatedAt":1415598179000},{"assignedTo":"","body":"Hi,\r\n  I asked this in SO bu I had no answer\r\nhttp://stackoverflow.com/questions/26807212/cannot-write-an-angular-ui-typeahed-handler-with-typescript\r\n\r\n  How can I write this kind of handler?\r\n  This is the sample from the angular ui page\r\n\r\n $scope","comments":3,"createdAt":1415419444000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/127777?v=3","loggedByName":"lucamorelli","milestone":"","number":1100,"state":"closed","title":"how to write an angular ui typeahead handler","updatedAt":1415450335000},{"assignedTo":"","body":"```ts\r\nfunction f(): number {\r\n    return (() => {\r\n         return \"\";\r\n    })();\r\n}\r\n```\r\n\r\nThe whole lambda is squiggled. We should have logic to determine the best span for error reporting, given a node.","comments":0,"createdAt":1415409644000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1097,"state":"open","title":"Error span is on entire return expression for incompatible return type","updatedAt":1415409644000},{"assignedTo":"","body":"Fixes #1046.","comments":2,"createdAt":1415396039000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1094,"state":"closed","title":"Corrected isExpression for templates.","updatedAt":1415406262000},{"assignedTo":"","body":"This is an initial re-factoring of pre-process files by moving preProcessFile from preCompile.ts into services.ts and use new scanner to perform the tasks. Couple more clean-up and re-factoring are still needed as indicated in TODO comments and they ","comments":1,"createdAt":1414192800000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":959,"state":"closed","title":"Refactor ref files path","updatedAt":1415395843000},{"assignedTo":"sheetalkamat","body":"The following code causes a crash:\r\n\r\n```TS\r\nimport q\r\n```\r\n\r\nPut the cursor on the right side of the q\r\n\r\nTypeError: Unable to get property 'flags' of undefined or null reference\r\n   at buildSymbolDisplay (:9938:17)\r\n   at Anonymous function (:32940","comments":1,"createdAt":1414617413000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.4","number":991,"state":"closed","title":"Crash in getCompletionEntryDetails on an import declaration","updatedAt":1415393881000},{"assignedTo":"","body":"...mbol display name when import declaration is incomplete\r\n\r\nFixes #991","comments":1,"createdAt":1415331459000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1089,"state":"closed","title":"Block completion list on import declaration name and fix the crash in sy...","updatedAt":1415393872000},{"assignedTo":"","body":"Currently navigation using VS commands ends at interfaces. A \"navigate to implementation(s)\" action on function definitions would be great.","comments":1,"createdAt":1415386707000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9205389?v=3","loggedByName":"chrmarti","milestone":"","number":1093,"state":"open","title":"Offer to navigate to implementation(s) of a function","updatedAt":1415393624000},{"assignedTo":"","body":"Fixes #891","comments":1,"createdAt":1415328655000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1086,"state":"closed","title":"Fix the line preservation between jsdoc comments while displaying it","updatedAt":1415392345000},{"assignedTo":"sheetalkamat","body":"Steps to repro:\r\n\r\n1. New file\r\n2. Type '@'\r\n3. Type a letter\r\n4. See this\r\n\r\n```\r\n---------------------------\r\nAssertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue\r\n---------------------------\r\nError processing work item: \r\n\r\nAction descriptio","comments":0,"createdAt":1415228409000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.4","number":1069,"state":"closed","title":"Auto-complete crashes when preceded by a '@'","updatedAt":1415391116000},{"assignedTo":"sheetalkamat","body":"Action description:\r\ngetCompilerOptionsDiagnostics()\r\n\r\nScript callstack:\r\nTypeError: Unable to get property 'filename' of undefined or null reference\r\n   at realizeDiagnosticWithFileName (:36811:13)\r\n   at Anonymous function (:36851:50)\r\n   at Anony","comments":0,"createdAt":1414604657000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.4","number":988,"state":"closed","title":"Crash in getCompilerOptionsDiagnostics ","updatedAt":1415387897000},{"assignedTo":"","body":"... compiler options do not have file name\r\n\r\nFixes #988","comments":1,"createdAt":1415329303000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1087,"state":"closed","title":"Fix the crash in getCompilerOptionsDiagnostics by not using file name as...","updatedAt":1415387884000},{"assignedTo":"","body":"Fixes #1069","comments":1,"createdAt":1415332279000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1090,"state":"closed","title":"Fix the crash in completion entry by fixing the unknown token check","updatedAt":1415387821000},{"assignedTo":"","body":"...e of module\r\n\r\nFixes #929","comments":1,"createdAt":1415330323000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1088,"state":"closed","title":"Fix the union property kind if the property is union of exported variabl...","updatedAt":1415387776000},{"assignedTo":"mhegazy","body":"* take a classifier TypeScript ships (ts.createClassifier)\r\n* feed this string to it ```'if(a){}/a/.test(\\'a\\')'```\r\n* > the regexp ```/a/``` isn't detected as such","comments":1,"createdAt":1414770658000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"TypeScript 1.4","number":1013,"state":"closed","title":"classifier misses regular expression","updatedAt":1415386644000},{"assignedTo":"","body":"After testing the 1.1 CTP I had some issues when using the IDBKeyRange. To clarify I start with explaining what was in 1.0 and what changed in 1.1\r\n\r\n    // Definition as defined in TypeScript 1.0\r\n    interface IDBKeyRange {\r\n        upper: any;\r\n  ","comments":4,"createdAt":1415311725000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":1078,"state":"closed","title":"VS2013 lib.d.ts issue","updatedAt":1415380067000},{"assignedTo":"","body":"Adds /* falls through */ in case statement, if `break` missing. \r\n\r\nTests not included ( working on )\r\nhttps://github.com/Microsoft/TypeScript/issues/393\r\n\r\nI am trying to build in `jake local'  and 'jake tests' getting an error error TS6053: File 'D","comments":4,"createdAt":1415332348000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1100608?v=3","loggedByName":"dekajp","milestone":"","number":1091,"state":"closed","title":"Issue#393 ","updatedAt":1415357993000},{"assignedTo":"","body":"Fixes #927","comments":2,"createdAt":1415316249000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1079,"state":"closed","title":"Show narrowed type in quickInfo/completion entry","updatedAt":1415323191000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nvar x: string|number;\r\nif (typeof x === \"number\") {\r\n    x; // <- quick info here should be \"number\" and not \"string|number\"\r\n}\r\n```","comments":0,"createdAt":1413837145000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.4","number":927,"state":"closed","title":"QuickInfo not showing narrowed-down type inside type guards","updatedAt":1415323121000},{"assignedTo":"sheetalkamat","body":"The following allows Test.ts to export class C even though method \"foo\" requires a parameter of type \"B\" which cannot be instantiated from outside of Test.ts. This compiles without error under both the 1.1 and 1.0.1 compilers. \r\n\r\nTest.ts:\r\n```\r\nmodu","comments":6,"createdAt":1414090019000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2698576?v=3","loggedByName":"meirgottlieb","milestone":"TypeScript 1.4","number":950,"state":"closed","title":"Export assignment of alias allows export of class which uses inaccessible type","updatedAt":1415321243000},{"assignedTo":"","body":"","comments":1,"createdAt":1415144320000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1058,"state":"closed","title":"Contextual union type conformance test cases and Fix for contextual union signature","updatedAt":1415319940000},{"assignedTo":"","body":"","comments":1,"createdAt":1415317268000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1080,"state":"closed","title":"Breakpoint type alias","updatedAt":1415319896000},{"assignedTo":"","body":"","comments":1,"createdAt":1415317824000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1081,"state":"closed","title":"Breakpoint validation for Let and cost","updatedAt":1415319883000},{"assignedTo":"sheetalkamat","body":"Fourslash test\r\n```ts\r\n////var y: Array<string>|Array<number>;\r\n////y.map/**/(\r\n\r\ngoTo.marker();\r\ndebug.printCompletionListMembers();\r\nverify.completionEntryDetailIs('map', 'tbd');\r\n```\r\n\r\nStack:\r\n```\r\n     TypeError: Cannot read property 'target' of","comments":0,"createdAt":1413840671000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.4","number":928,"state":"closed","title":"Crash in getCompletionEntryDetails with union type","updatedAt":1415319866000},{"assignedTo":"","body":"Do not classify the union of methods as method if the union wouldn't contain any call signatures\r\nFixes #928 ","comments":1,"createdAt":1415047647000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1040,"state":"closed","title":"Completion entry details of union of methods with no call signature","updatedAt":1415319849000},{"assignedTo":"","body":"Adds the tests for #1018","comments":1,"createdAt":1415048381000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1041,"state":"closed","title":"Declaration file emit for private method overloads ","updatedAt":1415314446000},{"assignedTo":"","body":"This adds a type for ComputedPropertyName from ES6, and the necessary type modification in the compiler's Node hierarchy.","comments":3,"createdAt":1415241141000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":1071,"state":"closed","title":"Change name of Declaration node to be Identifier | ComputedPropertyName","updatedAt":1415304348000},{"assignedTo":"","body":"Spec says:\r\n```\r\nâ¢\tA type guard of the form typeof x === s, where s is a string literal with the value âstringâ, ânumberâ, or âbooleanâ,\r\no\twhen true, narrows the type of x to the given primitive type, or\r\no\twhen false, removes the primitive type fro","comments":3,"createdAt":1415238754000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1070,"state":"open","title":"typeof numOrBool === \"string\" && numOrBool shouldnt narrow the type to numOrBool?","updatedAt":1415300869000},{"assignedTo":"","body":"Consider below sample:\r\n```TypeScript\r\nvar str: string;\r\nvar num: number;\r\nvar strOrNumber: string | number = str || num;\r\nvar objStr: { prop: string };\r\nvar objNum: { prop: number };\r\nvar objStrOrNum1: { prop: string } | { prop: number } = objStr ||","comments":3,"createdAt":1415135207000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":1055,"state":"open","title":"Consider assignability of object literal to union type","updatedAt":1415298837000},{"assignedTo":"","body":"","comments":3,"createdAt":1414221744000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1058243?v=3","loggedByName":"jedmao","milestone":"","number":963,"state":"closed","title":"Add CodeClimate badges to readme","updatedAt":1415297860000},{"assignedTo":"","body":"","comments":1,"createdAt":1415295220000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1076,"state":"closed","title":"Skipped tokens","updatedAt":1415295270000},{"assignedTo":"","body":"There is only one listed [breaking change](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#changes-between-10-and-11) in the wiki. But there are obviously a lot of breaking changes; updating from 1.0 to 1.1 causes all sorts of new error","comments":8,"createdAt":1412623009000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"","number":834,"state":"closed","title":"1.1 missing release notes/breaking changes","updatedAt":1415289795000},{"assignedTo":"","body":"The type checker seems fine with this use of a generic type in a function parameter:\r\n\r\n```typescript\r\nfunction callMe<T>(value: T, fn: (value: T) => void) : void {\r\n  fn(value);\r\n}\r\n\r\n// No error!\r\ncallMe(17, (n: string) => console.log(n) );\r\n```\r\n\r","comments":4,"createdAt":1415244918000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/333045?v=3","loggedByName":"deplinenoise","milestone":"","number":1073,"state":"closed","title":"Generic function parameters seem to ignore typecheck","updatedAt":1415289040000},{"assignedTo":"jonathandturner","body":"I love this Typescript language. It makes me so productive.\r\nI am  switching now to generics, and I had a hard time understanding something which later seemed to be wrong.\r\n\r\nhttp://www.typescriptlang.org/Handbook#generics-generic-constraints\r\n\r\n    ","comments":2,"createdAt":1413207522000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3601079?v=3","loggedByName":"MikaelMayer","milestone":"TypeScript 2.0","number":882,"state":"closed","title":"Handbook 2 errors","updatedAt":1415268343000},{"assignedTo":"","body":"","comments":3,"createdAt":1415171268000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1065,"state":"closed","title":"Add support for parsing shorthand property assignments.","updatedAt":1415256823000},{"assignedTo":"","body":"","comments":0,"createdAt":1415219202000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1067,"state":"closed","title":"Removed duplicate diagnostic message.","updatedAt":1415220537000},{"assignedTo":"","body":"Fix for issue #858. Updated the baselines associated with incrementing and decrementing enum types as well.  \r\n\r\nThis fix is a pretty simple but would it make more sense to add a new SyntaxKind for EnumAccess? I haven't looked too deeply into this bu","comments":12,"createdAt":1413136024000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/880843?v=3","loggedByName":"chrisbubernak","milestone":"","number":877,"state":"closed","title":"Fix for issue #858 (disallow incrementing/decrementing the value of enum)","updatedAt":1415212785000},{"assignedTo":"","body":"","comments":8,"createdAt":1415151473000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":1060,"state":"closed","title":"Classify keywords in type args in the absence of syntactic classification","updatedAt":1415177873000},{"assignedTo":"","body":"","comments":0,"createdAt":1415169731000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1063,"state":"closed","title":"Node cleanup","updatedAt":1415170993000},{"assignedTo":"","body":"[Discovered by @chrisbubernak](https://github.com/Microsoft/TypeScript/pull/841#issuecomment-58402135)\r\n\r\n```TypeScript\r\nenum E {\r\n    A\r\n}\r\n\r\n--E.A; //error: \"The operand of an increment or decrement operator must be a variable, property or indexer.","comments":1,"createdAt":1412793590000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":858,"state":"closed","title":"No error for incrementing/decrementing value of an enum member when indexed","updatedAt":1415169962000},{"assignedTo":"ahejlsberg","body":"Hi, don't understand why this code doesn't compile:\r\n\r\n```javascript\r\nfunction f<T>(value: [string, T]): T {\r\n  return value[1];\r\n}\r\nvar h: boolean = f([\"string\", true]);\r\n````\r\n\r\n```\r\nerror TS2323: Type 'string | boolean' is not assignable to type '","comments":5,"createdAt":1414749176000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1011289?v=3","loggedByName":"srenault","milestone":"TypeScript 1.4","number":1011,"state":"closed","title":"Mixing tuple & generics","updatedAt":1415149772000},{"assignedTo":"","body":"This PR changes type inference to consider inferences made *to* a type parameter in a union type secondary to inferences made directly *to* that same type parameter. See the discussion on #1011 for further details.","comments":1,"createdAt":1414970247000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1035,"state":"closed","title":"Improved type inference (fixes #1011)","updatedAt":1415149771000},{"assignedTo":"vladima","body":"Consider the following enum definition:\r\n\r\n```\r\nenum Flags {\r\n\tA = 1,\r\n\tB = 2,\r\n\tC = A | B // Should be constant folded to 3.\r\n}\r\n```\r\n\r\nIn most cases, JS engines can optimize simple expressions like these. But they can't do much about accesses to `F","comments":5,"createdAt":1413667988000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/311082?v=3","loggedByName":"mbebenita","milestone":"","number":917,"state":"closed","title":"Constant fold enum member initializers.","updatedAt":1415148681000},{"assignedTo":"","body":"There are still few regular enums lurking around in services layer like `TokenClass` or `MatchKind` - existing code uses reverse mapping. Since these enums are small - we can keep them.\r\n\r\nDiff in size between LKG (compiler that support const enums) ","comments":6,"createdAt":1415086570000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1049,"state":"closed","title":"Convert majority of enums in compiler to const enums","updatedAt":1415132920000},{"assignedTo":"","body":"I ran into an issue in Visual Studio when using an NPM module written in TypeScript, that has a definitions file bundled, created by [dts-bundle](https://github.com/TypeStrong/dts-bundle). It boils down to this example:\r\n\r\ndefinitions.ts:\r\n``` typesc","comments":1,"createdAt":1415094432000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6125444?v=3","loggedByName":"stkb","milestone":"","number":1052,"state":"closed","title":"Error in Visual Studio with functions exported from nested modules","updatedAt":1415129914000},{"assignedTo":"","body":"Per #947, we currently require a ```return``` expression in a non-void returning function unless the first and only expression is a ```throw``` statement. This is basically an exemption to allow for ```throw new Exception('Not Yet Implemented')```. I","comments":1,"createdAt":1415048907000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":1042,"state":"open","title":"Loosen restriction on requiring return expressions when a throw is used instead","updatedAt":1415129572000},{"assignedTo":"","body":"","comments":0,"createdAt":1415093926000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1051,"state":"closed","title":"Update syntax nodes.","updatedAt":1415096015000},{"assignedTo":"","body":"With all these micro ops, incemental parsing perf is down to about 1ms on average while parsing large files (~500k)","comments":0,"createdAt":1415093021000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1050,"state":"closed","title":"More incremental perf tweaks.","updatedAt":1415093274000},{"assignedTo":"","body":"","comments":0,"createdAt":1415070003000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1047,"state":"closed","title":"Make ISyntaxElement.parent non-optional","updatedAt":1415074134000},{"assignedTo":"","body":"","comments":1,"createdAt":1415068407000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1045,"state":"closed","title":"Encode child counts as an array, not as a switch.","updatedAt":1415069185000},{"assignedTo":"","body":"... every file in the project.","comments":2,"createdAt":1415056416000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1044,"state":"closed","title":"Treat getTodoComments as a semantic operation since it will be called on...","updatedAt":1415057320000},{"assignedTo":"","body":"* use the classifier (ts.createClassifier)\r\n* feed this as a string into it (note that it misses a quote) ```'a multiline string```\r\n* > the final lex state is 0 (Start) but it should be InSingleQuotedString","comments":1,"createdAt":1414771043000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"","number":1014,"state":"closed","title":"classifier doesn't handle open string literals correctly","updatedAt":1415056836000},{"assignedTo":"","body":"PR #979 added support to access a source file via the language service. However, it doesn't sync with its host so that you might end up with a stale source file.","comments":0,"createdAt":1414681359000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"","number":999,"state":"closed","title":"LanguageService#getSourceFile doesn't sync with host","updatedAt":1415056394000},{"assignedTo":"JsonFreeman","body":"A followup bug to pull request #1017.\r\n\r\nThis example is adapted from tests/cases/compiler/typeComparisonCaching.ts:\r\n```ts\r\ninterface A<T> {\r\n   p: A<C<T>>;\r\n   s: C<T>;\r\n}\r\n\r\ninterface B<U> {\r\n   p: B<D<U>>;\r\n   s: D<U>;\r\n}\r\n\r\ninterface C<T> {\r\n   ","comments":0,"createdAt":1414990745000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 2.0","number":1036,"state":"open","title":"Incorrect caching of infinitely expanding comparisons","updatedAt":1415056047000},{"assignedTo":"","body":"In a new MVC project I am using the DefinitelyTyped library for jquery.dataTables\r\n\r\nhttps://github.com/borisyankov/DefinitelyTyped/tree/master/jquery.dataTables\r\nhttp://www.datatables.net/\r\n\r\nIf I define a new dataTable as such\r\n\r\n    $(\"table\").dat","comments":1,"createdAt":1415024401000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1367096?v=3","loggedByName":"oceanexplorer","milestone":"","number":1038,"state":"closed","title":"Intellisense not working on nested objects - Visual Studio 2013 Update 3","updatedAt":1415056012000},{"assignedTo":"vladima","body":"Currently accessing enum members is inlined only if enum member initializer is numeric constant value, computed members are never inlined (note that this aspect is not covered by the spec so alternative TypeScript implementations or future version of","comments":0,"createdAt":1414899239000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1029,"state":"closed","title":"Const enums","updatedAt":1415052639000},{"assignedTo":"","body":"","comments":9,"createdAt":1414367091000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":970,"state":"closed","title":"Const enums","updatedAt":1415052638000},{"assignedTo":"","body":"I thought that TypeScript ignores the requirement to return a value if an exception is thrown, as in the following code that compiles fine:\r\n\r\n```\r\nfunction n() : number {\r\n    throw 'help';\r\n}\r\n```\r\n\r\nBut when using a Q.Promise with a specific type,","comments":4,"createdAt":1414075358000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/940931?v=3","loggedByName":"psnider","milestone":"","number":947,"state":"closed","title":"v1.1.0.0 issues TS2345 if Q.Promise.then.onReject throws without a return","updatedAt":1415048924000},{"assignedTo":"ahejlsberg","body":"Steps:\r\n\r\n1. Save this png as a zip file and unpack it:\r\n![tsc_infinite_loop zip](https://cloud.githubusercontent.com/assets/1578115/4846978/73e4fcf6-604f-11e4-9319-893cb119ae17.png)\r\n\r\n2. Compile `./tsc_infinite_loop/src/client/app/Bind.ts` with the","comments":10,"createdAt":1414685897000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1578115?v=3","loggedByName":"bparadie","milestone":"TypeScript 1.4","number":1002,"state":"closed","title":"Infinite loop in tsc 1.1.0-1 when compiling code that uses rxjs typings.","updatedAt":1415044888000},{"assignedTo":"","body":"If you have a TypeScript file with only interfaces, the compiled file comes up blank (ok).\r\n\r\nThoughts on keeping metadata so it's available at runtime?\r\n\r\ninterfaces.ts:\r\n```javascript\r\ninterface iData_Type {\r\n\tgetTypeCode(): string\r\n\tgetTypeValue()","comments":4,"createdAt":1414699438000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/199519?v=3","loggedByName":"jbondc","milestone":"","number":1005,"state":"closed","title":"Runtime metadata, introspection?","updatedAt":1415044812000},{"assignedTo":"","body":"module1.ts:\r\n```\r\n/// <reference path=\"./module2\"/>\r\n\r\nmodule A {\r\n\r\n    export class A {\r\n\r\n    }\r\n}\r\n```\r\n\r\nmodule2.ts:\r\n```\r\nmodule A {\r\n\r\n    export class B {\r\n\r\n    }\r\n}\r\n```\r\n\r\ncommand-line:\r\n```\r\nnode tsc module1 --out module1.js --declaration","comments":2,"createdAt":1414610999000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2698576?v=3","loggedByName":"meirgottlieb","milestone":"","number":989,"state":"closed","title":"Crash when generating declaration file for file that includes reference without .ts extension","updatedAt":1415043830000},{"assignedTo":"vladima","body":"Spec updated in PR #998\r\nImplementation in PR #957","comments":0,"createdAt":1414691599000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.4","number":1004,"state":"closed","title":"Spec conformance validation for type aliases","updatedAt":1415040974000},{"assignedTo":"","body":"Covers #1004 ","comments":1,"createdAt":1414964207000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1033,"state":"closed","title":"Type aliases conformance tests","updatedAt":1415040971000},{"assignedTo":"","body":"Added a special version of getSourceFile for language service users. It makes sure that (a) the language service is in sync with its host and (b) that the file name uses normalized slashes.","comments":8,"createdAt":1414682103000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1794099?v=3","loggedByName":"jrieken","milestone":"","number":1000,"state":"closed","title":"fix for issue #999","updatedAt":1415038466000},{"assignedTo":"","body":"As suggested in PR #822, error messages for Tuple type is unclear in explaining why certain tuple can be assigned to array. It will be helpful for users to get messages which provide more directed information.","comments":0,"createdAt":1412613259000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"Community","number":830,"state":"open","title":"Better error message for invalid assignment of tuples to arrays","updatedAt":1415038411000},{"assignedTo":"jonathandturner","body":"I have just been reading the Typescript handbook (http://www.typescriptlang.org/Handbook) and I noted down some typos.\r\n\r\nPlease fix these to make the handbook easier to read (Use CTRL-F in firefox to find the problem text):\r\n\r\n**Problem:** The 'prin","comments":2,"createdAt":1414778395000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1428731?v=3","loggedByName":"Dretch","milestone":"","number":1019,"state":"closed","title":"Typos in the handbook","updatedAt":1415035673000},{"assignedTo":"jonathandturner","body":"Under the Classes -> Inheritance section of the [handbook](http://www.typescriptlang.org/Handbook) the row:\r\n    `tom.move(34);`\r\nis confusing since it doesn't result in \"tom\" moving 34 meters. The \"Horse\" class has overridden the move method from th","comments":4,"createdAt":1410523195000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3637648?v=3","loggedByName":"strille","milestone":"TypeScript 1.4","number":664,"state":"closed","title":"Confusing sample code in Handbook","updatedAt":1415035525000},{"assignedTo":"","body":"...the tree for them.","comments":0,"createdAt":1414999647000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1037,"state":"closed","title":"Speed up incremental parsing by caching child tokens instead of walking ...","updatedAt":1415005155000},{"assignedTo":"ahejlsberg","body":"Spec [3.9 Type Aliases](https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#39-type-aliases) states:\r\n> The Identifier of a type alias declaration may not be one of the predefined type names (section 3.7.1).\r\n\r\nwhere predefined type names","comments":1,"createdAt":1414911270000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":1030,"state":"closed","title":"Predefined names in type aliases","updatedAt":1414947536000},{"assignedTo":"","body":"Fixes #1030.","comments":1,"createdAt":1414940527000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1032,"state":"closed","title":"Type alias cannot have reserved type name (#1030)","updatedAt":1414947536000},{"assignedTo":"","body":"","comments":2,"createdAt":1414882080000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1026,"state":"closed","title":"Minor updates to Type Aliases section","updatedAt":1414940951000},{"assignedTo":"","body":"This is the incremental parsing side of the template parsing work.","comments":0,"createdAt":1414920114000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1031,"state":"closed","title":"Add support for parsing template expressions.","updatedAt":1414921000000},{"assignedTo":"","body":"","comments":0,"createdAt":1414886074000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1028,"state":"closed","title":"Remove abstract syntax tree generation support from fidelity.","updatedAt":1414888261000},{"assignedTo":"","body":"","comments":0,"createdAt":1414884042000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1027,"state":"closed","title":"Use a flat list for separated syntax lists.","updatedAt":1414884605000},{"assignedTo":"","body":"I need to append a method to Array.prototype such as  \r\n\r\n```\r\nArray.prototype.first = function(){\r\n    //blablabla\r\n}\r\n\r\n```\r\n\r\n\r\nHow to write this ``` .d.ts``` file .\r\n\r\nThanks all ","comments":2,"createdAt":1414825635000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2238280?v=3","loggedByName":"WanderWang","milestone":"","number":1023,"state":"closed","title":"How to append method to Array.prototype with .d.ts","updatedAt":1414881476000},{"assignedTo":"","body":"This PR removes the (artificial) restriction that type aliases can't reference object type literals. See #998 for the full discussion.","comments":1,"createdAt":1414854976000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1025,"state":"closed","title":"Allow type aliases for object type literals","updatedAt":1414881336000},{"assignedTo":"","body":"...fault so as to not affect clients that call for-in","comments":2,"createdAt":1414805464000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1022,"state":"closed","title":"When augmenting Array.prototype, make the functions non-enumerable by de...","updatedAt":1414806934000},{"assignedTo":"","body":"","comments":0,"createdAt":1414793016000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1021,"state":"closed","title":"Move back to how we used to walk trees for incremental parsing perf.","updatedAt":1414794707000},{"assignedTo":"","body":"Fixes #1002.","comments":1,"createdAt":1414776137000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":1017,"state":"closed","title":"Fix type relation caching","updatedAt":1414791461000},{"assignedTo":"","body":"I am trying to word around missing abstract methods in TypeScript. The code below is valid (per [playground](http://www.typescriptlang.org/Playground#src=class%20A%3Ca%3E%20%7B%0D%0A%09%0D%0A%09public%20doThat()%20%7B%20throw%20new%20Error('Abstract%","comments":2,"createdAt":1414787124000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":1020,"state":"closed","title":"Injecting the abstract (virtual) methods.","updatedAt":1414788330000},{"assignedTo":"","body":"The following two independent examples are currently silent problems (no errors). It can be helpful if TypeScript reports them as warnings or errors:\r\n\r\n    function foo1() { var bar = bar + '.'; }\r\n\r\n    function foo2() { bar = 1; var bar; }\r\n\r\nDesp","comments":6,"createdAt":1414648448000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8186628?v=3","loggedByName":"stanvass","milestone":"","number":996,"state":"closed","title":"Assignment to self or use before first declaration should be an error.","updatedAt":1414752947000},{"assignedTo":"","body":"","comments":0,"createdAt":1414708522000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1010,"state":"closed","title":"Removing unused code.","updatedAt":1414710326000},{"assignedTo":"","body":"","comments":0,"createdAt":1414707009000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1008,"state":"closed","title":"Move away from separate syntax kinds for binary and unary expressions.","updatedAt":1414708532000},{"assignedTo":"","body":"","comments":0,"createdAt":1414702857000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":1006,"state":"closed","title":"Improve walking speed in Fidelity.","updatedAt":1414706694000},{"assignedTo":"","body":"","comments":1,"createdAt":1414657823000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":997,"state":"closed","title":"Adding support in fidelity for parsing union and parenthesized types","updatedAt":1414698693000},{"assignedTo":"","body":"","comments":1,"createdAt":1414647833000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":995,"state":"closed","title":"Remove nulls from the syntax layer.","updatedAt":1414697625000},{"assignedTo":"","body":"this in in regards to the TypeAliasDeclaration now in master.\r\n```ts\r\n    export type EntityName = Identifier | QualifiedName;\r\n```\r\nI noticed that the type alias is expanded in the rest of the declaration file produced.  I'm unclear if this is a pro","comments":2,"createdAt":1414682857000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"","number":1001,"state":"closed","title":"TypeAliasDeclarations both normalized and emitted","updatedAt":1414684885000},{"assignedTo":"","body":"","comments":2,"createdAt":1414635469000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":993,"state":"closed","title":"Adding the Fidelity test suite","updatedAt":1414644462000},{"assignedTo":"","body":"Right now, every time I build the project, TypeScript compiler has to run, even if I haven't actually changed any of my TS files.\r\n\r\nAs a workaround, I currently employ the following hack to get TS compiler to shut up:\r\n\r\n```\r\nmsbuild /p:TscToolPath=","comments":14,"createdAt":1406588252000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4219105?v=3","loggedByName":"fsoikin","milestone":"","number":281,"state":"closed","title":"Support incremental build with MSBuild","updatedAt":1414630312000},{"assignedTo":"","body":"...er causes v8 to stop optimizing the method.","comments":2,"createdAt":1414617553000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":992,"state":"closed","title":"use .pop() on an array instead of setting the length directly.  The latt...","updatedAt":1414619501000},{"assignedTo":"","body":"If one does something like:\r\n```\r\nclass Foo {\r\n\tpublic special<T>(): T {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nvar a = new Foo();\r\na.special<number>();\r\n```\r\n\r\nIn 1.3, then the \"number\" in the angle brackets is not highlighted. Same for any, boolean, etc. But th","comments":6,"createdAt":1414611794000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2463526?v=3","loggedByName":"gscshoyru","milestone":"","number":990,"state":"closed","title":"Syntax highlighting inconsistent for parameterized types","updatedAt":1414618114000},{"assignedTo":"","body":"","comments":2,"createdAt":1414513151000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":979,"state":"closed","title":"Expose getSourceFile on the LanguageService interface","updatedAt":1414616797000},{"assignedTo":"","body":"I am trying to built a self hosted Owin app that's straight HTML and TypeScript, but I wanted it hosted in a Console App. \r\nI started with a Console app template in VS and added TypeScript files to it, but I didn't get the TS build options tab in the","comments":7,"createdAt":1410991862000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/578882?v=3","loggedByName":"sumitkm","milestone":"","number":690,"state":"open","title":"Suggestion: Add first class TypeScript support to console apps","updatedAt":1414612896000},{"assignedTo":"","body":"Also, add some perf logging to getIndentationAtPosition","comments":1,"createdAt":1414547803000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":985,"state":"closed","title":"Remove syntaxTree from SourceFileObject","updatedAt":1414549438000},{"assignedTo":"","body":"Type aliases allow names to be associated with arbitrary types.\r\n```typescript\r\ntype StringOrNumber = string | number;\r\ntype Text = string | string[];\r\ntype Point = [number, number];\r\ntype NameLookup = Dictionary<string, Person>;\r\ntype Callback = (da","comments":30,"createdAt":1414184252000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":957,"state":"closed","title":"Type aliases","updatedAt":1414535629000},{"assignedTo":"mhegazy","body":"When invoking a function with more arguments than are declared, the error we give is basically \"code is wrong.\" with no elaboration:\r\n```ts\r\ninterface Foo {\r\n    (x: number): void;\r\n}\r\n\r\nvar n: Foo;\r\n// Useful error: Argument of type 'string' is not ","comments":5,"createdAt":1414252970000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1864716?v=3","loggedByName":"bryanerayner","milestone":"Community","number":965,"state":"open","title":"Issue informative error message when calling function with too many arguments","updatedAt":1414534029000},{"assignedTo":"DanielRosenwasser","body":"There are a number of error messages that have two almost identical variants. One with a colon at the end, and one with a period. The idea is that the error should end in a colon if has an elaboration, and a period if not. This is not giving us enoug","comments":1,"createdAt":1414445615000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":973,"state":"closed","title":"Remove colon variants on error messages","updatedAt":1414525437000},{"assignedTo":"DanielRosenwasser","body":"We decided that the colons in the chained error messages makes the code harder to read, and does not add enough value for it to be worth it. But let's wait until the parity pass is finished.","comments":0,"createdAt":1405627069000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":107,"state":"closed","title":"Remove colons from chained error messages","updatedAt":1414525432000},{"assignedTo":"","body":"Also got rid of the 'terminalMessage' concept.\r\n\r\nFixes #107 and #973.","comments":2,"createdAt":1414482608000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":977,"state":"closed","title":"Removed colons from diagnostic messages.","updatedAt":1414525368000},{"assignedTo":"","body":"Hi, \r\nTS Version: 1.1\r\n\r\nConsider this bit of faulty code:\r\n```TypeScript\r\nfunction foo(s: string): any {\r\n    return;\r\n}\r\n\r\nvar x = foo(10);\r\n```\r\n\r\nWhen compiled with `noimplicitany` the compiler issues the following errors:\r\n\r\n```\r\nerror TS7005: B","comments":7,"createdAt":1414061440000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"Community","number":946,"state":"closed","title":"Invalid function parameter produces three error messages","updatedAt":1414519077000},{"assignedTo":"mhegazy","body":"declare function foo2(x: number);\r\n/*1*/ --> completion list here shows x \r\n\r\nbecause node at position turns out to be function declaration foo2 and then the getSymbolsInScope just picks up locals from that which contains parameters\r\n","comments":0,"createdAt":1411769702000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.4","number":764,"state":"closed","title":"Completion List on a line immediately after ambient function shows its parameters as completion list entry","updatedAt":1414513500000},{"assignedTo":"mhegazy","body":"```TypeScript\r\nclass Other {\r\n    private f;\r\n}\r\n\r\nclass Self {\r\n    private other: Other;\r\n\r\n    method() {\r\n           this.other. // | <- here\r\n    }\r\n}\r\n```\r\n\r\n![completions](https://cloud.githubusercontent.com/assets/8000722/4687261/7b0c2970-565","comments":0,"createdAt":1413587362000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.4","number":913,"state":"closed","title":"Completion list showing private members of non-containg class","updatedAt":1414513458000},{"assignedTo":"mhegazy","body":"The following code crashes completion:\r\n```TS\r\na/.\r\n```\r\n\r\nTypeError: Unable to get property 'kind' of undefined or null reference\r\n   at checkExpressionNode (:12986:13)\r\n   at checkExpression (:12970:13)\r\n   at isValidPropertyAccess (:12264:13)\r\n   ","comments":0,"createdAt":1413414778000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.4","number":903,"state":"closed","title":"Crash in completion after a slash","updatedAt":1414513451000},{"assignedTo":"mhegazy","body":"```TypeScript\r\n/** Module comment*/\r\nexport module m1 {\r\n    /** m2 comments*/\r\n    export module m2 {\r\n        /** class comment;*/\r\n        export class c {\r\n        };\r\n    }\r\n}\r\nvar myvar = new m1.m2./*8*/c();\r\n```\r\n\r\nAt location 8 the member lis","comments":0,"createdAt":1412892060000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.4","number":866,"state":"closed","title":"Completion entry details in new target do not show constructor signature","updatedAt":1414513443000},{"assignedTo":"","body":"Changes:\r\n* Remove dependencies on old tree for figuring out the location\r\n* General clean up\r\n* Disallowed completion in interface member name definition sites\r\n* Ensured we walk the tree once to find the token instead of multiple times later on\r\n* ","comments":0,"createdAt":1414098829000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":952,"state":"closed","title":"Remove dependency on old tree along with some fixes in completion list","updatedAt":1414513202000},{"assignedTo":"","body":"This allows ES6 shorthand object literal property definition.  This addresses #418. e.g.:\r\n\r\n```TypeScript\r\nvar  a;\r\nvar x = { a }; // equivalent to {a : a }\r\n```\r\nNotes:\r\n* Only identifiers are allowed, keywords are disallows ``` { var } ```\r\n* Qual","comments":2,"createdAt":1411931834000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":767,"state":"closed","title":"Proposal for enabling shorthand notation for object literal properties","updatedAt":1414512941000},{"assignedTo":"","body":"See http://editorconfig.org/ for details.\r\n\r\npackage.json was changed to 2-space indentation here, because that's what npm commands will change it to, whenever a command is run. It's quite common for json files, so they've all been set the same, just","comments":2,"createdAt":1414218571000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1058243?v=3","loggedByName":"jedmao","milestone":"","number":961,"state":"closed","title":"Introduce .editorconfig file","updatedAt":1414512912000},{"assignedTo":"","body":"Per https://github.com/Microsoft/TypeScript/issues/880","comments":1,"createdAt":1414218986000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1058243?v=3","loggedByName":"jedmao","milestone":"","number":962,"state":"closed","title":"Introduce .gitattributes file","updatedAt":1414512890000},{"assignedTo":"DanielRosenwasser","body":"The following code used to find the reference for variable `z` in line2 correctly pre-1.0, but now fails to find the reference within the function `func`:\r\n```\r\n    export class ABCD {\r\n        constructor(private x: number, public y: number, private","comments":6,"createdAt":1414455684000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/362990?v=3","loggedByName":"ashwinr","milestone":"TypeScript 1.4","number":975,"state":"closed","title":"LanguageService.getReferencesAtPosition does not find all references","updatedAt":1414462063000},{"assignedTo":"","body":"Fixes #975.","comments":2,"createdAt":1414458898000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":976,"state":"closed","title":"Fixed findAllRefs/getOccs bug where private properties declared in the constructor were only local to the constructor.","updatedAt":1414459831000},{"assignedTo":"","body":"Fixes #938","comments":2,"createdAt":1413998662000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":940,"state":"closed","title":"Fix the crash in declaration file emit when alias is used before its declaration","updatedAt":1414453385000},{"assignedTo":"","body":"This change adds some better error experience for overload resolution. It also fixes bug #807.\r\n\r\nOne future goal that is not in this change: We should ideally instantiate all the signatures we give back for signature help.","comments":0,"createdAt":1414091910000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":951,"state":"closed","title":"Make overload resolution more elaborate","updatedAt":1414452005000},{"assignedTo":"","body":"Motivating example (one of many):\r\n```ts\r\nfunction compare<T>(lhs: T, rhs: T): boolean {\r\n  return lhs === rhs;\r\n}\r\n\r\nif(compare('1', 1)) { // Expected: Error -- I made 'compare' generic for a reason!\r\n  /* ... */\r\n}\r\n```\r\n\r\n### Proposal\r\nWhen generi","comments":17,"createdAt":1407211950000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":360,"state":"open","title":"Issue a warning when generic type inference produces {}","updatedAt":1414450122000},{"assignedTo":"","body":"I used to use generics in Java to define constraints between the different arguments of a function.\r\nIn TypeScript, they are a little more limited.\r\nFor example:\r\n\r\nfunction test<T>(a: T, b: T): void {\r\n}\r\ntest(1, 2); //It works with T as number\r\ntes","comments":3,"createdAt":1414447264000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5285425?v=3","loggedByName":"paztis","milestone":"","number":974,"state":"closed","title":"Generics in functions","updatedAt":1414450110000},{"assignedTo":"","body":"The `resolveName` function requires a replacement argument string which in most invocations is provided by calling `identifierToString`. That in turn causes a lot of upfront work to be performed just in case an error needs to be reported. That doesn'","comments":2,"createdAt":1414372988000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":971,"state":"closed","title":"Fix the resolveName function","updatedAt":1414417710000},{"assignedTo":"","body":"Is there is any kind soul that have samples for typescript \"durandal/http\" http.get, http.post, http.jasonp, others?\r\n\r\nI can't figure out how to call those and there are no samples posted in other forums.\r\n\r\nAny help is greatly appreciated!\r\n\r\nEduar","comments":3,"createdAt":1414260776000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5220799?v=3","loggedByName":"esobrino","milestone":"","number":967,"state":"closed","title":"durandal/http http get post samples","updatedAt":1414347824000},{"assignedTo":"","body":"Ryan please, don't close an issue that I post, I will conclude when is properly answered, your answer was inadequate, sketchy, vague and un-needed.  Still thanks for it.\r\n\r\nThanks Ryan for you response! Still I have been using the \"durandal.d.ts\" and","comments":3,"createdAt":1414262628000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5220799?v=3","loggedByName":"esobrino","milestone":"","number":968,"state":"closed","title":"typescript \"durandal/http\" http.get, http.post, http.jsonp, and others code samples.","updatedAt":1414347537000},{"assignedTo":"","body":"There's been multiple issues raised regarding having more ES6 features in Typescript (#7, #13, #19, #232, #237, #240, #389, etc). I'm personally interested in implementing #13.\r\n\r\nWould it help to add ES6 to the ScriptTarget enum and begin implementi","comments":5,"createdAt":1409799776000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4791?v=3","loggedByName":"duncanmak","milestone":"","number":595,"state":"closed","title":"Add ScriptTarget.ES6","updatedAt":1414196207000},{"assignedTo":"","body":"I can extend the `String` interface like so:\r\n```ts\r\ninterface String {\r\n  upper(): String;\r\n}\r\n```\r\n\r\nI would expect that I could then do:\r\n```ts\r\nString.prototype.upper = String.prototype.toUpperCase;\r\n```\r\n\r\nOr:\r\n```ts\r\nString.prototype.upper = St","comments":2,"createdAt":1414187288000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1058243?v=3","loggedByName":"jedmao","milestone":"","number":958,"state":"closed","title":"Support prototype extension of built-in types","updatedAt":1414195171000},{"assignedTo":"","body":"This change adds support for ES6-style block-scoped variable declarations. these are only available when targeting ES6. the change also adds a new target for ES6.\r\n\r\nThere are two variants, let and const. Generaly let and const behave like a var decl","comments":1,"createdAt":1413481869000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":904,"state":"closed","title":"Let and const support","updatedAt":1414175196000},{"assignedTo":"","body":"\r\n## Extensible JavaScript Libraries use Monkeypatching\r\nI know what the TS spec implies about this question, but it would be great to have a direct response from the TS team regarding this particular JavaScript technique.\r\n\r\nIt's fairly common to fi","comments":3,"createdAt":1412774034000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1252361?v=3","loggedByName":"yortus","milestone":"","number":857,"state":"closed","title":"Representing extensible JavaScript libraries with non-extensible external modules","updatedAt":1414173140000},{"assignedTo":"","body":"# Motivation\r\nLibraries such as Knockout use overloaded functions, for example:\r\n```ts\r\nvar x = new MyKnockoutModel();\r\nconsole.log(x.customerName()); // string\r\nx.customerName('bob'); // OK\r\nx.customerName(42); // Error, 42 is not a string\r\n```\r\n\r\nW","comments":1,"createdAt":1409859990000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":598,"state":"open","title":"Don't allow falsely discarded parameters when determining overloaded signature compatibility","updatedAt":1414172588000},{"assignedTo":"","body":"It appears that the order in which the output is emitted into a single file is determined by the references.  In general, if a file references another, the other file is emitted first.\r\n\r\nAs a matter of preference, I want to have every file which req","comments":1,"createdAt":1414156027000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"","number":955,"state":"closed","title":"/// <reference>s and single file output: emit order too easy to break","updatedAt":1414172377000},{"assignedTo":"","body":"By default, OS X users will generate patches with broken line endings. To fix that, the following `[core]` settings in `.git/config` are required:\r\n\r\n```\r\n\tautocrlf = input\r\n\twhitespace = cr-at-eol\r\n```\r\n\r\nFiguring that out isn't all that easy, howev","comments":3,"createdAt":1413151014000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/56359?v=3","loggedByName":"tschneidereit","milestone":"","number":880,"state":"closed","title":"Documentation should highlight required git settings for contributing from non-Windows setups","updatedAt":1414172210000},{"assignedTo":"","body":"Someone has been impersonating and smearing the TypeScript name on Twitter since it was first announced in the media - it looks really bad, and you really need to contact Twitter and make them put an end to this.\r\n\r\nTypeScript is now the [fastest gro","comments":6,"createdAt":1413377879000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/External","name":"External","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/103348?v=3","loggedByName":"mindplay-dk","milestone":"","number":897,"state":"closed","title":"Time to kill `@typescript` on Twitter","updatedAt":1414172034000},{"assignedTo":"","body":"Right now the compiler always checks if a super call is made, it is indeed the first statement in the constructor. This is even true if the statements before the super call donât access anything of the object just being constructed. \r\n\r\nIt would be n","comments":8,"createdAt":1414049758000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/568564?v=3","loggedByName":"jbaron","milestone":"","number":945,"state":"closed","title":"Relax the rule that âsuperâ call must be the first statement","updatedAt":1414171165000},{"assignedTo":"","body":"Hi all,\r\n   I asked this in stackoverflow but I had no answer.\r\nhttp://stackoverflow.com/questions/26512403/this-point-set-to-null-using-afterselectionchange-in-nggrid\r\n  I suppose that the problem is the declaration of the this point in the call to ","comments":2,"createdAt":1414130526000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/127777?v=3","loggedByName":"lucamorelli","milestone":"","number":953,"state":"closed","title":"adding class method as event handler","updatedAt":1414171051000},{"assignedTo":"","body":"In our project we use ActiveX objects accessible from JavaScript. I have .d.ts of COM library.\r\nOne of the external types has \"indexed properties\". As for now, it's TS declaration loks like\r\n```javascript\r\ninterface axType {\r\n  Values(index:string):s","comments":1,"createdAt":1414158896000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/9381883?v=3","loggedByName":"dmitryDemchenko","milestone":"","number":956,"state":"closed","title":"Add \"indexed properties\"","updatedAt":1414167788000},{"assignedTo":"","body":"Implements the breakpoints using new tree","comments":0,"createdAt":1413873470000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":931,"state":"closed","title":"New tree break points","updatedAt":1414103445000},{"assignedTo":"","body":"Adding support for union types with the `in` and `instanceof` operators and the `for...in` statement. We now check that an operand is of type any, an object type, a type parameter, or a union type composed exclusively of those kinds of types.","comments":1,"createdAt":1414022761000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":944,"state":"closed","title":"In, for...in, and instanceof operators with union types","updatedAt":1414099887000},{"assignedTo":"","body":"Test.ts:\r\n```\r\ndeclare module \"test\" {\r\n    module A {\r\n        class C {\r\n        }\r\n    }\r\n    class B extends E {\r\n    }\r\n    import E = A.C;\r\n}\r\n```\r\n\r\nCommand line:\r\n```\r\nnode tsc Test.ts --declaration --module commonjs --target ES5\r\n```\r\n\r\nErro","comments":1,"createdAt":1414076835000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2698576?v=3","loggedByName":"meirgottlieb","milestone":"","number":948,"state":"closed","title":"Error when alias in ambient external module declaration is referenced before declared (1.1 compiler)","updatedAt":1414086155000},{"assignedTo":"","body":"","comments":1,"createdAt":1413409634000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":901,"state":"closed","title":"Switched syntactic classifier to use new tree","updatedAt":1414028960000},{"assignedTo":"","body":"This PR fixes issues relating to apparent types and union types and optimizes materialization of properties in union types. It also makes union types a separate kind of type, distinct from object types.\r\n\r\nThe following functions have changed:\r\n\r\nFun","comments":0,"createdAt":1414003402000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":942,"state":"closed","title":"Union type fixes and optimizations","updatedAt":1414023079000},{"assignedTo":"","body":"Idea of keywords for better controlling variables initialization.\r\n\r\nSamples:\r\n\r\n**mustinit** - Variable that must be initialized before used.\r\n\r\n```typescript\r\nmustinit a = 1; // OK\r\na = 2; // OK\r\n\r\nmustinit x;\r\nf(x); // Error: 'x' is not initialize","comments":3,"createdAt":1413872937000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":930,"state":"closed","title":"Proposal - Better control for initialization","updatedAt":1414014038000},{"assignedTo":"mhegazy","body":"Files referenced in the project with a different case will not be loaded by the language service.","comments":0,"createdAt":1413836712000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":926,"state":"closed","title":"Errors loading a project in the language service for missing files","updatedAt":1414013956000},{"assignedTo":"","body":"Hi,\r\n\r\nI suggest that a new context menu option called \"Open File\" should be made available when the context is a path defined in a `reference` or `import` statement.\r\n\r\nAlternatively, the existing \"Go To Definition\" (F12) option could be enhanced to","comments":2,"createdAt":1413990211000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":937,"state":"closed","title":"\"Open File\" option for reference and import statements [Visual Studio]","updatedAt":1414007867000},{"assignedTo":"","body":"The [clang](http://clang.llvm.org/) C++ compiler has a useful feature where if an identifier is unknown, it will try to determine which identifier the user may have intended to use instead and then for the rest of the compile, assumes that the user d","comments":1,"createdAt":1413958540000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2458?v=3","loggedByName":"robertknight","milestone":"","number":936,"state":"open","title":"Spell-checking of identifiers","updatedAt":1414004238000},{"assignedTo":"","body":"The following code used to work in TS <= 1.0.3, but stopped working in TS 1.1.\r\n\r\n```ts\r\ninterface Promise<T> {\r\n\t/* ... */\r\n}\r\n\r\ninterface Deferred<T> {\r\n\tresolve: (value: T) => void;\r\n\treject: (error: Error) => void;\r\n\tpromise: Promise<T>;\r\n}\r\n\r\nin","comments":2,"createdAt":1413995088000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1025628?v=3","loggedByName":"poelstra","milestone":"","number":939,"state":"closed","title":"Using void in generic overloads (changed between 1.0.3 and 1.1)","updatedAt":1414004236000},{"assignedTo":"","body":"Specifically, processDiagnosticMessages.ts was dependent on sys.ts, which was dependent on the rest of the compiler, which meant that after merge, you could never compile processDiagnosticMessages.ts.","comments":2,"createdAt":1413928269000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":932,"state":"closed","title":"Removed Diagnostics from sys.ts in order to avoid cyclical build dependency","updatedAt":1413965199000},{"assignedTo":"","body":"Am still to do add no breakpoints in comments / empty line","comments":1,"createdAt":1409783786000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":594,"state":"closed","title":"Breakpointspans using new compiler","updatedAt":1413940236000},{"assignedTo":"","body":"Currently you need to go into Tools -> Options -> Text Editor -> TypeScript -> Project -> General in order to turn on Compile on Save for non-project contexts. It's not clear why we wouldn't just want this on by default there when we have it on by de","comments":1,"createdAt":1413938405000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":934,"state":"open","title":"Make Compile On Save on by default for loose files","updatedAt":1413939762000},{"assignedTo":"","body":"Files differing only in case will not be found by the language service. Fixes #926 .","comments":3,"createdAt":1413836637000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":925,"state":"closed","title":"use getCanonicalFileName in the language service when searching for files","updatedAt":1413910766000},{"assignedTo":"","body":"Fix the unit test for colorization. That previously was not running.","comments":2,"createdAt":1413836187000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":924,"state":"closed","title":"Fix colorization unittest","updatedAt":1413841966000},{"assignedTo":"","body":"Indenter gives the following for binary expressions:\r\n```TS\r\na = a &&\r\nb;\r\nc = c\r\n&& d;\r\n```\r\n\r\nBut it would be much nicer to have\r\n```TS\r\na = a &&\r\n    b;\r\nc = c\r\n    && d;\r\n```\r\n\r\nThe previous indenter does not do this correctly either, but the Vis","comments":0,"createdAt":1413835966000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":923,"state":"open","title":"Indenter should indent binary operands more than their parent","updatedAt":1413837125000},{"assignedTo":"","body":"This gets basic signature help working for completed generic calls. Remaining items (future pull requests) will include:\r\n\r\n1. Instantiating all the candidate signatures.\r\n2. Generic signature help for incomplete generic calls.\r\n3. Signature help for","comments":0,"createdAt":1413591532000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":915,"state":"closed","title":"Basic generic signature help","updatedAt":1413834376000},{"assignedTo":"","body":"This PR tightens subtyping rules such that optional properties are required to be present in subtypes.\r\n\r\nWe currently allow subtypes to drop optional properties. This leads to some odd effects:\r\n```typescript\r\ninterface A { x: number; y?: number; }\r","comments":5,"createdAt":1413765094000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":919,"state":"closed","title":"Require optional properties to be present in subtypes","updatedAt":1413831746000},{"assignedTo":"","body":"Would it be possible for the compiler to 'retype' or subtype variables?\r\nI ask because I find myself using a lot of overloaded function parameters, and during the function it would be nice to be able to do something like the following:\r\n\r\n``` Typescr","comments":8,"createdAt":1413681317000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3665998?v=3","loggedByName":"Griffork","milestone":"","number":918,"state":"closed","title":"Retype Variables","updatedAt":1413827338000},{"assignedTo":"","body":"This change adds support for parentheses in type literals. For example:\r\n```typescript\r\nvar a: (string | number)[];\r\nvar b: (() => string)[];\r\nvar b: (() => string) | (() => number);\r\nvar c: ((() => string) | (() => number))[];\r\n```\r\nThere is a forma","comments":1,"createdAt":1413590802000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":914,"state":"closed","title":"Parentheses in type literals","updatedAt":1413823387000},{"assignedTo":"","body":"This is the starting implementation of Union Types as proposed in #805. It includes all parts of the core proposal, but not the \"Possible Next Steps\" (yet). The implementation reflects the decisions we made in the 10/3 design meeting.\r\n\r\n@RyanCavanau","comments":11,"createdAt":1412440273000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":824,"state":"closed","title":"Union Types","updatedAt":1413744943000},{"assignedTo":"","body":"I'm still having problems with implicit referencing not working...\r\nI created a new MVC project.\r\nI added Angular.Typescript.DefinitelyTyped\r\nI added a typescript file TestApp.ts and create a small class TestCtrl (under scripts\\modules\\testapp\\TestAp","comments":4,"createdAt":1406279342000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/739942?v=3","loggedByName":"rekna1","milestone":"","number":244,"state":"closed","title":"Intellisense problems in VS2013 Update 2","updatedAt":1413663447000},{"assignedTo":"","body":"This aligns Contextual Signature Instantiation with the latest spec:\r\n\r\nhttps://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#3.8.5\r\n\r\nAn example:\r\n```typescript\r\ndeclare function foo<T>(cb: (x: number, y: string) => T): T;\r\ndeclare functio","comments":3,"createdAt":1413502357000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":908,"state":"closed","title":"Union types in contextual signature instantiations","updatedAt":1413647261000},{"assignedTo":"","body":"In the following code the compiler cannot infer the type 'OtherEvent' in the last line calling 'addListener' resulting in a compile error, but it manages to infer the types in the two prior lines for 'MyEvent' and 'TheirEvent'. The only difference be","comments":1,"createdAt":1413585432000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4603784?v=3","loggedByName":"stanhuff","milestone":"","number":912,"state":"closed","title":"Inconsistent ability to infer a class's type via a constructor signature","updatedAt":1413586347000},{"assignedTo":"","body":"I find this one of the more confusing and non-obvious aspects of TypeScript:\r\n\r\n```typescript\r\nvar addOne = (x: number) => x + 1  // (number) => number\r\nvar addOneBraces = (x: number) => { x + 1 }  // (number) => void\r\n```\r\n\r\nWhy would you use a `=>`","comments":1,"createdAt":1413560393000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/755988?v=3","loggedByName":"jeffmay","milestone":"","number":910,"state":"closed","title":"Single Expression Arrow functions should return by default","updatedAt":1413561828000},{"assignedTo":"","body":"","comments":1,"createdAt":1412813714000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":860,"state":"closed","title":"Take runtime semantics of numerically named properties into account.","updatedAt":1413513101000},{"assignedTo":"","body":"Piggybacking on @sheetalkamat change, adding some cleanup, and disabling source map record verification. \r\nsource map record verification is not needed as long as the sourcemap did not change and the output did not change. it creates a lot of garbage","comments":2,"createdAt":1413488830000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":907,"state":"closed","title":"Update Rwc runner","updatedAt":1413506555000},{"assignedTo":"","body":"Rather than having all the writeType/writeSymbol/writeSignature...etc methods on the checker, I am extracting them into a new object, the display builder. I've also changed their names to buildDisplay... This is so that we can add display building fo","comments":1,"createdAt":1413333382000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":893,"state":"closed","title":"Extract the write methods into a display builder in the checker","updatedAt":1413494378000},{"assignedTo":"","body":"","comments":2,"createdAt":1413484589000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":905,"state":"closed","title":"Straight quotes in Language Specification","updatedAt":1413493565000},{"assignedTo":"","body":"","comments":1,"createdAt":1413406465000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":900,"state":"closed","title":"Adding Union Types and Type Guards to Language Specification","updatedAt":1413415785000},{"assignedTo":"","body":"I don't have Microsoft Office installed on my machine, and without cannot properly render (let alone fill in) the CLA. If it were available as a PDF or even a website that allowed me to print after filling in the form, I could contribute.","comments":3,"createdAt":1413152763000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/56359?v=3","loggedByName":"tschneidereit","milestone":"","number":881,"state":"closed","title":"Make CLA available in a portable format","updatedAt":1413412335000},{"assignedTo":"","body":"","comments":8,"createdAt":1413229036000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":884,"state":"closed","title":"Move symbolDisplayPartKind to services side","updatedAt":1413406678000},{"assignedTo":"","body":"...s flags\r\n\r\nWe had three functions:\r\n* getRootSymbol\r\n* getRootSymbols\r\n* getTargetSymbol\r\n\r\nI worked with @sheetalkamat to do a few things. We got rid of getRootSymbol. Also, for every symbol that has a target, we copy the flags from the target. T","comments":1,"createdAt":1413403720000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":899,"state":"closed","title":"Get rid of getRootSymbol and include target's flags in transient symbol'...","updatedAt":1413404444000},{"assignedTo":"","body":"edit: I saw some more, so adding a new commit\r\nedit2: amended commit :)","comments":2,"createdAt":1413395917000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":898,"state":"closed","title":"Removed some unused var statements","updatedAt":1413401731000},{"assignedTo":"","body":"Disregard this issue; unable to reproduce","comments":0,"createdAt":1413334633000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":894,"state":"closed","title":"Completion list does not contain types for type argument list","updatedAt":1413334896000},{"assignedTo":"","body":"Only classify a module in value position if its value side is introduced by a module.","comments":1,"createdAt":1413224645000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":883,"state":"closed","title":"Fixed semantic colorization for module names on the value side.","updatedAt":1413333495000},{"assignedTo":"","body":"Fix issue #779","comments":2,"createdAt":1413235902000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":886,"state":"closed","title":"Report error from target file","updatedAt":1413332171000},{"assignedTo":"yuit","body":"1. Create TypeScriptHTML app.\r\n2. Enable declaration generation through properties of the project\r\n3. Click combine javascript output intop file and set the option as app.js\r\n4. Add new typescript file to the project say app2.ts\r\n5. Open error window","comments":1,"createdAt":1412029344000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.3","number":779,"state":"closed","title":"Compiler on save reports incorrect  declaration errors","updatedAt":1413326467000},{"assignedTo":"","body":"We use Grunt-TS to automatically compile our Typescript using the --out flag.\r\n\r\nCurrently, it throws 'Error: tsc return code 1'. Is this an issue with the Typescript compiler? Did the parameters change, or is the npm package simply not installing?\r\n","comments":3,"createdAt":1412884362000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6453594?v=3","loggedByName":"bryanrideshark","milestone":"","number":863,"state":"closed","title":"Typescript 1.1.0-1 compiler breaks production code","updatedAt":1413322609000},{"assignedTo":"","body":"This change makes signature help more resilient.\r\n\r\nWhen attempting to give signature help, we start at a token and walk up the tree. Any call expression or new expression along the way is considered. In a call or new expression, a `<` or `(` token s","comments":3,"createdAt":1413250662000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":890,"state":"closed","title":"Fix signature help crash when requested outside argument list","updatedAt":1413313217000},{"assignedTo":"sheetalkamat","body":"For example, angular.forEach looks like this:\r\n```\r\nInvokes the iterator function once for each item in obj collection, which can be either an object or an array. The iterator function is invoked with iterator(value, key), where value is the value of","comments":2,"createdAt":1411573038000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1081904?v=3","loggedByName":"derekcicerone","milestone":"TypeScript 1.4","number":735,"state":"closed","title":"Quick Info repeats documentation for overridden methods","updatedAt":1413260227000},{"assignedTo":"","body":"Fixes classification of arguments and undefined as (local var) and (var) instead of (property)\r\nRemoves the undefined identication from symbol flags instead add method to typechecker","comments":1,"createdAt":1413230880000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":885,"state":"closed","title":"Fix how arguments and undefined are shown in the quickInfo","updatedAt":1413238390000},{"assignedTo":"","body":"I just opened this question in stackoverflow:\r\nhttp://stackoverflow.com/questions/26327520/how-can-i-extend-an-existing-class-in-typescript/26329137#26329137\r\n\r\nThe point is that the code I'm adding to the project inject a few methods in the Pushpin ","comments":1,"createdAt":1413145780000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/127777?v=3","loggedByName":"lucamorelli","milestone":"","number":879,"state":"closed","title":"how can I extend an exsting type?","updatedAt":1413227251000},{"assignedTo":"","body":"","comments":0,"createdAt":1412982075000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":874,"state":"closed","title":"Shows better information for aliases in the quick info/completion entry","updatedAt":1413227124000},{"assignedTo":"","body":"var variable = 0 && \"something\"; \r\ntypeof variable // number\r\nvariable // 0\r\n\r\nvariable would be typed with number because 0 is false.\r\n\r\nIt happen with all cases:\r\n\r\nvar variable = false && \"something\"; \r\n\r\ntypeof variable // boolean\r\nvariable // 0\r","comments":1,"createdAt":1413127494000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8139881?v=3","loggedByName":"xLama","milestone":"","number":876,"state":"closed","title":"&& inference bug","updatedAt":1413182955000},{"assignedTo":"","body":"Completions kind, Quick Info, go to def, and find all refss","comments":2,"createdAt":1412836460000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":861,"state":"closed","title":"Lanugage Service support for union types","updatedAt":1412989909000},{"assignedTo":"","body":"Because of the way the codegen works for enums, we really do not emit sensible code when the enum members have numeric names. Consider this innocent looking example (compiler gives no errors here):\r\n\r\n ```TypeScript\r\nenum E {\r\n    1, 2, 3\r\n}\r\n\r\nconso","comments":5,"createdAt":1405630121000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":134,"state":"closed","title":"Should not allow numeric names on enum members","updatedAt":1412983503000},{"assignedTo":"","body":"Added a check in the parser to flag all numeric enum member names as errors. As mentioned in the comments of #134, this breaks a lot of the test cases. In some cases, where failing a test case for this error did not seem in the spirit of the test, I ","comments":8,"createdAt":1412660338000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/880843?v=3","loggedByName":"chrisbubernak","milestone":"","number":841,"state":"closed","title":"Fix for issue #134 (Disallow numeric enum members)","updatedAt":1412983462000},{"assignedTo":"","body":"I tried to install the TypeScript 1.1 CTP on my visual studio 2013 machine.\r\nAt first, I was at VS13 update 2 when I installed it, it installed fine but right after that I started the update for VS13 update 3 (Which worked fine too)!\r\nI edited my csp","comments":3,"createdAt":1412923759000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":869,"state":"closed","title":"TypeScript 1.1 CTP doesn't work with VS2013","updatedAt":1412983247000},{"assignedTo":"","body":"I'm seeing a compiler error on some code.\r\n\r\nThe code in question was working until I added some generic type constraints.\r\n\r\nIs the following stacktrace enough to work with? The module that triggers this is quite interwoven with other code and I can","comments":3,"createdAt":1412978043000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/350947?v=3","loggedByName":"drewnoakes","milestone":"","number":873,"state":"closed","title":"Compiler crash after introducing generic type constraints","updatedAt":1412981389000},{"assignedTo":"","body":"","comments":1,"createdAt":1412976316000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":872,"state":"closed","title":"Fix newlines in tests","updatedAt":1412976614000},{"assignedTo":"","body":"","comments":1,"createdAt":1412899368000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":867,"state":"closed","title":"Restored semantic colorization fix","updatedAt":1412900665000},{"assignedTo":"yuit","body":"This is from the eclipse-typescript plugin which I'm running against the latest code on master (v1.3):\r\n```\r\nTypeError: Cannot call method 'replace' of null\r\n\tat Object.normalizeSlashes (/Users/dcicerone/git/eclipse-typescript/com.palantir.typescript","comments":5,"createdAt":1412723238000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1081904?v=3","loggedByName":"derekcicerone","milestone":"TypeScript 1.4","number":852,"state":"closed","title":"Exception thrown when emitting files from the language service","updatedAt":1412899740000},{"assignedTo":"","body":"Fix issue #852","comments":2,"createdAt":1412743343000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":856,"state":"closed","title":"Fix throw exception on emit file","updatedAt":1412892483000},{"assignedTo":"","body":"The idea is that if we are going to use contextual semantic meanings, we should be using them in a consistent and correct way all at once (which is a slightly long-running task). Otherwise the current consistencies will actually make the experience s","comments":1,"createdAt":1412887324000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":865,"state":"closed","title":"Undid changes where contextual semantics are taken into account.","updatedAt":1412890729000},{"assignedTo":"","body":"","comments":1,"createdAt":1412885936000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":864,"state":"closed","title":"Fixed the incorrect merge and tests failing because of it","updatedAt":1412886612000},{"assignedTo":"sheetalkamat","body":"In VS14 CTP4 compile on save does not work for namespaces or hierarchical namespaces. It compiles on build just fine, but gets stuck on \"Generating output(s)...\" indefinitely in the status bar and no JS is generated when saving TS file.\r\n\r\nTo reprodu","comments":5,"createdAt":1412703277000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/671093?v=3","loggedByName":"djarekg","milestone":"TypeScript 1.3","number":844,"state":"closed","title":"VS14 CTP4 compile on save issue","updatedAt":1412882210000},{"assignedTo":"sheetalkamat","body":"I am looking at the following line of code:\r\n```TS\r\nvar unknownSignature = createSignature(undefined, undefined, emptyArray, unknownType, 0, false, false);\r\n```\r\nWhen I hover over `createSignature`, I expect to see all the parameters. Namely I am int","comments":4,"createdAt":1410465898000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.4","number":655,"state":"closed","title":"Quick info truncation needs to be smarter","updatedAt":1412881882000},{"assignedTo":"","body":"Hi,\r\n\r\n**TypeScript Version**: 1.1.0.1\r\n\r\nHere is the repro:\r\n\r\n```TypeScript\r\n\r\ninterface Foo {\r\n\t[index: string]: any;\r\n    name: string;\t\t\r\n}\r\n\r\n// Case 1: no error\r\nvar f1: Foo = {\r\n        name: 'FooOne',\r\n};\r\n\r\n// Case 2: no error\t\r\nvar f2 = fu","comments":2,"createdAt":1412857947000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":862,"state":"closed","title":"Spurious \"index signature incompatible\" error for function returning an object literal expression","updatedAt":1412865749000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\nmodule M {\r\n}\r\n\r\nfunction f() {\r\n    function f() {\r\n        function f() {\r\n            function f() {\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nExpected:\r\n\r\nTop level nodes have 3 functions, structured as\r\n```\r\nM\r\nf\r\n  f\r\n    f\r\n``","comments":1,"createdAt":1412382360000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 2.0","number":820,"state":"closed","title":"NavigationBarItem merging is broken","updatedAt":1412830225000},{"assignedTo":"","body":"\ntests/cases/compiler/assignmentCompatability33.tstests/cases/compiler/assignmentCompatability37.tstests/cases/compiler/parseTypes.ts\n\nOld Compiler\n\n    module __test1__ {        export interface interfaceWithPublicAndOptional<T,U> { one: T; two?: U;","comments":0,"createdAt":1405627062000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":100,"state":"open","title":"[Errors][Message] Assignability with signatures","updatedAt":1412830128000},{"assignedTo":"","body":"```TypeScript\r\ndeclare module {\r\n    export class XDate {\r\n        public getDay():number;\r\n        public getXDate():number;\r\n    }\r\n}\r\n```\r\n\r\nExpected: \r\n\r\nâ!!! Identifier expected.\r\n\r\nActual: \r\n\r\n!!! ';' expected.\r\n\r\n!!! ';' expected.\r\n\r\n!!! Unkno","comments":0,"createdAt":1405627075000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":114,"state":"open","title":"[Errors] error recovery with missing module name","updatedAt":1412830128000},{"assignedTo":"","body":"```TypeScript\r\ndeclare module M {\r\n    export extension class C {\r\n        public pe: string;\r\n    }\r\n}\r\n\r\nvar c = new M.C();\r\n\r\nc.pe;\r\n```\r\n \r\n\r\nExpected: \r\n\r\n!!! Unexpected token; 'module, class, interface, enum, import or statement' expected.\r\n\r\n ","comments":0,"createdAt":1405627074000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":113,"state":"open","title":"[Errors] error recovery with unknown modifier","updatedAt":1412830128000},{"assignedTo":"","body":"```TypeScript\r\nclass C {    get x() { return 1; }    get x() { return 1; } // error}\r\n\r\nclass D {    set x(v) {  }    set x(v) {  } // error}\r\n\r\nclass E {    get x() {        return 1;    }    set x(v) { }}\r\n\r\nvar x = {    get x() {        return 1; ","comments":0,"createdAt":1405627056000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":95,"state":"open","title":"[Errors] Duplicate identifier X instead of Getter or Setter X already declared","updatedAt":1412830128000},{"assignedTo":"","body":"\nvar v : x.void;\n\n \n\nExpected: !!! Cannot find name 'x'.\n\nActual: \n\n!!! Identifier expected.!!! Expression expected.!!! Cannot find name 'x'.","comments":0,"createdAt":1405627067000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":105,"state":"open","title":"[Errors] void as a member access expression","updatedAt":1412830128000},{"assignedTo":"","body":"The type baselines seem inconsistent in terms of how they name symbols that can be reached through aliases. Sometimes the symbol is named via the alias, and sometimes via a reference to its original declaration. Some examples:\r\n\r\ntests/cases/compiler","comments":1,"createdAt":1409157950000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":553,"state":"open","title":"Investigate use of aliases when naming symbols in type baselines","updatedAt":1412830109000},{"assignedTo":"","body":"See below image.  Intellisense for the type name shows all identifiers.  Only types should be shown.\r\n\r\n\r\n![attachfilehandler](https://cloud.githubusercontent.com/assets/8000722/4051544/8054e782-2d62-11e4-91ea-c301baa75835.png)\r\n","comments":0,"createdAt":1409086213000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":532,"state":"open","title":"Filter getCompletions results based on location","updatedAt":1412830108000},{"assignedTo":"","body":"The two tests\r\n* tests/cases/compiler/externalModuleResolution.ts\r\n* tests/cases/compiler/externalModuleResolution2.ts\r\n\r\neach have file regions that are not compiled by the test harness. The harness uses only the last file as a root, if the last fil","comments":0,"createdAt":1408061925000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":457,"state":"open","title":"Isolated unreferenced files in compiler tests are not compiled by the harness compiler","updatedAt":1412830108000},{"assignedTo":"","body":"In tests/cases/conformance/types/typeParameters/typeArgumentLists/functionConstraintSatisfaction3.ts:\r\n```TS\r\nfunction foo<T extends (x: string) => string>(x: T): T { return x; }\r\nvar r1 = foo((x) => x);\r\n>r1 : (x: any) => any\r\n>foo((x) => x) : (x: a","comments":0,"createdAt":1409081296000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":526,"state":"open","title":"[typeBaselines] Inferential typing types context sensitive function using any when type parameter is not a function type","updatedAt":1412830108000},{"assignedTo":"","body":"Inspired from http://stackoverflow.com/questions/24923772/raphael-with-typescript-call-signatures-used-in-a-new-expression-must-have-a\r\n```TypeScript\r\ninterface NotNewable {\r\n    (n: number): string;\r\n}\r\n\r\nvar n: NotNewable;\r\nvar t = new n(10);\r\n```\r","comments":6,"createdAt":1406172393000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"Community","number":227,"state":"open","title":"Issue a more useful error when attempting to construct non-newable type","updatedAt":1412830108000},{"assignedTo":"","body":"When inside a definition file (eg jquery.d.ts) and hovering over an interface member which has been JSDoc'd then intellisense is presented to the user in Visual Studio.\r\n\r\nHowever, when in a different file which is making use of those definitions the","comments":1,"createdAt":1406608130000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1010525?v=3","loggedByName":"johnnyreilly","milestone":"Community","number":290,"state":"open","title":"JSDoc support for object literal fields","updatedAt":1412830108000},{"assignedTo":"","body":"```TS\r\nvar x = function f() { return f; };\r\nvar x = function () { var y; return y; };\r\n```\r\nWe get the following error message:\r\nSubsequent variable declarations must have the same type.  Variable 'x' must be of type '() => any', but here has type '(","comments":1,"createdAt":1408396250000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":475,"state":"open","title":"Recursive function type is printed using \"any\" if the function is not in scope","updatedAt":1412830068000},{"assignedTo":"sheetalkamat","body":"var a = undefined; \r\nHover over undefined and it shows it as (property) undefined: undefined;\r\n![quickinfo on undefined](https://cloud.githubusercontent.com/assets/8052792/4447278/929701d4-4809-11e4-99e7-27416636d89a.jpg)\r\n\r\n","comments":0,"createdAt":1412016682000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.4","number":775,"state":"closed","title":"QuickInfo on undefined is shown incorrectly","updatedAt":1412821353000},{"assignedTo":"","body":"Still todos\r\n1. Need to add testcases and validate for declaration merging\r\n2. Better way to show call signature/construct signatures of types at call site\r\n3. Test cases for the semantic classification of symbol information","comments":1,"createdAt":1412122798000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":793,"state":"closed","title":"Formatting of symbol information, along with doc comments support","updatedAt":1412820323000},{"assignedTo":"","body":"This means that for something like\r\n\r\n```TypeScript\r\ninterface x {\r\n}\r\n\r\nvar x = 10;\r\n\r\nexport = x;\r\n```\r\n\r\n`x` will get colorized and have different quick-info at each location.\r\n\r\nFirst it will be an interface, then it will be a plain old variable,","comments":0,"createdAt":1412797497000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":859,"state":"closed","title":"Use proper meanings when requesting information about a node","updatedAt":1412816369000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\ndeclare function f(a: {x: number; }): void;\r\n\r\nf({\r\n    | // <- completions here should show \"x\"\r\n});\r\n```","comments":1,"createdAt":1411599080000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":744,"state":"closed","title":"Contextual object literal property name completion not working in call expressions","updatedAt":1412814883000},{"assignedTo":"","body":"The following code caused a crash:\r\n```TS\r\nfunction f(a: { xa?: number; xb?: number; }) { }\r\nvar xc;\r\nf({\r\n    $\r\n```\r\nThis changes the find the relevant token at the beginning of getCompletionsAtPosition. This fixes the crash, but the following case","comments":1,"createdAt":1412723628000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":853,"state":"closed","title":"Fix crash when getting member completion for an object literal","updatedAt":1412814841000},{"assignedTo":"sheetalkamat","body":"Hi,\r\n  From a few weeks I'm not able to debug TypeScript files from vs 2013 update 3 in main dev machine Running Windows 8.\r\n  I tried to disable almost all the extensions from vs without success: I tried in  my laptop, configured in a similar way bu","comments":7,"createdAt":1412012004000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/127777?v=3","loggedByName":"lucamorelli","milestone":"TypeScript 1.3","number":773,"state":"closed","title":"unable to debug typescript files in vs","updatedAt":1412811791000},{"assignedTo":"","body":"Using tsc version 1.1.0.0:\r\n\r\nWhen compiling an external module, which has a reference comment for a declaration file that introduces the symbols used in the program, the compiler doesn't recognize that the symbol isn't actually available because the","comments":8,"createdAt":1412607962000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/940931?v=3","loggedByName":"psnider","milestone":"","number":827,"state":"closed","title":"v1.1.0.0 use of symbol from unimported module isn't reported as error","updatedAt":1412791122000},{"assignedTo":"","body":"Consider this scenario.\r\n\r\n* An external web service that stores arbitrary JSON objects and provides querying services.\r\n* A sample object could look like `{ \"id\": 100, \"name\": \"Joe Bloggs\" , \"address\":\"1 London\"}`\r\n* As users of this web service, we","comments":3,"createdAt":1411675221000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":751,"state":"closed","title":"Type meta dependencies","updatedAt":1412790983000},{"assignedTo":"","body":"Bug #832 is a crash that I cannot reproduce. There are a few plausible causes for this crash, so I'm adding a few asserts to catch these cases in an effort to learn more. These asserts should not be fatal, and they should not degrade the user experie","comments":1,"createdAt":1412714629000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":848,"state":"closed","title":"Add asserts to help diagnose signature help crash #832","updatedAt":1412723135000},{"assignedTo":"","body":"...for navigateTo.\r\n\r\nCurrent semantics:\r\n* If an overload lacks an implementation, go to the first overload.\r\n* If an overload has any implementation, go to the first one.\r\n* If there are any declarations between an implementation and any overload, ","comments":1,"createdAt":1412215016000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":804,"state":"closed","title":"Only show first overload in a series of consecutive overload signatures","updatedAt":1412721273000},{"assignedTo":"","body":"...parent.","comments":1,"createdAt":1412719987000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":851,"state":"closed","title":"Outlining spans for a standalone block shouldn't have the span of their ...","updatedAt":1412720753000},{"assignedTo":"","body":"","comments":2,"createdAt":1412717083000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":849,"state":"closed","title":"Don't merge nav bar items that are at different indent levels","updatedAt":1412720169000},{"assignedTo":"CyrusNajmabadi","body":"Type the following expression:\r\n```TS\r\nf<number, string>();\r\n```\r\nbut slowly..., specifically start with\r\n```TS\r\nf<\r\n```\r\nand only a couple of characters at a time, type out\r\n```TS\r\nf<number, string>\r\n```\r\nAlong the way, if you type slowly enough, yo","comments":1,"createdAt":1412211727000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.3","number":803,"state":"closed","title":"Flashing in classification for unfinished generic calls","updatedAt":1412717751000},{"assignedTo":"","body":"","comments":2,"createdAt":1412713895000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":847,"state":"closed","title":"Properly marshall diagnostic codes to the managed layer","updatedAt":1412715131000},{"assignedTo":"yuit","body":"1. Create TypeScriptHtml app \r\n2. Set the properties of the project toModule generation - Commonjs and Generate into single file -> app.js\r\n3. Add 2 new typescript files, app2.ts and externalModule.ts\r\n4. In externalModule.ts add some external module","comments":0,"createdAt":1412030179000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.3","number":780,"state":"closed","title":"Compile on updates external modules even though there is no change in the module","updatedAt":1412714845000},{"assignedTo":"","body":"Fix Issues #780","comments":2,"createdAt":1412646581000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":840,"state":"closed","title":"Get emit output external module","updatedAt":1412714569000},{"assignedTo":"","body":"I am a developer on Node.js Tools for Visual Studio and it turns out that for TypeScript + Node Projects we run into an issue with the properties from the 'TypeScript Build' page.\r\n\r\nThe way the SetProperty logic appears to be written for the ts edit","comments":1,"createdAt":1412712304000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/638797?v=3","loggedByName":"crwilcox","milestone":"","number":846,"state":"closed","title":"TypeScript Properties not added to project file correctly without target.","updatedAt":1412712629000},{"assignedTo":"","body":"```\r\n/// <reference path=\"\\\\mhegazy-1\\\\d.ts\"/>\r\n```\r\n\r\nresults in:\r\nd:/test.ts(1,1): error TS6053: File 'd:///mhegazy/d.ts' not found.","comments":2,"createdAt":1409085574000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":530,"state":"closed","title":"support network path for /// references","updatedAt":1412711289000},{"assignedTo":"","body":"I just installed 1.1.0-1 but it doesn't seem to allow for the protected keyword.\r\n\r\nAlso, I'm curious if anyone knows how to update TypeScript support in WebStorm since it appears to have conflicting inspections for TypeScript.  'protected' is not al","comments":1,"createdAt":1412704806000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5899455?v=3","loggedByName":"electricessence","milestone":"","number":845,"state":"closed","title":"'protected' keyword.  When is this available?","updatedAt":1412707429000},{"assignedTo":"","body":"Between 0.9.1 and 0.9.5 the explicit indexer was removed from Object. Between 1.0 and 1.1, code that adds the indexer back to Object causes type comparison failures:\r\n\r\n```ts\r\ninterface Object {\r\n\t[key:string]:any;\r\n}\r\n\r\ninterface Foo {}\r\n\r\nfunction ","comments":6,"createdAt":1412625538000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"","number":835,"state":"closed","title":"Adding indexer to global Object makes other interfaces incompatible with Object","updatedAt":1412661061000},{"assignedTo":"","body":"*** Test.ts ***\r\n\r\nmodule A {\r\n}\r\nmodule B {\r\n    import C = A;\r\n    export import D = C;\r\n}\r\n\r\n*** Compiles to Test.d.ts ***\r\n\r\ndeclare module A {\r\n}\r\ndeclare module B {\r\n    export import D = C;\r\n}\r\n\r\nNote undeclared module \"C\" in compiler output.","comments":1,"createdAt":1412634345000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2698576?v=3","loggedByName":"meirgottlieb","milestone":"","number":839,"state":"closed","title":"Export import of aliased module yields invalid declaration file","updatedAt":1412634754000},{"assignedTo":"","body":"In the following test case the compiler gives an error message about expecting a comma. What I believe is going on here is that a \":\" is mistakenly being used instead of a an \"=\". It might make sense to return this suggestion to the user instead of t","comments":0,"createdAt":1412633766000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/880843?v=3","loggedByName":"chrisbubernak","milestone":"","number":838,"state":"open","title":"More helpful error message for mistakenly using : instead of = in Enum","updatedAt":1412634690000},{"assignedTo":"","body":"","comments":1,"createdAt":1412626531000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":836,"state":"closed","title":"Handle findAllRefs/getOccurrences for properties inherited from aliased types","updatedAt":1412634096000},{"assignedTo":"","body":"Now we will always place child items of a node in the right bar, even if we're\r\nalso placing it on the 'top level nodes' list on the left.  This makes things\r\nclearer for users by making it clear that any time you have a node selected on\r\nthe left, y","comments":1,"createdAt":1412569214000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":826,"state":"closed","title":"Tweak how we populate NavBarItems.","updatedAt":1412627585000},{"assignedTo":"","body":"Sometimes i use minified script snippets like AppInsights (code snippet is generated by the azure portal), that creates a class in windows.whatever.\r\n\r\nTypescript compiler then complains about unknown things on window.\r\nCode would work great if the c","comments":2,"createdAt":1412610987000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6654388?v=3","loggedByName":"mbeckenbach","milestone":"","number":829,"state":"closed","title":"Ignore Regions of code in compiler","updatedAt":1412623740000},{"assignedTo":"sheetalkamat","body":"Try to rename `SyntaxKind.LabelledStatement`, a dialogue box will pop up and populate it with \"SyntaxKind.LabelledStatement\". You change the right-hand side of the dot to \"LabeledStatement\", and you end up with an entity called `SyntaxKind.SyntaxKind","comments":0,"createdAt":1410395752000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.3","number":652,"state":"closed","title":"Rename on enum member gives counterintuitive experience","updatedAt":1412622388000},{"assignedTo":"","body":"","comments":2,"createdAt":1412373595000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":817,"state":"closed","title":"Fixes the name displayed in the rename dialog to be just symbol name instead of qualified path","updatedAt":1412621844000},{"assignedTo":"","body":"Enabled new flag: useCaseSensitiveFileNames in the compiler runner that sets the case sensitive file resolution to either true or false for that test.\r\n Fixed the relative directory computation to check canonical file name instead of just literal str","comments":1,"createdAt":1412374336000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":818,"state":"closed","title":"Fixes incorrect path resolution of sources to sourcemap when the directory paths differ in only case","updatedAt":1412621290000},{"assignedTo":"","body":"Conformance test for tuple feature (PR #428)","comments":1,"createdAt":1412383191000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":822,"state":"closed","title":"Tuple conformance","updatedAt":1412619263000},{"assignedTo":"","body":"Followup on commit 01d93b22ba88bc06ff9026f0d94f0047c8576d23 of the Navigation Items feature by @DanielRosenwasser. I believe that imports should be shown in the navigation bar, even though they will have no children. It is possible to navigate to the","comments":2,"createdAt":1412616663000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":831,"state":"open","title":"Show imports in navigation bar","updatedAt":1412618116000},{"assignedTo":"","body":"I would love to see support for compiler calculated constants:\r\nThings like:\r\n\r\n    var msg = 'Hello'+' '+'world'+'!';\r\n    var ratio = 3/1;\r\n    var height = 30;\r\n    var width = height * ratio;\r\n\r\ni like them to be translated to something like this","comments":17,"createdAt":1411378976000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/465641?v=3","loggedByName":"lee-elenbaas","milestone":"","number":720,"state":"closed","title":"Compiler calculated values support","updatedAt":1412587892000},{"assignedTo":"","body":"From #587 - \r\n\r\nWe should give a better, more helpful error message when the ^ operator is used on boolean values.\r\n\r\nFrom the comment:\r\n\r\nGiven this decision, may I suggest improving the error message to state something akin to the following?\r\n\r\n\"er","comments":3,"createdAt":1411165486000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"Community","number":712,"state":"closed","title":"Improve error message for using ^ on boolean values","updatedAt":1412570716000},{"assignedTo":"","body":"a.ts:\r\n```TypeScript\r\n///<reference path='a.ts'/>\r\n```\r\nOld compiler reported error:\r\na.ts(1,1): error TS5006: A file cannot have a reference to itself.\r\n\r\nNew compiler \r\nNo error.\r\n\r\nI am not sure if this should be just by design, will let triage de","comments":1,"createdAt":1409365229000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"Community","number":568,"state":"closed","title":"No error when /// reference path references same file","updatedAt":1412570688000},{"assignedTo":"","body":"Using tsc 1.0.1.0:\r\n\r\n`MyModule.ts`:\r\n\r\n    import MyModule = require('MyModule');\r\n\r\nThen compile as AMD:\r\n\r\n    tsc -m amd MyModule.ts\r\n\r\nFails with error:\r\n\r\n>/usr/local/lib/node_modules/typescript/bin/tsc.js:0\r\n>(function (exports, require, modul","comments":3,"createdAt":1412286276000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/350947?v=3","loggedByName":"drewnoakes","milestone":"","number":806,"state":"closed","title":"RangeError: Maximum call stack size exceeded with self-referential module","updatedAt":1412528127000},{"assignedTo":"","body":"Fix for issue #712. The specific issue mentioned there concerns providing a more helpful error message when the ^ operator is used with 2 boolean operands. My change is slightly more general in that it generates an error for &, &=, ^, ^=, |, and |=. ","comments":5,"createdAt":1412388436000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/880843?v=3","loggedByName":"chrisbubernak","milestone":"","number":823,"state":"closed","title":"Fix for issue #712","updatedAt":1412527871000},{"assignedTo":"","body":"Hi,\r\n  I just opened this issue [https://github.com/borisyankov/DefinitelyTyped/issues/2923](https://github.com/borisyankov/DefinitelyTyped/issues/2923) about the **columndef property** of **nggrid**.  \r\n  In this case normally the property is set as","comments":1,"createdAt":1412455745000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/127777?v=3","loggedByName":"lucamorelli","milestone":"","number":825,"state":"closed","title":"definition  of more types for a property","updatedAt":1412464500000},{"assignedTo":"","body":"Mohamed rightly pointed out we were triplicating work and we could just roll\r\nthe new checks into the existing tree walking code.","comments":2,"createdAt":1412382857000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":821,"state":"closed","title":"Cleaning up the new rename-comments/strings code.","updatedAt":1412404237000},{"assignedTo":"","body":"","comments":4,"createdAt":1411079500000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":700,"state":"closed","title":"Adding protected members to Language Specification","updatedAt":1412399310000},{"assignedTo":"","body":"Notable differences:\r\n\r\n* For an external module in file `a/b/c.ts`, the \"top-level\" container is displayed as `\"c\"`.","comments":1,"createdAt":1411161254000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":709,"state":"closed","title":"Moved Navigation Bar Functionality to use the New Tree","updatedAt":1412394597000},{"assignedTo":"","body":"Right now interfaces use the same syntax for properties with and without accessors. This is fine for duck typed interfaces, but the problem is, there is no way to specify properties with only one part (getter or setter) present. Usually, they are rea","comments":7,"createdAt":1412368895000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5594348?v=3","loggedByName":"IKoshelev","milestone":"","number":814,"state":"closed","title":"Properties with only getter or setter in an interface","updatedAt":1412387094000},{"assignedTo":"","body":"This commit adds support for typle types. A tuple type is written as a comma separated sequence of types enclosed in square brackets:\r\n```typescript\r\n[T0, T1, ... , Tn]\r\n```\r\nA tuple type corresponds to an object type that extends `Array<T>`, where `","comments":4,"createdAt":1407786853000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":428,"state":"closed","title":"Adding support for tuple types (e.g. [number, string])","updatedAt":1412383191000},{"assignedTo":"","body":"","comments":3,"createdAt":1412373301000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":816,"state":"closed","title":"Support rename in comments and strings.","updatedAt":1412378958000},{"assignedTo":"","body":"...h the syntactic classifier when classifying expressions involving generics.","comments":0,"createdAt":1412326589000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":813,"state":"closed","title":"Add some heuristics in the lexical classifier to make it play better wit...","updatedAt":1412374708000},{"assignedTo":"","body":"Enabled new flag: useCaseSensitiveFileNames in the compiler runner that sets the case sensitive file resolution to either true or false for that test.\r\nFixed the relative directory computation to check canonical file name instead of just literal stri","comments":1,"createdAt":1412370685000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":815,"state":"closed","title":"Fixes incorrect path resolution of sources to sourcemap when the directory paths differ in only case","updatedAt":1412373928000},{"assignedTo":"yuit","body":"Attached photo of current behavior in VS. We only want to have squiggly on the function name or the word constructor \r\n![squiggly](https://cloud.githubusercontent.com/assets/489742/4467356/56eaa104-48ef-11e4-943b-bb376ca27796.PNG)\r\n","comments":4,"createdAt":1412115354000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"TypeScript 1.3","number":790,"state":"closed","title":"Squiggly line over entire function declaration instead of only on the name","updatedAt":1412372066000},{"assignedTo":"yuit","body":"This input results in one \"Duplicate identifier\" error on the second declaration. it would be helpful to have all of them flagged. this also applies to duplicate implementations incase of functions.\r\n\r\n```TypeScript\r\ninterface I {\r\n    a\r\n}\r\n\r\ninterf","comments":1,"createdAt":1409084839000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":527,"state":"closed","title":"Flag all instances of duplicate definitions","updatedAt":1412372042000},{"assignedTo":"","body":"#527","comments":1,"createdAt":1412188138000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":798,"state":"closed","title":"Flag all duplication","updatedAt":1412370618000},{"assignedTo":"","body":"When I open up src/compiler/checker.ts in Visual Studio, I get the following crash in `getSemanticClassifications`:\r\n\r\nScript callstack:\r\nTypeError: Unable to get property 'indexOf' of undefined or null reference\r\n   at isTypeNode (:2773:25)\r\n   at p","comments":4,"createdAt":1412301304000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":811,"state":"closed","title":"Crash when calling getSemanticClassifications on checker.ts","updatedAt":1412359153000},{"assignedTo":"","body":"...ollapse to definitions\".","comments":1,"createdAt":1412296593000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":808,"state":"closed","title":"Specify which outlining spans should auto-collapse if the user choose \"c...","updatedAt":1412318912000},{"assignedTo":"","body":"This is a rough sketch so I have something to refer to.\r\n\r\nCurrently, we treat the two instances of `T` in the parameter list here equally:\r\n```ts\r\ndeclare function containsAny<T>(arr: T[], predicate: (x: T) => boolean): boolean;\r\n```\r\nThis means tha","comments":1,"createdAt":1412300529000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":810,"state":"open","title":"Only consider function parameter types for generic type inference as a last resort","updatedAt":1412302386000},{"assignedTo":"","body":"...ervice.","comments":1,"createdAt":1412298008000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":809,"state":"closed","title":"Update compiler localized messages with those provided by the language s...","updatedAt":1412298793000},{"assignedTo":"mhegazy","body":"Upon opening a new file, writing some text, and erasing it:\r\n\r\n```\r\n---------------------------\r\nAssertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue\r\n---------------------------\r\nError processing work item: \r\n\r\n\r\n\r\n\r\n\r\nAction description:\r\n\r\ng","comments":1,"createdAt":1410891833000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.3","number":678,"state":"closed","title":"VS Assertion Failed for getCompletionsAtPosition","updatedAt":1412286877000},{"assignedTo":"","body":"I would like to see an extract statement added to TypeScript.\r\n\r\nThis would simply take all the properties of an object and extract them as local variables, much like the extract function in PHP.\r\n\r\nThis would be particularly useful when importing a ","comments":7,"createdAt":1412178269000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/103348?v=3","loggedByName":"mindplay-dk","milestone":"","number":797,"state":"closed","title":"feature: extract statement","updatedAt":1412234500000},{"assignedTo":"","body":"","comments":1,"createdAt":1412197640000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":799,"state":"closed","title":"Values sharing names with interfaces no longer classified as interfaces","updatedAt":1412210535000},{"assignedTo":"mhegazy","body":"A file 0.ts references a file 1.ts in a windows directory called C:\\Work. When referenced like this it works:\r\n\r\n```TS\r\n///<reference path=\"1.ts\"/>\r\n```\r\nBut the following reference does not work:\r\n```TS\r\n///<reference path=\"C:\\Work\\1.ts\"/>\r\n```\r\nThe","comments":1,"createdAt":1412198975000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.3","number":800,"state":"closed","title":"///<reference doesn't work with absolute paths","updatedAt":1412208236000},{"assignedTo":"","body":"fixes #800 ","comments":1,"createdAt":1412205271000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":801,"state":"closed","title":"Handle /// references with absolute path","updatedAt":1412208228000},{"assignedTo":"yuit","body":"shims.ts explicitly sets --norelease to true. this results in different declaration emit in compile time and in CompileOnSave.","comments":0,"createdAt":1410215286000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":629,"state":"closed","title":"Do not set --noResolve in language service","updatedAt":1412199118000},{"assignedTo":"","body":"Fix #629. With this changes, there will no longer be an error report for self reference. However, the problem of self-reference is addressed in #748 pull request","comments":2,"createdAt":1411671419000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":750,"state":"closed","title":"Remove default setting of noResolve flag","updatedAt":1412198967000},{"assignedTo":"","body":"Fix issue #109 where incorrect errors are being displayed when you try and inherit from multiple classes.\r\n\r\nInstead of the compiler errors \"expected {\" and \"expected ;\" the compiler now displays the proper error, \"A class can only extend a single cl","comments":4,"createdAt":1412176706000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/880843?v=3","loggedByName":"chrisbubernak","milestone":"","number":796,"state":"closed","title":"Fix Issue #109 (no error for Multiple inheritance)","updatedAt":1412197257000},{"assignedTo":"","body":"","comments":1,"createdAt":1412111886000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":786,"state":"closed","title":"Show aliases in completion list","updatedAt":1412196880000},{"assignedTo":"","body":"Fix issue [#568](https://github.com/Microsoft/TypeScript/issues/568) where no error is being displayed when a file tries to reference itself. \r\n\r\nThe compiler now shows the error message \"A file cannot have a reference to itself.\" when a file tries t","comments":7,"createdAt":1411661689000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/880843?v=3","loggedByName":"chrisbubernak","milestone":"","number":748,"state":"closed","title":"Fix issue #568 (no error for file self reference)","updatedAt":1412196287000},{"assignedTo":"","body":"Several things this code review addresses:\r\n1. Partial overload resolution for signature help\r\n2. Recognize trailing comma in more places\r\n3. Simplify calls for new language service API\r\n4. Fixes to syntactically driven overload selection rules in si","comments":1,"createdAt":1412122675000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":792,"state":"closed","title":"Various small fixes related to signature help","updatedAt":1412194514000},{"assignedTo":"","body":"Fixes #384.","comments":2,"createdAt":1407445391000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":397,"state":"closed","title":"Graceful parser recovery for interface with 'implements' clause.","updatedAt":1412183359000},{"assignedTo":"","body":"When I have a single file, the solution with C# and TS files compiles in less than a second. When I split the TS file into two files, it takes regularly more than 6 seconds for the solution to compile.\r\n\r\nI use VS PRO 2013 Update 3","comments":1,"createdAt":1412145972000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/37391?v=3","loggedByName":"czb","milestone":"","number":794,"state":"closed","title":"one file vs. multiple *.ts files - performance","updatedAt":1412181512000},{"assignedTo":"","body":"","comments":0,"createdAt":1412170759000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":795,"state":"closed","title":"Language Specification formatting fixes","updatedAt":1412172192000},{"assignedTo":"","body":"","comments":3,"createdAt":1412096544000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":784,"state":"closed","title":"Adding tuple types to language specification","updatedAt":1412170833000},{"assignedTo":"","body":"enable scenarios when cursor is positioned at the end of token","comments":9,"createdAt":1411680685000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":752,"state":"closed","title":"make rename\\gotoDef work at the end of token","updatedAt":1412143578000},{"assignedTo":"","body":"I'm using [CodeClimate](https://codeclimate.com/) to monitor the quality, style and test coverage of my source files. I wish [CodeClimate](https://codeclimate.com/) could monitor TypeScript files directly, but until that day comes, I have it monitori","comments":4,"createdAt":1411884038000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1058243?v=3","loggedByName":"jedmao","milestone":"","number":765,"state":"closed","title":"Reduce Lint Warnings from Generated JavaScript","updatedAt":1412142074000},{"assignedTo":"","body":" #527","comments":1,"createdAt":1412122627000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":791,"state":"closed","title":"Flag duplicate","updatedAt":1412126307000},{"assignedTo":"","body":"...ld not actually be keywords according to the grammar.","comments":1,"createdAt":1412113053000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":787,"state":"closed","title":"Tweak classification so it does not classify things as keywords that cou...","updatedAt":1412122613000},{"assignedTo":"","body":"```TypeScript```\r\nvar /*7*/myvar = new m1.m2./*8*/c();   \r\n```\r\n\r\n```TypeScript```\r\n/*8*/\r\n```\r\nin above code is not colored","comments":2,"createdAt":1412104806000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":785,"state":"closed","title":"Comment after the dotted expression is not colored","updatedAt":1412120056000},{"assignedTo":"DanielRosenwasser","body":"``` TypeScript\r\nfunction f () {\r\n    if (0) return true;\r\n    else throw new Error();\r\n}\r\n```","comments":0,"createdAt":1411934412000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":768,"state":"closed","title":"highligting for return should also highlight throw statements","updatedAt":1412116859000},{"assignedTo":"","body":"Commenting on outlined section doesn't comment whole section.\r\n\r\nBefore commenting:\r\n![beforecommenting](https://cloud.githubusercontent.com/assets/8052792/4447948/f68b3458-480e-11e4-8ca9-d4b730418b54.jpg)\r\n\r\nAfter setting curser at Class c, and sele","comments":1,"createdAt":1412019031000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":777,"state":"closed","title":"Commenting with outlining doesnt comment whole section","updatedAt":1412115345000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript \r\nclass C {\r\n    get value() { return 0; }\r\n    set value(a) { }\r\n}\r\n```","comments":0,"createdAt":1411934530000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":769,"state":"closed","title":"Should highlight get and set kewords if one is selected","updatedAt":1412114550000},{"assignedTo":"","body":"'get'/'set' keywords are highlighted for analogous accessors.\r\n\r\nFixes #769.","comments":2,"createdAt":1412027599000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":778,"state":"closed","title":"getOccurrences for 'get' and 'set' keywords.","updatedAt":1412114058000},{"assignedTo":"","body":"","comments":3,"createdAt":1412053600000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":781,"state":"closed","title":"Propery walk all declarations to find doc comments for a symbol.","updatedAt":1412113675000},{"assignedTo":"","body":"Also revised behavior for 'return' keywords in that when the position resides on a 'return' statement, 'throw' keywords in the same function scope that are not within a try-block are also highlighted.\r\n\r\nFixes #768","comments":2,"createdAt":1412016870000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":776,"state":"closed","title":"Support getOccurrencesAtPosition for 'throw' keywords.","updatedAt":1412111174000},{"assignedTo":"","body":"Filter protected and private members from the completion list based on the location and the type we are accessing it on. The change leverages the checkClassPropertyAccess to check if it is a valid access instead of duplicating the code.","comments":2,"createdAt":1411768093000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":763,"state":"closed","title":"Protected completion","updatedAt":1412109166000},{"assignedTo":"","body":"...when following dots.\r\n\r\nFixes #753","comments":1,"createdAt":1411709510000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":755,"state":"closed","title":"Fix issue where comments are incorrectly identified as identifiers","updatedAt":1412105246000},{"assignedTo":"","body":"Hi there,\r\n\r\nIt seems that VS 2013 Update 3 is no longer showing the JSDoc parameter description in the IDE. I have tested this in the TypeScript playground and found that it works there as expected but not in VS. I have ReSharper 8 installed so I di","comments":3,"createdAt":1411749133000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/In%20Discussion","name":"In Discussion","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3857782?v=3","loggedByName":"rwhepburn","milestone":"","number":759,"state":"closed","title":"VS should show @param documentation in signature help","updatedAt":1412104462000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\nvar x = / [a - z /]$ / i;var x1 = /[a-z/]$/i;var x2 = /[a-z/]$ /i;\r\n```\r\n\r\nExpected: \r\n\r\nvar x = / [a - z /]$ / i;!!! ',' expected.\r\n\r\nActual: \r\n\r\n    var x = / [a - z /]$ / i;!!! ',' expected.!!! ',' expected.!!! Could not find symbol","comments":1,"createdAt":1405627071000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":110,"state":"closed","title":"[Errors] regex parsing","updatedAt":1412102633000},{"assignedTo":"","body":"It has been requested to supply a syntax tree in issues https://github.com/Microsoft/TypeScript/pull/438 and https://github.com/Microsoft/TypeScript/issues/254, in which @CyrusNajmabadi has rightly asked what such a syntax tree would be used for. To ","comments":2,"createdAt":1410171611000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1058243?v=3","loggedByName":"jedmao","milestone":"","number":625,"state":"open","title":"Concrete Syntax Tree","updatedAt":1412049808000},{"assignedTo":"","body":"fixes #770, #771 ","comments":3,"createdAt":1411968844000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":772,"state":"closed","title":"outlining support for switch blocks\\array literals","updatedAt":1412045359000},{"assignedTo":"","body":"1. Create a project from template \"HTML Application with TypeScript\"\r\n2. Invoke some language service features, like renaming, find all references, nav bar\r\n3, Create another project from template \"HTML Application with TypeScript\"\r\n\r\nExpected Result","comments":1,"createdAt":1412012111000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5892905?v=3","loggedByName":"baopingz","milestone":"","number":774,"state":"closed","title":"Lost language service after creating another project","updatedAt":1412012936000},{"assignedTo":"","body":"![capture](https://cloud.githubusercontent.com/assets/8000722/4435574/64a986b6-474b-11e4-93a3-e7dd94d4296d.PNG)\r\n","comments":0,"createdAt":1411934989000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":771,"state":"closed","title":"arrays are not outlined","updatedAt":1412010623000},{"assignedTo":"","body":"![capture](https://cloud.githubusercontent.com/assets/8000722/4435566/f62e9302-474a-11e4-8976-98f549006fc3.PNG)\r\n","comments":0,"createdAt":1411934803000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":770,"state":"closed","title":"Switch statemetns are not outlined","updatedAt":1412010583000},{"assignedTo":"","body":"Markdown version of language spec can now be generated using `jake generate-spec`. This task is not part of the normal build process but must be run manually after changing the Language Specification Word document. The task uses the cscript.exe scrip","comments":1,"createdAt":1411767653000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":762,"state":"closed","title":"Add jake task for generating Markdown language spec","updatedAt":1411770087000},{"assignedTo":"","body":"I know there has been lot of discussion before - https://typescript.codeplex.com/workitem/859\r\nJust wondering is it added yet? It is a must have and great feature!\r\n\r\n<3 typescript!","comments":1,"createdAt":1411759716000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/462229?v=3","loggedByName":"yaswanthraj","milestone":"","number":761,"state":"closed","title":"Named Parameters support?","updatedAt":1411762981000},{"assignedTo":"","body":"","comments":1,"createdAt":1411755885000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":760,"state":"closed","title":"Adjust sig help implementation to match the new simpler sig help API.","updatedAt":1411759434000},{"assignedTo":"","body":"I think the following should result in an error, but it passes the type checker:\r\n\r\n    function foo<T>(getT: () => T, setT: (t: T) => void) { }\r\n\r\n    function getString() {\r\n        return 'a';\r\n    }\r\n\r\n    function setNum(n: number) { }\r\n\r\n    fo","comments":2,"createdAt":1411731889000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1866449?v=3","loggedByName":"duncanbrown","milestone":"","number":756,"state":"closed","title":"No compile error when generic type inferred to be {}","updatedAt":1411749947000},{"assignedTo":"","body":"Current pattern adds `formatDiffTemplate.html`, `documentFormattingTests.json` and `ruleFormattingTests.json` from `tests/cases/unittests/services/formatting` to test suite instead of filtering them out.","comments":1,"createdAt":1411740621000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/557590?v=3","loggedByName":"RReverser","milestone":"","number":758,"state":"closed","title":"Prevent non-TypeScript files from being added to tests.","updatedAt":1411748163000},{"assignedTo":"","body":"Modified word2md to convert `<` characaters to `&lt;` everywhere but code blocks and code fragments.","comments":0,"createdAt":1411740003000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":757,"state":"closed","title":"Escaping of '<' characters in Word to Markdown conversions","updatedAt":1411741250000},{"assignedTo":"","body":"This allows for classified sig help on the editor side.","comments":1,"createdAt":1411631977000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":746,"state":"closed","title":"Switch signature help over to using display parts.  ","updatedAt":1411682863000},{"assignedTo":"","body":"There are just 2 ways to create a function that doesn't belong to any scope isn't closed over anything, but the global scope. The first one is to define a function at a global level. The second one is to use the `new` operator `var f = new Function(\"","comments":5,"createdAt":1408497455000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":484,"state":"closed","title":"Suggestion: allow emitting unscoped functions","updatedAt":1411682178000},{"assignedTo":"","body":"Fixes #213.\r\n\r\nThis pull request adds the language specification in Markdown format.\r\n\r\nThe pull request also includes a tool (word2md) that can convert Word documents to Markdown format. The tool uses the Word Automation APIs to start an instance of","comments":11,"createdAt":1411669608000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":749,"state":"closed","title":"Language Specification in Markdown format","updatedAt":1411680680000},{"assignedTo":"","body":"","comments":2,"createdAt":1411620832000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":745,"state":"closed","title":"Shim getSignatureAtPosition using the new signature help interfaces","updatedAt":1411678795000},{"assignedTo":"","body":"I am new to TypeScript, so I may be going about this entirely wrong, but I've got a scenario where implicit referencing is causing problems.\r\n\r\nIn my project (Visual Studio 2013 Update 3), I have several Web pages. Each one has one reference to a scr","comments":7,"createdAt":1411592229000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8903815?v=3","loggedByName":"JTennessen","milestone":"","number":742,"state":"closed","title":"Having issues getting things to work with implicit referencing","updatedAt":1411678580000},{"assignedTo":"ahejlsberg","body":"Instead of doc and pdf if language spec was written with markdown (or asciidoc) it could help to follow changes, and perhaps even for pull-request in the future ?","comments":14,"createdAt":1406111335000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/864201?v=3","loggedByName":"fdecampredon","milestone":"","number":213,"state":"closed","title":"Suggestion: Language Spec as markdown","updatedAt":1411677970000},{"assignedTo":"","body":"* Use JSDoc when possible\r\n* Switch return types from Language Service public APIs to interfaces\r\n* remove unused files\r\n* remove references to 'foo' from user facing messages","comments":1,"createdAt":1411592426000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":743,"state":"closed","title":"Cleanup","updatedAt":1411660909000},{"assignedTo":"yuit","body":"Create a TypeScript project and add node.d.ts to the project (ex use NuGet to find the typings file). Now the quoted module names from node.d.ts show up in the completion list:\r\n \r\n![image](https://cloud.githubusercontent.com/assets/7121557/4195243/f","comments":1,"createdAt":1410224248000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.3","number":633,"state":"closed","title":"Don't show quoted module names in completion list","updatedAt":1411597704000},{"assignedTo":"","body":"Fixes #633","comments":1,"createdAt":1411517180000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":732,"state":"closed","title":"Not show module names","updatedAt":1411597388000},{"assignedTo":"","body":"The TypeScript compiler generates the following code for rest arguments:\r\n\r\n```\r\nfunction foo(x, y, z, ...rest) {\r\n  return;\r\n}\r\n\r\nfunction foo(x, y, z) {\r\n  var rest = [];\r\n  for (var i = 0; i < arguments.length - 3; i++) {\r\n    rest[i] = arguments[","comments":4,"createdAt":1408641243000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/311082?v=3","loggedByName":"mbebenita","milestone":"Community","number":498,"state":"open","title":"Optimize rest arguments.","updatedAt":1411595168000},{"assignedTo":"","body":"Oy.","comments":1,"createdAt":1411589371000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"","number":741,"state":"closed","title":"spelling: Collistion -> Collision","updatedAt":1411590085000},{"assignedTo":"","body":"The function displayPartKind in the checker does not account for things like a function merging with a module. It always classifies such entities as functions because Function is given higher priority than Module. The correct thing to do here is to p","comments":0,"createdAt":1411586908000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":740,"state":"open","title":"QuickInfo classification of symbol kinds does not account for overlapping categories","updatedAt":1411586935000},{"assignedTo":"vladima","body":"I just tried to check whether the compiler emits an error in this case:\r\n\r\n```javascript\r\nfunction f() {\r\n    \"use strict\";\r\n    var a;\r\n    delete a;\r\n}\r\n```\r\n\r\nThere's no compiler error, though it should be.\r\n\r\nAfter debugging a bit, I found out th","comments":0,"createdAt":1411557987000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4499495?v=3","loggedByName":"zhuravlikjb","milestone":"TypeScript 1.3","number":734,"state":"closed","title":"Version 1.1: parser.ts/parseUnaryExpression has incorrect logic in strict checks","updatedAt":1411586435000},{"assignedTo":"","body":"There's two issues here... the first is that I noticed that Array.concat has an overload declaration which is wrong: ```concat<U extends T[]>(...items: U[]): T[];```  \r\n\r\nSo the items array would then be supposed to match ```U[][]``` and you can see ","comments":2,"createdAt":1411581171000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"","number":738,"state":"closed","title":"weird Array.concat declaration and associated LanguageService/typeChecker issues","updatedAt":1411586426000},{"assignedTo":"vladima","body":"When we cannot find a symbol on the right hand side of an instanceof operator, we still report the error that says the RHS must be `any` or assignable to Function. We really should suppress this error, or rather, we should propagate the unknown/any s","comments":0,"createdAt":1411519646000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.3","number":733,"state":"closed","title":"Cascading errors on right hand side of instanceof operator","updatedAt":1411586424000},{"assignedTo":"","body":"fixes #733 ","comments":2,"createdAt":1411575129000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":737,"state":"closed","title":"do not report cascading errors in instanceof operator","updatedAt":1411582161000},{"assignedTo":"","body":"Initial work on signature help. This handles the simple call case, but does not handle generic functions.","comments":0,"createdAt":1411424008000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":726,"state":"closed","title":"Signature help in the new compiler","updatedAt":1411581530000},{"assignedTo":"","body":"fixes #734 ","comments":2,"createdAt":1411574008000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":736,"state":"closed","title":"use operator token when checking unary expressions in strict mode","updatedAt":1411581504000},{"assignedTo":"","body":"","comments":3,"createdAt":1411500684000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":731,"state":"closed","title":"Use the 'skipTrivia' scanner flag for lexical classification","updatedAt":1411580390000},{"assignedTo":"","body":"Original thread: https://typescript.codeplex.com/discussions/438243\r\nAlso: http://typescript.codeplex.com/workitem/852\r\n\r\nNot sure how this should be approached, but I have some suggestions and for some of us that could really use this right about no","comments":2,"createdAt":1407346453000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5899455?v=3","loggedByName":"electricessence","milestone":"","number":375,"state":"closed","title":"ASM.js compilation target.","updatedAt":1411568924000},{"assignedTo":"","body":"This is a brief sketch to show how this feature works and how it plugs into the compiler.  Continued checkins will flesh it out.","comments":0,"createdAt":1411157341000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":708,"state":"closed","title":"Initial work on classified quick info.","updatedAt":1411512495000},{"assignedTo":"","body":"Added tests for #700 ","comments":1,"createdAt":1411496616000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":730,"state":"closed","title":"Added protected conformance tests","updatedAt":1411505092000},{"assignedTo":"","body":"In section 8.2.2,\r\n>Protected property members can be accessed only within their declaring class and classes derived from their declaring class, and `a protected instance property member must be accessed through an instance of the enclosing class`\r\n\r","comments":0,"createdAt":1411492346000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":729,"state":"open","title":"Protected accessibility check does not state that instance members are accessible through derived classes","updatedAt":1411496598000},{"assignedTo":"","body":"","comments":2,"createdAt":1411410058000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":724,"state":"closed","title":"Moved brace matching functionality to use the new syntax tree","updatedAt":1411490773000},{"assignedTo":"","body":"```\r\nclass Point {\r\n    x: number;\r\n    y: number;\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    getDist() { \r\n        return Math.sqrt(this.x * this.x + \r\n        this.y * this.y); \r\n    }\r\n}\r\nvar p =","comments":6,"createdAt":1411221307000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1284728?v=3","loggedByName":"bluishoul","milestone":"","number":714,"state":"closed","title":"The Demo on the typescript official website got a little bug","updatedAt":1411463557000},{"assignedTo":"","body":"Fixes #439","comments":3,"createdAt":1411165321000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":711,"state":"closed","title":"Return exit code","updatedAt":1411436765000},{"assignedTo":"","body":"The following code:\r\n\r\n```\r\ninterface HasDate {date: Date;}\r\nvar o : HasDate = {\"date\": \"2014-05-01T14:00:00.000Z\"}\r\nvar a : HasDate[] = [{\"date\": \"2014-05-01T14:00:00.000Z\"}]\r\n```\r\n\r\nwhen entered into [the TypeScript Playground](http://www.typescrip","comments":6,"createdAt":1411347912000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/940931?v=3","loggedByName":"psnider","milestone":"","number":719,"state":"closed","title":"inconsistent and misleading error message for type mismatch","updatedAt":1411430081000},{"assignedTo":"","body":"It appears to me that module and class namespaces are colliding in the version 1.1.0.0 compiler.\r\n\r\nMy declaration file **X.d.ts**: \r\n\r\n```ts\r\ndeclare module \"X\" {\r\n    export interface IA {name: string;}\r\n    export class A implements IA {\r\n        ","comments":6,"createdAt":1411411222000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/940931?v=3","loggedByName":"psnider","milestone":"","number":725,"state":"closed","title":"version 1.1.0.0: are module and class names colliding?","updatedAt":1411426906000},{"assignedTo":"","body":"Issue link: https://github.com/Microsoft/TypeScript/issues/439\r\n\r\nAs per the suggestions in the issue, added an enum to indicate the different exitCodes - (success, parseError, semanticError, emitError, commandLineError). Updated the corresponding co","comments":4,"createdAt":1408560452000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/529693?v=3","loggedByName":"karunasagark","milestone":"","number":491,"state":"closed","title":"Fixes issue 439: Added exitCode enum to differentiate between different error conditions","updatedAt":1411421375000},{"assignedTo":"yuit","body":"Currently, when there are type errors, tsc returns 1 as its exit code, but still generates code. However, if there are fatal errors, like a parse error, tsc will also return exit code 1, but fail to generate code. It would be useful to me if tsc coul","comments":7,"createdAt":1407869030000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/75477?v=3","loggedByName":"hesselink","milestone":"TypeScript 1.3","number":439,"state":"closed","title":"tsc should have different exit code depending on if it generated code","updatedAt":1411421330000},{"assignedTo":"","body":"this is a suggestion, I'd like the following to work:\r\n\r\n```typescript\r\ninterface X { n: number; }\r\n\r\nclass Private {\r\n    private n: number;\r\n    f() { return <X>this; }\r\n}\r\n```\r\n\r\nSince ```Private``` knows it matches the X interface, it should be a","comments":2,"createdAt":1411084521000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"","number":703,"state":"closed","title":"Allow classes to cast themselves to interfaces which use their private members.","updatedAt":1411420215000},{"assignedTo":"mhegazy","body":"In the describe callback for checkTestCodeOutput in src\\harness\\compilerRunner.ts, I had a type that referenced CompilerSetting[]. I put the curser before it, and typed \"TestCaseParser.\" (note the dot). That triggered the following crash.\r\n\r\nTypeErro","comments":1,"createdAt":1409252044000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.3","number":558,"state":"closed","title":"Crash in VS on dot completion with the new language service","updatedAt":1411420184000},{"assignedTo":"mhegazy","body":"```TypeScript\r\nclass Overloading {\r\n        constructor(private value: number, public name: string)  :  }\r\n}\r\n```\r\n\r\nResults in an assert as the error span length is -2.\r\n \r\n","comments":0,"createdAt":1411145711000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":705,"state":"closed","title":"compiler crash with constructors with partial type annotation","updatedAt":1411419445000},{"assignedTo":"mhegazy","body":"```\r\ncscript tsc.js --souceMap a.ts\r\n```\r\nCompiler fails with:\r\nd:\\enlistments\\github\\built\\local\\tsc.js(6302, 21) Microsoft JScript runtime error: 'JSON' is undefined","comments":0,"createdAt":1411149154000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":706,"state":"closed","title":"--sourceMap is broken on cscript","updatedAt":1411415284000},{"assignedTo":"","body":"JSON does not exist in cscript5.8, which causes the samples to fail to compile. we only use it to write the source map records which is fairly simple to serialize. this fixes #706","comments":5,"createdAt":1411164945000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":710,"state":"closed","title":"Add explict serialization logic for source maps to avoid using JSON","updatedAt":1411415268000},{"assignedTo":"mhegazy","body":"reading local files uses JSON.parse. this will fail on cscript 5.8 with:\r\n```\r\nMicrosoft JScript runtime error: 'JSON' is undefined\r\n```\r\n\r\nWe need to check if JSON exists and show an error message","comments":0,"createdAt":1411149426000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":707,"state":"closed","title":"--locale will fail on cscript","updatedAt":1411415050000},{"assignedTo":"","body":"Within TypeScript Playground when you press F2 (Refactor) multiple times the definition gets refactored multiple times and colour changed each time you press F2","comments":1,"createdAt":1411232978000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1069295?v=3","loggedByName":"lu4","milestone":"","number":715,"state":"closed","title":"Playground bug: refactoring command issued multiple times","updatedAt":1411412914000},{"assignedTo":"","body":"The compiler generates invalid code when defining aliases.  Look at this example:\r\n\r\n```\r\n// sample.ts\r\ndeclare module A.B.C.D {\r\n\texport class Foo {}\r\n}\r\n\r\nimport C = A.B.C;\r\nimport D = C.D;\r\nimport Foo = D.Foo;\r\n```\r\n\r\nExpected generated code:\r\n```","comments":1,"createdAt":1411409351000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/541772?v=3","loggedByName":"bman654","milestone":"","number":723,"state":"closed","title":"Invalid code generation for Aliases","updatedAt":1411409836000},{"assignedTo":"","body":"A better error message for cscript5.8 users than crashing :) fixes #707 ","comments":6,"createdAt":1411167552000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":713,"state":"closed","title":"condition the use of locale on the exitance of JSON","updatedAt":1411403821000},{"assignedTo":"","body":"tsc crashes when trying to compile following file:\r\n\r\n## bug.ts\r\n    module M {\r\n    \r\n        interface A {\r\n            bs : B[];\r\n        }\r\n    \r\n        interface B {\r\n        }\r\n    \r\n        var C : A;\r\n    \r\n        export function fun () {\r\n","comments":1,"createdAt":1411389029000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2786119?v=3","loggedByName":"myuller","milestone":"","number":721,"state":"closed","title":"Compiler crash on faulty module export","updatedAt":1411403355000},{"assignedTo":"","body":"```typescript\r\ninterface IParserTest {\r\n    name: string;\r\n    input: string;\r\n    result: any[];\r\n    context?: any;\r\n    error?: string;\r\n}\r\n\r\nvar parserTests: IParserTest[] = [\r\n    \r\n    {\r\n        name: \"multipleBindingsWithSomeInitializers2\",\r\n","comments":2,"createdAt":1411246987000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/639216?v=3","loggedByName":"xirzec","milestone":"","number":716,"state":"closed","title":"Computing best common type fails with weird error message","updatedAt":1411369812000},{"assignedTo":"","body":"\"In a static member function or static member accessor where this references the constructor \r\nfunction object of a derived class, a super property access is permitted and must specify a public \r\nstatic member function of the base class.\"\r\n```\r\nclass","comments":1,"createdAt":1411265848000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1400023?v=3","loggedByName":"danmane","milestone":"","number":718,"state":"closed","title":"Inheritance of static methods is broken","updatedAt":1411348665000},{"assignedTo":"","body":"","comments":1,"createdAt":1411079953000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":701,"state":"closed","title":"Port fidelity changes to github.","updatedAt":1411185291000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\nvar x: TypeModule1.    \r\n    module TypeModule2 {\r\n!!! Identifier expected; 'module' is a keyword.    \r\n    }\r\n```\r\n\r\nExpected: errors as above\r\n\r\nActual: \r\n\r\n!!! ',' expected.!!! ',' expected.!!! Cannot find name 'TypeModule1'.","comments":1,"createdAt":1405627089000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":124,"state":"closed","title":"[Errors] Error recovery with unfinished type name with dotted name","updatedAt":1411167690000},{"assignedTo":"","body":"Consider:\r\n\r\n    var a: boolean = ...;\r\n    var b: boolean = ...;\r\n\r\n    if (a ^ b) {\r\n      // ...\r\n    }\r\n\r\nCurrently attempting to use the `^` operator on `boolean` values fails with:\r\n\r\n> error TS2113: The left-hand side of an arithmetic operatio","comments":8,"createdAt":1409756916000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/350947?v=3","loggedByName":"drewnoakes","milestone":"","number":587,"state":"closed","title":"Allow logical XOR using `^` operator","updatedAt":1411165486000},{"assignedTo":"","body":"This change adds support for protected members in classes as proposed in #1. Also, this change introduces better error messages for assignability and subtype checks involving private and optional properties.\r\n\r\nProtected members are modeled after C# ","comments":1,"createdAt":1410976800000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":688,"state":"closed","title":"Support for protected members in classes","updatedAt":1411163197000},{"assignedTo":"ahejlsberg","body":"### General proposal\r\n\r\n`protected` modifier acts the same as `private` in terms of code generation and assignability, except that it is possible to access a `protected` member in any subclass of a class which declared the member. Basically, you can ","comments":26,"createdAt":1405378629000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Committed","name":"Committed","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":1,"state":"closed","title":"Suggestion: 'protected' modifier","updatedAt":1411163197000},{"assignedTo":"","body":"Can someone fix the roadmap page, I saw in a issue that 1.2 isn't a stable version that will be released and that everything from 1.2 was moved to 1.3 or something.\r\n\r\nhttps://github.com/Microsoft/TypeScript/wiki/Roadmap","comments":2,"createdAt":1411043901000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":695,"state":"closed","title":"Update roadmap","updatedAt":1411160923000},{"assignedTo":"","body":"Removed r.js, json2, and Mozilla compatibility shims from our third party notice text.\r\n@RyanCavanaugh  and @danquirk  is there any other pieces that still need these?","comments":2,"createdAt":1411066523000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":697,"state":"closed","title":"Remove unused third party tools","updatedAt":1411156052000},{"assignedTo":"","body":"Behavior before the change, was an assert as length < 0. fixes #705","comments":1,"createdAt":1411145561000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":704,"state":"closed","title":"handle cases where we have a node with width 0 when reporting grammar errors","updatedAt":1411156028000},{"assignedTo":"","body":"> Suggestion moved over from [codeplex](https://typescript.codeplex.com/workitem/2609)\r\n\r\nI was working with a rather large enum type with more than 50 items in it. Some of the item names are rather long. Given that TypeScript repeats each item strin","comments":5,"createdAt":1406080413000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/767147?v=3","loggedByName":"omidkrad","milestone":"","number":210,"state":"closed","title":"Suggestion: enum type implementation","updatedAt":1411153442000},{"assignedTo":"","body":"When I have block comments anywhere on the file, occasionally some of my \"real\" code gets color coded green.  But it still compiles just fine on the JavaScript side.","comments":1,"createdAt":1411082233000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8826075?v=3","loggedByName":"ELares","milestone":"","number":702,"state":"closed","title":"Color Code Comments on Real Code","updatedAt":1411083042000},{"assignedTo":"","body":"Fixes #628","comments":1,"createdAt":1411069567000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":699,"state":"closed","title":"Report declaration emit errors","updatedAt":1411075257000},{"assignedTo":"yuit","body":"With --d enabled, getSemanticDiagnostics does not return the emit errors. e.g.:\r\n\r\n```TypeScript\r\ninterface PrivateInterface {}\r\nexport class Foo  implements PrivateInterface { }\r\n```","comments":0,"createdAt":1410215195000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":628,"state":"closed","title":"Language service does not capture declaration emit errors","updatedAt":1411075257000},{"assignedTo":"","body":"","comments":0,"createdAt":1410987478000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":689,"state":"closed","title":"Migrate getTodoComments to use the new tree","updatedAt":1411074226000},{"assignedTo":"","body":"Currently if I want to use ES6 features and async/await I have to use traceur instead of TypeScript.  Now, those are on the roadmap for TypeScript 2.0, but for argument's sake, I think it's reasonable to say that traceur (or something similar) will b","comments":5,"createdAt":1406213961000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/225626?v=3","loggedByName":"jamesmanning","milestone":"","number":232,"state":"closed","title":"(horrible idea?) support some kind of workflow using both TypeScript (specifically, compile-time type checking) and traceur","updatedAt":1411068578000},{"assignedTo":"","body":"Add `skipTriivia` parameter to`createScanner` function. When it is `true` - scanner will return only tokens, if it is `false` - both tokens and trivia.\r\nThis includes only change in the scanner so this logic can be used in formatting and classificati","comments":1,"createdAt":1411064758000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":696,"state":"closed","title":"add 'skipTrivia' parameter to scanner","updatedAt":1411066144000},{"assignedTo":"ahejlsberg","body":"This should cause an error with --noImplicitAny\r\n\r\n```TypeScript\r\nvar x : typeof x;  // x is typed as any, but no error with --noImplicitAny\r\n```\r\nsimilarly\r\n\r\n```TypeScript\r\nvar x = x;\r\n```\r\n","comments":0,"createdAt":1408397386000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"Community","number":476,"state":"closed","title":"No noImplicitAny error for self referencing values","updatedAt":1411065485000},{"assignedTo":"","body":"```TS\r\nfoo(a, b);\r\n```\r\nPlace cursor directly after the comma, and press enter.\r\n\r\nExpected:\r\n```TS\r\nfoo(a,\r\n    b);\r\n```\r\nb gets indented one level in from foo\r\n\r\nActual:\r\n```TS\r\nfoo(a,\r\n b);\r\n```\r\nb does not get indented, and the space before b is ","comments":1,"createdAt":1410910802000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":683,"state":"closed","title":"Smart indent does not work on call arguments when there is whitespace between the cursor and the argument","updatedAt":1411065466000},{"assignedTo":"","body":"If you have the following code:\r\n\r\n    interface Api {\r\n         a: string;\r\n         o?: string;\r\n    }\r\n    var v = { a:'s', i: 5 };\r\n    var u : Api = { a:'s', i: 5 };\r\n\r\nv will be automatically types based on its structure, while u will be typed ","comments":3,"createdAt":1410966769000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/465641?v=3","loggedByName":"lee-elenbaas","milestone":"","number":686,"state":"open","title":"Allow specifing implements for automatic types","updatedAt":1411061927000},{"assignedTo":"","body":"Is the following behavior intentional and/or to spec?\r\n\r\n```\r\n$ node built/local/tsc.js test.ts   # no errors\r\n$ node built/local/tsc.js --declaration test.ts  # errors\r\ntest.ts(7,9): error TS4033: Property 'enumReference' of exported interface has o","comments":2,"createdAt":1411006936000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"","number":691,"state":"closed","title":"Exported types not checked strictly unless --declaration is used","updatedAt":1411014577000},{"assignedTo":"","body":"```@param A ....``` is not the right syntax, the first word after ```@param``` needs to match the parameter name.\r\n\r\nI'm Adam Freidin on codeplex, CLA is complete.\r\n\r\n(P.S., this was discovered using automatic means so I'm fairly confident that this ","comments":2,"createdAt":1411008952000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"","number":692,"state":"closed","title":"fix documentation for {Ui,I}nt{8,16,32}Array","updatedAt":1411013358000},{"assignedTo":"","body":"In Typescript 1.0.1, the type of a caught exception is ```any```, even when passing the ```noImplicitAny``` compiler flag. \r\n\r\nIt seems to me that the type should be ```{}``` when passing that flag?","comments":5,"createdAt":1406631649000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2389359?v=3","loggedByName":"Ziriax","milestone":"","number":298,"state":"closed","title":"Type of caught exception with noImplicitAny?","updatedAt":1411007807000},{"assignedTo":"","body":"Extend scanner with ability to stop and return  the trivia instead of skipping it.","comments":0,"createdAt":1410901376000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":680,"state":"closed","title":"Augment scanner with 'no skip trivia' mode","updatedAt":1411001690000},{"assignedTo":"","body":"Cleaning up some rough edges with completion list:\r\n* completion on call/new expressions\r\n* completions in type positions\r\n* completions on module exports\r\n* filtering private member completions based on location\r\n* disable completion list in with bl","comments":1,"createdAt":1410815081000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":676,"state":"closed","title":"Completion fixes","updatedAt":1411000290000},{"assignedTo":"","body":"Tests pending.","comments":0,"createdAt":1410910390000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":682,"state":"closed","title":"Implement the getRenameInfo language service entrypoint.","updatedAt":1410994333000},{"assignedTo":"","body":"We used to assume that private properties that were not the same symbol are not compatible. In fact, this is false because of the way generic instantiation works. It is possible that a private symbol might be copied due to an instantiation, but still","comments":4,"createdAt":1410484292000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":660,"state":"closed","title":"Check that private properties originate in the same declaration","updatedAt":1410979979000},{"assignedTo":"","body":"Removed some unused variables, nothing really fancy here ;)\r\n\r\nEdit: oops, wait a minute.. 300 commits behind.. let me fix :)\r\n**Edit2**: fixed","comments":1,"createdAt":1410976179000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":687,"state":"closed","title":"Remove some unused variables","updatedAt":1410977601000},{"assignedTo":"","body":"Instead of reporting a file diagnostic when the user specifies a nonexistent file on the command line, we need to report a compiler diagnostic. This was found by the start/length assert in createFileDiagnostic, which was causing the compiler to crash","comments":3,"createdAt":1410906044000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":681,"state":"closed","title":"Switch to createCompilerDiagnostic for an invalid root file","updatedAt":1410975916000},{"assignedTo":"","body":"","comments":1,"createdAt":1410390211000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":650,"state":"closed","title":"GetEmitOutput And Testfiles","updatedAt":1410914761000},{"assignedTo":"","body":"Mostly kept the original behavior. Some minor changes:\r\n* Include local variables for functions, as it felt inconsistent that we included them for modules but not functions\r\n* use name of the declaration instead of the fully qualified name for the co","comments":1,"createdAt":1410890427000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":677,"state":"closed","title":"Add implementation for getNavigateToItems for the new compiler","updatedAt":1410911837000},{"assignedTo":"","body":"Implementation of smart indentation that uses new syntax trees","comments":3,"createdAt":1410564155000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":671,"state":"closed","title":"LS: smart indentation","updatedAt":1410892417000},{"assignedTo":"","body":"Tests pending.","comments":2,"createdAt":1410567684000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":672,"state":"closed","title":"Add support for syntactic classification.","updatedAt":1410832585000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\nfunction f(x: ()) {\r\n}\r\n\r\nvar g: (y: number);\r\n```\r\n\r\nWe expect a syntax error, but instead\r\n* the parameter `x` has the type `() => any`\r\n* the variable `g` has the type `(y: number) => any`.","comments":1,"createdAt":1410463524000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.1","number":654,"state":"closed","title":"Function type literals are allowed to omit return type","updatedAt":1410806523000},{"assignedTo":"","body":"This is useful because the compiler output is effectively unreadable if a property is used but missing from the message map.","comments":5,"createdAt":1408743534000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":515,"state":"closed","title":"Gave the structure in diagnosticInformationMap.generated.ts a named type.","updatedAt":1410719421000},{"assignedTo":"","body":"Harness now emits a prologue of errors, and also emits both the diagnostic category and code for inline errors.","comments":2,"createdAt":1410556096000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":668,"state":"closed","title":"Changed Harness Output","updatedAt":1410558106000},{"assignedTo":"","body":"Fixes #654.","comments":1,"createdAt":1410476775000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":659,"state":"closed","title":"Fixed bug where function type literals may omit their '=>'.","updatedAt":1410557786000},{"assignedTo":"","body":"Fixes #476.","comments":3,"createdAt":1410532221000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":665,"state":"closed","title":"Report circular type inference errors with -noImplicitAny","updatedAt":1410552918000},{"assignedTo":"","body":"I'm not sure my terminology is correct but I'm thinking about this case:\r\n\r\n```ts\r\nmodule foo {\r\n\texport function bar() {}\r\n}\r\n\r\nmodule foo {\r\n\tvar baz = bar();\r\n}\r\n```\r\n\r\nNormally this generates `var baz = foo.bar()` but when you rename `baz` to `ba","comments":7,"createdAt":1410544798000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/96032?v=3","loggedByName":"mwisnicki","milestone":"","number":666,"state":"closed","title":"Name clash between implicit import and local variable silently generates broken code","updatedAt":1410552057000},{"assignedTo":"","body":"https://github.com/Microsoft/TypeScript/wiki/Coding-guidlines","comments":1,"createdAt":1410548997000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1761249?v=3","loggedByName":"dodyg","milestone":"","number":667,"state":"closed","title":"Misspelled wiki page title","updatedAt":1410549218000},{"assignedTo":"","body":"Currently only variables and modules which conflict with aliases give errors, for example\r\n\r\n    module A {\r\n\texport var AAA: {VarInt;}\r\n\texport interface AAA { IntInt; }\r\n    }\r\n\r\n    module MyModule {\r\n      var XXX : { VarExt; } // Highlighted as ","comments":1,"createdAt":1410521420000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/936705?v=3","loggedByName":"osdm","milestone":"","number":663,"state":"closed","title":"Any entity which conflicts with an imported alias should give an error","updatedAt":1410543423000},{"assignedTo":"","body":"I would really like something like reorder parameters as a refactoring option, like C# already has: http://msdn.microsoft.com/en-us/library/5ss5z206.aspx\r\n\r\nedit: \r\nThis might be a bit hard when the info comes from a .d.ts file, though.","comments":0,"createdAt":1410515622000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":662,"state":"open","title":"Refactoring support: Reorder parameters","updatedAt":1410543157000},{"assignedTo":"","body":"","comments":2,"createdAt":1410474132000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":658,"state":"closed","title":"Harness now prints category and code when running tests.","updatedAt":1410476965000},{"assignedTo":"","body":"TypeScript (tsc to be precise) should warn about colliding local variable declarations (two declarations with the same name, in the same scope).  For instance, the following (TypeScript) program should cause a warning:\r\n```javascript\r\nvar test = 0;\r\n","comments":4,"createdAt":1410466546000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2499625?v=3","loggedByName":"stefanheule","milestone":"","number":656,"state":"closed","title":"Warn about re-declaration of local variables","updatedAt":1410472881000},{"assignedTo":"","body":"Fixes #49.\r\nFixes #533.\r\nFixes #611.\r\n","comments":0,"createdAt":1410107882000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":624,"state":"closed","title":"Fixing a few issues in Language Specification","updatedAt":1410472447000},{"assignedTo":"ahejlsberg","body":"var t3: { x: string; y: base; }[] = [ { **x: undefined**, y: new base() }, { x: '', y: new derived() } ];\r\n>t3 : { x: string; y: base; }[]\r\n>x : string\r\n>y : base\r\n>base : base\r\n>[ { x: undefined, y: new base() }, { x: '', y: new derived() } ] : { x:","comments":4,"createdAt":1408996179000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.3","number":521,"state":"closed","title":"[typeBaselines] Over-eager widening of property assignments","updatedAt":1410467551000},{"assignedTo":"","body":"Fixes #521.\r\n\r\nWith this change we no longer widen the type directly associated with a symbol declared by a property assignment in an object literal. This fix has no effect on batch compilation, but it fixes the incorrect `any` types reported by the ","comments":2,"createdAt":1410379348000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":649,"state":"closed","title":"Fix widening in object literal property assignments","updatedAt":1410466208000},{"assignedTo":"","body":"","comments":0,"createdAt":1410459097000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":653,"state":"closed","title":"getOccurrencesAtPosition Implemented","updatedAt":1410462126000},{"assignedTo":"ahejlsberg","body":"Need to update spec with new rules for comparing infinitely expanding types.","comments":0,"createdAt":1409959148000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":616,"state":"closed","title":"Update spec with new Infinitely expanding type rules","updatedAt":1410455997000},{"assignedTo":"ahejlsberg","body":"AmbientEnumMember says\r\n> PropertyName = NumericLiteral\r\n \r\nwhen in truth this is not quite right. NumericLiteral allows decimals, but does not allow negatives. The one we need is SignedInteger or HexIntegerLiteral from the ES spec.\r\n","comments":0,"createdAt":1409087893000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":546,"state":"closed","title":"[spec] Grammar says ambient enum member can be an arbitrary numeric literal","updatedAt":1410455991000},{"assignedTo":"ahejlsberg","body":"Test case: tests/cases/compiler/declFileTypeofFunction.ts\r\n\r\nvar **b**: () => typeof **b**;\r\n>b : any\r\n>b : any\r\n\r\nWe expect both of these to be `() => any`","comments":9,"createdAt":1409009665000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.3","number":523,"state":"closed","title":"[typeBaselines] Recursive type gets erased to any immediately","updatedAt":1410455984000},{"assignedTo":"mhegazy","body":"Consider example from http://www.typescriptlang.org/Handbook#modules-pitfalls-of-modules:\r\n\r\n`myModules.d.ts`:\r\n\r\n```typescript\r\n// In a .d.ts file or .ts file that is not an external module:\r\ndeclare module \"SomeModule\" {\r\n    export function fn(): ","comments":2,"createdAt":1408565097000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/557590?v=3","loggedByName":"RReverser","milestone":"Community","number":492,"state":"closed","title":"getCompletionsAtPosition fails when importing module from definition","updatedAt":1410455963000},{"assignedTo":"ahejlsberg","body":"We need to align the spec with the new implementation. Section 3.10 should say that we pick the first type that is a supertype of all the others.\r\n\r\nAlso, fold in the contextual typing rule for Best Common Type.","comments":0,"createdAt":1407461039000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.1","number":404,"state":"closed","title":"Best common type should pick the first type that is a supertype of all the others","updatedAt":1410455933000},{"assignedTo":"ahejlsberg","body":"```ts\r\nvar x: typeof x;\r\n```\r\n\r\nIn section 5.1 Variable Statements we say:\r\n\r\n>A variable declaration introduces a variable with the given name in the containing declaration space. The type associated with a variable is determined as follows:\r\nÂ·     ","comments":0,"createdAt":1407459683000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.1","number":402,"state":"closed","title":"Spec doesn't mention variables witnessing themselves through type annotations","updatedAt":1410455929000},{"assignedTo":"ahejlsberg","body":"The grammar prohibits the following signature:\r\n ```\r\n(x?: \"hi\");\r\n ```\r\nBut both implementations allow it, and it is reasonable. The nonterminal OptionalParameter needs to be augmented to allow it.","comments":0,"createdAt":1407448590000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.1","number":399,"state":"closed","title":"The grammar prohibits optional parameters with a string literal type","updatedAt":1410455920000},{"assignedTo":"ahejlsberg","body":"Comments from @vladima \r\n\r\n> In certain cases old compiler used to emit \"Value of type is not callable. Did you mean to include 'new'\" error when during analysis of call expression discover that type does not have call signatures and function being c","comments":2,"createdAt":1406232750000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.1","number":236,"state":"closed","title":"Untyped function calls","updatedAt":1410455913000},{"assignedTo":"ahejlsberg","body":"Type inference exhibits strange behavior when you have an overloaded function with a generic that takes an object as an argument:\r\n\r\n```typescript\r\n// A function that extracts the values from an object\r\ndeclare function values<T>(object: { [key: numb","comments":4,"createdAt":1405978704000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1369240?v=3","loggedByName":"georgewfraser","milestone":"TypeScript 1.1","number":167,"state":"closed","title":"Generics, overloaded functions, and objects interact inconsistently","updatedAt":1410455903000},{"assignedTo":"ahejlsberg","body":"Spec section 10.4 defines which internal module members need to be exported to prevent a visibility error:\r\n > â¢\tA class directly depends on each Type specified as a type parameter constraint, each TypeReference specified as a base class or implement","comments":1,"createdAt":1405960855000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.1","number":163,"state":"closed","title":"Spec: Non-public class members should not contribute to the \"depends on\" closure of module visibility requirements","updatedAt":1410455892000},{"assignedTo":"ahejlsberg","body":"```TypeScript\r\ninterface Base2 { \r\n   (x: number): number;\r\n}\r\ninterface I2 extends Base2 {\r\n   (x: number): string;  // error because base returns non-void\r\n}\r\n```\r\nThis code is illegal in 1.0 because call signature in `I2` hides one in `Base2`. We'","comments":2,"createdAt":1405627027000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":87,"state":"closed","title":"[Spec] Hiding of call/construct signatures","updatedAt":1410455883000},{"assignedTo":"ahejlsberg","body":"```TypeScript\r\ninterface IBookStyle {\r\n    initialLeftPageTransforms?: (width: number) => NamedTransform[];\r\n}\r\n \r\ninterface NamedTransform {\r\n    [name: string]: Transform3D;\r\n}\r\n \r\ninterface Transform3D {\r\n    cachedCss: string;\r\n}\r\n \r\nvar style: I","comments":2,"createdAt":1405627010000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":72,"state":"closed","title":"[Spec] contextual typing of return expression values","updatedAt":1410455869000},{"assignedTo":"","body":"TLDR: TypeScript does not generate JS code for exported variables when they are not used in current compilation scope, only the declarations (.d.ts)\r\n\r\n__Example__\r\n\r\n---\r\n\r\n_source files_\r\n\r\n```\r\n// a.ts\r\nimport b = require(\"b\");\r\nb.c.say();\r\n```\r\n\r","comments":8,"createdAt":1408716522000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/379412?v=3","loggedByName":"Evgenus","milestone":"TypeScript 1.1","number":512,"state":"closed","title":"export import generates no code (perhaps due optimization)","updatedAt":1410455861000},{"assignedTo":"ahejlsberg","body":"```TypeScript\r\ndeclare module \"fs\" {\r\n    var x: string;\r\n}\r\ndeclare module \"fs\" {\r\n    var y: number;\r\n}\r\n```\r\nExpected: \r\n!!! Duplicate identifier ''fs''.\r\n!!! Ambient external module declaration cannot be reopened.\r\nActual: no error","comments":5,"createdAt":1405626955000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":52,"state":"closed","title":"[Spec] Duplicate ambient external module name","updatedAt":1410455852000},{"assignedTo":"","body":"","comments":2,"createdAt":1410298284000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":637,"state":"closed","title":"Get occurrences for loops with 'break'/'continue' statements","updatedAt":1410413707000},{"assignedTo":"","body":"I have encountered a couple of cases where the error spans have negative length. Adding asserts so that we can track down these cases.","comments":0,"createdAt":1410392835000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":651,"state":"closed","title":"Add asserts for bounds on diagnostics","updatedAt":1410397438000},{"assignedTo":"","body":"Appears to be a bug in this case\r\n```ts\r\nclass Entity {\r\n}\r\nclass EntityContainer extends Entity {\r\n\tpublic test() {\r\n\t}\r\n}\r\nclass Callback {\r\n\tpublic greet() {\r\n\t}\r\n}\r\nclass Main extends EntityContainer {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tScreen1.sho","comments":4,"createdAt":1410377149000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8727608?v=3","loggedByName":"kloubkov","milestone":"","number":648,"state":"closed","title":"Autocomplete IntelliSense not working","updatedAt":1410395959000},{"assignedTo":"","body":"","comments":2,"createdAt":1409773733000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/489742?v=3","loggedByName":"yuit","milestone":"","number":591,"state":"closed","title":"GetEmitOutput function and testfiles","updatedAt":1410390073000},{"assignedTo":"","body":"Suppose I create a function that can take multiple overload types.  For example:\r\n```typescript\r\nfunction getElement(reference: { name: string });\r\nfunction getElement(reference: { index: number });\r\nfunction getElement(reference: { id: string });\r\nf","comments":0,"createdAt":1410373607000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2230453?v=3","loggedByName":"Zlatkovsky","milestone":"","number":646,"state":"open","title":"Autocomplete IntelliSense only showing options for first options overload, missing the rest","updatedAt":1410374163000},{"assignedTo":"","body":"Consider the following code\r\n\r\n\texport class Test {\r\n\t\tprivate x: number;\r\n\t\tconstructor() {\r\n\t\t\tthis.x = 42;\r\n\t\t}\r\n\t\tf() : number {\r\n\t\t\treturn this.x;\r\n\t\t}\r\n\t}\r\n\r\nTypescript generates the following JS\r\n\r\n\tvar Test = (function () {\r\n\t\tfunction Test()","comments":7,"createdAt":1409302421000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2983969?v=3","loggedByName":"polkovnikov-ph","milestone":"","number":564,"state":"closed","title":"private fields are not private","updatedAt":1410373834000},{"assignedTo":"","body":"The Typescript compiler does not properly produce an error if a variable is redeclared as a new type within a `catch` clause.\r\n\r\nAs you can see below, the variable `s1` is redeclared (implicitly) as a `number` within the `catch`, but the Typescript c","comments":1,"createdAt":1410366802000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/302802?v=3","loggedByName":"wiredprairie","milestone":"","number":645,"state":"closed","title":"Redeclaration of variable with new type in catch clause should not be allowed","updatedAt":1410367412000},{"assignedTo":"","body":"Using TS 1.0.1\r\n\r\nI have a problem where we want to use a header file to pull in class definitions, but the top level namespace is the same as our production code.  This results in a message like the following:\r\nerror TS2094: The property 'Button' do","comments":1,"createdAt":1410360955000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8585666?v=3","loggedByName":"ecp3","milestone":"","number":643,"state":"closed","title":"ambient module definition namespace conflicting with class namespace","updatedAt":1410366411000},{"assignedTo":"ahejlsberg","body":"```ts\r\ninterface PromiseHolder {\r\n    promise: Promise<any>;\r\n}\r\n\r\nclass Promise<T> {\r\n    constructor(elem: T) { }\r\n}\r\n\r\nclass Alpha implements PromiseHolder {\r\n    promise: Promise<PromiseHolder>;\r\n}\r\n\r\nclass Beta implements PromiseHolder {\r\n    //","comments":4,"createdAt":1410320662000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.1","number":641,"state":"closed","title":"Regression in BCT when type uses 'this' in a member initializer during type inference","updatedAt":1410364494000},{"assignedTo":"","body":"```typescript\r\nmodule foobar\r\n{\r\n   export function foo()\r\n   {\r\n      return;\r\n   }\r\n\r\n   export enum foo\r\n   {\r\n      bar,\r\n      baz\r\n   }\r\n} \r\n```\r\nresults in valid javascript:\r\n```javascript\r\nvar foobar;\r\n(function (foobar) {\r\n    function foo()","comments":9,"createdAt":1410235708000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/153840?v=3","loggedByName":"nexussays","milestone":"","number":634,"state":"open","title":"Permit merging of function and enum declarations","updatedAt":1410341293000},{"assignedTo":"ahejlsberg","body":"In tests/cases/compiler/inferentialTypingWithFunctionTypeNested.ts:\r\n\r\n```TS\r\nvar s = map(\"\", () => { return { x: identity }; });\r\n```\r\nreturns any, where the old compiler returned string.\r\n\r\nThis is possibly related to #526, but this one is actually","comments":1,"createdAt":1409096370000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.3","number":547,"state":"closed","title":"[typeBaselines] Contextual signature instantiation does not work in type argument inference","updatedAt":1410313864000},{"assignedTo":"","body":"Fixes #547.\r\n","comments":2,"createdAt":1410301141000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":640,"state":"closed","title":"Fix contextual signature instantiation during type inference","updatedAt":1410313603000},{"assignedTo":"sheetalkamat","body":"tests\\baselines\\reference\\commentsClassMembers.js is generating \r\n```TypeScript\r\ndeclare var i1_s_f: typeof s2;\r\n```\r\ninstead of \r\n```TypeScript\r\ndeclare var i1_s_f: typeof c1.s2;\r\n```\r\n\r\nIt started reporting error in 088ca88bfddcf090cf5b6c636362d6c1","comments":0,"createdAt":1409872796000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.1","number":604,"state":"closed","title":"tests\\cases\\compiler\\commentsClassMembers.js started generating incorrect d.ts file","updatedAt":1410304936000},{"assignedTo":"","body":"Fixes #604","comments":1,"createdAt":1410299485000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":638,"state":"closed","title":"Fix the condition for qualifying the symbol of methods and functions in the enclosing declaration","updatedAt":1410304902000},{"assignedTo":"","body":"Simply put, `typeof null` in JS equates to `\"object\"`.  Why then does assigning `null` trigger the \"implicit any error\" message with the -noImplicitAny flag?  I'd expect that with `var o = null;`, that 'o' is implicitly of the `{}` type.","comments":6,"createdAt":1410294156000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2531435?v=3","loggedByName":"rjamesnw","milestone":"","number":636,"state":"closed","title":"Proposal: Null to be implicitly any object ({}) type.","updatedAt":1410304639000},{"assignedTo":"","body":"","comments":1,"createdAt":1410299733000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":639,"state":"closed","title":"Implemented getOccurrences for 'constructor' keywords.","updatedAt":1410302755000},{"assignedTo":"","body":"","comments":2,"createdAt":1410222043000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":632,"state":"closed","title":"Get occurrences for 'super' keywords","updatedAt":1410297927000},{"assignedTo":"ahejlsberg","body":"This is the error message i'm getting now:\r\n \r\n>Error 1 Type '{ dispose: () => void; cleanupSemanticCache: () => void; getSyntacticDiagnostics: (filename: string) => Diagnostic[]; getSemanticDiagnostics: (filename: string) => Diagnostic[]; getCompile","comments":0,"createdAt":1409087502000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":542,"state":"closed","title":"Large object literals result in incomprehensible error messages.","updatedAt":1410297631000},{"assignedTo":"","body":"Fixes #542.\r\n\r\nString representations of types in error messages are now cut off after 100 characters.","comments":4,"createdAt":1410218295000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":630,"state":"closed","title":"Truncate long types in error messages","updatedAt":1410296216000},{"assignedTo":"mhegazy","body":"in lib.d.ts, Blob constructor is defined as\r\n\r\n```\r\ndeclare var Blob: {\r\n    prototype: Blob;\r\n    new(): Blob;\r\n}\r\n```\r\n\r\nIt used to be\r\n\r\n```\r\ndeclare var Blob: {\r\n    prototype: Blob;\r\n    new (blobParts?: any[], options?: BlobPropertyBag): Blob;\r","comments":1,"createdAt":1410004137000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1966521?v=3","loggedByName":"bsr203","milestone":"TypeScript 1.3","number":622,"state":"closed","title":"wrong constructor for Blob","updatedAt":1410279398000},{"assignedTo":"","body":"Add constructor parameters to definition of Blob. Also adds a new interface BlobPropertyBag used in the constructor. Fixes #622 ","comments":1,"createdAt":1410240720000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":635,"state":"closed","title":"Add constructor paramters to Blob","updatedAt":1410279386000},{"assignedTo":"","body":"Why don't we just implement a javascript-compatible \"use ...\" string call, (e.g.: like the one used for \"use strict\";) for referencing paths, instead of using the /// <reference path=\"some-file.d.ts\"/> comment notation?\r\n\r\nIt should look something li","comments":19,"createdAt":1408523596000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3178286?v=3","loggedByName":"adrianvoica","milestone":"","number":488,"state":"open","title":"Use the javascript-compatible \"use ...\" string call for referencing paths","updatedAt":1410261001000},{"assignedTo":"billti","body":"Original issue: http://typescript.codeplex.com/workitem/1829\r\n\r\n> The file Foo.js.map has changed since you opened it. Would you like to save the version you have open over the changes on disk?\r\n> \r\n> The file Foo.js has changed since you opened it. ","comments":3,"createdAt":1406587373000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1618054?v=3","loggedByName":"stijnherreman","milestone":"TypeScript 2.0","number":277,"state":"open","title":"\"Conflicting Modifications Detected\" error","updatedAt":1410251838000},{"assignedTo":"","body":"```typescript\r\nvar container:number[] = []\r\nmodule M {\r\n   export var container = container\r\n}\r\n```\r\nThe reference to ```container``` on the right side should not be qualified with the module name.\r\n```javascript\r\nvar container = [];\r\n\r\nvar M;\r\n(func","comments":2,"createdAt":1410221312000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5501360?v=3","loggedByName":"michaelsg","milestone":"","number":631,"state":"closed","title":"Exported Module Member With Same Name as Containing Scope Generates Incorrect Code","updatedAt":1410228143000},{"assignedTo":"mhegazy","body":"```TypeScript\r\ninterface IBar {\r\n    b: number;\r\n}\r\n\r\n(<IBar> {\r\n    b: null,\r\n});\r\n```\r\n\r\ngives an error on b for an implicit any when building with --noimplictany\r\n","comments":1,"createdAt":1409962094000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":617,"state":"closed","title":"No implicit any error on widening casted expresion","updatedAt":1410222621000},{"assignedTo":"","body":"In this example we are reporting the error as we widen. changing the behavior to not report errors as we widen in cast expressions, and additional optimization to only widen if we need to.\r\n\r\n```TypeScript\r\ninterface IBar {\r\n    b: number;\r\n}\r\n\r\n(<IB","comments":3,"createdAt":1409867118000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":602,"state":"closed","title":"Do not show noImplictAny errors when widening for a cast expression","updatedAt":1410222621000},{"assignedTo":"","body":"","comments":0,"createdAt":1409862737000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":600,"state":"closed","title":"Get occurrences for 'this' keywords","updatedAt":1410221982000},{"assignedTo":"","body":"Moving over request from here: https://typescript.codeplex.com/workitem/2464\r\n\r\nProposed Solution:\r\n\r\n```ts\r\nclass A {\r\n    [index: number]: A; // <- since you can already do this\r\n    (...args): A; // <- why not allow this also?\r\n    constructor(...","comments":2,"createdAt":1409702185000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2531435?v=3","loggedByName":"rjamesnw","milestone":"","number":584,"state":"closed","title":"Request: Allow call signatures on classes","updatedAt":1410220965000},{"assignedTo":"","body":"From here: https://typescript.codeplex.com/workitem/2464\r\n\r\nI have a possible solution: Just allow this:\r\n```ts\r\nclass A {\r\n    [index: number]: A; // <- since you can already do this\r\n    (...args): A; // <- why not allow this also?\r\n    constructor","comments":5,"createdAt":1409965145000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2531435?v=3","loggedByName":"rjamesnw","milestone":"","number":619,"state":"closed","title":"Allow call signatures on classes","updatedAt":1410220602000},{"assignedTo":"","body":"Moving over from here: https://typescript.codeplex.com/workitem/2047\r\n\r\nI think this may warrant more discussion.  I believe there should be some way to FORCIBLY allow a derived static function with completely different parameter types to be implemen","comments":9,"createdAt":1409955465000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2531435?v=3","loggedByName":"rjamesnw","milestone":"","number":613,"state":"closed","title":"Proposal to remove inheritance of static properties","updatedAt":1410218162000},{"assignedTo":"","body":"This is the spec conformance verification for spec change #589. I've logged a few bugs, but mostly just added and moved tests to the conformance folder to make sure all spec changes were covered.","comments":1,"createdAt":1409968003000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":621,"state":"closed","title":"Conformance coverage for spec change #589","updatedAt":1410211297000},{"assignedTo":"","body":"Fixes #616.\r\n\r\nThe old compiler had certain restrictions on infinitely expanding generic types. Those restrictions have been removed in the new compiler. This pull request updates the Language Specification accordingly.\r\n\r\nRelated disucssions here:\r\n","comments":0,"createdAt":1410209230000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":627,"state":"closed","title":"Updating Language Specification","updatedAt":1410209698000},{"assignedTo":"","body":"","comments":1,"createdAt":1410204481000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":626,"state":"closed","title":"Corrected some spelling/grammar issues.","updatedAt":1410208497000},{"assignedTo":"mhegazy","body":"While editing:\r\n```\r\nError processing work item: \r\n\r\nAction description:\r\n\r\ngetCompletionsAtPosition('C:\\Users\\drosen\\TypeScript\\src\\services\\services.ts', 103657, false)\r\n\r\nScript callstack:\r\n\r\nError: Invalid operation: undefined\r\n   at scanTrivia (","comments":0,"createdAt":1409868402000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.3","number":603,"state":"closed","title":"scanTrivia from old LS keeps hitting error condition","updatedAt":1410201112000},{"assignedTo":"","body":"....","comments":2,"createdAt":1409965229000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":620,"state":"closed","title":"Fix incremental parsing bug due to non invalidating cached data in nodes...","updatedAt":1410200974000},{"assignedTo":"DanielRosenwasser","body":"Code:\r\n```TypeScript\r\ninterface Foo {\r\n}\r\n\r\ninterface Bar implements Foo {\r\n}\r\n```\r\n\r\nExpected (from old compiler):\r\n> (4,15): Interface declaration cannot have 'implements' clause.\r\n\r\nActual (current):\r\n> (4,15): '{' expected.\r\n> (4,26): ';' expecte","comments":1,"createdAt":1407368823000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":384,"state":"closed","title":"Gracefully handle interface with 'implements' clause","updatedAt":1410200879000},{"assignedTo":"mhegazy","body":"Issue moved from http://typescript.codeplex.com/workitem/2448\r\nIf a require statement has a non-relative path (eg. require('mymod') ) then tsc will search all directories from the container of the requiring file all the way up to the file system root","comments":3,"createdAt":1406624539000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2458?v=3","loggedByName":"robertknight","milestone":"TypeScript 2.0","number":294,"state":"open","title":"Require with non-relative path can pull in unexpected code","updatedAt":1410200595000},{"assignedTo":"","body":"# Introduction\r\n\r\nCurrently, type literals are capable of representing any instantiated (non-generic) type except those that are recursive.  This is because, as an anonymous type, they do not have a name with which to create this type.\r\n\r\nThis propos","comments":18,"createdAt":1408750630000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/ES6","name":"ES6","color":"c7def8"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":517,"state":"open","title":"Recursive type literals","updatedAt":1410200522000},{"assignedTo":"","body":"Not sure if this has been mentioned before, but how about an option to restrict multiple uses of interface declarations? I've run into a case where I forgot that I had already used an interface name somewhere and in this case the 2 interfaces get mer","comments":1,"createdAt":1409954511000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/911440?v=3","loggedByName":"andrewvarga","milestone":"","number":612,"state":"closed","title":"Suggestion: ability to avoid interface collisions","updatedAt":1410197343000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\ninterface Foo { a }\r\ninterface Bar { b }\r\n \r\ninterface Object {\r\n    [n: number]: Foo;\r\n}\r\n \r\ninterface Function {\r\n    [n: number]: Bar;\r\n}\r\n \r\nvar o = {};\r\nvar f = () => { };\r\n \r\nvar v1: {\r\n    //!!! Cannot convert '{}' to '{ [x: num","comments":11,"createdAt":1405626951000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":48,"state":"closed","title":"[Errors] Empty object contextually typed by type with indexer","updatedAt":1410196616000},{"assignedTo":"ahejlsberg","body":"```TypeScript\r\nvar eventsListener = (e: any): void => {\r\n    login();\r\n}\r\n\r\n// Unexpected Error: Subsequent variable declarations must have the same type.  Variable 'eventsListener' must be of type 'any', but here has type '(e: any) => void'.\r\nvar ev","comments":0,"createdAt":1409690608000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":583,"state":"closed","title":"Invalid \"Subsequent variable declarations must have the same type\" error","updatedAt":1410196475000},{"assignedTo":"jonathandturner","body":"The compiler already behaves as per spec, and variables referenced directly or indirectly in their initializers resolve to any. The previous implementation did not just assign them to any, by attempted to go deeper one level, here are some examples;\r","comments":4,"createdAt":1409000260000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":522,"state":"closed","title":"Variables referenced indirectly in their initializers are resolved to 'any'","updatedAt":1410196469000},{"assignedTo":"ahejlsberg","body":"[EDITED]\r\n\r\nInput\r\n===\r\n```typescript\r\nmodule X.M {\r\n    export var x = false;\r\n\r\n    function q(M) {\r\n    }\r\n\r\n    M.x = true;\r\n}\r\n```\r\n\r\nOutput\r\n===\r\n```javascript\r\nvar X;\r\n(function (X) {\r\n    (function (_M) {\r\n        _M.x = false;\r\n        funct","comments":0,"createdAt":1409864551000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"TypeScript 1.3","number":601,"state":"closed","title":"Bad Codegen for ModuleNames shadowed by Parameters","updatedAt":1410196224000},{"assignedTo":"","body":"Fixes #601.","comments":3,"createdAt":1410050509000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":623,"state":"closed","title":"Corrected codegen to support shadowed module names.","updatedAt":1410195933000},{"assignedTo":"ahejlsberg","body":"```TypeScript\r\n// Function call whose argument is a 1 arg generic function call with explicit type arguments\r\nfunction fn1<T>(t: T) { }\r\nfunction fn2(t: any) { }\r\n\r\nfn1(fn2<string>(4)); // Error\r\n\r\nvar a: any;\r\nvar s: string;\r\n\r\n// Type assertion of ","comments":3,"createdAt":1405627059000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":97,"state":"closed","title":"[Errors] Shorter: Neither type X nor type Y is assignable to the other","updatedAt":1410193957000},{"assignedTo":"ahejlsberg","body":"#610 is removing the following limitation:\r\n\r\n_6.3 Function Implementations\r\nInitializer expressions are evaluated in the scope of the function body but are not permitted to reference local variables and are only permitted to access parameters that a","comments":0,"createdAt":1409952647000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.3","number":611,"state":"closed","title":"[Spec] Remove limitation on forward referencing parameters in initializers","updatedAt":1410193940000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\ninterface Promise<T> {\r\nthen<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): Promise<U>;\r\ndone<U>(success?: (value: T) => any, error?: (error: any) => any, progress?: (progress: any) => voi","comments":4,"createdAt":1405626952000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":49,"state":"closed","title":"[Errors] Type argument inference from signatures infers fewer candidates","updatedAt":1410193934000},{"assignedTo":"ahejlsberg","body":"Courtesy of @JsonFreeman \r\n\r\nThis is just an oversight in the grammar, but the ModuleElement production does not go to AmbientDeclaration on the right side, which implies that an internal module cannot contain ambients. It needs to be added to the RH","comments":7,"createdAt":1409086330000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":533,"state":"closed","title":"[spec] Grammar does not allow ambients inside an internal module","updatedAt":1410193782000},{"assignedTo":"vladima","body":"```ts\r\nclass Base {\r\n        public a: string;\r\n}\r\n    \r\nclass Derived extends Base {\r\n        public b: string;\r\n}\r\n\r\n \r\n\r\nvar a4: { [index: number]: Base };\r\nvar b4: { [index: string]: Derived }; \r\n\r\nvar r1a1 = a4 < b4;\r\n```\r\n\r\n**Actual**:  no erro","comments":1,"createdAt":1407459539000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.3","number":401,"state":"closed","title":"Comparison operator on types with indexer signatures returning object types","updatedAt":1410193209000},{"assignedTo":"","body":"Consider the following example:\r\n```typescript\r\ninterface myInterface {\r\n    var1: number;\r\n    var2: string;\r\n}\r\nclass myClass {\r\n    constructor(arg1: myInterface) {\r\n        // ...\r\n    }\r\n}\r\nexport = myClass;\r\n```\r\nThis results in an error becaus","comments":1,"createdAt":1409895812000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5099081?v=3","loggedByName":"alidorosty1234","milestone":"","number":607,"state":"closed","title":"exporting interfaces","updatedAt":1410193178000},{"assignedTo":"","body":"","comments":4,"createdAt":1407868521000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/485321?v=3","loggedByName":"bashor","milestone":"","number":438,"state":"closed","title":"Add the ability to get TypeScript.SyntaxTree from LanguageService","updatedAt":1410171611000},{"assignedTo":"ahejlsberg","body":"We have some legacy .js files which we ported to .ts. These files are AMD modules, so we generate external AMD modules with tsc.\r\nWe have 2 files with the same name (app.js), one at the compilation root directory and another in a subdirectory. The in","comments":3,"createdAt":1407123973000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5453910?v=3","loggedByName":"juanevp","milestone":"","number":347,"state":"closed","title":"Out of stack space on unintended self inclusion","updatedAt":1410131787000},{"assignedTo":"ahejlsberg","body":"```TypeScript\r\n==== tests / cases / compiler / externalModuleExportingGenericClass_file0.ts\r\nclass C<T> {\r\n    foo: T;\r\n}\r\nexport = C;\r\n\r\n==== tests / cases / compiler / externalModuleExportingGenericClass_file1.ts\r\nimport a = require('externalModule","comments":0,"createdAt":1405627035000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":94,"state":"closed","title":"[Errors] Errors use aliased type name instead of the alias name","updatedAt":1410107882000},{"assignedTo":"","body":"Fixes #97.\r\n","comments":1,"createdAt":1409962252000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":618,"state":"closed","title":"Properly report errors for failed type assertions","updatedAt":1410031141000},{"assignedTo":"","body":"Fixes #48, #52, #72, #87, #163, #167, #236, #399, #402, #404, #533, #546","comments":1,"createdAt":1409769669000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":589,"state":"closed","title":"Language Specification updated to version 1.1","updatedAt":1409968003000},{"assignedTo":"","body":"The change is adding ``` [index: number]: Element; ``` to HTMLCollection .\r\n\r\nThe definition of HTMLCollection has a string indexer, but we can not use it as it has a length property that is of type number; so we comment that out. \r\n\r\nthere is no rea","comments":1,"createdAt":1409947075000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":609,"state":"closed","title":"Add numeric indexer to HTMLElementCollection","updatedAt":1409961970000},{"assignedTo":"CyrusNajmabadi","body":"\ntests\\cases\\compiler\\overloadOnConstAsTypeAnnotation.ts\n\nOld compiler:\n\n!!! ';' expected.!!! Type 'string' is not assignable to type '(x: 'hi') => number':!!!  Type '(x: 'hi') => number' requires a call signature, but type 'String' lacks one.!!! Spe","comments":1,"createdAt":1405627031000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":90,"state":"closed","title":"[Errors] Wrong set of errors when using type annotations with overloads on consts","updatedAt":1409960845000},{"assignedTo":"","body":"Fixes #445 and #583.\r\n\r\nFunction expression bodies are now checked in a separate phase after all statements in the enclosing body to ensure constructs like the following are correctly typed:\r\n```typescript\r\nvar foo = function () {\r\n    var s = foo();","comments":2,"createdAt":1409947634000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":610,"state":"closed","title":"Circular function expressions","updatedAt":1409958139000},{"assignedTo":"ahejlsberg","body":"reproduction code.\r\n```\r\ninterface IResource<T> {\r\n\t$save(): void;\r\n}\r\ninterface IResourceClass<T> {\r\n\tnew (): T;\r\n\tquery(callback: Function): IResourceArray<T>;\r\n}\r\ninterface IResourceArray<T> extends Array<T> {\r\n}\r\n\r\nfunction makeClass<T, U>(): U {","comments":6,"createdAt":1407922207000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"TypeScript 1.1","number":445,"state":"closed","title":"Type of variable incorrectly `any` when used in function body in its own initializer","updatedAt":1409957024000},{"assignedTo":"","body":"Input:\r\n```js\r\n[, , 1, , , 2, 3, , ]\r\n```\r\n\r\nExpected:\r\n```js\r\n[, , 1, , , 2, 3, , ]\r\n```\r\n\r\nActual:\r\n```js\r\n[, , 1, , , 2, 3, ]\r\n```\r\n\r\nAs you can see, a trailing comma got eaten, which causes the last element in the array to be '3' instead of undef","comments":1,"createdAt":1409956229000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/639216?v=3","loggedByName":"xirzec","milestone":"","number":614,"state":"closed","title":"Empty array elements in literals are not always preserved","updatedAt":1409956338000},{"assignedTo":"","body":"This fixes a crash in the compiler when generating declarations with /// reference and noResolve","comments":1,"createdAt":1409861823000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":599,"state":"closed","title":"Do not emit references in generated declaration files if the --noresolve flag was set","updatedAt":1409953950000},{"assignedTo":"","body":"Many JavaScript frameworks are heavily based on using string values to do many things, from getting and setting attributes via the property name in string form, to defining event handlers to handle browsing to particular URLs. TypeScript added specia","comments":6,"createdAt":1409878540000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":606,"state":"open","title":"Provide completion lists for string literals","updatedAt":1409947530000},{"assignedTo":"sheetalkamat","body":"New compiler:\r\ntsc tests\\baselines\\reference\\project\\quotesInFileAndDirectoryNames\\node\\m'ain.d.ts \r\n\r\nError:\r\ntests/baselines/reference/project/quotesInFileAndDirectoryNames/node/m'ain.d.ts(1,1): File 'tests/baselines/reference/project/quotesInFileA","comments":8,"createdAt":1408394445000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.1","number":474,"state":"closed","title":"reference path with quotes doesnot have same result as in old compiler","updatedAt":1409881854000},{"assignedTo":"","body":"Use double quotes in declaration file's reference path generation so that quotes in file name wouldnt affect reference resolution\r\nFixes #474","comments":1,"createdAt":1409872976000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":605,"state":"closed","title":"Use double quotes in declaration file's reference path generation","updatedAt":1409881845000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nimport require = require('collisionExportsRequireAndAlias_file1'); // Error\r\n//!!! Duplicate identifier 'require'. Compiler reserves name 'require' in top level scope of an external module.\r\nimport exports = require('collisionExportsRe","comments":0,"createdAt":1405626967000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":63,"state":"closed","title":"[Errors] top level identifier named require or exports","updatedAt":1409863551000},{"assignedTo":"","body":"Fixes #63","comments":2,"createdAt":1409365468000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":569,"state":"closed","title":"Report error if exports or require is used for declaration name in external module","updatedAt":1409863484000},{"assignedTo":"","body":"","comments":1,"createdAt":1409780117000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":593,"state":"closed","title":"Get occurrences for return keywords.","updatedAt":1409862007000},{"assignedTo":"","body":"","comments":0,"createdAt":1409686281000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":581,"state":"closed","title":"Add jake task for making instrumented tsc","updatedAt":1409853301000},{"assignedTo":"","body":"This change improves performance on compilations that are heavy on file lookups, such as projects comprised of a large number of external modules.","comments":2,"createdAt":1409851201000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":597,"state":"closed","title":"Cache unsuccessful file lookups for improved performance.","updatedAt":1409852932000},{"assignedTo":"sheetalkamat","body":"(see title.)","comments":0,"createdAt":1405627096000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":131,"state":"closed","title":"Linemaps need to handle all sorts of Js new lines, current implementation only parses \\r and \\n","updatedAt":1409849643000},{"assignedTo":"","body":"Handles:\r\n        lineFeed = 0x0A,              // \\n\r\n        carriageReturn = 0x0D,        // \\r\r\n        lineSeparator = 0x2028,\r\n        paragraphSeparator = 0x2029,\r\n        nextLine = 0x0085,\r\n\r\nFixes #131","comments":1,"createdAt":1409365505000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":570,"state":"closed","title":"Handles all the line breaks in calculation of line-character position","updatedAt":1409849586000},{"assignedTo":"","body":"","comments":2,"createdAt":1409150397000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2281623?v=3","loggedByName":"farezv","milestone":"","number":552,"state":"closed","title":"Fixed a simple typo in CONTRIBUTING.md","updatedAt":1409849270000},{"assignedTo":"","body":"Import Definitely typed unit tests into RWC suite","comments":1,"createdAt":1409765913000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":588,"state":"closed","title":"Rwc importer","updatedAt":1409849052000},{"assignedTo":"","body":"I have see that there are several issues related to ES6 features like #240 and #7 .\r\nIn my case, the lack of support for generators is not allowing me to use typescript. I'm working in node applications using koa.\r\nIn my opinion typescript should gen","comments":2,"createdAt":1407407553000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/175627?v=3","loggedByName":"axelhzf","milestone":"","number":389,"state":"closed","title":"Suggestion: Use traceur","updatedAt":1409799776000},{"assignedTo":"","body":"I'm trying to map a value in a JSON blob that is serialized as a string to application logic code in TypeScript where the value is logically one of a set of values (and then map that back to JSON as a string to send back to a server). Naturally this ","comments":2,"createdAt":1409777440000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/607223?v=3","loggedByName":"marcind","milestone":"","number":592,"state":"closed","title":"Enum value lookup by string variable should be typed as the enum type.","updatedAt":1409782871000},{"assignedTo":"","body":"Consider the code ([on playground](http://www.typescriptlang.org/Playground/#src=interface%20I%20%7B%0A%09f(%20x%3A%20number%20)%3A%20string%3B%0A%7D%0A%0Aclass%20C%20implements%20I%20%7B%0A%09f(x)%20%7B%20return%20x%20%2B%205%3B%20%7D%0A%7D)):\r\n\r\n``","comments":3,"createdAt":1409674087000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4219105?v=3","loggedByName":"fsoikin","milestone":"","number":580,"state":"closed","title":"Proposal: allow to omit type annotations in inherited/implemented members","updatedAt":1409780885000},{"assignedTo":"","body":"","comments":1,"createdAt":1409271433000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":561,"state":"closed","title":"getOccurrencesAtPosition support for if/else keywords","updatedAt":1409779579000},{"assignedTo":"","body":"Please see #492 for bug description.\r\n\r\nRemoved assertion in `getSourceFile` since `processSourceFile` obviously expects `findSourceFile` to return falsy value from `findSourceFile` (which is wrapper around `getSourceFile` result) when file is not fo","comments":3,"createdAt":1408566430000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/557590?v=3","loggedByName":"RReverser","milestone":"","number":493,"state":"closed","title":"Fix for importing modules from definitions","updatedAt":1409775209000},{"assignedTo":"","body":"Hi there, I've recently hit the following issue when building a TypeScript project with pre-built TypeScript dependencies installed via `npm`:\r\n\r\nMy setup is as follows:\r\n- *Project* depends on library *A* which depends on library *B*.\r\n- Libraries *","comments":1,"createdAt":1409710865000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/418473?v=3","loggedByName":"coreh","milestone":"","number":586,"state":"closed","title":"Hardcoded enum values lead to ABI breakage.","updatedAt":1409772153000},{"assignedTo":"","body":"Porting over this issue from:http://typescript.codeplex.com/workitem/260.\r\n\r\nThis is a request to add support for get/set accessors in interfaces.  This would allow the interface to define the ability of the interface.  For example, in the case where","comments":1,"createdAt":1409769680000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7505555?v=3","loggedByName":"beloh","milestone":"","number":590,"state":"closed","title":"Get/set accessors in interfaces","updatedAt":1409770302000},{"assignedTo":"","body":"Fixes #523.\r\n\r\nWith this change the following declarations all create recursive types:\r\n```typescript\r\nvar a: { x: typeof a; };\r\nvar b: () => typeof b;\r\nvar c: { (): typeof c; };\r\nvar d: { [s: string]: typeof d; };\r\n```","comments":4,"createdAt":1409111374000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":550,"state":"closed","title":"Deferred resolution of object literal members to support recursive types.","updatedAt":1409767404000},{"assignedTo":"sheetalkamat","body":"We have a bunch of sourcemap baseline tests but they're not covering enough surface area. If you turn on sourcemaps for the compiler and try to debug the compiler the sourcemaps are so far off with regularity that they're not really usable. To turn o","comments":3,"createdAt":1406658119000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.1","number":301,"state":"closed","title":"Incorrect sourcemaps for the compiler itself","updatedAt":1409718890000},{"assignedTo":"","body":"","comments":1,"createdAt":1409370893000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":572,"state":"closed","title":"Fix the tab and indent calculation when formatting comments in the emitted output","updatedAt":1409718274000},{"assignedTo":"","body":"If we define an interface:\r\n\r\n```typescript\r\ninterface IHandler {\r\n    (): number;\r\n    (): string;\r\n}\r\n```\r\n\r\nThere would be error \"overloads cannot differ only by return type\", which is reasonable.\r\n\r\nHowever, when it comes to some situation like t","comments":9,"createdAt":1409367088000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/970430?v=3","loggedByName":"vilic","milestone":"","number":571,"state":"closed","title":"Overloads shouldn't differ by the return type of a function type.","updatedAt":1409710201000},{"assignedTo":"","body":"Moving over from here: https://typescript.codeplex.com/workitem/2475\r\n\r\n","comments":1,"createdAt":1409702808000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2531435?v=3","loggedByName":"rjamesnw","milestone":"","number":585,"state":"closed","title":"Request: Don't require implementing interfaces on declared classes","updatedAt":1409703310000},{"assignedTo":"","body":"Webworkers have a global \"postMessage(message:any):void\" method, but TS uses the \"postMessage(message:any, origin:string, ports?:any):void\" definition from window.postMessage.\r\n\r\nThis causes something like\r\n\r\n```javascript\r\npostMessage(\"Hello\");\r\n```","comments":1,"createdAt":1409690098000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/639216?v=3","loggedByName":"xirzec","milestone":"","number":582,"state":"closed","title":"lib.d.ts defines \"postMessage\" for window, but web worker scripts have a different signature","updatedAt":1409699510000},{"assignedTo":"jonathandturner","body":"Started learning typescript and hit a bug in the very first playground example.\r\n\r\nSteps to reproduce:\r\n1. Go to http://www.typescriptlang.org/Playground\r\n2. Select Walkthrough: JavaScript\r\n3. Click Run\r\n4. Click \"Say Hello\" button\r\n5. Message box re","comments":4,"createdAt":1408369441000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8480122?v=3","loggedByName":"deviruchi","milestone":"TypeScript 2.0","number":472,"state":"closed","title":"Broken example in playground","updatedAt":1409689259000},{"assignedTo":"","body":"Almost all definition files so readily available you know where, do a `declare module` or `declare var`. Isn't this a huge problem? If I forget to import an implementation of a declared module and then use it, compiler will never give me an error, bu","comments":2,"createdAt":1409514904000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1529466?v=3","loggedByName":"ifeltsweet","milestone":"","number":576,"state":"closed","title":"Definition files and globals","updatedAt":1409686149000},{"assignedTo":"","body":"Not sure if this is an error or just me not understanding it:\r\n\r\n```\r\ninterface ITestInterface\r\n{\r\n    // this doesn't compile\r\n    myMap: {\r\n        [id:string]:string;\r\n    }\r\n    // this compiles\r\n    //myMap: {\r\n    //    \"1\": string;\r\n    //    ","comments":3,"createdAt":1409415597000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/911440?v=3","loggedByName":"andrewvarga","milestone":"","number":573,"state":"closed","title":"String map compile error","updatedAt":1409679977000},{"assignedTo":"","body":"I would like to declare a class type, but with any number/kind of arguments.\r\n\r\nTrying that way, I get an error:\r\n```typescript\r\nfunction register<T>(type: { new (...args: any[]): T }, fn: (o: T) => void): void { }\r\n\r\nclass C0 { }\r\nregister(C0, (c) =","comments":2,"createdAt":1409648976000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8625526?v=3","loggedByName":"stephanedr","milestone":"","number":578,"state":"closed","title":"Support rest parameters in generic class type declaration","updatedAt":1409677927000},{"assignedTo":"","body":"For completeness's sake, this is a list of breaking changes from the 1.0 compiler that we believe very few users will encounter.\r\n\r\nThese are errors that should have been reported and represent very likely errors in user code:\r\n * Comparison operator","comments":3,"createdAt":1405725809000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":153,"state":"closed","title":"List of minor breaking changes from 1.0","updatedAt":1409677755000},{"assignedTo":"ahejlsberg","body":"Both the old compiler and the new compiler report a semantic error for a missing function/constructor implementation. However, the grammar in the spec treats implementations as required. We need to update the grammar to reflect the implementations, o","comments":1,"createdAt":1407448494000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.1","number":398,"state":"closed","title":"Update grammar to not require function & constructor implementations in non-ambient contexts","updatedAt":1409677438000},{"assignedTo":"ahejlsberg","body":"```TS\r\nmodule M {\r\n     module N {\r\n          export import i = M;\r\n     }\r\n}\r\n``` \r\nWe should not emit \"var i = M;\" because it cannot be reached from the global namespace. N is not exported.\r\n \r\nTechnically this means M and N could be considered uni","comments":1,"createdAt":1407460980000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Spec","name":"Spec","color":"207de5"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.1","number":403,"state":"closed","title":"Should not emit unreferenced exported value import from unexported internal module","updatedAt":1409665787000},{"assignedTo":"","body":"Fix #225: Update FormData constructor\r\nFix #314: Add SourceBuffer.appendBuffer() overload for ArrayBufferView\r\n","comments":2,"createdAt":1406941332000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":337,"state":"closed","title":"Update lib.d.ts to fix issues #225 and #314","updatedAt":1409484203000},{"assignedTo":"sheetalkamat","body":"We need to investigate the differences noted in the tests below. Sheetal is currently refactoring these test suites significantly and then we should ensure any differences get appropriate bugs/fixes:\r\n\r\n \r\n(new test case is prettyname.js from scenari","comments":6,"createdAt":1405627097000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":133,"state":"closed","title":"Validate discrepancies in project tests","updatedAt":1409365362000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nclass c {\r\n    public Intersects(obj: number): boolean;\r\n    public Intersects(obj: any): boolean {\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\nExpected:\r\n```TypeScript\r\ndeclare class c {\r\n    Intersects(obj: number): boolean;\r\n}\r\ndeclare","comments":0,"createdAt":1408484987000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.1","number":480,"state":"closed","title":"Declaration file for the method overload is not emitted correctly","updatedAt":1409360691000},{"assignedTo":"","body":"A few notes:\r\n* The new implementation include values with a contextual type we are searching for e.g.\r\n```TypeScript\r\ninterface IFoo {\r\n    member: number;\r\n}\r\n\r\nvar x : IFoo;\r\n\r\nx = {member: 1}; \r\nx = {member: 2}; // search for member should get yo","comments":0,"createdAt":1408393862000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":473,"state":"closed","title":"Wire getReferences to use the new compiler","updatedAt":1409353438000},{"assignedTo":"","body":"There is a function in the checker called `shouldWriteTypeOfFunctionSymbol`, which decides whether \r\na) a given type is a function type and\r\nb) if so, it should be emitted using `typeof`, or expanded into its full form\r\n\r\nThe problem with this functi","comments":0,"createdAt":1409256758000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"Community","number":559,"state":"open","title":"Generalize the rule for when function types get serialized using \"typeof\"","updatedAt":1409350556000},{"assignedTo":"","body":"Ensure that sys is not included in the services file, by ensuring that it is not visible outside tsc.ts","comments":1,"createdAt":1409292788000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":562,"state":"closed","title":"Ensure that sys is not used outside tsc.ts","updatedAt":1409349037000},{"assignedTo":"","body":"Fixes  #480","comments":0,"createdAt":1408739509000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":514,"state":"closed","title":"Correct the declaration emit for overload implementation if there is single overload signature","updatedAt":1409348033000},{"assignedTo":"","body":"If you have a class method defined something like this\r\n![image](https://cloud.githubusercontent.com/assets/6345449/4092822/f222ad74-2f95-11e4-93c4-aabdc6b46b45.png)\r\nand you pass that method as delegate into another class\r\n![image](https://cloud.git","comments":5,"createdAt":1409328396000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6345449?v=3","loggedByName":"Merenwen","milestone":"","number":566,"state":"closed","title":"\"this\" hijacking in class delegate execution","updatedAt":1409346229000},{"assignedTo":"","body":"Hi,\r\n\r\nAre there any plans to add ReadAsBinary and other methods which are currently missing from the FileReader object? ","comments":1,"createdAt":1409320162000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1611842?v=3","loggedByName":"tticom","milestone":"","number":565,"state":"closed","title":"TypeScript Lack of ReadAsBinary on FileReader","updatedAt":1409330576000},{"assignedTo":"sheetalkamat","body":"Old compiler emitted /// or pinned comments (comments starting with /*! ) even though the node it is on is not emitted (for constructor signature, function signature, interfaces and ambient declarations (of enum, module, class, variable statement), n","comments":0,"createdAt":1408649031000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.1","number":501,"state":"closed","title":"/// or pinned comments(starting with /*!) support","updatedAt":1409330138000},{"assignedTo":"mhegazy","body":"We don't necessarily have to collapse all function expressions at arbitrary depth. But consider the following common pattern:\r\n```TS\r\nvar foo = (function() {\r\n    // code\r\n})();\r\n```\r\nThis kind of function expression should be collapsible.","comments":1,"createdAt":1406231896000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.3","number":235,"state":"closed","title":"Outlining should collapse function expressions","updatedAt":1409330125000},{"assignedTo":"","body":"```typescript\r\ninterface Dictionary {\r\n\t[key: string]: any;\r\n}\r\nvar dict: Dictionary = {};\r\ndict['work']; // Works\r\ndict.work; // Doesn't work\r\n```\r\n\r\nResulting JavaScript is valid but TypeScript blocks this.\r\nAllowing this would allow general JavaSc","comments":3,"createdAt":1409258019000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":560,"state":"open","title":"Suggestion: Allow arbitrary property access when with string indexer","updatedAt":1409329744000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\n(a:number => { }\r\n```\r\n\r\nExpected: \r\n\r\n!!! ')' expected.\r\n\r\nActual: \r\n\r\n!!! ')' expected.!!! Cannot find name 'a'.\r\n\r\n \r\n\r\nCyrus notes this is an important error recovery situation to get right","comments":1,"createdAt":1405627085000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":119,"state":"closed","title":"[Errors] error recovery with lambda missing close paren","updatedAt":1409295950000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\nmodule M {\r\n    function fn2(n: string);\r\n    export function fn2();\r\n    export function fn2() { }\r\n} \r\n```\r\n \r\nExpected: Overload signatures must all be exported or not exported.\r\n\r\nActual: no error","comments":0,"createdAt":1405627032000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":91,"state":"closed","title":"[Errors] functions that differ on export modifier","updatedAt":1409295409000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\nreturn {\r\n    \"set\": function (key, value) {\r\n        // 'private' should not be considered a member variable here.\r\n        private[key] = value;\r\n        //!!! Cannot find name 'private'.\r\n    }\r\n};\r\n```\r\n\r\nExpected: \r\n\r\n!!! 'return'","comments":0,"createdAt":1405627066000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":104,"state":"closed","title":"[Errors] error recovery after return statements in invalid positions","updatedAt":1409295132000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\nvar v = (a: ) => {           }; \r\n```\r\n \r\n\r\nExpected: \r\n\r\n    !!! Type expected.\r\n\r\nActual: \r\n\r\n    !!! Cannot find name 'a'.\r\n\r\n \r\n\r\nSee also:\r\n\r\n    tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrowFunctions/parserX_Arro","comments":0,"createdAt":1405627068000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":106,"state":"closed","title":"[Errors] error recovery with lambda with incomplete parameter type annotation","updatedAt":1409295062000},{"assignedTo":"JsonFreeman","body":"New compiler error recovery goes off the rails and issues tons of parse errors for the remainder of the class elements if you write:\r\n\r\n \r\n```TypeScript\r\nclass C {\r\n    public foo() {};\r\n    ...\r\n}\r\n```\r\n ","comments":2,"createdAt":1405627082000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":116,"state":"closed","title":"[Errors] error recovery for class with semicolon after method body","updatedAt":1409294274000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\nnew new Foo()()!!! Cannot find name 'Foo'.\r\n```\r\n\r\nExpected: errors above\r\n\r\nActual: \r\n\r\n!!! Cannot find name 'Foo'.!!! Cannot use 'new' with an expression whose type lacks a signature.!!! Cannot use 'new' with an expression whose type","comments":1,"createdAt":1405627060000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":98,"state":"closed","title":"[Errors] error recovery with new expression on unknown symbol","updatedAt":1409294197000},{"assignedTo":"","body":"This PR is not to be merged in wholesale. I am just documenting the changes I've made in this branch to compare the type baselines with the old compiler's type baselines. The changes were in the service of making the new baselines and old baselines l","comments":5,"createdAt":1409164360000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":554,"state":"closed","title":"Changes to typeWriter and type baselines","updatedAt":1409272833000},{"assignedTo":"sheetalkamat","body":"See similar issue here that was in Web Essentials for LESS: https://github.com/madskristensen/WebEssentials2013/issues/1424#issuecomment-52862928 \r\n\r\nShould not see C:\\some\\path\\here\\whatever.js in the map file. Should be like /here/whatever.js relat","comments":7,"createdAt":1408580867000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/79032?v=3","loggedByName":"wforney","milestone":"TypeScript 1.1","number":496,"state":"closed","title":".js.map file contains absolute file path instead of site relative path","updatedAt":1409256175000},{"assignedTo":"","body":"","comments":1,"createdAt":1409099185000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":549,"state":"closed","title":"Get occurrences for switch/case/default/break keywords.","updatedAt":1409251293000},{"assignedTo":"","body":"","comments":1,"createdAt":1409079006000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":525,"state":"closed","title":"Implemented getOccurrencesAtPosition for try/catch/finally keywords.","updatedAt":1409251293000},{"assignedTo":"","body":"Hi,\r\n\r\nI don't have a strong background in JavaScript, I have mainly been coding in C#.\r\nI'm starting a client-side application using TypeScript and Angular.js and wish to use the underscore.string library, with its TS definition available on NuGet.\r","comments":3,"createdAt":1409225052000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6056675?v=3","loggedByName":"dismuter","milestone":"","number":557,"state":"closed","title":"Use external module in internal modules","updatedAt":1409249809000},{"assignedTo":"","body":"","comments":0,"createdAt":1408749386000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":516,"state":"closed","title":"Emit pinned or ///<reference> tag comments for signatures, ambient declaraitons and interfaces","updatedAt":1409248289000},{"assignedTo":"","body":"Hi,\r\n\r\nWe have this particular use-case. \r\n\r\nSay we have two projects: MyLib.csproj and MyClient.csproj.\r\n\r\nFor each project we'd like to\r\n\r\n* Generate a single declarations file and have it created in the bin directory, e.g. MyLib.d.ts\r\n* Redirect a","comments":10,"createdAt":1406023867000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":192,"state":"closed","title":"Please provide an option for combining only declaration files","updatedAt":1409241790000},{"assignedTo":"","body":"```\r\nmodule Foo {\r\n    class X {\r\n      public static F() {}\r\n      public static G() { F(); }\r\n    }\r\n}\r\n```\r\nCurrent error is:  \r\n> Cannot find name 'F'.\r\n\r\nSuggestion:\r\n> Cannot find name 'F'. Did you mean to prefix the static function invocation ","comments":0,"createdAt":1409085280000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":528,"state":"open","title":"Show better error message for unresolved references due to missing prefix","updatedAt":1409085280000},{"assignedTo":"","body":"I've hurt myself multiple times with code like this:\r\n```\r\nvar x = length / 2;\r\n```\r\n\r\nthe problem is that I forgot to declare the \"length\" variable but because one exists as \"window.length\" this compiles without a problem.\r\nA good help would be a st","comments":4,"createdAt":1409073543000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/911440?v=3","loggedByName":"andrewvarga","milestone":"","number":524,"state":"closed","title":"Compiler option to force explicit access for global properties","updatedAt":1409076677000},{"assignedTo":"","body":"Currently, you have to write TypeScript files two different ways to either output them as [Internal or External Modules](http://www.codebelt.com/typescript/typescript-internal-and-external-modules/). Can we have a smarter compiler that can create an ","comments":1,"createdAt":1408898925000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2893563?v=3","loggedByName":"codeBelt","milestone":"","number":519,"state":"closed","title":"Smarter compiler to create Internal and External Modules from the same TypeScript file.","updatedAt":1409076079000},{"assignedTo":"","body":"# Do not discuss the details of these in this bug! Go to the appropriate linked issue to discuss them\r\nThis issue is to track all the various `this` proposals floating around and to distinguish them. Any comments here should be clarifying comments/qu","comments":0,"createdAt":1408731188000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":513,"state":"open","title":"Meta-issue: `this` disambiguator","updatedAt":1409075142000},{"assignedTo":"DanielRosenwasser","body":"The targets file needs to reference charset instead of codepage","comments":0,"createdAt":1407362056000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":379,"state":"closed","title":"Update targets to use --charset instead of --codepage","updatedAt":1408999920000},{"assignedTo":"DanielRosenwasser","body":"While trying to do a solution build through TFS (which in turn uses MSBuild to drive it) we are seeing a build issue that only shows up when the project starts from a clean instance. If you compile via the IDE first or run TSC directly then re-run MS","comments":1,"createdAt":1407813588000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/192707?v=3","loggedByName":"colinbowern","milestone":"TypeScript 1.3","number":433,"state":"closed","title":"NullReferenceException when compiling via MSBuild (TFS)","updatedAt":1408992742000},{"assignedTo":"DanielRosenwasser","body":"Generate and add localized resources for the new compiler error messages.","comments":2,"createdAt":1406483549000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":270,"state":"closed","title":"Generate localized json files for error messages","updatedAt":1408991086000},{"assignedTo":"DanielRosenwasser","body":"Expose new compiler flag --emitBOM in default targets","comments":0,"createdAt":1407362077000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":380,"state":"closed","title":"Update targets to use --emitBOM","updatedAt":1408991054000},{"assignedTo":"","body":"Hi,\r\nI have a problem in understanding the semantics of static members in sub and super classes. In the following example the two static member variables in class A and B have the same identifier and different visibilities, so that the static members","comments":1,"createdAt":1408976526000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8545986?v=3","loggedByName":"GizmorJK","milestone":"","number":520,"state":"closed","title":"Static members in sub and super classes","updatedAt":1408989308000},{"assignedTo":"","body":"https://github.com/electricessence/TypeScript.NET/commit/fc9eff76e2e973ef47f82febf6036b13975bbcdd\r\nSee comment.\r\n\r\nError\t318\tClass PublicNode<T> declares interface ILinkedListNode<T> but does not implement it:\r\n\tTypes of property 'list' of types 'Pub","comments":3,"createdAt":1408514732000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5899455?v=3","loggedByName":"electricessence","milestone":"","number":487,"state":"closed","title":"Error 318 when it shouldn't.  Commenting out interface infers correctly.","updatedAt":1408871160000},{"assignedTo":"","body":"(I know it's still early and the services compiler and Sheetal's emit comments work were only recently merged. I'm just asking for future plans.)\r\n\r\nCurrently there are two different AST implementations in TS.\r\n\r\n- The one under src/compiler\r\n  * Nod","comments":2,"createdAt":1408669425000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1096010?v=3","loggedByName":"Arnavion","milestone":"","number":510,"state":"closed","title":"Is there a plan to combine the two AST implementations into one with the features of both?","updatedAt":1408767746000},{"assignedTo":"","body":"Addresses part of issue #506.\r\n\r\nBefore:\r\n```\r\nfile.ts(1,6): ';' expected. \r\nfile.ts(1,11): ';' expected.\r\n```\r\n\r\nAfter:\r\n```\r\nfile.ts(1,6): error TS1005: ';' expected. \r\nfile.ts(1,11): error TS1005: ';' expected.\r\n```","comments":6,"createdAt":1408666303000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":508,"state":"closed","title":"Emit error codes when reporting diagnostics.","updatedAt":1408749704000},{"assignedTo":"sheetalkamat","body":"Old compiler emitted leading comments of the '}' of the function/Constructor body but new one doesn't\r\n\r\n```TypeScript\r\nfunction load_parameter() {\r\n\r\n    // do nothing......or....maybe run a compile here?\r\n}\r\n```\r\n\r\nExpected:\r\n```javascript\r\nfunctio","comments":0,"createdAt":1408650379000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.1","number":503,"state":"closed","title":"Not emitting leading comments of '}' of function declaration","updatedAt":1408748708000},{"assignedTo":"","body":"","comments":5,"createdAt":1408666807000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":509,"state":"closed","title":"Emit leading comments for '}' of function/constructor block","updatedAt":1408748542000},{"assignedTo":"","body":"","comments":1,"createdAt":1408060424000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":456,"state":"closed","title":"Initial port of the new language service work.","updatedAt":1408742899000},{"assignedTo":"sheetalkamat","body":"Code: \r\na.ts:\r\n```TypeScript\r\n/*--------------------------------------------------------------------------\r\nCopyright \r\n---------------------------------------------------------------------------*/\r\n\r\nvar x = {\r\n    a: 10,\r\n    b: 20\r\n};\r\n```\r\n\r\nb.ts","comments":0,"createdAt":1408648176000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"TypeScript 1.1","number":500,"state":"closed","title":"Copyrights for 2nd file onwards are not emitted on the new line if multiple files are emitted into single file","updatedAt":1408666722000},{"assignedTo":"","body":"Fixes #500","comments":5,"createdAt":1408653945000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":505,"state":"closed","title":"Emit new lines between source files emit so that the file contents always start on new line","updatedAt":1408662956000},{"assignedTo":"","body":"```TypeScript\r\nfunction foo() {\r\n    var x = 10;\r\n    if (x == 10) {\r\n        return x;\r\n    } else {\r\n        return 10;\r\n    }\r\n}\r\n```\r\n\r\nOldCompiler ouput\r\n```JavaScript\r\nfunction foo() {\r\n    var x = 10;\r\n    if (x == 10) {\r\n        return x;\r\n  ","comments":1,"createdAt":1408486518000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":481,"state":"closed","title":"Emit output formatting little different compared to old compiler","updatedAt":1408658777000},{"assignedTo":"","body":"The start time wasn't subtracted from the current time","comments":1,"createdAt":1408652150000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":504,"state":"closed","title":"Fixed TypeScript.declarationEmitGetAccessorFunctionTime value","updatedAt":1408655022000},{"assignedTo":"","body":"","comments":1,"createdAt":1408575504000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":495,"state":"closed","title":"Simplifies RWC Runner to use HarnessCompiler.compileFiles so it can be used to baseline errors and sourcemaps more like compiler runner","updatedAt":1408651486000},{"assignedTo":"","body":"Remover 3 unused variables (2 in parser & 1 in checker).","comments":1,"createdAt":1408649161000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":502,"state":"closed","title":"Remove some unused variables","updatedAt":1408650953000},{"assignedTo":"","body":"this.currentAssertionLevel is always undefined because the currentAssertionLevel isn't exported.\r\nI removed the this keyword because I didn't want to make the currentAssertionLevel public.","comments":1,"createdAt":1408648027000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":499,"state":"closed","title":"Fix shouldAssert function","updatedAt":1408650921000},{"assignedTo":"","body":"This enables adding comments to the .js and .d.ts for all the declarations when --removeComments is not specified\r\nNote the comments aren't correctly formatted and have extra spacing when they are multiline comment. That is a todo I am fixing separat","comments":0,"createdAt":1408035197000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":452,"state":"closed","title":"Emit comments in the .js and .d.ts files","updatedAt":1408579665000},{"assignedTo":"","body":"Running `tsc hello-world.js` on this file:\r\n\r\n    console.log(\"Hello world\");\r\n\r\nTakes 5 seconds on my computer. This is especially strange to me since the online version of typescript compilation is near instantaneous.","comments":12,"createdAt":1408434396000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1933752?v=3","loggedByName":"vitalybe","milestone":"","number":477,"state":"closed","title":"Start compilation time (regardless of file size) is very slow","updatedAt":1408563322000},{"assignedTo":"","body":"Right now resolveImport can resolve the entity name on the RHS of an import. But we only support resolving the whole entity name, not an arbitrary part of it. This change supports resolving an arbitrary part of an entity name. I've rewired resolveImp","comments":1,"createdAt":1408487515000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":482,"state":"closed","title":"Support resolution of any part of the RHS of an import","updatedAt":1408555348000},{"assignedTo":"","body":"Using a named function expression is better than using an anonymous one when it comes to examining the stack trace. JavaScript offers a choice between a function declaration, expression and named expression. Lamdas in TypeScript only offer the anonym","comments":2,"createdAt":1408498487000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":485,"state":"closed","title":"Suggestion: allow named lambdas","updatedAt":1408552491000},{"assignedTo":"","body":"I think this will ease the use of `Function.prototype.call` method.\r\n\r\n# Syntax\r\n\r\n```typescript\r\n\"abc\"<-Array.prototype.map((c) => c);\r\n\r\nvar uint8array: Uint8Array;\r\nvar array = uint8array<-Array.prototype.map((i) => i);\r\n```\r\n\r\nCompiles to:\r\n\r\n```","comments":1,"createdAt":1408525714000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":489,"state":"closed","title":"Suggestion: `<-` syntax sugar for `fn.call` method","updatedAt":1408552011000},{"assignedTo":"","body":"This causes the `tsc` command to fail when installed via npm\r\n\r\nhttps://github.com/Microsoft/TypeScript/blob/master/bin/tsc#L2\r\n\r\nshould be `require('./tsc.js')`","comments":1,"createdAt":1408489550000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/502412?v=3","loggedByName":"spion","milestone":"","number":483,"state":"closed","title":"bin/tsc still contains invalid reference to module \"./tc.js\"","updatedAt":1408490006000},{"assignedTo":"mhegazy","body":"```TypeScript\r\nmodule m1 {\r\n    export class C2 implements m3.i3 {\r\n        public get p1() {\r\n            return null;\r\n        }\r\n \r\n        public f55() {\r\n            return \"Hello world\";\r\n        }\r\n    }\r\n    module m3 {\r\n        export interf","comments":2,"createdAt":1405627004000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":66,"state":"closed","title":"[Errors] class implementing private type","updatedAt":1408470779000},{"assignedTo":"","body":"I don't think there's a good way of unit testing this change...\r\n\r\nThe symbol is \"exported\", so it's possible that a client of the language service would be calling it, (although I kind of doubt it would be used by anyone directly).","comments":1,"createdAt":1408460817000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"","number":478,"state":"closed","title":"spelling fix: Idenfier -> Identifier","updatedAt":1408467917000},{"assignedTo":"","body":"Latest master gives me following error when I try to compile my project:\r\n```\r\ntsc.js:1907\r\n        var text = getLocaleSpecificMessage(message.key);\r\n                                                   ^\r\nTypeError: Cannot read property 'key' of unde","comments":12,"createdAt":1407926174000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1099238?v=3","loggedByName":"MaceWindu","milestone":"","number":446,"state":"closed","title":"Compiler crash when type name is not nameable","updatedAt":1408434244000},{"assignedTo":"","body":"This change adds back the typeWriter pass on all the compiler tests. The typeWriter walks the tree and prints the types of all expressions and nodes (it actually tries to pick the same node kinds as the old typeWriter). It gets the type of every node","comments":1,"createdAt":1408139450000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":464,"state":"closed","title":"Revive TypeWriter","updatedAt":1408417621000},{"assignedTo":"","body":"Removed duplicate and unused messages.\r\n\r\nNote: The commit relating to unused diagnostic messages can be used as a reference for potential feature gaps.","comments":1,"createdAt":1407365521000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":383,"state":"closed","title":"Cleaned up diagnostic messages","updatedAt":1408402132000},{"assignedTo":"","body":"Also enable unit tests, and clean up some old test files","comments":0,"createdAt":1407480783000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":405,"state":"closed","title":"Wire the classifier to use the new compiler implementation","updatedAt":1408397885000},{"assignedTo":"","body":"This fixes generation of typescriptServices.d.ts,\r\nalthough this is not a current requirement\r\n( https://github.com/Microsoft/TypeScript/issues/465 ).\r\n\r\nI don't have a unit test yet. [EDIT:   I added a unit test]\r\n\r\n[EDIT] This PR fixes https://gith","comments":4,"createdAt":1408159089000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"","number":466,"state":"closed","title":"fix --declaration typechecking (complex case)","updatedAt":1408393970000},{"assignedTo":"","body":"","comments":1,"createdAt":1408052930000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":455,"state":"closed","title":"Align the multiline comments in the generated outputs by retaining its position relative to the first line in the comment","updatedAt":1408393578000},{"assignedTo":"","body":"```\r\ninterface A<x, y> {}\r\ninterface B<z> extends A<z, z> {}\r\nvar b : B<void> = null;\r\nfunction f<x, y>(a: A<x, y>) {}\r\nf(b); // <--- expected: (a: <void, void>), actual: (a: A<{}, {}>) \r\n```\r\nat [playground](http://www.typescriptlang.org/Playground#","comments":4,"createdAt":1408182343000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":468,"state":"closed","title":"Type inference bug","updatedAt":1408380191000},{"assignedTo":"","body":"```\r\nfunction g<a, b, r>(f: (one: a, two: b) => r, one: a, two: b) {\r\n\treturn f(one, two);\r\n}\r\nfunction f(text: string, index: number) { return text.substr(index); }\r\nalert(g(f, 'hey', 1));\t// <-- compiles and works\r\nalert(g(f, 1, 'hey'));\t// <-- a p","comments":2,"createdAt":1408211653000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":469,"state":"closed","title":"Another type inference bug","updatedAt":1408379521000},{"assignedTo":"","body":"Currently in TypeScript to protect the integrity of a data structure one can only use classes with fields declared `private`. Classes are much heavier data structures compared to object literals of some interfaces and there is a trade-of between choo","comments":4,"createdAt":1406818119000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":321,"state":"open","title":"Consider adding a module level visibility modifier.","updatedAt":1408373757000},{"assignedTo":"","body":"After installing the update 3 to visual studio some of my interfaces stopped compiling. The error is:\r\n\r\n\"Cannot compile external module unless the --module flag is provided\".\r\n\r\nThese files compiled perfectly well before the update. My interface loo","comments":4,"createdAt":1407743876000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6637277?v=3","loggedByName":"Magrangs","milestone":"","number":422,"state":"closed","title":"Typescript does not compile after installing update 3 to VS","updatedAt":1408356793000},{"assignedTo":"","body":"Hi,\r\n\r\n**VS Version**: 2013 Ultimate Update 3 RC\r\n**TS Version**: old compiler (but this is not a compilation issue)\r\n\r\n**To reproduce**\r\n* Create a TypeScript project in Visual Studio.\r\n* Add a folder to the project e.g. \"foo\".\r\n* Add one or two sam","comments":3,"createdAt":1408011327000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":451,"state":"closed","title":"Visual Studio \"Clean\" does not remove folders","updatedAt":1408297345000},{"assignedTo":"","body":"typescriptServices cannot export a declaration file: there are many issues which only surface when --declaration is added to the command line.\r\n\r\n(this worked some time ago, when this file was called services.js).\r\n\r\n```commandline\r\nnode built/local/","comments":2,"createdAt":1408142500000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Revisit","name":"Revisit","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"","number":465,"state":"closed","title":"errors when adding --declaration to compliation of typescriptServices.js","updatedAt":1408159089000},{"assignedTo":"","body":"Currently, TypeScript understands the following primitive types: Number, Boolean, String, Void, Null, Undefined, and user-defined Enumeration types.\r\n\r\nIt would be nice if we could define primitive type aliases. A type alias, e.g., `type number t`, w","comments":10,"createdAt":1408134382000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/254842?v=3","loggedByName":"samwgoldman","milestone":"","number":461,"state":"closed","title":"User-defined primitive type aliases","updatedAt":1408144993000},{"assignedTo":"","body":"Checker should be created prior to any call to `createType`","comments":1,"createdAt":1408136121000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":462,"state":"closed","title":"create instance of the checker prior to making any types","updatedAt":1408143037000},{"assignedTo":"","body":"The parser currently performs a look-ahead on every expression that starts with an identifier to determine if an `=>` token follows. This commit reverts back to the original design of recognizing an expression consisting of a single identifier to the","comments":3,"createdAt":1408114528000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":460,"state":"closed","title":"Removed lookahead for simple arrow function expressions.","updatedAt":1408132458000},{"assignedTo":"","body":"LS now uses 2 instances of typechecker:\r\n-  `typeInfoResolver` - created via `getTypeChecker(/*fullTypeCheck*/ false)` - used by quickinfo\\dot completion etc..\r\n\r\n- `fullTypeCheckChecker` - created via `getTypeChecker(/*fullTypeCheck*/ true)` - used ","comments":1,"createdAt":1407969465000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":450,"state":"closed","title":"added fullTypeCheckFlag to TypeChecker","updatedAt":1408130085000},{"assignedTo":"","body":"Revert the previous language service merge.\r\n\r\nWe're going to make all the breaking changes to the LS api in the newLanguageService branch, and then merge it all in when it is complete.","comments":0,"createdAt":1408063252000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":459,"state":"closed","title":"Revert the previous language service merge.","updatedAt":1408063574000},{"assignedTo":"","body":"Revert the previous language service merge.\r\n\r\nWe're going to do all the work in newLanguageService and then merge it all in when complete.","comments":1,"createdAt":1408062840000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":458,"state":"closed","title":"Revert the previous language service merge.","updatedAt":1408063007000},{"assignedTo":"sheetalkamat","body":"```TS\r\nmodule A {\r\n   export class C { }\r\n}\r\nimport i = A;\r\nmodule B {\r\n   export module A { }\r\n   export interface Int extends i.C { }\r\n}\r\n```\r\nExpected .d.ts emit:\r\n```TS\r\ndeclare module A {\r\n     class C {\r\n     }\r\n}\r\nimport i = A;\r\ndeclare module","comments":1,"createdAt":1407448743000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.1","number":400,"state":"closed","title":"Imports are not emitted, instead flattened, in declaration emit","updatedAt":1408059247000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nclass C2_private {\r\n\r\n}\r\n\r\nexport function f4_public(m1_f4_arg: C2_private) { \r\n\r\n}\r\n```\r\n\r\nExpected: Parameter 'm1_f4_arg' of exported function has or is using private type 'C2_private'.\r\n\r\nActual: no error","comments":1,"createdAt":1405627022000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":82,"state":"closed","title":"[Errors] exported function with parameter of a private type","updatedAt":1408059247000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nexport interface m3_C4_public extends m3_i_private {\r\n\r\n!!! Exported interface 'm3_C4_public' extends private interface 'm3_i_private'.\r\n\r\n}\r\n```\r\n \r\n\r\nError lost in new compiler","comments":0,"createdAt":1405627023000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":83,"state":"closed","title":"[Error] No error for exported interface extending unexported interface","updatedAt":1408059247000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nclass C2_private {\r\n\r\n}\r\n\r\nexport interface C3_public {\r\n\r\nf4(): C2_private;\r\n\r\n} \r\n```\r\n\r\nExpected: Return type of public method from exported interface has or is using private type 'C2_private'.\r\n\r\nActual: no error\r\n\r\nSimilar losses ","comments":1,"createdAt":1405627024000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":84,"state":"closed","title":"[Errors] public method of exported interface returning a private type","updatedAt":1408059247000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nclass C2_private {\r\n\r\n}\r\n\r\nexport interface C3_public {\r\n\r\nf2(a1: C2_private);\r\n\r\n} \r\n```\r\n\r\nExpected: \r\n\r\nParameter 'a1' of method from exported interface has or is using private type 'C2_private'\r\n\r\nActual: no error\r\n\r\n \r\n\r\nSimilar e","comments":1,"createdAt":1405627025000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":85,"state":"closed","title":"[Errors] public method of exported interface with parameter of a private type","updatedAt":1408059247000},{"assignedTo":"sheetalkamat","body":"Affected Branch: Affected Build: Affected Product Language: Steps to reproduce:\r\n\r\n```TypeScript\r\nmodule Outer {\r\n   module Inner {\r\n     export var m: typeof Inner;\r\n  }\r\n\r\n  export var f: typeof Inner;\r\n}\r\n```\r\n\r\nOld error on var f: Exported variab","comments":1,"createdAt":1405627016000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":77,"state":"closed","title":"[Error] No error for exported thing using inaccessible (unexported) module","updatedAt":1408059246000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nmodule m1 {\r\n    export class C2 {\r\n        public set p1(arg1: C1) {}\r\n    }\r\n    class C1 { }\r\n}\r\n```\r\nExpected: Parameter 'arg1' of public property setter from exported class has or is using private type 'C1'.\r\n\r\nActual: no error","comments":1,"createdAt":1405627006000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":68,"state":"closed","title":"[Errors] setter with arg of private type","updatedAt":1408059246000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nclass C2_private {\r\n\r\n}\r\n\r\nexport class C3_public {\r\n\r\npublic f8_public() {\r\n\r\nreturn new C2_private(); // error\r\n\r\n}\r\n\r\n}\r\n```\r\n\r\n\r\nExpected: Return type of public method from exported class has or is using private type 'C2_private'.\r","comments":4,"createdAt":1405627020000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":81,"state":"closed","title":"[Errors] public method of exported class returning a private type","updatedAt":1408059246000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nmodule m1 {\r\n    export class C2 implements m3.i3 {\r\n        public get p1() {\r\n            return new C1();\r\n        }\r\n \r\n        public f55() {\r\n            return \"Hello world\";\r\n        }\r\n    }\r\n    module m3 {\r\n        export in","comments":1,"createdAt":1405627005000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":67,"state":"closed","title":"[Errors] getter returning private type","updatedAt":1408059246000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nclass C2_private {\r\n\r\n}\r\n\r\nexport class C3_public {\r\n\r\npublic f4_public(m1_c3_f4_arg: C2_private) { } //error\r\n\r\n}\r\n```\r\n\r\nExpected: Parameter 'm1_c3_f4_arg' of public method from exported class has or is using private type 'C2_private","comments":1,"createdAt":1405627019000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":80,"state":"closed","title":"[Errors] public method of exported class with parameter of a private type","updatedAt":1408059246000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nclass C2_private {\r\n\r\n}\r\n\r\nexport class C3_public {\r\n\r\nconstructor (m1_c3_c2: C2_private); //error\r\n\r\nconstructor (m1_c3_c1_2: any) {\r\n\r\n}\r\n\r\n}\r\n```\r\n\r\nExpected: Parameter 'm1_c3_c2' of constructor from exported class has or is using p","comments":1,"createdAt":1405627018000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":79,"state":"closed","title":"[Errors] constructor of exported class with parameter of a private type","updatedAt":1408059246000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nmodule m1 {\r\n    export module m2 {\r\n        export function f1(c1: C1) {\r\n        }\r\n    }\r\n    class C1 { }\r\n}\r\n```\r\n\r\nExpected: Parameter 'c1' of exported function has or is using private type 'C1'. \r\n\r\nActual: no error","comments":1,"createdAt":1405626969000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":65,"state":"closed","title":"[Errors] exported function returning a private type","updatedAt":1408059246000},{"assignedTo":"sheetalkamat","body":"Code:\r\n```TypeScript\r\n    module Editor {\r\n            export class Buffer {\r\n            lines: List<string>;\r\n        }\r\n        class List<T> {         }\r\n    }\r\n```\r\n \r\n\r\nExpected: Error (on 'lines': List<T> is not exported)\r\nActual: No error","comments":1,"createdAt":1405626963000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":60,"state":"closed","title":"[Errors] No error using unexported type from module inside an exported type","updatedAt":1408059246000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\ninterface Foo {\r\n    x: number;\r\n}\r\n \r\nexport class Bar {\r\n    f(): Foo { return null; }\r\n}\r\n```\r\nExpected: Return type of public method from exported class has or is using private type 'Foo'. \r\n\r\nActual: no error","comments":1,"createdAt":1405626960000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":56,"state":"closed","title":"[Errors] Exported type whose functions return non-exported type","updatedAt":1408059246000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\ninterface Foo {\r\n    x: number;\r\n}\r\n \r\nexport class Bar {\r\n    f(x: Foo) { }\r\n\r\n}\r\n```\r\nExpected: Parameter 'x' of public method from exported class has or is using private type 'Foo'. \r\n\r\nActual: no error","comments":1,"createdAt":1405626957000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":55,"state":"closed","title":"[Errors] Exported type whose functions use parameters of non-exported type","updatedAt":1408059246000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\ninterface Foo {\r\n    x: number;\r\n}\r\n \r\nexport class Bar implements Foo {\r\n    x: number;\r\n}\r\n```\r\nExpected: Exported class 'Bar' implements private interface 'Foo'. \r\n\r\nActual: no error","comments":1,"createdAt":1405626956000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":54,"state":"closed","title":"[Errors] Exported class implementing non-exported interface","updatedAt":1408059246000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\n    module M {\r\n        module N {        }\r\n        export import X = N;\r\n    }\r\n```\r\nExpected: \r\n\r\n!!! Exported import declaration 'X' is assigned container that is or is using inaccessible module 'N'.\r\n\r\nActual: no error\r\n\r\nSimilar ","comments":1,"createdAt":1405626954000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":51,"state":"closed","title":"[Errors] exported import that exposes a private type","updatedAt":1408059246000},{"assignedTo":"sheetalkamat","body":"tsc generates a .d.ts file that it subsequently cannot parse anymore. \r\n\r\n**Input file: myfile.ts**\r\n```javascript\r\n/// <reference path=\"./used.d.ts\" />\r\nimport myUsedId = require(\"used\");\r\nexport class foo extends myUsedId.SomeClass {\r\n}\r\n```\r\n\r\n**I","comments":8,"createdAt":1407229452000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7348032?v=3","loggedByName":"rogierschouten","milestone":"TypeScript 1.1","number":361,"state":"closed","title":"Invalid d.ts file generated from valid input","updatedAt":1408059213000},{"assignedTo":"","body":"The `-diagnostics` command line switch now includes memory usage in the reported statistics when running under node.js. If node.js was invoked with the `-expose-gc` flag, `global.gc()` is called before obtaining the allocated heap size to get a more ","comments":5,"createdAt":1408039332000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":453,"state":"closed","title":"Include memory usage in -diagnostics report","updatedAt":1408050763000},{"assignedTo":"sheetalkamat","body":"```TypeScript\r\nmodule m1 {\r\n    export var x: C1;\r\n    class C1 { }\r\n}\r\n```\r\nExpected: Exported variable 'v2' has or is using private type 'C1'.\r\nActual: no error\r\n\r\n","comments":0,"createdAt":1405627007000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":69,"state":"closed","title":"[Errors] exported var of private type","updatedAt":1407987533000},{"assignedTo":"","body":"This change contains two changes\r\n1. Report errors on variable/property types if they aren't accessible\r\n2. Emit the import declaration asynchronously if the alias declaration that is not exported is needed to define the type\r\n3. Report errors on par","comments":1,"createdAt":1407363597000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":381,"state":"closed","title":"Report privacy errors on variable/property declarations and also emit import declarations that get used to defined visible type","updatedAt":1407981047000},{"assignedTo":"","body":"This change adds support for emitting the alias declaration if it is indirectly used in export assignment\r\nAlso enabled few test cases that werent running correctly","comments":1,"createdAt":1407543360000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":410,"state":"closed","title":"Emit the alias if it is indirectly used in export assignment","updatedAt":1407978470000},{"assignedTo":"","body":"eg:\r\n```TypeScript\r\n// @Filename: w1.ts\r\nexport = Widget1\r\nclass Widget1 { name = 'one'; }\r\n\r\n// @Filename: exporter.ts\r\nexport import w = require('./w1');\r\n\r\n// @Filename: consumer.ts\r\nimport e = require('./exporter');\r\n\r\nexport function w(): e.w { ","comments":1,"createdAt":1407543492000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":412,"state":"closed","title":"Check for the accessible symbol from exported import","updatedAt":1407978360000},{"assignedTo":"","body":"Report error if the entityname reference in the import declaration is using private module","comments":0,"createdAt":1407543563000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":413,"state":"closed","title":"Report error if the entityname reference in the import declaration is us...","updatedAt":1407978325000},{"assignedTo":"","body":"","comments":1,"createdAt":1407543437000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":411,"state":"closed","title":"Enabled project runner to compile declaration files that get generated","updatedAt":1407978258000},{"assignedTo":"","body":"Declaration file needs to always emit typeof function/static function instead of emitting signature","comments":1,"createdAt":1407543623000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":414,"state":"closed","title":"Emit Type of function and static function correctly in declaration file","updatedAt":1407977322000},{"assignedTo":"","body":"Adds test cases too","comments":1,"createdAt":1407792061000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":431,"state":"closed","title":"Make changes to report error if the type used from external module cannot be named","updatedAt":1407977287000},{"assignedTo":"","body":"Port over changes to the ScriptSnapshot API from the languageService-v2 branch.","comments":1,"createdAt":1407888874000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4564579?v=3","loggedByName":"CyrusNajmabadi","milestone":"","number":444,"state":"closed","title":"Port over changes to the ScriptSnapshot API from the languageService-v2 branch.","updatedAt":1407969956000},{"assignedTo":"","body":"Ignore files generated by generate-code-coverage task","comments":2,"createdAt":1407955299000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":448,"state":"closed","title":"Add coverage folder to gitignore file","updatedAt":1407961188000},{"assignedTo":"","body":"```\r\n\"x\".match(/.*/).index\r\n```\r\nfails to compile. The ```String.match``` function is declared as:\r\n```\r\ninterface String {\r\n    match(regexp: RegExp): string[];\r\n}\r\n```\r\nInstead, ```String.match(_: RegExp)``` should probably return an interface whic","comments":3,"createdAt":1406008494000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/58774?v=3","loggedByName":"binil","milestone":"Community","number":184,"state":"closed","title":"Return value of String.match has an index property","updatedAt":1407950218000},{"assignedTo":"","body":"The second quote of the static attribute was incorrectly\r\nmatched against the first quote of the path attribute.","comments":11,"createdAt":1407779339000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"","number":427,"state":"closed","title":"fix: /// <reference path=\"...\" static='true' />","updatedAt":1407920457000},{"assignedTo":"","body":"We were compiling fourslah tests without --out flag, and executing the output of the last file \"fourslash.ts\", for all tests, effectively disabling the tests.. re-enabling and fixing issues that running the tests uncovered.","comments":2,"createdAt":1407875775000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":443,"state":"closed","title":"Reenable Fourslash tests after they have been accidentlly disabled","updatedAt":1407890704000},{"assignedTo":"","body":"","comments":2,"createdAt":1407868262000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":437,"state":"closed","title":"use writeSync instead of stdout.write to make sure that stream is flushed","updatedAt":1407883202000},{"assignedTo":"","body":"If you have some code using a global like this:\r\n\r\n```typescript\r\ndeclare var bar\r\nmodule foo {\r\n    var x = bar;\r\n}\r\n```\r\n\r\nThis generates the following code, with `bar` being used directly.\r\n\r\n```javascript\r\nvar foo;\r\n(function (foo) {\r\n    var x =","comments":4,"createdAt":1407869390000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/75477?v=3","loggedByName":"hesselink","milestone":"","number":441,"state":"closed","title":"Global variables can be shadowed by other modules","updatedAt":1407877601000},{"assignedTo":"","body":"The pre-declared Console object contains a property `msIsIndependentlyComposed`. It is declared as\r\n\r\n    msIsIndependentlyComposed(element: Element): bool;\r\n\r\nI think this should be\r\n\r\n    msIsIndependentlyComposed?(element: Element): bool;\r\n\r\nThis ","comments":1,"createdAt":1407869166000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/75477?v=3","loggedByName":"hesselink","milestone":"","number":440,"state":"closed","title":"Prefixed properties should be optional","updatedAt":1407874612000},{"assignedTo":"","body":"Moving declarations of `length`, `push`, and `pop` to the top such that type mismatch errors are reported in terms of these well known properties (rather than the more esoteric `concat` and `join` we pick now).","comments":2,"createdAt":1407867345000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":436,"state":"closed","title":"Rearranging members of Array<T> to improve error reporting.","updatedAt":1407874020000},{"assignedTo":"","body":"","comments":1,"createdAt":1407788227000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":430,"state":"closed","title":"enable outlining atop of new compiler","updatedAt":1407869954000},{"assignedTo":"","body":"sourceMap option no longer worked because code expects the M to be upper case, options structure had a lower case m","comments":4,"createdAt":1407672536000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/133752?v=3","loggedByName":"hn3000","milestone":"","number":421,"state":"closed","title":"fix typo: sourcemap -> sourceMap","updatedAt":1407868074000},{"assignedTo":"","body":"I raised this on Codeplex; but I don't believe it's supported. I'm not sure which of the two referenced cases are most appropriate, so thought it best to raise as I'd posted originally. If this overlaps with an existing GH issue; please let me know.\r","comments":2,"createdAt":1407849103000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1078012?v=3","loggedByName":"DanTup","milestone":"","number":435,"state":"closed","title":"Add ability to extend/replace built-in constructor declarations (eg. CustomEvent)","updatedAt":1407859151000},{"assignedTo":"","body":"import IFileReader = require(\"./IFileReader\");\r\n\r\nclass MapVirtualFileReader implements IFileReader {\r\n ...\r\n}\r\n\r\nexport = FileReader;\r\n\r\nThis does not throw an error\r\n","comments":1,"createdAt":1407847265000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2059806?v=3","loggedByName":"chaser92","milestone":"","number":434,"state":"closed","title":"Export with invalid identifier does not throw an error","updatedAt":1407859044000},{"assignedTo":"","body":"I'm having trouble explaining this in words so perhaps we'll just jump straight into the code.\r\n\r\n```ts\r\n// The enum that was generated from the server code\r\ndeclare module server {\r\n    enum RuleType {\r\n        All = 0,\r\n        Required = 1,\r\n     ","comments":3,"createdAt":1407793906000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229881?v=3","loggedByName":"styfle","milestone":"","number":432,"state":"closed","title":"Enum from .d.ts works for value comparison but not name comparison","updatedAt":1407800364000},{"assignedTo":"","body":"First I've thought about union types but they can solve only part of the problem. Original discussion started [here](https://typescript.codeplex.com/discussions/470744). In case codeplex had been abandoned, I copy my question here. \r\n\r\nPlease take a ","comments":7,"createdAt":1407524812000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/379412?v=3","loggedByName":"Evgenus","milestone":"","number":407,"state":"open","title":"JSDoc for methods with multiple signatures ","updatedAt":1407792568000},{"assignedTo":"","body":"This is for #372\r\n\r\nExports the `ts` module from the language service so people can do `require('typescript')`. \r\n\r\nNotes: \r\n- To run the test put `runners.push(new UnitTestRunner(UnittestTestType.LanguageService));` in `runner.ts` and in `nodeExport","comments":3,"createdAt":1407589492000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":416,"state":"closed","title":"Export ts to CommonJS","updatedAt":1407792559000},{"assignedTo":"","body":"\r\n///ERROR - Test.foo is inaccessible\r\n```TypeScript\r\nclass Test{\r\n\tprivate foo:number = 123;\r\n}\r\nclass SubTest extends Test{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.foo = 456;\r\n\t\t\r\n\t}\r\n}\r\nvar subTest = new SubTest();\r\n```\r\n\r\nVS:\r\n\r\n///Forced to make Te","comments":1,"createdAt":1407787299000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3022300?v=3","loggedByName":"diverted247","milestone":"","number":429,"state":"closed","title":"Super class members forced to use public for subclass access","updatedAt":1407788754000},{"assignedTo":"","body":"When a class fails to implement an interface, TypeScript throws multiple errors.\r\n```typescript\r\ninterface IFoo {\r\n    hello(): IFoo;\r\n    world(): IFoo;\r\n    getName(): string;\r\n}\r\n\r\nclass Foo implements IFoo { // Error: Class 'Foo' incorrectly impl","comments":1,"createdAt":1407667182000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"","number":419,"state":"closed","title":"Multiple errors are thrown when a class fails to implement an interface","updatedAt":1407785077000},{"assignedTo":"","body":"Why this is allowed ?\r\n\r\n```typescript\r\ninterface A<T> {\r\n f(x:number,a: T);\r\n}\r\n\r\n<A<void>>(null).f(1); \r\n```\r\n\r\nWhile calling the function via variable not ?\r\n\r\n```typescript\r\nvar a = <A<void>>(null);\r\na.f(1);\r\n```","comments":3,"createdAt":1407758701000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/580536?v=3","loggedByName":"NN---","milestone":"","number":423,"state":"closed","title":"Usage of void type ","updatedAt":1407784624000},{"assignedTo":"","body":"lib/MyClass.ts:\r\n```typescript\r\nexport class MyClass {\r\n    private _a: number;\r\n    private _b: string;\r\n    public c: number;\r\n    constructor(a: number, b: string, c: number) {\r\n        this._a = a;\r\n        this._b = b;\r\n        this.c = c;\r\n    ","comments":2,"createdAt":1407773829000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8181149?v=3","loggedByName":"kristoftorfs","milestone":"","number":426,"state":"closed","title":"VS Intellisense directly on require statement","updatedAt":1407784176000},{"assignedTo":"","body":"This is really a feature suggestion with a bit of code attached.\r\n\r\nI would like `tsc` to accept an `outExt` parameter, so that I can differentiate generated-from-TS .js files from raw javascript files. This has all kinds of benefits, including easil","comments":2,"createdAt":1407762005000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/703546?v=3","loggedByName":"eteeselink","milestone":"","number":425,"state":"closed","title":"Ability to modify the output filename extension","updatedAt":1407780077000},{"assignedTo":"","body":"Return value of String.match should have an optional index and input property, so I created an interface that adds these properties and extends `string[]`. Also `RegExpExecArray` should extend `string[]` instead of copying all the members of `Array`.","comments":1,"createdAt":1407580745000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4706418?v=3","loggedByName":"ivogabe","milestone":"","number":415,"state":"closed","title":"RegExp function return types","updatedAt":1407778643000},{"assignedTo":"","body":"","comments":1,"createdAt":1407541150000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":409,"state":"closed","title":"Adding getLeadingComments and getTrailingComments methods to scanner.","updatedAt":1407543403000},{"assignedTo":"","body":"I made these changes during some unrelated experiments but I'd like to keep them.","comments":1,"createdAt":1407532495000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":408,"state":"closed","title":"Simplifying createArrayType recursion check.","updatedAt":1407543123000},{"assignedTo":"","body":"rename tc files to tsc","comments":4,"createdAt":1407392568000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":386,"state":"closed","title":"rename tc.js to tsc.js","updatedAt":1407528050000},{"assignedTo":"","body":"Fixed a typo","comments":2,"createdAt":1407522345000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":406,"state":"closed","title":"Fixed typo soruceFile -> sourceFile","updatedAt":1407527878000},{"assignedTo":"","body":"Added missing semicolons, just some code-style fixes","comments":4,"createdAt":1407438802000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":395,"state":"closed","title":"Added missing semicolons","updatedAt":1407457390000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\nvar x = 001;\r\n```\r\nShould be an error if compiled with --target ES5","comments":1,"createdAt":1405626964000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":61,"state":"closed","title":"[Errors] Octal literals should be an error in ES5","updatedAt":1407442218000},{"assignedTo":"","body":"This change alters the way we parse octal literals to match the behavior of the old compiler. We also error now on octal literals in strict mode and -t es5.\r\n\r\nThere is one breaking change from the old compiler. Namely, in strict mode in ES3 (which d","comments":5,"createdAt":1407374415000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":385,"state":"closed","title":"Disallow octal literals in strict mode and ES5","updatedAt":1407442210000},{"assignedTo":"vladima","body":"From #345:\r\n\r\n```ts\r\ninterface A {\r\n  (key:string):void;\r\n}\r\n\r\ninterface B extends A {\r\n  (key:'foo'):string;\r\n}\r\n\r\nvar b:B;\r\n// Should not error\r\nb('foo').charAt(0);\r\n```","comments":0,"createdAt":1407345461000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 1.1","number":374,"state":"closed","title":"Specialized string overload from derived interface not selected","updatedAt":1407432969000},{"assignedTo":"","body":"fixes #374 ","comments":3,"createdAt":1407357612000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":378,"state":"closed","title":"do not reorder signatures from derived and base types","updatedAt":1407432948000},{"assignedTo":"","body":"Hi guys,\r\n\r\nCould it be possible to return all references for a given (.d).ts file??\r\n\r\nBecause as of now (v1.0.3), im using \r\n\r\n> tsc --out main.js main.ts\r\n\r\nand i'm recompiling automatically (using a custom script) when itself or any related file ","comments":1,"createdAt":1407403583000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6986076?v=3","loggedByName":"AbubakerB","milestone":"","number":388,"state":"closed","title":"Suggestion: Output all reference files","updatedAt":1407432880000},{"assignedTo":"","body":"I've encountered following issue during compilation:\r\n\r\n````\r\n[11:17:41] [tsc] > /Users/***/node_modules/typescript/bin/tsc.js:35490\r\n[11:17:41] [tsc] > xternalModuleReferenceAlias(symbol) && (!symbol.assignedContainer().hasExportA\r\n[11:17:41] [tsc] ","comments":2,"createdAt":1407403209000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2059806?v=3","loggedByName":"chaser92","milestone":"","number":387,"state":"closed","title":"Cannot call method 'hasExportAssignment' of null","updatedAt":1407431356000},{"assignedTo":"","body":"Previously we trafficked BOM from input to output. the only scenario where we know a BOM is necessary in the output is WWA's. This change adds a new switch (--generateBOM) that a WWA project would enable and get the same result.","comments":1,"createdAt":1407352631000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":377,"state":"closed","title":"add a new compiler command line switch for generating utf-8 BOM in the output","updatedAt":1407391143000},{"assignedTo":"DanielRosenwasser","body":"Every time a recompile is triggered, the compiler memory footprint grows.","comments":0,"createdAt":1407281951000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.1","number":366,"state":"closed","title":"'--watch' flag seems to have a leak","updatedAt":1407386091000},{"assignedTo":"","body":"Would help pick and choose parts of the compiler. E.g. the `createSourceFile` function in `parser.ts` is pretty useful on its own. I'd rather just `import parser = require('/tsc/parser')` and let the module system do its resolution of all that I am u","comments":1,"createdAt":1406721125000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":309,"state":"closed","title":"Use external modules for the TypeScript Compiler","updatedAt":1407381956000},{"assignedTo":"","body":"We were actually nesting closure environments with each new `getSourceFile`. Instead we now just aggregate the source files into a map.\r\n\r\nFixes #366.","comments":2,"createdAt":1407288676000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":367,"state":"closed","title":"Fixed memory leak when using '--watch' flag.","updatedAt":1407367707000},{"assignedTo":"","body":"A file named `bin/lib.scripthost.d.ts` exists in the repository, but running `jake && jake LKG` places a file named `bin/lib.scriptHost.d.ts` . This is likely to cause issues for people working with case-insensitive filesystems that canât figure out ","comments":1,"createdAt":1407019390000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"Community","number":343,"state":"closed","title":"Jakefile/repository filename case conflict","updatedAt":1407354905000},{"assignedTo":"","body":"Fixes #343","comments":1,"createdAt":1407345064000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":373,"state":"closed","title":"Rename lib.scripthost.d.ts to lib.scriptHost.d.ts","updatedAt":1407354222000},{"assignedTo":"sheetalkamat","body":"Affected Branch: Affected Build: Affected Product Language: Steps to reproduce:\r\n\r\n```TypeScript\r\nclass privateClass {\r\n\r\n}\r\n\r\nexport interface publicInterfaceWithPrivateTypeParameters {\r\n\r\nnew <T extends privateClass>(): privateClass; \r\n\r\n}\r\n```\r\n \r","comments":0,"createdAt":1405627027000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":86,"state":"closed","title":"[Error] Type parameter of accessible thing exposes inaccessible type","updatedAt":1407353624000},{"assignedTo":"sheetalkamat","body":"Affected Branch: Affected Build: Affected Product Language: Steps to reproduce:\r\n\r\nExamples like the following: \r\n\r\n```TypeScript\r\nexport module m1 {\r\n\r\nclass m1_c_private {\r\n\r\n}\r\n\r\nexport class m1_C4_public extends m1_c_private {\r\n\r\n!!! Exported cla","comments":0,"createdAt":1405627017000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":78,"state":"closed","title":"[Error] No error for exported class extending unexported class","updatedAt":1407353605000},{"assignedTo":"","body":"If I have a constructor like the following:\r\n\r\n    constructor(private myVariable: number){\r\n        var something = compute(myVariable);\r\n    }\r\n\r\nIf I choose to rename ```myVariable``` to ```_myVariable``` then it will catch all references to ```th","comments":1,"createdAt":1407346683000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8376906?v=3","loggedByName":"StarTether","milestone":"","number":376,"state":"closed","title":"Renaming a private constructor parameter in VS doesn't rename local references.","updatedAt":1407353279000},{"assignedTo":"DanielRosenwasser","body":"```\r\ntc.js --help\r\n```\r\nshould print a helpful message :smile:","comments":0,"createdAt":1406483457000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":269,"state":"closed","title":"Support --help in the new compiler","updatedAt":1407353263000},{"assignedTo":"","body":"Fixes #269.","comments":1,"createdAt":1407179059000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":351,"state":"closed","title":"Support the '--help' compiler flag.","updatedAt":1407351559000},{"assignedTo":"","body":"Currently this change reports errors only for heritage clause and constraints of type parameters if the name is not public","comments":1,"createdAt":1405733116000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":161,"state":"closed","title":"Report errors for usage of private types when generating declaration file","updatedAt":1407351131000},{"assignedTo":"vladima","body":"In the current release compiler, the following works and compiles without errors:\r\n\r\n```ts\r\ninterface A {\r\n  (key:string):void;\r\n}\r\n\r\ninterface B extends A {\r\n  (key:'foo'):string;\r\n}\r\n```\r\n\r\nIn the new compiler, an error:\r\n\r\ntestcase.ts(6,3): Specia","comments":2,"createdAt":1407020053000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"","number":345,"state":"closed","title":"Specialized overload signature inheritance broken","updatedAt":1407345470000},{"assignedTo":"","body":"Hi,\r\n  honestly I don't know if this is an issue, but I just noticed this using vs 2013 update 3 rtm\r\n\r\nI have this interface   \r\n```\r\nexport interface ISoluzioniService {       \r\n    ...       \r\n    alberoSoluzione(idSoluzione: number, idPalmare: nu","comments":2,"createdAt":1407318662000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/127777?v=3","loggedByName":"lucamorelli","milestone":"","number":370,"state":"closed","title":"strange non error implementing interface","updatedAt":1407345272000},{"assignedTo":"","body":"Consider the following code in an HTML file:\r\n\r\n    <div ng-controller=\"HomeController as home\">\r\n        {{home.property1}}\r\n    </div>\r\n\r\nSince we know that \"home\" is an instance of HomeController, it would be great if TypeScript could compile that","comments":2,"createdAt":1407307795000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1933752?v=3","loggedByName":"vitalybe","milestone":"","number":369,"state":"closed","title":"Integration with AngularJS - Compile AngularJS bindings in HTML files","updatedAt":1407344260000},{"assignedTo":"","body":"I found an odd bug where if on disk the file path is a different case than the require(\"\") statement the compiler errors out with TS2071. This took a while to track down because Solution Explorer showed one capitalization and that path was used in th","comments":2,"createdAt":1407307742000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/435601?v=3","loggedByName":"thoseamongus","milestone":"","number":368,"state":"closed","title":"AMD Module Import Paths should be case insensitive","updatedAt":1407344091000},{"assignedTo":"ahejlsberg","body":"The current release compiler supports reference comments without a file extension, which causes the compiler to look for either a .ts or .d.ts file:\r\n\r\n```ts\r\n/// <reference path=\"./foo\" />\r\n```\r\n\r\nThe new compiler throws an error \"File 'foo' must ha","comments":1,"createdAt":1407019820000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/229244?v=3","loggedByName":"csnover","milestone":"","number":344,"state":"closed","title":"New compiler does not support extensionless <reference> comments","updatedAt":1407338126000},{"assignedTo":"","body":"Fixes #344.","comments":4,"createdAt":1407274434000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":365,"state":"closed","title":"Support extensionless <reference> comments.","updatedAt":1407277707000},{"assignedTo":"","body":"Follow the variable `attributes` along this next example:\r\n\r\n```javascript\r\nclass Foo\r\n{\r\n    private attributes = {\r\n        bar: true,\r\n    };\r\n\r\n    baz()\r\n    {\r\n        this.attributes.bar; // true\r\n\r\n        Object.keys(someObject).forEach(func","comments":1,"createdAt":1407267780000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/959421?v=3","loggedByName":"bworwa","milestone":"","number":363,"state":"closed","title":"Scoping problem","updatedAt":1407268074000},{"assignedTo":"","body":"Compile and run the following code:\r\n ```TS\r\nmodule M {\r\n    class C {\r\n        static get foo() {\r\n            // side effects!!\r\n            i++;\r\n            return null;\r\n        }\r\n    }\r\n \r\n    module C { ; }\r\n    var i = 0;\r\n    import perform","comments":1,"createdAt":1405630522000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Won't%20Fix","name":"Won't Fix","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":135,"state":"closed","title":"[Emit] Should not elide an import if it has observable side effects","updatedAt":1407267687000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\nwhile (true) {\r\n      function f() {\r\n        break;\r\n      }\r\n    }\r\n```\r\nExpected: Jump target cannot cross function boundary.\r\n\r\nActual: no error","comments":1,"createdAt":1405626961000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":57,"state":"closed","title":"[Errors] break/continue across function boundary","updatedAt":1407267661000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\nwhile (true) { break target; } \r\n```\r\nExpected: Jump target not found.\r\n\r\nActual: no error","comments":1,"createdAt":1405626962000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":58,"state":"closed","title":"[Errors] break/continue with invalid target","updatedAt":1407267654000},{"assignedTo":"jonathandturner","body":"### file1.ts:\r\n```TypeScript\r\nmodule X.Y {\r\n    export class Point {\r\n        constructor(x: number, y: number) {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n        x: number;\r\n        y: number;\r\n    }\r\n}\r\n``` \r\n### file2.ts:\r\n```","comments":1,"createdAt":1405626962000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":59,"state":"closed","title":"[Design] merging modules across files","updatedAt":1407267647000},{"assignedTo":"ahejlsberg","body":"Code, should error but doesn't:\r\n```TypeScript\r\n    module A {\r\n        export var x;\r\n    }\r\n        module B {\r\n        var A = 1;\r\n// !!! Internal module reference 'A' in import declaration does not reference module instance for 'A'.        \r\n    ","comments":0,"createdAt":1405627011000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":73,"state":"closed","title":"[Errors] No error trying to import shadowed internal module","updatedAt":1407267641000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\n    target:\r\n    target:\r\n    while (true) {    }\r\n```\r\nExpected: Duplicate identifier 'target'.\r\nActual: no error","comments":1,"createdAt":1405627012000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":74,"state":"closed","title":"[Errors] duplicate labels","updatedAt":1407267629000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\n// @module: commonjs\r\n\r\n// @Filename: foo_0.ts\r\n\r\nclass Foo<T extends {a: string; b:number;}>{\r\n\r\ntest: T;\r\n\r\nconstructor(x: T){}\r\n\r\n}\r\n\r\nexport = Foo;\r\n\r\n// @Filename: foo_1.ts\r\n\r\nimport foo = require(\"./foo_0\");\r\n\r\nvar x = new foo(tr","comments":1,"createdAt":1405627034000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":93,"state":"closed","title":"[Errors] Message quality degradation for overload resolution errors","updatedAt":1407267623000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\nwith(x) { var y = 1; } \r\n```\r\n\r\nExpected: (1,6): error TS2135: All symbols within a with block will be resolved to 'any'.\r\n\r\nActual: (1,6): Could not find symbol 'x'.\r\n\r\nIf x is defined prior to the with block then the new compiler iss","comments":1,"createdAt":1405627092000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":127,"state":"closed","title":"[Errors] with blocks","updatedAt":1407267610000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\nvar x = 1;\r\nbreak;\r\ncontinue;\r\n```\r\n \r\nExpected: \r\n'break' statement can only be used within an enclosing iteration or switch statement.\r\n'continue' statement can only be used within an enclosing iteration statement.\r\n\r\nActual: no erro","comments":1,"createdAt":1405626956000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":53,"state":"closed","title":"[Errors] break/continue outside iteration/switch statements","updatedAt":1407267603000},{"assignedTo":"JsonFreeman","body":"```TypeScript\r\nwith (window) {\r\n        var p = () => this;\r\n}\r\n```\r\nExpected: no error\r\nActual: \r\n```TypeScript\r\nwith (window) {\r\n        !!! Could not find symbol 'window'.\r\n        var p = () => this;\r\n    }\r\n```","comments":1,"createdAt":1405626950000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":47,"state":"closed","title":"[Errors] with blocks and global vars","updatedAt":1407267595000},{"assignedTo":"JsonFreeman","body":"```TS\r\nvar idx = 0;\r\nvar m = [1, 2, 3, 4, 5];\r\nvar n = [[]] || [];\r\nfor (n[idx++] in m);\r\n```\r\n\r\nWe give the error: \"Variable declarations of a 'for' statement must be of types 'string' or 'any'.\"\r\n\r\nBut `n[idx++]` is not a variable declaration!\r\n\r\nI","comments":0,"createdAt":1405726329000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.1","number":154,"state":"closed","title":"Wrong error for for..in statement","updatedAt":1407266906000},{"assignedTo":"JsonFreeman","body":"We allow all of the following:\r\n\r\n```TS\r\nvar x;\r\nexport export = x;\r\n```\r\n```TS\r\nvar x;\r\ndeclare export = x;\r\n```\r\n```TS\r\nvar x;\r\nexport declare export = x;\r\n```\r\n\r\nThese should all be errors. The 1.0 compiler gave the following errors for export and","comments":0,"createdAt":1405962852000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.1","number":164,"state":"closed","title":"No error for a modifier on an export assignment","updatedAt":1407266891000},{"assignedTo":"","body":"```TS\r\n\"use strict\";\r\nwith (x) { }\r\n```\r\n\r\nExpected error: 'with' statements are not allowed in strict mode.\r\nActual: no error","comments":1,"createdAt":1405982611000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":170,"state":"closed","title":"Parser should error on a 'with' statement in strict mode","updatedAt":1407266855000},{"assignedTo":"JsonFreeman","body":"The program `while (true) break` fails to parse. The error given is \"Identifier expected\". This should parse just fine because of ASI.","comments":0,"createdAt":1406068814000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"TypeScript 1.1","number":200,"state":"closed","title":"Automatic semicolon insertion doesn't work for break/continue at end of file","updatedAt":1407266847000},{"assignedTo":"","body":"Run this:\r\n\r\n```node bin/tc.js -removeComments --module commonjs -noImplicitAny   src\\harness\\external\\es5compat.ts src\\harness\\external\\json2.ts src\\compiler\\core.ts src\\compiler\\sys.ts src\\compiler\\types.ts src\\compiler\\scanner.ts src\\compiler\\pars","comments":1,"createdAt":1406336489000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":261,"state":"closed","title":"Crash trying to create sourcemaps for the compiler","updatedAt":1407266841000},{"assignedTo":"DanielRosenwasser","body":"When encountering code like\r\n\r\n    ().toString();\r\n\r\nWe make a strange assumption, which is that the `()` belongs to an arrow function like the following:\r\n\r\n    () => x\r\n\r\nThis is weird because it bubbles up to nothing better than the error\r\n\r\n    C","comments":2,"createdAt":1405546949000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 2.0","number":34,"state":"closed","title":"Look-ahead for arrow function expressions too permissive when encountering \"()\"","updatedAt":1407261932000},{"assignedTo":"DanielRosenwasser","body":"Code (should have an error):\r\n\r\n```TypeScript\r\nfunction fn(): string {\r\n}\r\n```","comments":3,"createdAt":1405626966000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":62,"state":"closed","title":"[Errors] No error for function with return type annotation that lacks a return statement","updatedAt":1407261932000},{"assignedTo":"DanielRosenwasser","body":"Add --watch support back to the new compiler implementation","comments":1,"createdAt":1406483356000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":268,"state":"closed","title":"Support --watch on node","updatedAt":1407261932000},{"assignedTo":"DanielRosenwasser","body":"Duplicate default label is a runtime error in JS, this should be a syntax error in TS\r\n\r\n```TypeScript\r\nswitch (moduleKind) {\r\n            default: return ModuleKind.None;\r\n            default: throw Error(\"unsuported ModuleKind value: \" + moduleKind","comments":2,"createdAt":1405728663000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":159,"state":"closed","title":"No error for duplicate default labels","updatedAt":1407261932000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\nclass A {\r\n    var\r\n    x = 10;\r\n}\r\n```\r\n\r\nExpected: No parse error; ASI implies that 'var' is parsed as a separate property.\r\n\r\nActual: Parser errors with \"Unexpected token. A constructor, method, accessor, or property was expected.\"","comments":1,"createdAt":1405627091000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":126,"state":"closed","title":"[Errors] Automatic Semicolon Insertion in Classes","updatedAt":1407261932000},{"assignedTo":"DanielRosenwasser","body":"Consider the following source file:\r\n\r\n```TypeScript\r\ncatch (x) {\r\n}\r\n```\r\n\r\nCurrently the compiler reports these errors:\r\n\r\n    (1,2): Declaration or statement expected.\r\n    (1,12): ';' expected.                    \r\n\r\nAnd if we merge 57d7cf54c696a","comments":0,"createdAt":1406148144000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"TypeScript 1.1","number":216,"state":"closed","title":"Better error message for 'catch' block missing 'try'.","updatedAt":1407261932000},{"assignedTo":"DanielRosenwasser","body":"```TypeScript\r\ndeclare class A {\r\n    get length() : number;\r\n}\r\n```\r\n\r\nGiving the error ```'{' expected.```\r\n\r\nAs @JsonFreeman said\r\n> This is a bad error because fixing it (by putting the braces) will just lead you to another error (no accessors in","comments":0,"createdAt":1405643441000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"Community","number":139,"state":"closed","title":"Better error messages for ambient accessors.","updatedAt":1407261932000},{"assignedTo":"vladima","body":"```TypeScript\r\nfunction foo(x);\r\nfunction foo(x, y);\r\nfunction bar() { }\r\n```\r\n\r\nExpected: Function overload name must be 'foo'. \r\n\r\nActual: Function implementation expected.\r\n\r\nCyrus says we used to give the same error as the new compiler but change","comments":1,"createdAt":1405627033000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.3","number":92,"state":"closed","title":"[Errors] function overload missing implementation","updatedAt":1407260022000},{"assignedTo":"vladima","body":"```TypeScript\r\nfunction foo();\r\n1+1;\r\nfunction foo():string { return \"a\" }\r\n```\r\n\r\nExpected: Function implementation expected.\r\n\r\nActual: no error","comments":0,"createdAt":1405627013000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":75,"state":"closed","title":"[Errors] function overload with statements before its implementation","updatedAt":1407260022000},{"assignedTo":"vladima","body":"```TypeScript\r\nclass d {\r\n    private foo(n: number): string;\r\n    private foo(ns: any) {\r\n        return ns.toString();\r\n    }\r\n    private foo(s: string): string;\r\n    //!!! Function implementation expected.\r\n}\r\n \r\nclass e {\r\n    private foo(ns: an","comments":1,"createdAt":1405627015000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":76,"state":"closed","title":"[Errors] function overloads and implementation declared out of order","updatedAt":1407260022000},{"assignedTo":"vladima","body":"```TypeScript\r\nimport Sammy = require(\"errorsOnImportedSymbol_0\");\r\nvar x = new Sammy.Sammy(); // Sammy.Sammy does not exist \r\nvar y = Sammy.Sammy(); // Sammy.Sammy does not exist\r\n```\r\n\r\nExpected: \r\n```TypeScript\r\nvar Sammy = require ( \"errorsOnImpo","comments":1,"createdAt":1405626899000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":45,"state":"closed","title":"[Emit] Import statement is not emited if alias is used in error position","updatedAt":1407260022000},{"assignedTo":"vladima","body":"```TypeScript\r\n'use strict'\r\n// static as constructor parameter name should give error if 'use strict'\r\nclass test {\r\n   constructor(static ) { }\r\n   //!!! Identifier expected.\r\n}\r\n```\r\n","comments":1,"createdAt":1405627009000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":71,"state":"closed","title":"[Errors] constructor parameter named 'static'","updatedAt":1407260022000},{"assignedTo":"vladima","body":"per ECMA-262 11.1.5 Object Initialiser If previous is not undefined then throw a SyntaxError exception if any of the following conditions are true \r\n\r\na. This production is contained in strict code and IsDataDescriptor(previous) is true and IsDataDes","comments":1,"createdAt":1405627095000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":130,"state":"closed","title":"Repeated member of object literal should be syntax error in strict mode","updatedAt":1407260022000},{"assignedTo":"vladima","body":"Code:\r\n```TypeScript\r\n//@sourceMap: true\r\ntry {\r\n// ...\r\n} finally {\r\n// N.B. No 'catch' block\r\n}\r\n```\r\nCall stack:\r\n```\r\n  TypeError: Cannot read property 'filename' of undefined\r\n```","comments":1,"createdAt":1405626749000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":39,"state":"closed","title":"Crash when emitting source maps for skipped nodes (e.g. 'catch' blocks)","updatedAt":1407260022000},{"assignedTo":"vladima","body":"\nAffected Branch: Affected Build: Affected Product Language: Steps to reproduce:Test does not contain @module directive at the top. Anders' compiler complains, but ours does not.\n\n \n\nThis may be just a harness difference, but not sure why it is diffe","comments":2,"createdAt":1405627093000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":128,"state":"closed","title":"[Error] Error that --module is needed to compile external modules","updatedAt":1407260022000},{"assignedTo":"vladima","body":"```TypeScript\r\n//==== tests/cases/compiler/collisionThisExpressionAndAliasInGlobal.ts (1 errors) ====\r\nmodule a {\r\n   export var b = 10;\r\n}\r\nvar f = () => this;\r\nimport _this = a; // Error\r\n//!!! Duplicate identifier '_this'. Compiler uses variable d","comments":0,"createdAt":1405626968000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":64,"state":"closed","title":"[Errors] _this in reserved positions","updatedAt":1407260022000},{"assignedTo":"vladima","body":"Problematic test: tests/cases/compiler/strictMode5.ts.\r\nNon-user code (initialization of default parameters, rest parameters, capturing of `this`) is emitted prior to `\"use strict\"`","comments":0,"createdAt":1405647591000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"TypeScript 1.1","number":143,"state":"closed","title":"\"use strict\" should always be emitted first in functions","updatedAt":1407260022000},{"assignedTo":"vladima","body":"With latest master build when you pass lamda that use this to base constructor, compiler initialize _this variable after base compiler call.\r\nFollowing code:\r\n```TypeScript\r\nclass A {\r\n        constructor(p:any) {\r\n        }\r\n    }\r\n\r\n    class B ext","comments":0,"createdAt":1406903049000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1099238?v=3","loggedByName":"MaceWindu","milestone":"","number":329,"state":"closed","title":"_this generated on wrong line for base constructors","updatedAt":1407260022000},{"assignedTo":"vladima","body":"\nKnown TODO, tracking relevant tests:\n\n \n\ntests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode1.ts through \n\ntests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode14.ts","comments":0,"createdAt":1405627094000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":129,"state":"closed","title":"[Errors] strict mode issues","updatedAt":1407260022000},{"assignedTo":"vladima","body":"```TypeScript\r\nvar x = { f() { return 1; } }\r\nvar y = { f: () => { return 1; } }\r\nvar z = { f: function() { return 1; } }\r\n```\r\n Expected: \r\n```TypeScript\r\nvar x = { f: function () {        return 1;    } };\r\nvar y = { f: function () {        return ","comments":2,"createdAt":1405626820000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":40,"state":"closed","title":"[Emit] Functions in object literals","updatedAt":1407260022000},{"assignedTo":"vladima","body":"Perf tests has an old format of the /// reference:\r\n```TypeScript\r\n///<reference path='..\\typings\\winjs.d.ts' static='true' />\r\n``` \r\nExpected:  \r\nextract the file from the path, and ignore the static attribute\r\nActual: error","comments":1,"createdAt":1405626953000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":50,"state":"closed","title":"[Perf tests] Unknown attribute in /// references not handeled correctelly","updatedAt":1407260022000},{"assignedTo":"vladima","body":"tests\\cases\\conformance\\types\\typeRelationships\\typeAndMemberIdentity\\objectTypesIdentityWithConstructSignatures2.js\r\n\r\nnew compiler generates invalid code:\r\n```TypeScript\r\nvar b = { new: function new(x) {\r\nreturn '';\r\n} };\r\n```","comments":1,"createdAt":1405626888000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":43,"state":"closed","title":"[Emit] New should not be used as a name of function expression when emitting accessors","updatedAt":1407260022000},{"assignedTo":"vladima","body":"in 64ab02ec432fc8ffe0db76b4a4520649853cea91\r\n\r\nreproduction code is here.\r\nthis code is valid in tsc Version 0.1.0.1.\r\n\r\n```\r\ninterface Array<T> {\r\n    new (arrayLength?: number): any[];\r\n    new <T>(arrayLength: number): T[];\r\n    new <T>(...items: ","comments":2,"createdAt":1406215488000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"TypeScript 1.1","number":233,"state":"closed","title":"Unexpected error occured, \"TypeError: Cannot read property 'instantiations' of undefined\"","updatedAt":1407260022000},{"assignedTo":"vladima","body":"See title","comments":0,"createdAt":1405626892000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":44,"state":"closed","title":"[Emit] \"use strict\" emitted after __extends instead of before","updatedAt":1407260022000},{"assignedTo":"vladima","body":"Repro consists of:\r\n \r\n### a.ts\r\n```TypeScript\r\n/// <reference path=\"typings\\c.d.ts\" />\r\n```\r\n \r\n### b.d.ts\r\n```TypeScript\r\ndeclare class Promise<T> {\r\n    x: T;\r\n}\r\n``` \r\n### Typings\\c.d.ts\r\n```TypeScript\r\n/// <reference path=\"b.d.ts\" />\r\n/// <refer","comments":1,"createdAt":1405459629000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"TypeScript 2.0","number":24,"state":"closed","title":"Compiler crash when file casing differs","updatedAt":1407260021000},{"assignedTo":"","body":"Fixed some trailing comma's\r\nedit: this doesn't cause any real issues as the trailing comma isn't (always??) emitted but I guess it is also coding style","comments":5,"createdAt":1407182007000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":354,"state":"closed","title":"Removed some trailing comma's causing cscript to fail","updatedAt":1407256402000},{"assignedTo":"","body":"for example in this script \r\n\r\n    class Greeter {\r\n        greeting: string;\r\n        type: number;\r\n        constructor(message: string) {\r\n            this.type = 64 /* magic number */ + 12;\r\n            this.greeting = message; /* hello */\r\n     ","comments":1,"createdAt":1407236943000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8362022?v=3","loggedByName":"panost","milestone":"","number":362,"state":"closed","title":"Comments inside expressions are not preserved","updatedAt":1407255902000},{"assignedTo":"ahejlsberg","body":"```ts\r\nmodule A {\r\n    class C {\r\n        constructor(public d: { foo: any }) { }\r\n    }\r\n}\r\n```\r\n\r\nGets stuck here in emitter.ts:\r\n```ts\r\n        function isUniqueLocalName(name: string, container: Node): boolean {\r\n            for (var node = conta","comments":3,"createdAt":1406852688000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/High%20Priority","name":"High Priority","color":"e11d21"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.1","number":325,"state":"closed","title":"Infinite loop in emitter on class with parameter property of object type in module","updatedAt":1407249639000},{"assignedTo":"ahejlsberg","body":"```\r\n// lib1.ts\r\nimport Lib2 = require('./lib2');\r\n\r\nexport class ClassA {\r\n\tpublic method(b: Lib2.ClassB, c:Lib2.Http.ClientRequest) {\r\n\t}\r\n}\r\n```\r\n\r\n```\r\n// lib2.ts\r\nexport class ClassB {\r\n}\r\n\r\nexport import Http = require('http');\r\n```\r\n```\r\n// Cl","comments":1,"createdAt":1407144467000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/10137?v=3","loggedByName":"ghost","milestone":"","number":348,"state":"closed","title":"importing module causes a runtime error","updatedAt":1407249508000},{"assignedTo":"","body":"Destroy semantic caches when the host has no more semantic operations queued.","comments":1,"createdAt":1407198264000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":359,"state":"closed","title":"Wire cleanupSemanticCache","updatedAt":1407204378000},{"assignedTo":"","body":"Add up-to-date checks for program object to avoid recompilation if not needed","comments":3,"createdAt":1407193804000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":358,"state":"closed","title":"Add uptodate checks for program ","updatedAt":1407196641000},{"assignedTo":"","body":"### `try`-less `catch` Blocks\r\nIf the parser now sees\r\n\r\n```TypeScript\r\ncatch (x) {\r\n}\r\n```\r\nor\r\n```TypeScript\r\ncatch (x) {\r\n}\r\nfinally {\r\n}\r\n```\r\nthe user will be issued the message\r\n\r\n> ~~A 'catch' clause must be preceded by a 'try' statement.~~\r\n\r","comments":1,"createdAt":1406338357000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":262,"state":"closed","title":"Improved errors for 'catch'/'finally' blocks missing 'try' statements","updatedAt":1407192980000},{"assignedTo":"","body":"There are some changes in behavior between old and new implementation, namely:\r\n* module definition used to start at the module name, now it starts the module keyword, which is uniform with other constructs\r\n* Goto def on function call used to take y","comments":2,"createdAt":1406862023000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":326,"state":"closed","title":"Wire getDefinitionAtPosition using the new compiler implementation","updatedAt":1407190318000},{"assignedTo":"","body":"Document used to be a superset of SoruceFile, consolidate these into one notion\r\nNote: ByteOrderMark is required as it affects the output, and all users of the createSourceFile should think about, where as version and isOpen are LS-specific notions a","comments":1,"createdAt":1407181517000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":353,"state":"closed","title":"Consolidate Document and SourceFile","updatedAt":1407190318000},{"assignedTo":"","body":"fixes #345","comments":2,"createdAt":1407188341000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":357,"state":"closed","title":"fixed check for call\\construct signatures in interfaces","updatedAt":1407190304000},{"assignedTo":"","body":"This was done because trailing commas in object literals are not accepted by ES3.\r\n\r\nFixes #271.","comments":2,"createdAt":1406572736000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":273,"state":"closed","title":"No longer emit trailing comma on object literals for ES3.","updatedAt":1407188242000},{"assignedTo":"","body":"Removing check that would guard against recording contextual type. The `NodeFlags.ContextChecked` flag already protects against assigning more than once.","comments":1,"createdAt":1407182407000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":355,"state":"closed","title":"Consistently record contextual types in function expressions.","updatedAt":1407188203000},{"assignedTo":"","body":"Added some missing semicolons.\r\nFeel free to close this PR if this isn't something you accept PR's for.","comments":1,"createdAt":1407184441000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":356,"state":"closed","title":"Code style: Missing semicolons","updatedAt":1407184711000},{"assignedTo":"","body":"","comments":0,"createdAt":1407178777000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":350,"state":"closed","title":"Fix duplicate getTypeOfExpression function.","updatedAt":1407178798000},{"assignedTo":"","body":"This pull request switches our contextual typing logic to use a âpull modelâ such that you can grab any expression node or symbol and ask for its type without having to first ensure types have been âpushedâ into the right places. This includes contex","comments":1,"createdAt":1406906482000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":330,"state":"closed","title":"Pull model for contextual types","updatedAt":1407178283000},{"assignedTo":"","body":"(From [StackOverflow](http://stackoverflow.com/questions/25054457/imported-classes-does-not-appear-on-d-ts-file))\r\n\r\nGenerated d.ts file from this code does not include any information about global class Bar.\r\n\r\n```typescript\r\nmodule Foo {\r\n    expor","comments":2,"createdAt":1407070594000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/3396686?v=3","loggedByName":"SaschaNaz","milestone":"","number":346,"state":"closed","title":"Imported types does not appear on d.ts file","updatedAt":1407177599000},{"assignedTo":"","body":"https://typescript.codeplex.com/workitem/1751\r\n\r\nSometimes VS plugin stops working correctly but no error is reported.\r\n\r\nSome VS extensions create output categories or whatever they are called - you can select them in \"Output\" window, in dropdown af","comments":4,"createdAt":1406972486000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/96032?v=3","loggedByName":"mwisnicki","milestone":"","number":342,"state":"closed","title":"Visual Studio error reporting","updatedAt":1407177227000},{"assignedTo":"","body":"","comments":1,"createdAt":1407176483000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":349,"state":"closed","title":"Removing trailing comma that breaks cscript.exe.","updatedAt":1407177184000},{"assignedTo":"","body":"http://typescript.codeplex.com/workitem/488\r\n\r\n```typescript\r\n\"use strict\";\r\nclass SomeClass {\r\n    public get someProperty(): string {\r\n        return \"some value\";\r\n    }\r\n}\r\nvar someInstance = new SomeClass();\r\nsomeInstance.someProperty = \"another","comments":1,"createdAt":1406971039000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/96032?v=3","loggedByName":"mwisnicki","milestone":"","number":339,"state":"closed","title":"Compiler allows assignments to read-only properties","updatedAt":1407176301000},{"assignedTo":"","body":"Containers are added to container list only if they aren't already on the list.\r\nFixes #325.","comments":3,"createdAt":1406921880000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":333,"state":"closed","title":"Properly build container list in binder.","updatedAt":1407104590000},{"assignedTo":"","body":"Fixes #268.","comments":3,"createdAt":1406842413000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":324,"state":"closed","title":"Support the '--watch' compiler flag.","updatedAt":1407027122000},{"assignedTo":"","body":"`exportAssignSymbol` was the property on the symbol itself but it was assigned in the checker - this might lead to a unexpected consequences when `unknownSymbol` from one typecheck session leaked to another one","comments":2,"createdAt":1406923947000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":335,"state":"closed","title":"move exportAssignSymbol to symbolLinks","updatedAt":1407013856000},{"assignedTo":"","body":"Very similar to the following issue, which I didn't find in Github: http://typescript.codeplex.com/workitem/305\r\n\r\nAs a NodeJS / TypeScript developer who:\r\n* uses one class per file and compiles to separate files (i.e. uses external modules)\r\n* uses ","comments":5,"createdAt":1406920552000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1500329?v=3","loggedByName":"karbroski","milestone":"","number":332,"state":"open","title":"Request for a way to import multiple external modules into same namespace ","updatedAt":1406947159000},{"assignedTo":"mhegazy","body":"in master/HEAD (64ab02ec432fc8ffe0db76b4a4520649853cea91)\r\nhttps://github.com/Microsoft/TypeScript/blob/214df64e287804577afa1fea0184c18c40f7d1ca/src/lib/dom.generated.d.ts#L10204\r\n\r\n```\r\ndeclare var FormData: {\r\n    prototype: FormData;\r\n    new(): F","comments":4,"createdAt":1406168131000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"TypeScript 1.1","number":225,"state":"closed","title":"Incompatible FormData constructor between W3C specs","updatedAt":1406943742000},{"assignedTo":"DanielRosenwasser","body":"Object literal with trailing commas, e.g.:\r\n```TypeScript\r\nvar x = {\r\n\ta: 1,\r\n\tb:2,\r\n}\r\n```\r\nemit the comma in the generated js:\r\n```JavaScript\r\nvar x = {\r\n\ta: 1,\r\n\tb:2,\r\n}\r\n```\r\nThis is invalid ES3, and will break in CScript for instance:\r\n```\r\ncscr","comments":3,"createdAt":1406487637000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":271,"state":"closed","title":"Omit trailing comma in object literal properties ","updatedAt":1406939069000},{"assignedTo":"","body":"The idea is that since the ECMAScript 3 spec does not permit trailing commas in an object literal, we should not permit the construct unless we have a revised grammar for TypeScript that says otherwise.\r\n\r\nThis is a breaking change. I would personall","comments":8,"createdAt":1406588925000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":284,"state":"closed","title":"Disallow trailing commas in object literals entirely when targeting ES3","updatedAt":1406939069000},{"assignedTo":"ahejlsberg","body":"```ts\r\ndeclare module '..\\foo' {\r\n var x;\r\n} \r\n```\r\n\r\nThis should be an error but isn't. It was an error with the old compiler.","comments":2,"createdAt":1406839054000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"TypeScript 1.3","number":323,"state":"closed","title":"Relative named ambient external modules should be an error","updatedAt":1406932881000},{"assignedTo":"","body":"Improve fourslash perf from ~21 seconds to ~6 seconds by being smarter about what we recompile","comments":3,"createdAt":1406926456000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":336,"state":"closed","title":"Fourslash perf improvements","updatedAt":1406929057000},{"assignedTo":"","body":"","comments":2,"createdAt":1406923560000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":334,"state":"closed","title":"Remove debugger statements from fourslash tests","updatedAt":1406928796000},{"assignedTo":"","body":"Hi,\r\n\r\nI added a strongly typed jQuery.each method overload in order to perform type check when compiling my ts files:\r\n\r\n    each<T>(collection: { [key: string]: T }, callback: (indexInArray: string, valueOfElement: T) => any): any;   // Added by me","comments":1,"createdAt":1406900837000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1398682?v=3","loggedByName":"chebum","milestone":"","number":327,"state":"closed","title":"TSC incorrectly selects overloaded method signature","updatedAt":1406917999000},{"assignedTo":"","body":"fixes #329 ","comments":1,"createdAt":1406917023000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":331,"state":"closed","title":"emit this capturing as a first action in the constructor","updatedAt":1406917989000},{"assignedTo":"","body":"The `ArrayBuffer` docs on [MDN](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer) and [MSDN](http://msdn.microsoft.com/en-us/library/ie/dn641192(v=vs.94).aspx) show the existence of `ArrayBuffer.slice()`. This is not currently represented","comments":4,"createdAt":1406733369000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Accepting%20PRs","name":"Accepting PRs","color":"009800"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/309607?v=3","loggedByName":"milkisevil","milestone":"Community","number":310,"state":"closed","title":"ArrayBuffer is missing slice() method in lib.d.ts","updatedAt":1406916117000},{"assignedTo":"","body":"Covered by issue #310.\r\n\r\nNo tests updated â assuming that there are no tests checking the built output of `lib.d.ts`?","comments":4,"createdAt":1406902292000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/309607?v=3","loggedByName":"milkisevil","milestone":"","number":328,"state":"closed","title":"Added ArrayBuffer.slice() to extensions.d.ts","updatedAt":1406916085000},{"assignedTo":"jonathandturner","body":"```TypeScript\r\nfunction testcase() {\r\n    \r\n            var obj = {};\r\n            var accessed = false;\r\n    \r\n            Object.defineProperties(obj, {\r\n//!!! Supplied parameters do not match any signature of call target:\r\n//!!! Index signatures o","comments":1,"createdAt":1405627096000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":132,"state":"closed","title":"[Errors] overload resolution with PropertyDescriptor","updatedAt":1406915791000},{"assignedTo":"jonathandturner","body":"Glad you moved to GitHub.\r\n\r\nOn typescriptlang.org, 'interact' > 'file bug' link is still pointing to codeplex.\r\nhttp://typescript.codeplex.com/WorkItem/Create\r\n\r\nIt should point to github now:\r\nhttps://github.com/Microsoft/TypeScript/issues/new\r\n\r\nA","comments":4,"createdAt":1405992961000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/767147?v=3","loggedByName":"omidkrad","milestone":"TypeScript 1.1","number":179,"state":"closed","title":"Site link to 'file bug' needs to be updated","updatedAt":1406913914000},{"assignedTo":"jonathandturner","body":"The typescriptlang.org mention Visual Studio 2013 Update 2 as RC. It needs to be updated","comments":1,"createdAt":1406044812000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1336227?v=3","loggedByName":"fujiy","milestone":"TypeScript 1.1","number":194,"state":"closed","title":"Update the references to VS 2013 U2 RC in typescriptlang.org","updatedAt":1406913886000},{"assignedTo":"","body":"This is the first change to enable the language service on the new compiler. We are using the old syntactic model to drive syntactic features such as formatting, smart indent, and nav bar, and the new compiler to drive semantic operations like type i","comments":2,"createdAt":1406663522000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":303,"state":"closed","title":"Enable basic Language Service on the new compiler","updatedAt":1406859007000},{"assignedTo":"","body":"This is a refinement of #306, which I believe shows a missed opportunity for eliding import declarations from generated code, as well as a problematic consequence of the current behaviour.\r\n\r\nSuppose we have the file `code.ts` containing:\r\n```typescr","comments":6,"createdAt":1406788249000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1252361?v=3","loggedByName":"yortus","milestone":"","number":319,"state":"closed","title":"Non-exported local enum aliases can be elided if never referenced","updatedAt":1406858082000},{"assignedTo":"DanielRosenwasser","body":"The following regex parsing breaks in HEAD:\r\n\r\n```ts\r\nvar foo = \"a/\".replace(/.[/]/, \"\");\r\nconsole.log(foo); // \"\"\r\n```\r\n\r\nError: \r\n```ts\r\ntest.ts(1,28): ',' expected.\r\ntest.ts(1,29): Expression expected.\r\ntest.ts(1,30): Expression expected.\r\n```\r\n\r\n","comments":4,"createdAt":1406784620000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":318,"state":"closed","title":"Regex parsing error on `[/`","updatedAt":1406843045000},{"assignedTo":"","body":"Basically we weren't recognizing that a slash can occur in a character class, so we were bailing out too early on code like `/[/]/`.\r\n\r\nFixes issue #318.","comments":3,"createdAt":1406792293000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":320,"state":"closed","title":"Fixed error when parsing slashes in RegExp literals.","updatedAt":1406842438000},{"assignedTo":"","body":"Ensure that overloads are consecutive when checking functions.\r\nthis fixes #75 and #92 ","comments":1,"createdAt":1406763088000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":317,"state":"closed","title":"Disallow statements between overloads","updatedAt":1406831873000},{"assignedTo":"","body":"if we have the following in `types.d.ts`:\r\n```typescript\r\ndeclare module Deeply.Nested.Module {\r\n\r\n    export enum Color {\r\n        Red = 1,\r\n        Green = 2,\r\n        Blue = 3\r\n    }\r\n\r\n    export interface ColorFunction {\r\n        (): Color;\r\n   ","comments":3,"createdAt":1406705615000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1252361?v=3","loggedByName":"yortus","milestone":"","number":306,"state":"closed","title":"Suboptimal codegen when using 'import' to create aliases for enums","updatedAt":1406788249000},{"assignedTo":"","body":"It would be nice to not do ```///<reference path=\"to/declaration.d.ts\"/> ``` on source files to be able to compile with dependencies. It becomes problematic when you move files around and you have to go through each file that has those reference path","comments":5,"createdAt":1406760939000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1702540?v=3","loggedByName":"staticfunction","milestone":"","number":316,"state":"closed","title":"No explicit reference paths on source file","updatedAt":1406787933000},{"assignedTo":"","body":"in ef5ae6e969a6b42e1326d007f2ccc3c0e7aa4964\r\n\r\n```\r\ndeclare function test(sample: ISample): any;\r\ndeclare function test(sample: (str: string)=>number): any;\r\ninterface ISample {\r\n\tfoo?: string;\r\n}\r\n\r\ntest(str => str.length);\r\n```\r\n\r\n```\r\n$ tsc -v\r\nVe","comments":2,"createdAt":1406691937000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"","number":305,"state":"closed","title":"Incompatible behavior between tsc 1.0.1. --noImplicitAny","updatedAt":1406770795000},{"assignedTo":"","body":"","comments":2,"createdAt":1406667707000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":304,"state":"closed","title":"Print version number for --version.","updatedAt":1406744651000},{"assignedTo":"DanielRosenwasser","body":"``` \r\ntc.js --version\r\n``` \r\nshould print the current compiler version \"1.1\"\r\n","comments":2,"createdAt":1406483312000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":267,"state":"closed","title":"Support --version","updatedAt":1406744651000},{"assignedTo":"","body":"ES 6 allows class expressions inside functions ([source 1](https://github.com/Microsoft/TypeScript/issues/206#issuecomment-50517856), [source 2 (first comment)](http://typescript.codeplex.com/workitem/136)).\r\n\r\n**Suggestion:** TypeScript should allow","comments":1,"createdAt":1406716141000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1827709?v=3","loggedByName":"ComFreek","milestone":"","number":307,"state":"closed","title":"Allow classes inside functions","updatedAt":1406733342000},{"assignedTo":"","body":"#### tl;dr\r\nI want to be able to declare that an object implements an interface, but still have it act like an any when referencing a property not defined by the interface\r\n\r\n#### Use case:\r\nin angular controllers get injected with a scope object tha","comments":2,"createdAt":1406105787000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4271135?v=3","loggedByName":"ofirgeller","milestone":"","number":211,"state":"closed","title":"Suggestion: Graduall typing using soft Interfaces","updatedAt":1406683048000},{"assignedTo":"","body":"Hi there,\r\n\r\n```\r\nâ foo/\r\nâ  â index.ts\r\nâ bar/\r\n   â index.ts\r\n```\r\n\r\nAssume you have the project structure above, and that you'd like to require the file `foo/index.ts`, from file `bar/index.ts`.\r\n\r\nWith the current version of TypeScript you must u","comments":1,"createdAt":1406078966000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/418473?v=3","loggedByName":"coreh","milestone":"","number":207,"state":"closed","title":"Allow importing directories with index.ts files as relative external modules.","updatedAt":1406678492000},{"assignedTo":"","body":"Sometimes it happens so that some code logically belongs in one module, but there is just too much of it to put in one file. For example, here is my use case:\r\n\r\n```\r\n// base.ts\r\nexport interface SomeCoreType { ... }\r\n\r\nexport interface MyStandardAja","comments":2,"createdAt":1406587195000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4219105?v=3","loggedByName":"fsoikin","milestone":"","number":276,"state":"closed","title":"\"reexport\" a module, aka Ability to partition an ambient module across several files","updatedAt":1406678153000},{"assignedTo":"","body":"When merging your files into one file, the --module amd flag makes no difference.\r\nThere needs to be a way that if all the files listed define the same root namespace, then it should compile into an amd module.  Am I missing something here?\r\n\r\nI did ","comments":2,"createdAt":1406606860000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/5899455?v=3","loggedByName":"electricessence","milestone":"","number":289,"state":"closed","title":"No AMD with multiple files: tsc --out onefile.js --module amd \"file1.ts\" \"file2.ts\"","updatedAt":1406675166000},{"assignedTo":"","body":"If a property has a getter but no setter (or vice versa) than perhaps the attempt to set or get should be flagged as an error: \r\n\r\n```ts\r\nclass Fields{\r\n    get ReadOnly(){\r\n        return 10;\r\n    }\r\n    \r\n    public written:number;\r\n    set WriteOn","comments":1,"createdAt":1406625375000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/874898?v=3","loggedByName":"basarat","milestone":"","number":295,"state":"closed","title":"Improper usage of properties with missing set / get should be an error","updatedAt":1406660861000},{"assignedTo":"","body":"In the following code, type inference fails to detect type ````item```` as ````number````:\r\n\r\n````\r\ninterface ITest<T> {\r\n}\r\n\r\nclass Test<T> implements ITest<T> {\r\n}\r\n\r\nfunction TestMethod<T>(value: ITest<T>, action: (item: T) => void): void {\r\n}\r\n\r\n","comments":1,"createdAt":1406659844000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1743048?v=3","loggedByName":"KamyarNazeri","milestone":"","number":302,"state":"closed","title":"Type inference fails with a generic interface with no use of the generic type","updatedAt":1406660513000},{"assignedTo":"","body":"Fixes #139.","comments":3,"createdAt":1406319140000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":256,"state":"closed","title":"Gracefully handle accessor declarations in ambient classes.","updatedAt":1406659592000},{"assignedTo":"","body":"There's a grammar misinterpretation when creating an object literal in a lambda expression:\r\n````\r\n[1, 2, 3, 4].map(t => { value: t });\r\n````\r\ntranslates to:\r\n````\r\n[1, 2, 3, 4].map(function (t) {\r\n    value:\r\n    t;\r\n});\r\n````\r\n\r\nYou must add extra ","comments":2,"createdAt":1406655711000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1743048?v=3","loggedByName":"KamyarNazeri","milestone":"","number":300,"state":"closed","title":"Suggestion: 'new' operator to create anonymous types","updatedAt":1406657617000},{"assignedTo":"","body":"The `tsc -d filename.ts` is great: It lets me create a declaration file that I can use for quicker complication of other modules (I can use reference comments to refer to it). I can comment it and share it with colleagues as a quick reference for wha","comments":6,"createdAt":1406075645000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/415450?v=3","loggedByName":"iislucas","milestone":"","number":205,"state":"closed","title":"Support checking typescript code implements a declaration file","updatedAt":1406654605000},{"assignedTo":"","body":"An odd issue. I was porting John Papa's Hot Towel Angular SPA template from JavaScript to TypeScript. \r\n\r\nWhilst working on directives I hit an issue here:\r\n\r\n```\r\ninterface ccSpinnerWindowService extends ng.IWindowService {\r\n    Spinner: Spinner;\r\n}","comments":2,"createdAt":1406609924000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1010525?v=3","loggedByName":"johnnyreilly","milestone":"","number":291,"state":"closed","title":"'new' expression, which lacks a constructor signature, implicitly has an 'any' type.","updatedAt":1406623789000},{"assignedTo":"","body":"Typescript is too lenient when accepting sub-classes in inherited types. For example:\r\n\r\n``` TypeScript\r\ninterface Base {\r\n    baseField: string;\r\n}\r\ninterface Child extends Base {\r\n    childField: number;\r\n}\r\n\r\nvar test = function (callbackfn: (valu","comments":3,"createdAt":1406160674000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1834647?v=3","loggedByName":"arknave","milestone":"","number":222,"state":"closed","title":"Inherited types in callback functions","updatedAt":1406609431000},{"assignedTo":"","body":"TypeScript compiler allows to define a function marked **explicitly** with a return type, with code branches which lead to an inconclusive return value!\r\n\r\nI know It is valid in JavaScript function not to return a value on all code path, however in T","comments":4,"createdAt":1406189381000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1743048?v=3","loggedByName":"KamyarNazeri","milestone":"","number":228,"state":"open","title":"Function return value constraints","updatedAt":1406597018000},{"assignedTo":"","body":"The old compiler was permissive with both of the following code snippets:\r\n\r\n```TypeScript\r\nfunction foo(): number {\r\n    return;\r\n}\r\n```\r\n\r\n```TypeScript\r\nclass C {\r\n    public foo() {\r\n        return;\r\n    }\r\n}\r\n```\r\n\r\nas per the 1.0 spec (6.3):\r\n\r","comments":1,"createdAt":1405876969000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":162,"state":"closed","title":"Non-void functions can omit return expressions","updatedAt":1406597018000},{"assignedTo":"","body":"Say I have an awesomely cool library:\r\n```\r\nexport function createMyCoolObject( someArg ): MyCoolObject;\r\n\r\nexport interface MyCoolObject {\r\n    func1(): void;\r\n    func2( x: number ): string;\r\n}\r\n```\r\n\r\nAnd it's so cool that I want people to be able","comments":3,"createdAt":1406588002000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4219105?v=3","loggedByName":"fsoikin","milestone":"","number":280,"state":"closed","title":"Ability to extend interfaces declared in ambient modules","updatedAt":1406596747000},{"assignedTo":"","body":"The [ES6 definition of the \"class\" construct](http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes) has the concept of \"class expression\" - i.e. class definitions may be used as values, such as:\r\n```\r\nvar obj = new (class { x = 5","comments":2,"createdAt":1406589239000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4219105?v=3","loggedByName":"fsoikin","milestone":"","number":286,"state":"closed","title":"Suggestion: support ClassExpression (as per ES6)","updatedAt":1406594854000},{"assignedTo":"","body":"When I do `someElement.cloneNode()`, I want the returned element to be the same type as `someElement`, but right now it's returning type `Node`.","comments":4,"createdAt":1406588673000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7035?v=3","loggedByName":"dlee","milestone":"","number":283,"state":"closed","title":"cloneNode should return sub type, not Node","updatedAt":1406594192000},{"assignedTo":"","body":"#### Overview\r\n\r\nInterfaces defined in `.d.ts` files (even if they are not part of the Visual Studio project) are nonetheless included in the IDE symbol space; i.e. they appear in the Navigate To search results.\r\n\r\n#### Repro\r\n\r\nAdd the NuGet package","comments":1,"createdAt":1406256050000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1299073?v=3","loggedByName":"breyed","milestone":"","number":243,"state":"open","title":"External interfaces included in IDE symbol space","updatedAt":1406590375000},{"assignedTo":"","body":"Now that we have heuristic algorithm for infinitely expanding generics, we can go back to comparing signatures using contextual signature instantiation. For example:\r\n```TS\r\nvar f: (s: string) => number;\r\nvar g: <T>(s: T) => T;\r\nf = g;\r\ng = f;\r\n```\r\n","comments":2,"createdAt":1405642185000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":138,"state":"open","title":"Use contextual signature instantiation to compare signatures","updatedAt":1406585978000},{"assignedTo":"","body":"It would be better if you can add comment intellisense for TypeScript, let's say if I've defined a function below (Just a sample, please ignore the error syntaxes if I have)\r\n\r\nfunction SayHello(word:string):void\r\n{\r\n   //Contents ignored\r\n}\r\nSo when","comments":0,"createdAt":1406079358000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6959154?v=3","loggedByName":"MaleDong","milestone":"","number":208,"state":"open","title":"Intellisense Comment Templates","updatedAt":1406585874000},{"assignedTo":"","body":"Support detecting \"use asm\" directives and change type inference and operator rules accordingly\r\n\r\n```TypeScript\r\n\"use asm\";\r\nvar x = 0; // x: int\r\nvar y = 0.0: // y: float\r\nvar z = (x + y) | 0; // z: int\r\nz = 0.4; // Error, cannot convert float to i","comments":1,"createdAt":1405445637000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6685088?v=3","loggedByName":"RyanCavanaugh","milestone":"","number":18,"state":"closed","title":"Suggestion: typechecking for asm.js","updatedAt":1406585305000},{"assignedTo":"","body":"\r\nHi,\r\n\r\nA small but useful feature provided by C# (possibly other languages as well) in Visual Studio is the ability to remember the last selected item and to highlight it in the list of available items.\r\n\r\n![untitled](https://cloud.githubuserconten","comments":1,"createdAt":1406023278000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Visual%20Studio","name":"Visual Studio","color":"007ACC"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1106823?v=3","loggedByName":"NoelAbrahams","milestone":"","number":190,"state":"open","title":"Intellisense should remember last selected item","updatedAt":1406584305000},{"assignedTo":"","body":"Proposal: create a type for objects that can be serialized and de-serialized to produce the same object. This is especially useful for objects that are sent or serialized when writing networking/message passing code. These often form a slightly speci","comments":3,"createdAt":1406347997000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Too%20Complex","name":"Too Complex","color":"556677"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/415450?v=3","loggedByName":"iislucas","milestone":"","number":263,"state":"closed","title":"Support a type for objects that are pure and non-functional","updatedAt":1406579490000},{"assignedTo":"","body":"And not for all the imported/referenced files. This would make it easier to only recompile certain parts of a TypeScript project in a `Makefile`.\r\n\r\nThis property could maybe be called `--noCompileResolved`, `--noRecurse` or `--compileSourceOnly`.","comments":1,"createdAt":1406151855000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Out%20of%20Scope","name":"Out of Scope","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/418473?v=3","loggedByName":"coreh","milestone":"","number":219,"state":"closed","title":"Add a compiler flag to only generate output for source files.","updatedAt":1406578605000},{"assignedTo":"","body":"Hi,\r\n\r\nThis is a suggestion.\r\n\r\nAt present when adding an indexer to an interface the return value of the indexer generally has to be ```any``` (or at least a type which every property of the interface can align with).  Failure to do this results in ","comments":2,"createdAt":1406554259000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Declined","name":"Declined","color":"556677"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1010525?v=3","loggedByName":"johnnyreilly","milestone":"","number":272,"state":"closed","title":"Allow indexers to specify a different return type","updatedAt":1406577631000},{"assignedTo":"","body":"This is another version of grouping exported and locals declarations (originally proposed as #37).\r\nImplementation notes: \r\n- exported and local declarations can co-exist within a same symbol (similar to #37)\r\n- exported node has a link to a local sy","comments":2,"createdAt":1406057525000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":197,"state":"closed","title":"Alternative proposal for grouping exported and local declarations","updatedAt":1406573230000},{"assignedTo":"","body":"Export and local symbol are used to mutually exclude each other so having exported and non exported declarations with the same name that can be merged lead to 'Duplicate identifier' and as a consequence these declarations were attached to a different","comments":2,"createdAt":1405608505000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":37,"state":"closed","title":"exported declarations now don't take the exclusive slot","updatedAt":1406571991000},{"assignedTo":"","body":"","comments":2,"createdAt":1406221904000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/6523503?v=3","loggedByName":"saru95","milestone":"","number":234,"state":"closed","title":"Path in jakefile mac issue","updatedAt":1406566035000},{"assignedTo":"","body":"Fixes #73.","comments":2,"createdAt":1406387743000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":264,"state":"closed","title":"Error when importing shadowed internal module.","updatedAt":1406565294000},{"assignedTo":"","body":"I was programatically submiting a form when I found this issue. Typescript doesn't recognized dynamic identifiers in \"document\". Then:\r\n\r\n`document.form1.submit()` throws an exception saying that \"form1\" doesn't exist in document.\r\n\r\nIf we do:\r\n\r\n`va","comments":2,"createdAt":1406474386000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7553006?v=3","loggedByName":"haskellcamargo","milestone":"","number":266,"state":"closed","title":"Can't recognize methods of a form name.","updatedAt":1406565226000},{"assignedTo":"","body":"`ts.executeCommandLine()` returns an appropriate exit status in compiler/tc.ts but it is not used as the exit code for the process.\r\n\r\nThis means that build tools such as Make are unaware when compilation fails.","comments":1,"createdAt":1406285074000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2458?v=3","loggedByName":"robertknight","milestone":"","number":245,"state":"closed","title":"tsc does not set process exit status correctly on failure","updatedAt":1406564214000},{"assignedTo":"","body":"Simple typo fix;-)","comments":1,"createdAt":1406315698000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/11375?v=3","loggedByName":"huerlisi","milestone":"","number":253,"state":"closed","title":"Typo fixed in CONTRIBUTION.","updatedAt":1406482682000},{"assignedTo":"","body":"Fixes issue #34.\r\n\r\nSpecifically:\r\n* We no longer automatically assume \"()\" is a function expression. It must be followed by an arrow, colon, or curly brace.\r\n* If an arrow is missing following a signature, but a curly brace is present, we assume the","comments":0,"createdAt":1406073796000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":203,"state":"closed","title":"Improved lookahead for arrow functions.","updatedAt":1406413298000},{"assignedTo":"","body":"Handle the following:\r\n\r\n    a => \r\n        var v = 0;\r\n    }\r\n\r\nas\r\n\r\n    a => {\r\n        var v = 0;\r\n    }\r\n\r\nwhile still reporting an error for a missing `{`,","comments":1,"createdAt":1405470454000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":28,"state":"closed","title":"Better error recovery for when an arrow function is missing a curly brace.","updatedAt":1406412990000},{"assignedTo":"","body":"","comments":1,"createdAt":1405460001000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":25,"state":"closed","title":"Better error recovery when errant semicolon found in a class.","updatedAt":1406365211000},{"assignedTo":"DanielRosenwasser","body":"Consider the following source file:\r\n\r\n    /*\r\n\r\nWhile it may be difficult to spot, this is an unclosed comment. We should report an error on this.\r\n","comments":0,"createdAt":1405451574000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":22,"state":"closed","title":"No errors reported for unclosed multiline comments.","updatedAt":1406338832000},{"assignedTo":"","body":"Existing code uses `globalArrayType` to make array types. However accessing this value directly might fail if at this moment `globalArrayType` is not yet initialized - this might happen if user code contains augmentation for `Array<T>` that includes ","comments":2,"createdAt":1406315570000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":252,"state":"closed","title":"Use symbol links to access global array type","updatedAt":1406333534000},{"assignedTo":"","body":"We had two almost identical functions in the parser: canParseSemicolon and isSemicolon. The only difference was that the latter forgot to check for EOF, so I removed it and switched all calls to use the former.\r\n\r\nThis fixes #200.","comments":2,"createdAt":1406330436000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":259,"state":"closed","title":"Remove isSemicolon","updatedAt":1406333348000},{"assignedTo":"","body":"Very simple. We did not check for modifiers on an export assignment. I've added a specific error for this. For reference, the old compiler failed to parse in this case.\r\n\r\nExample:\r\n```TS\r\nvar x;\r\nexport export = x;\r\n```\r\n\r\nFixes #164 ","comments":1,"createdAt":1406331684000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":260,"state":"closed","title":"Disallow modifiers on export assignments","updatedAt":1406333271000},{"assignedTo":"","body":"We used to have errors that said:\r\n\"Variable declarations of a 'for' statement...\"\r\n\r\nBut sometimes the left hand side of a for..in statement is an expression, not a variable statement. I've improved the error to say:\r\n\"Left hand side of a 'for' stat","comments":2,"createdAt":1406317298000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":255,"state":"closed","title":"Improve the error in a 'for in' statement","updatedAt":1406326669000},{"assignedTo":"","body":"Fix for 955714: Fundule declaration ordering","comments":2,"createdAt":1405546387000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":33,"state":"closed","title":"Fix for Clodule declaration ordering","updatedAt":1406323575000},{"assignedTo":"","body":"Untyped function calls already work the way we want to (per bug #236). We just have to update the spec. I've updated the comment in the code.","comments":1,"createdAt":1406320828000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":257,"state":"closed","title":"Fix up comment about in checkCallExpression","updatedAt":1406322182000},{"assignedTo":"","body":"Fixes #93.\r\nThis is an evolution of #220.","comments":5,"createdAt":1406246472000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":242,"state":"closed","title":"Better error messages in function calls.","updatedAt":1406321828000},{"assignedTo":"","body":"I wish I could turn duck-typing off sometimes because it leads to bugs that very hard to detect.\r\n\r\nFor example:\r\nSuppose I have 2 interfaces with the same surface but completely unrelated sematics:\r\n\r\n```\r\ninterface Chicken {\r\n   id: number;\r\n   nam","comments":2,"createdAt":1406314449000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/937933?v=3","loggedByName":"aleksey-bykov","milestone":"","number":251,"state":"closed","title":"Make duck-typing optional.","updatedAt":1406319909000},{"assignedTo":"","body":"Use the result of ts.executeCommandLine() as the node process' exit\r\nstatus.\r\n\r\nCan you point me at the right place to add a test for this?\r\n\r\nFixes #245","comments":2,"createdAt":1406285738000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/2458?v=3","loggedByName":"robertknight","milestone":"","number":246,"state":"closed","title":"Set the exit status for the process correctly when compilation fails","updatedAt":1406319908000},{"assignedTo":"","body":"Supercedes #246.\r\nIncludes provisions for buggy behavior of WScript.Quit.","comments":2,"createdAt":1406311336000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":249,"state":"closed","title":"Properly set exit code for process.","updatedAt":1406317443000},{"assignedTo":"","body":"https://github.com/Microsoft/TypeScript/pull/180 doesn't seem to work on 10.6.8.","comments":2,"createdAt":1406169661000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"","number":226,"state":"closed","title":"fix path in Jakefile (for mac)","updatedAt":1406309667000},{"assignedTo":"","body":"","comments":2,"createdAt":1406202879000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1029366?v=3","loggedByName":"maxdeepfield","milestone":"","number":230,"state":"closed","title":"Missing semicolon fix","updatedAt":1406309567000},{"assignedTo":"","body":"Fixes #93.","comments":3,"createdAt":1406159283000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":220,"state":"closed","title":"Elaboration in assignability errors for call expressions.","updatedAt":1406307251000},{"assignedTo":"","body":"This pull request covers a couple of things:\r\n1. Make sure break, continue, return statements are nested in the right control context\r\n2. Keeping track of labels and making sure jump targets are correct.\r\n3. Checking for duplicate labels\r\n\r\nI've adde","comments":1,"createdAt":1406143100000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":215,"state":"closed","title":"Parser analysis and errors for labelled statements, break, continue, return","updatedAt":1406249842000},{"assignedTo":"","body":"","comments":1,"createdAt":1406211027000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7304741?v=3","loggedByName":"kauegimenes","milestone":"","number":231,"state":"closed","title":"Update runner.ts","updatedAt":1406245601000},{"assignedTo":"","body":"fixes #129 and #130 ","comments":3,"createdAt":1406151205000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":217,"state":"closed","title":"Strict mode support","updatedAt":1406233056000},{"assignedTo":"","body":"All you need is to add the following to `Microsoft.TypeScript.targets`:\r\n\r\n```xml\r\n  <!-- Include output file to be copied to the output directory -->  \r\n  <ItemGroup Condition=\"'$(TypeScriptOutFile)' != ''\">\r\n    <Content Include=\"$(TypeScriptOutFil","comments":2,"createdAt":1406072304000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20More%20Info","name":"Needs More Info","color":"556b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/767147?v=3","loggedByName":"omidkrad","milestone":"","number":201,"state":"closed","title":"MSBuild: Include output file to be copied to the output directory","updatedAt":1406223680000},{"assignedTo":"","body":"E.g. you cannot have an interface and function which satisfy the types:\r\n\r\n    interface InterfaceA<U>\r\n    function<U extends InterfaceA<V>>(value: U): U \r\n\r\nThis means you cannot make generic functions to handle derived types unless you are willing","comments":1,"createdAt":1406127876000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Needs%20Proposal","name":"Needs Proposal","color":"556b75"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Suggestion","name":"Suggestion","color":"006b75"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/846867?v=3","loggedByName":"jameslong","milestone":"","number":214,"state":"open","title":"Support nested type parameters","updatedAt":1406193990000},{"assignedTo":"","body":"Fixes #166","comments":2,"createdAt":1406005848000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":180,"state":"closed","title":"Fixes browserify task when browserify isn't installed globally.","updatedAt":1406169661000},{"assignedTo":"","body":"Hi,\r\n\r\nI am having problems extending Object.prototype using interface in the presence of DefinitelyTyped definitions.\r\n\r\n[http://definitelytyped.org/](http://definitelytyped.org/)\r\n\r\nThe following code :-\r\n\r\n    /// <reference path=\"node/node.d.ts\" ","comments":3,"createdAt":1406159699000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Question","name":"Question","color":"d4c5f9"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/85523?v=3","loggedByName":"AaronNGray","milestone":"","number":221,"state":"closed","title":"Problems extending Object.prototype with Node.js and /// <reference path=\"node/node.d.ts\" />","updatedAt":1406169541000},{"assignedTo":"ahejlsberg","body":"in 9bb17a66cdd26caa7e85ee88947a5ac05a1de0f1\r\n\r\ndelete.ts\r\n```\r\ninterface IScope {\r\n\t// OK\r\n\tcreate: typeof Controller.prototype.create;\r\n\t// delete.ts(5,38): Identifier expected.\r\n\tdelete: typeof Controller.prototype.delete;\r\n\t// delete.ts(7,35): Ide","comments":4,"createdAt":1406006437000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/125332?v=3","loggedByName":"vvakame","milestone":"TypeScript 1.1","number":181,"state":"closed","title":"Keywords (e.g. 'delete', 'var') should be valid class method names","updatedAt":1406169088000},{"assignedTo":"","body":"force sys.newLine to be the same value when running tests.\r\n\r\nI have signed a CLA already, I'm AdamFreidin on codeplex.","comments":3,"createdAt":1406151497000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/719818?v=3","loggedByName":"sparecycles","milestone":"","number":218,"state":"closed","title":"fix runtests/baseline generation on mac/unix","updatedAt":1406165434000},{"assignedTo":"","body":"Just a test PR","comments":0,"createdAt":1406162812000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":224,"state":"closed","title":"A new test","updatedAt":1406163539000},{"assignedTo":"","body":"Because sys.newLine asks node for the OS's newline character(s) we have different baseline results on Windows vs *nix for certain tests. In particular, our sourcemap baselines were all failing on Linux. This fixes that by defaulting to \\r\\n for all n","comments":2,"createdAt":1406160860000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":223,"state":"closed","title":"Linux test fixes","updatedAt":1406161386000},{"assignedTo":"ahejlsberg","body":"Input:\r\n```TypeScript\r\nmodule Y {    function f(Y) { return g; }    export var g;}\r\n```\r\nEmit:\r\n```TypeScript\r\nvar Y;\r\n(function (Y) {\r\n    function f(Y) {\r\n        return Y.g;   <-- wrong\r\n    }\r\n    Y.g;})(Y || (Y = {}));\r\n```\r\n\r\nExpected emit:\r\n``","comments":0,"createdAt":1405626836000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":41,"state":"closed","title":"[Emit] Module name not underscored when conflicts with parameter name","updatedAt":1406156658000},{"assignedTo":"ahejlsberg","body":"```TypeScript\r\nmodule M{\r\n  export class C {  }\r\n  export module C {\r\n    export var C = M.C\r\n  }}\r\n```\r\nExpected: \r\n```TypeScript\r\nvar M;\r\n(function (M) {\r\n    var C = (function () {\r\n        function C() { }\r\n        return C;\r\n    })();\r\n    M.C =","comments":0,"createdAt":1405626881000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":42,"state":"closed","title":"[Emit] clodule with recursive reference","updatedAt":1406156649000},{"assignedTo":"ahejlsberg","body":"```TypeScript\r\n//== tests/cases/compiler/conflictingMemberTypesInBases.ts (1 errors) ====\r\ninterface A {\r\n    m: string;\r\n}\r\ninterface B extends A {\r\n}\r\ninterface C {\r\n    m: number;\r\n}\r\ninterface D extends C {\r\n}\r\n \r\ninterface E extends B { } // Err","comments":1,"createdAt":1405627008000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":70,"state":"closed","title":"[Errors] merged interface declarations with conflicting heritage specifications","updatedAt":1406156631000},{"assignedTo":"ahejlsberg","body":"```TypeScript\r\ndeclare function map<T, U>(list: T[], func: (x: T) => U): U[];\r\ndeclare function identity<V>(x: V): V;\r\nmap([\"\"], identity)[0].nonExist;\r\n```\r\nShould get an error for `nonExist` because `map` should return a `string[]` in this case, pe","comments":0,"createdAt":1405627028000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":88,"state":"closed","title":"[Error] Contextual signature instantiation missing","updatedAt":1406156600000},{"assignedTo":"","body":"Fixes #181.","comments":1,"createdAt":1406067132000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":199,"state":"closed","title":"Allow reserved words in type queries.","updatedAt":1406155929000},{"assignedTo":"","body":"Pretty straightforward. Giving a semantic error on all 'with' statements, and skipping type check for them.","comments":3,"createdAt":1405987869000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":176,"state":"closed","title":"Give a semantic error on with statements","updatedAt":1406143396000},{"assignedTo":"","body":"Browserify isn't working after a checkout and npm install\r\nI did a npm install after the checkout but I didn't want to install all the modules globally (see error below).\r\n\r\n    C:\\Users\\DvdBrink\\Desktop\\source\\typescript-github>jake browserify\r\n    ","comments":2,"createdAt":1405976925000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":166,"state":"closed","title":"browserify not working","updatedAt":1406062308000},{"assignedTo":"","body":"I cloned the repo in  a folder named typescript-github and I couldn't execute the wettest due to a javascript error (content was empty somewhere in bundle.js). \r\nThis happens because of the code here:\r\nhttps://github.com/Microsoft/TypeScript/blob/c36","comments":1,"createdAt":1405979309000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":168,"state":"closed","title":"Web tests only run when cloned in TypeScript folder","updatedAt":1406062292000},{"assignedTo":"","body":"In effect this fixes #62\r\n\r\nAlso\r\n    - Changes the error message for get accessors lacking return expressions.\r\n    - Actually checks for return expressions instead of return statements for get-accessors.\r\n    - Removes fancy quotes.\r\n    - Corrects","comments":3,"createdAt":1405722428000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":147,"state":"closed","title":"Complain when a non-void function lacks a return expresson.","updatedAt":1406062014000},{"assignedTo":"","body":"Type inference now supports inferring from string index signatures to numeric index signatures.\r\nFixes #167.","comments":2,"createdAt":1406055253000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":196,"state":"closed","title":"Aligning index signature type inference with assignability rules.","updatedAt":1406057252000},{"assignedTo":"","body":"Fixes #88.","comments":3,"createdAt":1405985966000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":175,"state":"closed","title":"Added contextual signature instantiation during type inference.","updatedAt":1406051821000},{"assignedTo":"","body":"","comments":1,"createdAt":1406020362000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8231215?v=3","loggedByName":"lyabob","milestone":"","number":187,"state":"closed","title":"Add snapshot of release-1.0.3 sources","updatedAt":1406048236000},{"assignedTo":"","body":"If I compile the following code on the old compiler (with the module command line flag) I get the error 'error TS2058: Return type of exported function has or is using private type 'MyElement'.'\r\n\r\nIf I use the new compiler and the --module flag it c","comments":1,"createdAt":1406036338000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Duplicate","name":"Duplicate","color":"f7c6c7"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7730209?v=3","loggedByName":"knarfalingus","milestone":"","number":193,"state":"closed","title":"Compiler difference","updatedAt":1406047336000},{"assignedTo":"","body":"Fixes #159.","comments":2,"createdAt":1405983618000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":173,"state":"closed","title":"Checking for multiple 'default' clauses.","updatedAt":1405986884000},{"assignedTo":"","body":"From the old issue tracker:\r\n\r\nhttp://typescript.codeplex.com/workitem/2485\r\n\r\n```typescript\r\ndeclare module m.SuperClass {\r\n    function moduleFunction();\r\n}\r\n\r\ndeclare module m {\r\n    class SuperClass {\r\n        constructor();\r\n    }\r\n}\r\n\r\ndeclare ","comments":2,"createdAt":1405983386000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1369240?v=3","loggedByName":"georgewfraser","milestone":"","number":171,"state":"closed","title":"Attempting to extend a declared class should give a better error message","updatedAt":1405985626000},{"assignedTo":"","body":"Fixes #168","comments":2,"createdAt":1405980911000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/765657?v=3","loggedByName":"DickvdBrink","milestone":"","number":169,"state":"closed","title":"Fix browser tests not working when not cloned in TypeScript directory","updatedAt":1405985422000},{"assignedTo":"","body":"From the old issue tracker: http://typescript.codeplex.com/workitem/2490\r\n\r\nThe following code:\r\n```typescript\r\ndeclare module goog.string { }\r\n```\r\n\r\nproduces the error `error TS1060: Module name cannot be 'string'.`\r\n\r\nModules named 'string' should","comments":1,"createdAt":1405983731000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1369240?v=3","loggedByName":"georgewfraser","milestone":"","number":174,"state":"closed","title":"'string' should be a legal module name","updatedAt":1405984437000},{"assignedTo":"","body":"From the old issue tracker: http://typescript.codeplex.com/workitem/2488\r\n\r\nhttps://gist.github.com/georgewfraser/9bfe546e4957969004bf crashes the compiler with the error\r\n\r\n```\r\n/usr/lib/node_modules/typescript/bin/tsc.js:1847\r\n                throw","comments":1,"createdAt":1405983569000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/1369240?v=3","loggedByName":"georgewfraser","milestone":"","number":172,"state":"closed","title":"Modules named 'string' can crash the compiler","updatedAt":1405984389000},{"assignedTo":"","body":"Fixes #41 and #42.\r\nAlso fixes some errant ANSI characters that snuck into scanner.ts and checker.ts.\r\n","comments":0,"createdAt":1405728488000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":158,"state":"closed","title":"Ensuring local module names are unique in emit.","updatedAt":1405967951000},{"assignedTo":"","body":"This is to minimize the error spans for many declaration kinds, to overwhelm the user less. There are a lot of baseline changes here, but many of them fall into broad categories (e.g. assignability errors are very common on var declarations). Let me ","comments":2,"createdAt":1405730120000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":160,"state":"closed","title":"Condense all error spans to just the name for variable, class, interface, module, enum and enum member","updatedAt":1405961879000},{"assignedTo":"","body":"We don't want to try to emit if the --module flag was not specified. So I have moved this logic to createProgram, whose errors prevent emit.\r\n\r\nI have also changed the way we track external module-hood of a file. Instead of having a flag NodeFlags.Ex","comments":2,"createdAt":1405718496000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":146,"state":"closed","title":"Error for missing module flag is now in createProgram","updatedAt":1405961127000},{"assignedTo":"","body":"Deciding if `_this` in user code collides with `_this` that will be introduced in generated code required knowledge about arrow function that potentially reside in parts of the AST that are not yet examined. To avoid multiple tree traversals if node ","comments":3,"createdAt":1405726355000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":155,"state":"closed","title":"added collision check for '_this'","updatedAt":1405916578000},{"assignedTo":"","body":"'use strict' should be emitted before any other statements in function, This fixes #143","comments":2,"createdAt":1405728123000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":157,"state":"closed","title":"emit 'use strict' at the beginning of the function","updatedAt":1405911081000},{"assignedTo":"","body":"In the following code, we now no longer assume that the result of an import is a valid source for an import alias.\r\n\r\n```TypeScript\r\n//a.ts:\r\nimport im = require('b');\r\nexport module M {\r\n    export import d = im;  // No longer valid\r\n}\r\n\r\n//b.ts:\r\nf","comments":0,"createdAt":1405725534000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":152,"state":"closed","title":"External module imports are no longer always valid import alias sources","updatedAt":1405725541000},{"assignedTo":"","body":"To align with the spec, assignment compatibility between Enum and Object now works correctly.\r\n \r\n```TypeScript\r\ndeclare function f(x: Object): Object;\r\ndeclare function f(x: E): E;\r\n\r\nvar r4 = f(E.A);  //type of r4 is now type Object rather than E\r\n","comments":0,"createdAt":1405725337000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":151,"state":"closed","title":"Enum values are now assignable to Object","updatedAt":1405725341000},{"assignedTo":"","body":"The following code:\r\n\r\n```TypeScript\r\nenum E {\r\n    a = -5, b, c\r\n}\r\n```\r\nNow emits starting with -5 for a, then -4 for b and -3 for c.  Previously b = 0, c = 1, unexpectedly.\r\n","comments":0,"createdAt":1405724598000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":150,"state":"closed","title":"Enums starting with a negative number now correctly autonumber","updatedAt":1405724608000},{"assignedTo":"","body":"According to the spec, 'super' is not valid inside of a object literal's accessors.  This is now considered an error.  To work around this, capture the class reference in a new variable outside of the object literal.\r\n\r\n```TypeScript\r\nclass F { publi","comments":0,"createdAt":1405724494000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":149,"state":"closed","title":"Object literal getters in class bodies may no longer use the 'super' keyword","updatedAt":1405724497000},{"assignedTo":"","body":"This is now considered an error, to align with the spec:\r\n```TypeScript\r\nvar v: {\r\n       A: B\r\n       <T>;\r\n};\r\n```\r\n\r\nWorkaround: Because of ASI, a semicolon is inserted between the B and <T>.  To remove this issue, put both on the same line.","comments":0,"createdAt":1405724299000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/547158?v=3","loggedByName":"jonathandturner","milestone":"","number":148,"state":"closed","title":"Automatic semicolon insertion now works in type literals","updatedAt":1405724311000},{"assignedTo":"","body":"","comments":1,"createdAt":1405646702000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":142,"state":"closed","title":"Compile the generated decl files and report those errors in the baseline so we can verify the result of dts file for correctness","updatedAt":1405711976000},{"assignedTo":"mhegazy","body":"```TypeScript\r\nclass Foo {\r\n    constructor (...funcs: any[]) {\r\n        return funcs[0];\r\n    }\r\n}\r\n```\r\nemits the name of the constructor argument 'funcs'\r\n\r\n```JavaScript\r\nvar Foo = (function () {\r\n    function Foo(funcs) {\r\n        var funcs = []","comments":0,"createdAt":1405651843000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Fixed","name":"Fixed","color":"bfe5bf"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":144,"state":"closed","title":"Do not emit rest parameter name in constructors","updatedAt":1405702708000},{"assignedTo":"","body":"Fix for issue #144, by consolidating the emit logic for parameter lists.\r\n","comments":0,"createdAt":1405652160000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":145,"state":"closed","title":"Issue #144: Do not emit the name of the rest paramter in constructors","updatedAt":1405702669000},{"assignedTo":"","body":"","comments":2,"createdAt":1405646507000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":141,"state":"closed","title":"Fixed the typo in declaration emitter of implements clause","updatedAt":1405660911000},{"assignedTo":"","body":"this fixes #44 *[Emit] \"use strict\" emitted after __extends instead of before*","comments":1,"createdAt":1405644404000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":140,"state":"closed","title":"emit prologue directives as first lines in file","updatedAt":1405647419000},{"assignedTo":"","body":"","comments":3,"createdAt":1405633739000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":137,"state":"closed","title":"relax the restrictions to reference comment shape","updatedAt":1405644751000},{"assignedTo":"","body":"","comments":1,"createdAt":1405625719000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":38,"state":"closed","title":"Cleanup temporary project output after running tests","updatedAt":1405643616000},{"assignedTo":"","body":"this fixes several issues\r\n* emitting name is illegal if if name is a javascript keyword (#43)\r\n* property function name should not be in scope inside the function body:\r\nConsider this code\r\n```typescript\r\nvar x = 1\r\nvar y = { x() { x++; } }; \r\n```\r\n","comments":2,"createdAt":1405632443000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052307?v=3","loggedByName":"vladima","milestone":"","number":136,"state":"closed","title":"do not propagate function name in property accessors","updatedAt":1405636457000},{"assignedTo":"","body":"Prior to this change, the following\r\n\r\n    class Foo {\r\n        var\r\n        x = 1\r\n    }\r\n\r\nwould be parsed as\r\n\r\n    class Foo {\r\n        var x = 1\r\n    }\r\n\r\nwhich meant that we would receive an error on the `var` token:\r\n\r\n    Unexpected token. A ","comments":3,"createdAt":1405554282000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":36,"state":"closed","title":"Support automatic semicolon insertion in class member declarations.","updatedAt":1405631107000},{"assignedTo":"ahejlsberg","body":"\n\nIn tests/cases/compiler/privacyTopLevelInternalReferenceImportWithExport.ts:\n\nEverything declaration of the form:\n\nim_public_<something>_private\n\nor\n\nim_public_<something>_public\n\nis not emitted.\n\n \n\nIn tests/cases/compiler/privacyTopLevelInternalR","comments":1,"createdAt":1405626902000,"labels":[{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/Bug","name":"Bug","color":"e11d21"},{"url":"https://api.github.com/repos/Microsoft/TypeScript/labels/By%20Design","name":"By Design","color":"fbca04"}],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"TypeScript 1.1","number":46,"state":"closed","title":"[Emit] Some import statements not emitted","updatedAt":1405630577000},{"assignedTo":"","body":"","comments":9,"createdAt":1405550465000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":35,"state":"closed","title":"Moved the emit functionality into emitFiles so emitJavascript and emitDeclarations can share the data and methods without having to pass around data","updatedAt":1405626955000},{"assignedTo":"","body":"This assert is no longer needed.","comments":1,"createdAt":1405546383000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":32,"state":"closed","title":"Remove assert","updatedAt":1405549535000},{"assignedTo":"","body":"This has changes for determining when to qualify symbol name and also moved the logic of isDeclarationVisible\r\nStill todos are: \r\nerror reporting to use the enclosingDeclaration and meaning correctly to report the error message\r\nisDeclarationVisible ","comments":0,"createdAt":1405536681000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052792?v=3","loggedByName":"sheetalkamat","milestone":"","number":30,"state":"closed","title":"Changes to determine when to qualify the symbol in given enclosing declaration","updatedAt":1405549200000},{"assignedTo":"","body":"Given the following\r\n\r\n    declare module m {\r\n        module s {}\r\n        export import string = s;\r\n    }\r\n\r\nwe would previously give the error\r\n\r\n    Import name cannot be 'string'\r\n\r\nwhen `string` is clearly not in conflict with any declared val","comments":2,"createdAt":1405537176000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":31,"state":"closed","title":"When importing, only check for reserved type names when importing a type","updatedAt":1405545024000},{"assignedTo":"","body":"Because multiple declarations of different kinds can be combined into a single symbol, the SymbolLinks.typeChecked flag gets overloaded to signal that an expensive task has been done. Unfortunately, for certain combinations of kinds, this flag actual","comments":1,"createdAt":1405458216000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":23,"state":"closed","title":"Remove SymbolLinks.typeChecked","updatedAt":1405544069000},{"assignedTo":"","body":"enum E {\r\n    A\r\n}\r\n\r\nenum E {\r\n   B // Should get an error here for starting a second enum with no initializer\r\n}\r\n\r\nAlso, you should only look at the second commit (5c3ede72b616917e2190aaafdd8fa7f157436a2e) as the first commit is from a different r","comments":2,"createdAt":1405470008000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8052525?v=3","loggedByName":"JsonFreeman","milestone":"","number":27,"state":"closed","title":"Error for merging multiple enums without initial initializers","updatedAt":1405544019000},{"assignedTo":"","body":"Support for --charset command line option\r\nFile read and write errors are propagated into compiler diagnostics\r\nemitFiles returns diagnostics in EmitResult","comments":0,"createdAt":1405533757000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/4226954?v=3","loggedByName":"ahejlsberg","milestone":"","number":29,"state":"closed","title":"More I/O fixes","updatedAt":1405537814000},{"assignedTo":"","body":"Add a new CONTRIBUTIONS.md to the root of the repo","comments":0,"createdAt":1405469781000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/8000722?v=3","loggedByName":"mhegazy","milestone":"","number":26,"state":"closed","title":"Add contribution guidlines","updatedAt":1405537450000},{"assignedTo":"","body":"Our second TypeScript code review on GitHub!!","comments":2,"createdAt":1405386526000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/972891?v=3","loggedByName":"DanielRosenwasser","milestone":"","number":4,"state":"closed","title":"Report errors on unclosed multiline comments.","updatedAt":1405452183000},{"assignedTo":"","body":"Reverts Microsoft/TypeScript#2","comments":0,"createdAt":1405382963000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":3,"state":"closed","title":"Revert \"Updating some tests for resolved bugs\"","updatedAt":1405383679000},{"assignedTo":"","body":"Adding some sweet tests","comments":1,"createdAt":1405381995000,"labels":[],"loggedByAvatar":"https://avatars.githubusercontent.com/u/7121557?v=3","loggedByName":"danquirk","milestone":"","number":2,"state":"closed","title":"Updating some tests for resolved bugs","updatedAt":1405382963000}]